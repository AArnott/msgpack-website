[
  {
    "msgpack_lang": "C/C++",
    "msgpack_quickstart_html": "<h5><code>msgpack</code> for C/C++</h5>\n<p>It's like JSON but smaller and faster.</p>\n<h6>Overview</h6>\n<p><a href=\"http://msgpack.org/\">MessagePack</a> is an efficient binary serialization\nformat, which lets you exchange data among multiple languages like JSON,\nexcept that it's faster and smaller. Small integers are encoded into a\nsingle byte and short strings require only one extra byte in\naddition to the strings themselves.</p>\n<h7>C Library</h7>\n<p>See <a href=\"https://github.com/msgpack/msgpack-c/tree/c_master\">c_master</a></p>\n<h7>C++ Library</h7>\n<p>See <a href=\"https://github.com/msgpack/msgpack-c/tree/cpp_master\">cpp_master</a></p>\n<h7>Documentation</h7>\n<p>You can get additional information including the tutorial on the\n<a href=\"https://github.com/msgpack/msgpack-c/wiki\">wiki</a>.</p>\n<h6>Contributing</h6>\n<p><code>msgpack-c</code> is developed on GitHub at <a href=\"https://github.com/msgpack/msgpack-c\">msgpack/msgpack-c</a>.\nTo report an issue or send a pull request, use the\n<a href=\"https://github.com/msgpack/msgpack-c/issues\">issue tracker</a>.</p>\n<p>Here's the list of <a href=\"https://github.com/msgpack/msgpack-c/graphs/contributors\">great contributors</a>.</p>\n<h6>License</h6>\n<p><code>msgpack-c</code> is licensed under the Boost Software License, Version 1.0. See\nthe <a href=\"./LICENSE_1_0.txt\"><code>LICENSE_1_0.txt</code></a> file for details.</p>\n",
    "msgpack_repo_id": "msgpack-msgpack-c",
    "msgpack_repo_homepage": "https://github.com/msgpack/msgpack-c",
    "full_name": "msgpack/msgpack-c",
    "owner": "msgpack",
    "html_url": "https://github.com/msgpack/msgpack-c"
  },
  {
    "msgpack_lang": "PHP",
    "msgpack_quickstart_html": "<h5>Msgpack for PHP</h5>\n<p><a href=\"https://github.com/msgpack/msgpack-php/actions?query=workflow%3Aci+branch%3Amaster\"><img src=\"https://github.com/msgpack/msgpack-php/workflows/ci/badge.svg?branch=master\" alt=\"Build Status\"></a></p>\n<p>This extension provides an API for communicating with MessagePack serialization.</p>\n<p>MessagePack is a binary-based efficient object serialization library.\nIt enables to exchange structured objects between many languages just like JSON.\nBut unlike JSON, it is very fast and small.</p>\n<h6>Requirement</h6>\n<ul>\n<li>PHP 7.0 +</li>\n</ul>\n<h6>Install</h6>\n<h7>Install from PECL</h7>\n<p>Msgpack is a PECL extension, thus you can simply install it by:</p>\n<pre><code class=\"language-shell\">pecl install msgpack\n</code></pre>\n<h7>Compile Msgpack from source</h7>\n<pre><code class=\"language-shell\">/path/to/phpize\n./configure --with-php-config=/path/to/php-config\nmake &amp;&amp; make install\n</code></pre>\n<h7>Example</h7>\n<pre><code class=\"language-php\">&lt;?php\n$data = array(0 =&gt; 1, 1 =&gt; 2, 2 =&gt; 3);\n$msg = msgpack_pack($data);\n$data = msgpack_unpack($msg);\n</code></pre>\n<h7>Advanced Example</h7>\n<pre><code class=\"language-php\">&lt;?php\n$data = array(0 =&gt; 1, 1 =&gt; 2, 2 =&gt; 3);\n$packer = new \\MessagePack(false);\n// ^ same as $packer-&gt;setOption(\\MessagePack::OPT_PHPONLY, false);\n$packed = $packer-&gt;pack($data);\n\n$unpacker = new \\MessagePackUnpacker(false);\n// ^ same as $unpacker-&gt;setOption(\\MessagePack::OPT_PHPONLY, false);\n$unpacker-&gt;feed($packed);\n$unpacker-&gt;execute();\n$unpacked = $unpacker-&gt;data();\n$unpacker-&gt;reset();\n</code></pre>\n<h7>Advanced Streaming Example</h7>\n<pre><code class=\"language-php\">&lt;?php\n$data1 = array(0 =&gt; 1, 1 =&gt; 2, 2 =&gt; 3);\n$data2 = array(&quot;a&quot; =&gt; 1, &quot;b&quot; =&gt; 2, &quot;c&quot; =&gt; 3);\n\n$packer = new \\MessagePack(false);\n$packed1 = $packer-&gt;pack($data1);\n$packed2 = $packer-&gt;pack($data2);\n\n$unpacker = new \\MessagePackUnpacker(false);\n$buffer = &quot;&quot;;\n$nread = 0;\n\n//Simulating streaming data :)\n$buffer .= $packed1;\n$buffer .= $packed2;\n\nwhile(true) {\n   if($unpacker-&gt;execute($buffer, $nread)) {\n       $msg = $unpacker-&gt;data();\n\n       var_dump($msg);\n\n       $unpacker-&gt;reset();\n       $buffer = substr($buffer, $nread);\n       $nread = 0;\n       if(!empty($buffer)) {\n            continue;\n       }\n   }\n   break;\n}\n\n</code></pre>\n<h6>Resources</h6>\n<ul>\n<li><a href=\"http://msgpack.org/\">msgpack</a></li>\n</ul>\n",
    "msgpack_repo_id": "msgpack-msgpack-php",
    "msgpack_repo_homepage": "https://github.com/msgpack/msgpack-php",
    "full_name": "msgpack/msgpack-php",
    "owner": "msgpack",
    "html_url": "https://github.com/msgpack/msgpack-php"
  },
  {
    "msgpack_lang": "Go",
    "msgpack_quickstart_html": "<h5>MessagePack encoding for Golang</h5>\n<p><a href=\"https://travis-ci.org/vmihailenco/msgpack\"><img src=\"https://travis-ci.org/vmihailenco/msgpack.svg\" alt=\"Build Status\"></a>\n<a href=\"https://pkg.go.dev/github.com/vmihailenco/msgpack/v5\"><img src=\"https://pkg.go.dev/badge/github.com/vmihailenco/msgpack/v5\" alt=\"PkgGoDev\"></a>\n<a href=\"https://msgpack.uptrace.dev/\"><img src=\"https://img.shields.io/badge/msgpack-documentation-informational\" alt=\"Documentation\"></a>\n<a href=\"https://discord.gg/rWtp5Aj\"><img src=\"https://discordapp.com/api/guilds/752070105847955518/widget.png\" alt=\"Chat\"></a></p>\n<blockquote>\n<p>msgpack is brought to you by :star: <a href=\"https://github.com/uptrace/uptrace\"><strong>uptrace/uptrace</strong></a>.\nUptrace is an <a href=\"https://uptrace.dev/get/open-source-apm.html\">open source APM</a> and blazingly fast\n<a href=\"https://get.uptrace.dev/compare/distributed-tracing-tools.html\">distributed tracing tool</a> powered\nby OpenTelemetry and ClickHouse. Give it a star as well!</p>\n</blockquote>\n<h6>Resources</h6>\n<ul>\n<li><a href=\"https://msgpack.uptrace.dev\">Documentation</a></li>\n<li><a href=\"https://discord.gg/rWtp5Aj\">Chat</a></li>\n<li><a href=\"https://pkg.go.dev/github.com/vmihailenco/msgpack/v5\">Reference</a></li>\n<li><a href=\"https://pkg.go.dev/github.com/vmihailenco/msgpack/v5#pkg-examples\">Examples</a></li>\n</ul>\n<h6>Features</h6>\n<ul>\n<li>Primitives, arrays, maps, structs, time.Time and interface{}.</li>\n<li>Appengine *datastore.Key and datastore.Cursor.</li>\n<li><a href=\"https://pkg.go.dev/github.com/vmihailenco/msgpack/v5#CustomEncoder\">CustomEncoder</a>/<a href=\"https://pkg.go.dev/github.com/vmihailenco/msgpack/v5#CustomDecoder\">CustomDecoder</a> interfaces for custom encoding.</li>\n<li><a href=\"https://pkg.go.dev/github.com/vmihailenco/msgpack/v5#example-RegisterExt\">Extensions</a> to encode\ntype information.</li>\n<li>Renaming fields via <code>msgpack:&quot;my_field_name&quot;</code> and alias via <code>msgpack:&quot;alias:another_name&quot;</code>.</li>\n<li>Omitting individual empty fields via <code>msgpack:&quot;,omitempty&quot;</code> tag or all\n<a href=\"https://pkg.go.dev/github.com/vmihailenco/msgpack/v5#example-Marshal-OmitEmpty\">empty fields in a struct</a>.</li>\n<li><a href=\"https://pkg.go.dev/github.com/vmihailenco/msgpack/v5#Encoder.SetSortMapKeys\">Map keys sorting</a>.</li>\n<li>Encoding/decoding all\n<a href=\"https://pkg.go.dev/github.com/vmihailenco/msgpack/v5#Encoder.UseArrayEncodedStructs\">structs as arrays</a>\nor\n<a href=\"https://pkg.go.dev/github.com/vmihailenco/msgpack/v5#example-Marshal-AsArray\">individual structs</a>.</li>\n<li><a href=\"https://pkg.go.dev/github.com/vmihailenco/msgpack/v5#Encoder.SetCustomStructTag\">Encoder.SetCustomStructTag</a> with <a href=\"https://pkg.go.dev/github.com/vmihailenco/msgpack/v5#Decoder.SetCustomStructTag\">Decoder.SetCustomStructTag</a> can turn msgpack into drop-in\nreplacement for any tag.</li>\n<li>Simple but very fast and efficient\n<a href=\"https://pkg.go.dev/github.com/vmihailenco/msgpack/v5#example-Decoder.Query\">queries</a>.</li>\n</ul>\n<h6>Installation</h6>\n<p>msgpack supports 2 last Go versions and requires support for\n<a href=\"https://github.com/golang/go/wiki/Modules\">Go modules</a>. So make sure to initialize a Go module:</p>\n<pre><code class=\"language-shell\">go mod init github.com/my/repo\n</code></pre>\n<p>And then install msgpack/v5 (note <em>v5</em> in the import; omitting it is a popular mistake):</p>\n<pre><code class=\"language-shell\">go get github.com/vmihailenco/msgpack/v5\n</code></pre>\n<h6>Quickstart</h6>\n<pre><code class=\"language-go\">import &quot;github.com/vmihailenco/msgpack/v5&quot;\n\nfunc ExampleMarshal() {\n    type Item struct {\n        Foo string\n    }\n\n    b, err := msgpack.Marshal(&amp;Item{Foo: &quot;bar&quot;})\n    if err != nil {\n        panic(err)\n    }\n\n    var item Item\n    err = msgpack.Unmarshal(b, &amp;item)\n    if err != nil {\n        panic(err)\n    }\n    fmt.Println(item.Foo)\n    // Output: bar\n}\n</code></pre>\n<h6>See also</h6>\n<ul>\n<li><a href=\"https://github.com/uptrace/bun\">Golang ORM</a> for PostgreSQL, MySQL, MSSQL, and SQLite</li>\n<li><a href=\"https://bun.uptrace.dev/postgres/\">Golang PostgreSQL</a></li>\n<li><a href=\"https://github.com/uptrace/bunrouter\">Golang HTTP router</a></li>\n<li><a href=\"https://github.com/uptrace/go-clickhouse\">Golang ClickHouse ORM</a></li>\n</ul>\n<h6>Contributors</h6>\n<p>Thanks to all the people who already contributed!</p>\n<a href=\"https://github.com/vmihailenco/msgpack/graphs/contributors\">\n  <img src=\"https://contributors-img.web.app/image?repo=vmihailenco/msgpack\" />\n</a>\n",
    "msgpack_repo_id": "vmihailenco-msgpack",
    "msgpack_repo_homepage": "https://msgpack.uptrace.dev/",
    "full_name": "vmihailenco/msgpack",
    "owner": "vmihailenco",
    "html_url": "https://github.com/vmihailenco/msgpack"
  },
  {
    "msgpack_lang": "ECMA-262/JavaScript/TypeScript",
    "msgpack_quickstart_html": "<h5>MessagePack for ECMA-262/JavaScript/TypeScript  <!-- omit in toc --></h5>\n<p><a href=\"https://www.npmjs.com/package/@msgpack/msgpack\"><img src=\"https://img.shields.io/npm/v/@msgpack/msgpack.svg\" alt=\"npm version\"></a> <img src=\"https://github.com/msgpack/msgpack-javascript/workflows/CI/badge.svg\" alt=\"CI\"> <a href=\"https://codecov.io/gh/msgpack/msgpack-javascript\"><img src=\"https://codecov.io/gh/msgpack/msgpack-javascript/branch/master/graphs/badge.svg\" alt=\"codecov\"></a> <a href=\"https://bundlephobia.com/result?p=@msgpack/msgpack\"><img src=\"https://badgen.net/bundlephobia/minzip/@msgpack/msgpack\" alt=\"minzip\"></a> <a href=\"https://bundlephobia.com/result?p=@msgpack/msgpack\"><img src=\"https://badgen.net/bundlephobia/tree-shaking/@msgpack/msgpack\" alt=\"tree-shaking\"></a></p>\n<p>This library is an implementation of <strong>MessagePack</strong> for TypeScript and JavaScript, providing a compact and efficient binary serialization format. Learn more about MessagePack at:</p>\n<p>https://msgpack.org/</p>\n<p>This library serves as a comprehensive reference implementation of MessagePack for JavaScript with a focus on accuracy, compatibility, interoperability, and performance.</p>\n<p>Additionally, this is also a universal JavaScript library. It is compatible not only with browsers, but with Node.js or other JavaScript engines that implement ES2015+ standards. As it is written in <a href=\"https://www.typescriptlang.org/\">TypeScript</a>, this library bundles up-to-date type definition files (<code>d.ts</code>).</p>\n<p>*Note that this is the second edition of &quot;MessagePack for JavaScript&quot;. The first edition, which was implemented in ES5 and never released to npmjs.com, is tagged as <a href=\"https://github.com/msgpack/msgpack-javascript/tree/classic\"><code>classic</code></a>.</p>\n<h6>Synopsis</h6>\n<pre><code class=\"language-typescript\">import { deepStrictEqual } from &quot;assert&quot;;\nimport { encode, decode } from &quot;@msgpack/msgpack&quot;;\n\nconst object = {\n  nil: null,\n  integer: 1,\n  float: Math.PI,\n  string: &quot;Hello, world!&quot;,\n  binary: Uint8Array.from([1, 2, 3]),\n  array: [10, 20, 30],\n  map: { foo: &quot;bar&quot; },\n  timestampExt: new Date(),\n};\n\nconst encoded: Uint8Array = encode(object);\n\ndeepStrictEqual(decode(encoded), object);\n</code></pre>\n<h6>Table of Contents</h6>\n<ul>\n<li><a href=\"#synopsis\">Synopsis</a></li>\n<li><a href=\"#table-of-contents\">Table of Contents</a></li>\n<li><a href=\"#install\">Install</a></li>\n<li><a href=\"#api\">API</a>\n<ul>\n<li><a href=\"#encodedata-unknown-options-encoderoptions-uint8array\"><code>encode(data: unknown, options?: EncoderOptions): Uint8Array</code></a>\n<ul>\n<li><a href=\"#encoderoptions\"><code>EncoderOptions</code></a></li>\n</ul>\n</li>\n<li><a href=\"#decodebuffer-arraylikenumber--buffersource-options-decoderoptions-unknown\"><code>decode(buffer: ArrayLike&lt;number&gt; | BufferSource, options?: DecoderOptions): unknown</code></a>\n<ul>\n<li><a href=\"#decoderoptions\"><code>DecoderOptions</code></a></li>\n</ul>\n</li>\n<li><a href=\"#decodemultibuffer-arraylikenumber--buffersource-options-decoderoptions-generatorunknown-void-unknown\"><code>decodeMulti(buffer: ArrayLike&lt;number&gt; | BufferSource, options?: DecoderOptions): Generator&lt;unknown, void, unknown&gt;</code></a></li>\n<li><a href=\"#decodeasyncstream-readablestreamlikearraylikenumber--buffersource-options-decoderoptions-promiseunknown\"><code>decodeAsync(stream: ReadableStreamLike&lt;ArrayLike&lt;number&gt; | BufferSource&gt;, options?: DecoderOptions): Promise&lt;unknown&gt;</code></a></li>\n<li><a href=\"#decodearraystreamstream-readablestreamlikearraylikenumber--buffersource-options-decoderoptions-asynciterableunknown\"><code>decodeArrayStream(stream: ReadableStreamLike&lt;ArrayLike&lt;number&gt; | BufferSource&gt;, options?: DecoderOptions): AsyncIterable&lt;unknown&gt;</code></a></li>\n<li><a href=\"#decodemultistreamstream-readablestreamlikearraylikenumber--buffersource-options-decoderoptions-asynciterableunknown\"><code>decodeMultiStream(stream: ReadableStreamLike&lt;ArrayLike&lt;number&gt; | BufferSource&gt;, options?: DecoderOptions): AsyncIterable&lt;unknown&gt;</code></a></li>\n<li><a href=\"#reusing-encoder-and-decoder-instances\">Reusing Encoder and Decoder instances</a></li>\n</ul>\n</li>\n<li><a href=\"#extension-types\">Extension Types</a>\n<ul>\n<li><a href=\"#extensioncodec-context\">ExtensionCodec context</a></li>\n<li><a href=\"#handling-bigint-with-extensioncodec\">Handling BigInt with ExtensionCodec</a></li>\n<li><a href=\"#the-temporal-module-as-timestamp-extensions\">The temporal module as timestamp extensions</a></li>\n</ul>\n</li>\n<li><a href=\"#faster-way-to-decode-a-large-array-of-floating-point-numbers\">Faster way to decode a large array of floating point numbers</a></li>\n<li><a href=\"#decoding-a-blob\">Decoding a Blob</a></li>\n<li><a href=\"#messagepack-specification\">MessagePack Specification</a>\n<ul>\n<li><a href=\"#messagepack-mapping-table\">MessagePack Mapping Table</a></li>\n</ul>\n</li>\n<li><a href=\"#prerequisites\">Prerequisites</a>\n<ul>\n<li><a href=\"#ecma-262\">ECMA-262</a></li>\n<li><a href=\"#nodejs\">NodeJS</a></li>\n<li><a href=\"#typescript-compiler--type-definitions\">TypeScript Compiler / Type Definitions</a></li>\n</ul>\n</li>\n<li><a href=\"#benchmark\">Benchmark</a></li>\n<li><a href=\"#distribution\">Distribution</a>\n<ul>\n<li><a href=\"#npm--npmjscom\">NPM / npmjs.com</a></li>\n<li><a href=\"#cdn--unpkgcom\">CDN / unpkg.com</a></li>\n</ul>\n</li>\n<li><a href=\"#deno-support\">Deno Support</a></li>\n<li><a href=\"#bun-support\">Bun Support</a></li>\n<li><a href=\"#maintenance\">Maintenance</a>\n<ul>\n<li><a href=\"#testing\">Testing</a></li>\n<li><a href=\"#continuous-integration\">Continuous Integration</a></li>\n<li><a href=\"#release-engineering\">Release Engineering</a></li>\n<li><a href=\"#updating-dependencies\">Updating Dependencies</a></li>\n</ul>\n</li>\n<li><a href=\"#license\">License</a></li>\n</ul>\n<h6>Install</h6>\n<p>This library is published to <code>npmjs.com</code> as <a href=\"https://www.npmjs.com/package/@msgpack/msgpack\">@msgpack/msgpack</a>.</p>\n<pre><code class=\"language-shell\">npm install @msgpack/msgpack\n</code></pre>\n<h6>API</h6>\n<h7><code>encode(data: unknown, options?: EncoderOptions): Uint8Array</code></h7>\n<p>It encodes <code>data</code> into a single MessagePack-encoded object, and returns a byte array as <code>Uint8Array</code>. It throws errors if <code>data</code> is, or includes, a non-serializable object such as a <code>function</code> or a <code>symbol</code>.</p>\n<p>for example:</p>\n<pre><code class=\"language-typescript\">import { encode } from &quot;@msgpack/msgpack&quot;;\n\nconst encoded: Uint8Array = encode({ foo: &quot;bar&quot; });\nconsole.log(encoded);\n</code></pre>\n<p>If you'd like to convert an <code>uint8array</code> to a NodeJS <code>Buffer</code>, use <code>Buffer.from(arrayBuffer, offset, length)</code> in order not to copy the underlying <code>ArrayBuffer</code>, while <code>Buffer.from(uint8array)</code> copies it:</p>\n<pre><code class=\"language-typescript\">import { encode } from &quot;@msgpack/msgpack&quot;;\n\nconst encoded: Uint8Array = encode({ foo: &quot;bar&quot; });\n\n// `buffer` refers the same ArrayBuffer as `encoded`.\nconst buffer: Buffer = Buffer.from(encoded.buffer, encoded.byteOffset, encoded.byteLength);\nconsole.log(buffer);\n</code></pre>\n<h8><code>EncoderOptions</code></h8>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>extensionCodec</td>\n<td>ExtensionCodec</td>\n<td><code>ExtensionCodec.defaultCodec</code></td>\n</tr>\n<tr>\n<td>context</td>\n<td>user-defined</td>\n<td>-</td>\n</tr>\n<tr>\n<td>useBigInt64</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>maxDepth</td>\n<td>number</td>\n<td><code>100</code></td>\n</tr>\n<tr>\n<td>initialBufferSize</td>\n<td>number</td>\n<td><code>2048</code></td>\n</tr>\n<tr>\n<td>sortKeys</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>forceFloat32</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>forceIntegerToFloat</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>ignoreUndefined</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n</tbody>\n</table>\n<h7><code>decode(buffer: ArrayLike&lt;number&gt; | BufferSource, options?: DecoderOptions): unknown</code></h7>\n<p>It decodes <code>buffer</code> that includes a MessagePack-encoded object, and returns the decoded object typed <code>unknown</code>.</p>\n<p><code>buffer</code> must be an array of bytes, which is typically <code>Uint8Array</code> or <code>ArrayBuffer</code>. <code>BufferSource</code> is defined as <code>ArrayBuffer | ArrayBufferView</code>.</p>\n<p>The <code>buffer</code> must include a single encoded object. If the <code>buffer</code> includes extra bytes after an object or the <code>buffer</code> is empty, it throws <code>RangeError</code>. To decode <code>buffer</code> that includes multiple encoded objects, use <code>decodeMulti()</code> or <code>decodeMultiStream()</code> (recommended) instead.</p>\n<p>for example:</p>\n<pre><code class=\"language-typescript\">import { decode } from &quot;@msgpack/msgpack&quot;;\n\nconst encoded: Uint8Array;\nconst object = decode(encoded);\nconsole.log(object);\n</code></pre>\n<p>NodeJS <code>Buffer</code> is also acceptable because it is a subclass of <code>Uint8Array</code>.</p>\n<h8><code>DecoderOptions</code></h8>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>extensionCodec</td>\n<td>ExtensionCodec</td>\n<td><code>ExtensionCodec.defaultCodec</code></td>\n</tr>\n<tr>\n<td>context</td>\n<td>user-defined</td>\n<td>-</td>\n</tr>\n<tr>\n<td>useBigInt64</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>rawStrings</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>maxStrLength</td>\n<td>number</td>\n<td><code>4_294_967_295</code> (UINT32_MAX)</td>\n</tr>\n<tr>\n<td>maxBinLength</td>\n<td>number</td>\n<td><code>4_294_967_295</code> (UINT32_MAX)</td>\n</tr>\n<tr>\n<td>maxArrayLength</td>\n<td>number</td>\n<td><code>4_294_967_295</code> (UINT32_MAX)</td>\n</tr>\n<tr>\n<td>maxMapLength</td>\n<td>number</td>\n<td><code>4_294_967_295</code> (UINT32_MAX)</td>\n</tr>\n<tr>\n<td>maxExtLength</td>\n<td>number</td>\n<td><code>4_294_967_295</code> (UINT32_MAX)</td>\n</tr>\n<tr>\n<td>mapKeyConverter</td>\n<td>MapKeyConverterType</td>\n<td>throw exception if key is not string or number</td>\n</tr>\n</tbody>\n</table>\n<p><code>MapKeyConverterType</code> is defined as <code>(key: unknown) =&gt; string | number</code>.</p>\n<p>To skip UTF-8 decoding of strings, <code>rawStrings</code> can be set to <code>true</code>. In this case, strings are decoded into <code>Uint8Array</code>.</p>\n<p>You can use <code>max${Type}Length</code> to limit the length of each type decoded.</p>\n<h7><code>decodeMulti(buffer: ArrayLike&lt;number&gt; | BufferSource, options?: DecoderOptions): Generator&lt;unknown, void, unknown&gt;</code></h7>\n<p>It decodes <code>buffer</code> that includes multiple MessagePack-encoded objects, and returns decoded objects as a generator. See also <code>decodeMultiStream()</code>, which is an asynchronous variant of this function.</p>\n<p>This function is not recommended to decode a MessagePack binary via I/O stream including sockets because it's synchronous. Instead, <code>decodeMultiStream()</code> decodes a binary stream asynchronously, typically spending less CPU and memory.</p>\n<p>for example:</p>\n<pre><code class=\"language-typescript\">import { decode } from &quot;@msgpack/msgpack&quot;;\n\nconst encoded: Uint8Array;\n\nfor (const object of decodeMulti(encoded)) {\n  console.log(object);\n}\n</code></pre>\n<h7><code>decodeAsync(stream: ReadableStreamLike&lt;ArrayLike&lt;number&gt; | BufferSource&gt;, options?: DecoderOptions): Promise&lt;unknown&gt;</code></h7>\n<p>It decodes <code>stream</code>, where <code>ReadableStreamLike&lt;T&gt;</code> is defined as <code>ReadableStream&lt;T&gt; | AsyncIterable&lt;T&gt;</code>, in an async iterable of byte arrays, and returns decoded object as <code>unknown</code> type, wrapped in <code>Promise</code>.</p>\n<p>This function works asynchronously, and might CPU resources more efficiently compared with synchronous <code>decode()</code>, because it doesn't wait for the completion of downloading.</p>\n<p>This function is designed to work with whatwg <code>fetch()</code> like this:</p>\n<pre><code class=\"language-typescript\">import { decodeAsync } from &quot;@msgpack/msgpack&quot;;\n\nconst MSGPACK_TYPE = &quot;application/x-msgpack&quot;;\n\nconst response = await fetch(url);\nconst contentType = response.headers.get(&quot;Content-Type&quot;);\nif (contentType &amp;&amp; contentType.startsWith(MSGPACK_TYPE) &amp;&amp; response.body != null) {\n  const object = await decodeAsync(response.body);\n  // do something with object\n} else { /* handle errors */ }\n</code></pre>\n<h7><code>decodeArrayStream(stream: ReadableStreamLike&lt;ArrayLike&lt;number&gt; | BufferSource&gt;, options?: DecoderOptions): AsyncIterable&lt;unknown&gt;</code></h7>\n<p>It is alike to <code>decodeAsync()</code>, but only accepts a <code>stream</code> that includes an array of items, and emits a decoded item one by one.</p>\n<p>for example:</p>\n<pre><code class=\"language-typescript\">import { decodeArrayStream } from &quot;@msgpack/msgpack&quot;;\n\nconst stream: AsyncIterator&lt;Uint8Array&gt;;\n\n// in an async function:\nfor await (const item of decodeArrayStream(stream)) {\n  console.log(item);\n}\n</code></pre>\n<h7><code>decodeMultiStream(stream: ReadableStreamLike&lt;ArrayLike&lt;number&gt; | BufferSource&gt;, options?: DecoderOptions): AsyncIterable&lt;unknown&gt;</code></h7>\n<p>It is alike to <code>decodeAsync()</code> and <code>decodeArrayStream()</code>, but the input <code>stream</code> must consist of multiple MessagePack-encoded items. This is an asynchronous variant for <code>decodeMulti()</code>.</p>\n<p>In other words, it could decode an unlimited stream and emits a decoded item one by one.</p>\n<p>for example:</p>\n<pre><code class=\"language-typescript\">import { decodeMultiStream } from &quot;@msgpack/msgpack&quot;;\n\nconst stream: AsyncIterator&lt;Uint8Array&gt;;\n\n// in an async function:\nfor await (const item of decodeMultiStream(stream)) {\n  console.log(item);\n}\n</code></pre>\n<p>This function is available since v2.4.0; previously it was called as <code>decodeStream()</code>.</p>\n<h7>Reusing Encoder and Decoder instances</h7>\n<p><code>Encoder</code> and <code>Decoder</code> classes are provided to have better performance by reusing instances:</p>\n<pre><code class=\"language-typescript\">import { deepStrictEqual } from &quot;assert&quot;;\nimport { Encoder, Decoder } from &quot;@msgpack/msgpack&quot;;\n\nconst encoder = new Encoder();\nconst decoder = new Decoder();\n\nconst encoded: Uint8Array = encoder.encode(object);\ndeepStrictEqual(decoder.decode(encoded), object);\n</code></pre>\n<p>According to our benchmark, reusing <code>Encoder</code> instance is about 20% faster\nthan <code>encode()</code> function, and reusing <code>Decoder</code> instance is about 2% faster\nthan <code>decode()</code> function. Note that the result should vary in environments\nand data structure.</p>\n<p><code>Encoder</code> and <code>Decoder</code> take the same options as <code>encode()</code> and <code>decode()</code> respectively.</p>\n<h6>Extension Types</h6>\n<p>To handle <a href=\"https://github.com/msgpack/msgpack/blob/master/spec.md#extension-types\">MessagePack Extension Types</a>, this library provides <code>ExtensionCodec</code> class.</p>\n<p>This is an example to setup custom extension types that handles <code>Map</code> and <code>Set</code> classes in TypeScript:</p>\n<pre><code class=\"language-typescript\">import { encode, decode, ExtensionCodec } from &quot;@msgpack/msgpack&quot;;\n\nconst extensionCodec = new ExtensionCodec();\n\n// Set&lt;T&gt;\nconst SET_EXT_TYPE = 0 // Any in 0-127\nextensionCodec.register({\n  type: SET_EXT_TYPE,\n  encode: (object: unknown): Uint8Array | null =&gt; {\n    if (object instanceof Set) {\n      return encode([...object], { extensionCodec });\n    } else {\n      return null;\n    }\n  },\n  decode: (data: Uint8Array) =&gt; {\n    const array = decode(data, { extensionCodec }) as Array&lt;unknown&gt;;\n    return new Set(array);\n  },\n});\n\n// Map&lt;K, V&gt;\nconst MAP_EXT_TYPE = 1; // Any in 0-127\nextensionCodec.register({\n  type: MAP_EXT_TYPE,\n  encode: (object: unknown): Uint8Array =&gt; {\n    if (object instanceof Map) {\n      return encode([...object], { extensionCodec });\n    } else {\n      return null;\n    }\n  },\n  decode: (data: Uint8Array) =&gt; {\n    const array = decode(data, { extensionCodec }) as Array&lt;[unknown, unknown]&gt;;\n    return new Map(array);\n  },\n});\n\nconst encoded = encode([new Set&lt;any&gt;(), new Map&lt;any, any&gt;()], { extensionCodec });\nconst decoded = decode(encoded, { extensionCodec });\n</code></pre>\n<p>Ensure you include your extensionCodec in any recursive encode and decode statements!</p>\n<p>Note that extension types for custom objects must be <code>[0, 127]</code>, while <code>[-1, -128]</code> is reserved for MessagePack itself.</p>\n<h7>ExtensionCodec context</h7>\n<p>When you use an extension codec, it might be necessary to have encoding/decoding state to keep track of which objects got encoded/re-created. To do this, pass a <code>context</code> to the <code>EncoderOptions</code> and <code>DecoderOptions</code>:</p>\n<pre><code class=\"language-typescript\">import { encode, decode, ExtensionCodec } from &quot;@msgpack/msgpack&quot;;\n\nclass MyContext {\n  track(object: any) { /*...*/ }\n}\n\nclass MyType { /* ... */ }\n\nconst extensionCodec = new ExtensionCodec&lt;MyContext&gt;();\n\n// MyType\nconst MYTYPE_EXT_TYPE = 0 // Any in 0-127\nextensionCodec.register({\n  type: MYTYPE_EXT_TYPE,\n  encode: (object, context) =&gt; {\n    if (object instanceof MyType) {\n      context.track(object);\n      return encode(object.toJSON(), { extensionCodec, context });\n    } else {\n      return null;\n    }\n  },\n  decode: (data, extType, context) =&gt; {\n    const decoded = decode(data, { extensionCodec, context });\n    const my = new MyType(decoded);\n    context.track(my);\n    return my;\n  },\n});\n\n// and later\nimport { encode, decode } from &quot;@msgpack/msgpack&quot;;\n\nconst context = new MyContext();\n\nconst encoded = encode({ myType: new MyType&lt;any&gt;() }, { extensionCodec, context });\nconst decoded = decode(encoded, { extensionCodec, context });\n</code></pre>\n<h7>Handling BigInt with ExtensionCodec</h7>\n<p>This library does not handle BigInt by default, but you have two options to handle it:</p>\n<ul>\n<li>Set <code>useBigInt64: true</code> to map bigint to MessagePack's int64/uint64</li>\n<li>Define a custom <code>ExtensionCodec</code> to map bigint to a MessagePack's extension type</li>\n</ul>\n<p><code>useBigInt64: true</code> is the simplest way to handle bigint, but it has limitations:</p>\n<ul>\n<li>A bigint is encoded in 8 byte binaries even if it's a small integer</li>\n<li>A bigint must be smaller than the max value of the uint64 and larger than the min value of the int64. Otherwise the behavior is undefined.</li>\n</ul>\n<p>So you might want to define a custom codec to handle bigint like this:</p>\n<pre><code class=\"language-typescript\">import { deepStrictEqual } from &quot;assert&quot;;\nimport { encode, decode, ExtensionCodec, DecodeError } from &quot;@msgpack/msgpack&quot;;\n\n// to define a custom codec:\nconst BIGINT_EXT_TYPE = 0; // Any in 0-127\nconst extensionCodec = new ExtensionCodec();\nextensionCodec.register({\n  type: BIGINT_EXT_TYPE,\n  encode(input: unknown): Uint8Array | null {\n    if (typeof input === &quot;bigint&quot;) {\n      if (input &lt;= Number.MAX_SAFE_INTEGER &amp;&amp; input &gt;= Number.MIN_SAFE_INTEGER) {\n        return encode(Number(input));\n      } else {\n        return encode(String(input));\n      }\n    } else {\n      return null;\n    }\n  },\n  decode(data: Uint8Array): bigint {\n    const val = decode(data);\n    if (!(typeof val === &quot;string&quot; || typeof val === &quot;number&quot;)) {\n      throw new DecodeError(`unexpected BigInt source: ${val} (${typeof val})`);\n    }\n    return BigInt(val);\n  },\n});\n\n// to use it:\nconst value = BigInt(Number.MAX_SAFE_INTEGER) + BigInt(1);\nconst encoded = encode(value, { extensionCodec });\ndeepStrictEqual(decode(encoded, { extensionCodec }), value);\n</code></pre>\n<h7>The temporal module as timestamp extensions</h7>\n<p>There is a proposal for a new date/time representations in JavaScript:</p>\n<ul>\n<li>https://github.com/tc39/proposal-temporal</li>\n</ul>\n<p>This library maps <code>Date</code> to the MessagePack timestamp extension by default, but you can re-map the temporal module (or <a href=\"https://github.com/tc39/proposal-temporal/tree/main/polyfill\">Temporal Polyfill</a>) to the timestamp extension like this:</p>\n<pre><code class=\"language-typescript\">import { Instant } from &quot;@std-proposal/temporal&quot;;\nimport { deepStrictEqual } from &quot;assert&quot;;\nimport {\n  encode,\n  decode,\n  ExtensionCodec,\n  EXT_TIMESTAMP,\n  encodeTimeSpecToTimestamp,\n  decodeTimestampToTimeSpec,\n} from &quot;@msgpack/msgpack&quot;;\n\n// to define a custom codec\nconst extensionCodec = new ExtensionCodec();\nextensionCodec.register({\n  type: EXT_TIMESTAMP, // override the default behavior!\n  encode(input: unknown): Uint8Array | null {\n    if (input instanceof Instant) {\n      const sec = input.seconds;\n      const nsec = Number(input.nanoseconds - BigInt(sec) * BigInt(1e9));\n      return encodeTimeSpecToTimestamp({ sec, nsec });\n    } else {\n      return null;\n    }\n  },\n  decode(data: Uint8Array): Instant {\n    const timeSpec = decodeTimestampToTimeSpec(data);\n    const sec = BigInt(timeSpec.sec);\n    const nsec = BigInt(timeSpec.nsec);\n    return Instant.fromEpochNanoseconds(sec * BigInt(1e9) + nsec);\n  },\n});\n\n// to use it\nconst instant = Instant.fromEpochMilliseconds(Date.now());\nconst encoded = encode(instant, { extensionCodec });\nconst decoded = decode(encoded, { extensionCodec });\ndeepStrictEqual(decoded, instant);\n</code></pre>\n<p>This will become default in this library with major-version increment, if the temporal module is standardized.</p>\n<h6>Faster way to decode a large array of floating point numbers</h6>\n<p>If there are large arrays of floating point numbers in your payload, there\nis a way to decode it faster: define a custom extension type for <code>Float#Array</code>\nwith alignment.</p>\n<p>An extension type's <code>encode</code> method can return a function that takes a parameter\n<code>pos: number</code>. This parameter can be used to make alignment of the buffer,\nresulting decoding it much more performant.</p>\n<p>See an example implementation for <code>Float32Array</code>:</p>\n<pre><code class=\"language-typescript\">const extensionCodec = new ExtensionCodec();\n\nconst EXT_TYPE_FLOAT32ARRAY = 0; // Any in 0-127\nextensionCodec.register({\n  type: EXT_TYPE_FLOAT32ARRAY,\n  encode: (object: unknown) =&gt; {\n    if (object instanceof Float32Array) {\n      return (pos: number) =&gt; {\n        const bpe = Float32Array.BYTES_PER_ELEMENT;\n        const padding = 1 + ((bpe - ((pos + 1) % bpe)) % bpe);\n        const data = new Uint8Array(object.buffer);\n        const result = new Uint8Array(padding + data.length);\n        result[0] = padding;\n        result.set(data, padding);\n        return result;\n      };\n    }\n    return null;\n  },\n  decode: (data: Uint8Array) =&gt; {\n    const padding = data[0]!;\n    const bpe = Float32Array.BYTES_PER_ELEMENT;\n    const offset = data.byteOffset + padding;\n    const length = data.byteLength - padding;\n    return new Float32Array(data.buffer, offset, length / bpe);\n  },\n});\n</code></pre>\n<h6>Decoding a Blob</h6>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Blob\"><code>Blob</code></a> is a binary data container provided by browsers. To read its contents when it contains a MessagePack binary, you can use <code>Blob#arrayBuffer()</code> or <code>Blob#stream()</code>. <code>Blob#stream()</code>\nis recommended if your target platform support it. This is because streaming\ndecode should be faster for large objects. In both ways, you need to use\nasynchronous API.</p>\n<pre><code class=\"language-typescript\">async function decodeFromBlob(blob: Blob): unknown {\n  if (blob.stream) {\n    // Blob#stream(): ReadableStream&lt;Uint8Array&gt; (recommended)\n    return await decodeAsync(blob.stream());\n  } else {\n    // Blob#arrayBuffer(): Promise&lt;ArrayBuffer&gt; (if stream() is not available)\n    return decode(await blob.arrayBuffer());\n  }\n}\n</code></pre>\n<h6>MessagePack Specification</h6>\n<p>This library is compatible with the &quot;August 2017&quot; revision of MessagePack specification at the point where timestamp ext was added:</p>\n<ul>\n<li>[x] str/bin separation, added at August 2013</li>\n<li>[x] extension types, added at August 2013</li>\n<li>[x] timestamp ext type, added at August 2017</li>\n</ul>\n<p>The living specification is here:</p>\n<p>https://github.com/msgpack/msgpack</p>\n<p>Note that as of June 2019 there're no official &quot;version&quot; on the MessagePack specification. See https://github.com/msgpack/msgpack/issues/195 for the discussions.</p>\n<h7>MessagePack Mapping Table</h7>\n<p>The following table shows how JavaScript values are mapped to <a href=\"https://github.com/msgpack/msgpack/blob/master/spec.md\">MessagePack formats</a> and vice versa.</p>\n<p>The mapping of integers varies on the setting of <code>useBigInt64</code>.</p>\n<p>The default, <code>useBigInt64: false</code> is:</p>\n<table>\n<thead>\n<tr>\n<th>Source Value</th>\n<th>MessagePack Format</th>\n<th>Value Decoded</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>null, undefined</td>\n<td>nil</td>\n<td>null (*1)</td>\n</tr>\n<tr>\n<td>boolean (true, false)</td>\n<td>bool family</td>\n<td>boolean (true, false)</td>\n</tr>\n<tr>\n<td>number (53-bit int)</td>\n<td>int family</td>\n<td>number</td>\n</tr>\n<tr>\n<td>number (64-bit float)</td>\n<td>float family</td>\n<td>number</td>\n</tr>\n<tr>\n<td>string</td>\n<td>str family</td>\n<td>string (*2)</td>\n</tr>\n<tr>\n<td>ArrayBufferView</td>\n<td>bin family</td>\n<td>Uint8Array (*3)</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>array family</td>\n<td>Array</td>\n</tr>\n<tr>\n<td>Object</td>\n<td>map family</td>\n<td>Object (*4)</td>\n</tr>\n<tr>\n<td>Date</td>\n<td>timestamp ext family</td>\n<td>Date (*5)</td>\n</tr>\n<tr>\n<td>bigint</td>\n<td>N/A</td>\n<td>N/A (*6)</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>*1 Both <code>null</code> and <code>undefined</code> are mapped to <code>nil</code> (<code>0xC0</code>) type, and are decoded into <code>null</code></li>\n<li>*2 If you'd like to skip UTF-8 decoding of strings, set <code>rawStrings: true</code>. In this case, strings are decoded into <code>Uint8Array</code>.</li>\n<li>*3 Any <code>ArrayBufferView</code>s including NodeJS's <code>Buffer</code> are mapped to <code>bin</code> family, and are decoded into <code>Uint8Array</code></li>\n<li>*4 In handling <code>Object</code>, it is regarded as <code>Record&lt;string, unknown&gt;</code> in terms of TypeScript</li>\n<li>*5 MessagePack timestamps may have nanoseconds, which will lost when it is decoded into JavaScript <code>Date</code>. This behavior can be overridden by registering <code>-1</code> for the extension codec.</li>\n<li>*6 bigint is not supported in <code>useBigInt64: false</code> mode, but you can define an extension codec for it.</li>\n</ul>\n<p>If you set <code>useBigInt64: true</code>, the following mapping is used:</p>\n<table>\n<thead>\n<tr>\n<th>Source Value</th>\n<th>MessagePack Format</th>\n<th>Value Decoded</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>null, undefined</td>\n<td>nil</td>\n<td>null</td>\n</tr>\n<tr>\n<td>boolean (true, false)</td>\n<td>bool family</td>\n<td>boolean (true, false)</td>\n</tr>\n<tr>\n<td><strong>number (32-bit int)</strong></td>\n<td>int family</td>\n<td>number</td>\n</tr>\n<tr>\n<td><strong>number (except for the above)</strong></td>\n<td>float family</td>\n<td>number</td>\n</tr>\n<tr>\n<td><strong>bigint</strong></td>\n<td>int64 / uint64</td>\n<td>bigint (*7)</td>\n</tr>\n<tr>\n<td>string</td>\n<td>str family</td>\n<td>string</td>\n</tr>\n<tr>\n<td>ArrayBufferView</td>\n<td>bin family</td>\n<td>Uint8Array</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>array family</td>\n<td>Array</td>\n</tr>\n<tr>\n<td>Object</td>\n<td>map family</td>\n<td>Object</td>\n</tr>\n<tr>\n<td>Date</td>\n<td>timestamp ext family</td>\n<td>Date</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>*7 If the bigint is larger than the max value of uint64 or smaller than the min value of int64, then the behavior is undefined.</li>\n</ul>\n<h6>Prerequisites</h6>\n<p>This is a universal JavaScript library that supports major browsers and NodeJS.</p>\n<h7>ECMA-262</h7>\n<ul>\n<li>ES2015 language features</li>\n<li>ES2024 standard library, including:\n<ul>\n<li>Typed arrays (ES2015)</li>\n<li>Async iterations (ES2018)</li>\n<li>Features added in ES2015-ES2022</li>\n</ul>\n</li>\n<li>whatwg encodings (<code>TextEncoder</code> and <code>TextDecoder</code>)</li>\n</ul>\n<p>ES2022 standard library used in this library can be polyfilled with <a href=\"https://github.com/zloirock/core-js\">core-js</a>.</p>\n<p>IE11 is no longer supported. If you'd like to use this library in IE11, use v2.x versions.</p>\n<h7>NodeJS</h7>\n<p>NodeJS v18 is required.</p>\n<h7>TypeScript Compiler / Type Definitions</h7>\n<p>This module requires type definitions of <code>AsyncIterator</code>, <code>ArrayBufferLike</code>, whatwg streams, and so on. They are provided by <code>&quot;lib&quot;: [&quot;ES2024&quot;, &quot;DOM&quot;]</code> in <code>tsconfig.json</code>.</p>\n<p>Regarding the TypeScript compiler version, only the latest TypeScript is tested in development.</p>\n<h6>Benchmark</h6>\n<p>Run-time performance is not the only reason to use MessagePack, but it's important to choose MessagePack libraries, so a benchmark suite is provided to monitor the performance of this library.</p>\n<p>V8's built-in JSON has been improved for years, esp. <code>JSON.parse()</code> is <a href=\"https://v8.dev/blog/v8-release-76\">significantly improved in V8/7.6</a>, it is the fastest deserializer as of 2019, as the benchmark result bellow suggests.</p>\n<p>However, MessagePack can handles binary data effectively, actual performance depends on situations. Esp. streaming-decoding may be significantly faster than non-streaming decoding if it's effective.  You'd better take benchmark on your own use-case if performance matters.</p>\n<p>Benchmark on NodeJS/v22.13.1 (V8/12.4)</p>\n<table>\n<thead>\n<tr>\n<th>operation</th>\n<th style=\"text-align:right\">op</th>\n<th style=\"text-align:right\">ms</th>\n<th style=\"text-align:right\">op/s</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>buf = Buffer.from(JSON.stringify(obj));</td>\n<td style=\"text-align:right\">1348700</td>\n<td style=\"text-align:right\">5000</td>\n<td style=\"text-align:right\">269740</td>\n</tr>\n<tr>\n<td>obj = JSON.parse(buf.toString(&quot;utf-8&quot;));</td>\n<td style=\"text-align:right\">1700300</td>\n<td style=\"text-align:right\">5000</td>\n<td style=\"text-align:right\">340060</td>\n</tr>\n<tr>\n<td>buf = require(&quot;msgpack-lite&quot;).encode(obj);</td>\n<td style=\"text-align:right\">591300</td>\n<td style=\"text-align:right\">5000</td>\n<td style=\"text-align:right\">118260</td>\n</tr>\n<tr>\n<td>obj = require(&quot;msgpack-lite&quot;).decode(buf);</td>\n<td style=\"text-align:right\">539500</td>\n<td style=\"text-align:right\">5000</td>\n<td style=\"text-align:right\">107900</td>\n</tr>\n<tr>\n<td>buf = require(&quot;@msgpack/msgpack&quot;).encode(obj);</td>\n<td style=\"text-align:right\">1238700</td>\n<td style=\"text-align:right\">5000</td>\n<td style=\"text-align:right\">247740</td>\n</tr>\n<tr>\n<td>obj = require(&quot;@msgpack/msgpack&quot;).decode(buf);</td>\n<td style=\"text-align:right\">1402000</td>\n<td style=\"text-align:right\">5000</td>\n<td style=\"text-align:right\">280400</td>\n</tr>\n<tr>\n<td>buf = /* @msgpack/msgpack */ encoder.encode(obj);</td>\n<td style=\"text-align:right\">1379800</td>\n<td style=\"text-align:right\">5000</td>\n<td style=\"text-align:right\">275960</td>\n</tr>\n<tr>\n<td>obj = /* @msgpack/msgpack */ decoder.decode(buf);</td>\n<td style=\"text-align:right\">1406100</td>\n<td style=\"text-align:right\">5000</td>\n<td style=\"text-align:right\">281220</td>\n</tr>\n</tbody>\n</table>\n<p>Note that <code>JSON</code> cases use <code>Buffer</code> to emulate I/O where a JavaScript string must be converted into a byte array encoded in UTF-8, whereas MessagePack modules deal with byte arrays.</p>\n<h6>Distribution</h6>\n<h7>NPM / npmjs.com</h7>\n<p>The NPM package distributed in npmjs.com includes both ES2015+ and ES5 files:</p>\n<ul>\n<li><code>dist/</code> is compiled into ES2020 with CommomJS, provided for NodeJS v10</li>\n<li><code>dist.umd/</code> is compiled into ES5 with UMD\n<ul>\n<li><code>dist.umd/msgpack.min.js</code> - the minified file</li>\n<li><code>dist.umd/msgpack.js</code> - the non-minified file</li>\n</ul>\n</li>\n<li><code>dist.esm/</code> is compiled into ES2020 with ES modules, provided for webpack-like bundlers and NodeJS's ESM-mode</li>\n</ul>\n<p>If you use NodeJS and/or webpack, their module resolvers use the suitable one automatically.</p>\n<h7>CDN / unpkg.com</h7>\n<p>This library is available via CDN:</p>\n<pre><code class=\"language-html\">&lt;script crossorigin src=&quot;https://unpkg.com/@msgpack/msgpack&quot;&gt;&lt;/script&gt;\n</code></pre>\n<p>It loads <code>MessagePack</code> module to the global object.</p>\n<h6>Deno Support</h6>\n<p>You can use this module on Deno.</p>\n<p>See <code>example/deno-*.ts</code> for examples.</p>\n<p><code>deno.land/x</code> is not supported.</p>\n<h6>Bun Support</h6>\n<p>You can use this module on Bun.</p>\n<h6>Maintenance</h6>\n<h7>Testing</h7>\n<p>For simple testing:</p>\n<pre><code>npm run test\n</code></pre>\n<h7>Continuous Integration</h7>\n<p>This library uses GitHub Actions.</p>\n<p>Test matrix:</p>\n<ul>\n<li>NodeJS\n<ul>\n<li>v18 / v20 / v22</li>\n</ul>\n</li>\n<li>Browsers:\n<ul>\n<li>Chrome, Firefox</li>\n</ul>\n</li>\n<li>Deno</li>\n<li>Bun</li>\n</ul>\n<h7>Release Engineering</h7>\n<pre><code class=\"language-console\"># run tests on NodeJS, Chrome, and Firefox\nmake test-all\n\n# edit the changelog\ncode CHANGELOG.md\n\n# bump version\nnpm version patch|minor|major\n\n# run the publishing task\nmake publish\n</code></pre>\n<h7>Updating Dependencies</h7>\n<pre><code class=\"language-console\">npm run update-dependencies\n</code></pre>\n<h6>License</h6>\n<p>Copyright 2019 The MessagePack community.</p>\n<p>This software uses the ISC license:</p>\n<p>https://opensource.org/licenses/ISC</p>\n<p>See <a href=\"./LICENSE\">LICENSE</a> for details.</p>\n",
    "msgpack_repo_id": "msgpack-msgpack-javascript",
    "msgpack_repo_homepage": "https://msgpack.org/",
    "full_name": "msgpack/msgpack-javascript",
    "owner": "msgpack",
    "html_url": "https://github.com/msgpack/msgpack-javascript"
  },
  {
    "msgpack_lang": "Java",
    "msgpack_quickstart_html": "<h5>MessagePack for Java</h5>\n<p><a href=\"http://msgpack.org\">MessagePack</a> is a binary serialization format. If you need a fast and compact alternative of JSON, MessagePack is your friend. For example, a small integer can be encoded in a single byte, and short strings only need a single byte prefix + the original byte array. MessagePack implementation is already available in various languages (See also the list in http://msgpack.org) and works as a universal data format.</p>\n<ul>\n<li>Message Pack specification: <a href=\"https://github.com/msgpack/msgpack/blob/master/spec.md\">https://github.com/msgpack/msgpack/blob/master/spec.md</a></li>\n</ul>\n<p>MessagePack v7 (or later) is a faster implementation of the previous version <a href=\"https://github.com/msgpack/msgpack-java/tree/v06\">v06</a>, and\nsupports all of the message pack types, including <a href=\"https://github.com/msgpack/msgpack/blob/master/spec.md#formats-ext\">extension format</a>.</p>\n<p><a href=\"https://www.javadoc.io/doc/org.msgpack/msgpack-core\">JavaDoc is available at javadoc.io</a>.</p>\n<h6>Quick Start</h6>\n<p><a href=\"https://maven-badges.herokuapp.com/maven-central/org.msgpack/msgpack-core/\"><img src=\"https://maven-badges.herokuapp.com/maven-central/org.msgpack/msgpack-core/badge.svg\" alt=\"Maven Central\"></a>\n<a href=\"https://www.javadoc.io/doc/org.msgpack/msgpack-core\"><img src=\"https://javadoc.io/badge/org.msgpack/msgpack-core.svg\" alt=\"Javadoc\"></a></p>\n<p>For Maven users:</p>\n<pre><code>&lt;dependency&gt;\n   &lt;groupId&gt;org.msgpack&lt;/groupId&gt;\n   &lt;artifactId&gt;msgpack-core&lt;/artifactId&gt;\n   &lt;version&gt;(version)&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n<p>For sbt users:</p>\n<pre><code>libraryDependencies += &quot;org.msgpack&quot; % &quot;msgpack-core&quot; % &quot;(version)&quot;\n</code></pre>\n<p>For gradle users:</p>\n<pre><code>repositories {\n    mavenCentral()\n}\n\ndependencies {\n    compile 'org.msgpack:msgpack-core:(version)'\n}\n</code></pre>\n<ul>\n<li><a href=\"https://github.com/msgpack/msgpack-java/blob/develop/msgpack-core/src/test/java/org/msgpack/core/example/MessagePackExample.java\">Usage examples</a></li>\n</ul>\n<h7>Java 17 Support</h7>\n<p>For using DirectByteBuffer (off-heap memory access methods) in JDK17, you need to specify two JVM options:</p>\n<pre><code>--add-opens=java.base/java.nio=ALL-UNNAMED\n--add-opens=java.base/sun.nio.ch=ALL-UNNAMED\n</code></pre>\n<h7>Integration with Jackson ObjectMapper (jackson-databind)</h7>\n<p>msgpack-java supports serialization and deserialization of Java objects through <a href=\"https://github.com/FasterXML/jackson-databind\">jackson-databind</a>.\nFor details, see <a href=\"https://github.com/msgpack/msgpack-java/blob/develop/msgpack-jackson/README.md\">msgpack-jackson/README.md</a>. The template-based serialization mechanism used in v06 is deprecated.</p>\n<ul>\n<li><a href=\"https://github.com/msgpack/msgpack-java/blob/develop/RELEASE_NOTES.md\">Release Notes</a></li>\n</ul>\n<h6>For MessagePack Developers <a href=\"https://travis-ci.org/msgpack/msgpack-java\"><img src=\"https://travis-ci.org/msgpack/msgpack-java.svg?branch=v07-develop\" alt=\"Travis CI\"></a></h6>\n<p>msgpack-java uses <a href=\"http://www.scala-sbt.org/\">sbt</a> for building the projects. For the basic usage of sbt, see:</p>\n<ul>\n<li><a href=\"http://xerial.org/blog/2014/03/24/sbt/\">Building Java projects with sbt</a></li>\n</ul>\n<p>Coding style</p>\n<ul>\n<li>msgpack-java uses <a href=\"https://github.com/airlift/codestyle\">the same coding style</a> with Facebook Presto</li>\n<li><a href=\"https://raw.githubusercontent.com/airlift/codestyle/master/IntelliJIdea14/Airlift.xml\">IntelliJ setting file</a></li>\n<li>Scala test code uses Scalafmt with Scala 3 dialect (always use the latest Scala 3 version)</li>\n</ul>\n<h7>Basic sbt commands</h7>\n<p>Enter the sbt console:</p>\n<pre><code>$ ./sbt\n</code></pre>\n<p>Here is a list of sbt commands for daily development:</p>\n<pre><code>&gt; ~compile                                 # Compile source codes\n&gt; ~&quot;Test / compile&quot;                        # Compile both source and test codes\n&gt; ~test                                    # Run tests upon source code change\n&gt; ~testOnly *MessagePackTest               # Run tests in the specified class\n&gt; ~testOnly *MessagePackTest -- (pattern)  # Run tests matching the pattern \n&gt; project msgpack-core                     # Focus on a specific project\n&gt; package                                  # Create a jar file in the target folder of each project\n&gt; jcheckStyle                              # Run check style\n&gt; scalafmtAll                              # Format all Scala and sbt code\n</code></pre>\n<h7>Publishing</h7>\n<pre><code>&gt; publishLocal            # Install to local .ivy2 repository\n&gt; publishM2               # Install to local .m2 Maven repository\n&gt; publish                 # Publishing a snapshot version to the Sonatype repository\n</code></pre>\n<h7>Publish to Sonatype (Maven Central)</h7>\n<p>To publish a new version, add a new git tag and push it to GitHub. GitHub Action will deploy a new release version to Maven Central (Sonatype).</p>\n<pre><code class=\"language-scala\">$ git tag v0.x.y\n$ git push origin v0.x.y\n</code></pre>\n<p>A new release note will be generated automatically at the <a href=\"https://github.com/msgpack/msgpack-java/releases\">GitHub Releases</a> page.</p>\n<h8>Publishing to Sonatype from Local Machine</h8>\n<p>If you need to publish to Maven central using a local machine, you need to configure credentials for Sonatype Central. First set Sonatype account information (user name and password) in the global sbt settings. To protect your password, never include this file in your project.</p>\n<p><em><strong>$HOME/.sbt/1.0/credentials.sbt</strong></em></p>\n<pre><code>credentials += Credentials(Path.userHome / &quot;.sbt&quot; / &quot;sonatype_central_credentials&quot;)\n</code></pre>\n<p>Then create a credentials file at <code>~/.sbt/sonatype_central_credentials</code>:</p>\n<pre><code>host=central.sonatype.com\nuser=&lt;your username&gt;\npassword=&lt;your password&gt;\n</code></pre>\n<p>Alternatively, you can use environment variables:</p>\n<pre><code class=\"language-bash\">export SONATYPE_USERNAME=&lt;your username&gt;\nexport SONATYPE_PASSWORD=&lt;your password&gt;\n</code></pre>\n<p>You may also need to configure GPG. See the instruction in <a href=\"https://github.com/sbt/sbt-pgp\">sbt-pgp</a>.</p>\n<p>Then, run <code>publishSigned</code> followed by <code>sonaRelease</code>:</p>\n<pre><code># [optional] When you need to perform the individual release steps manually, use the following commands:\n&gt; publishSigned           # Publish GPG signed artifacts to the Sonatype repository\n&gt; sonaRelease             # Publish to the Maven Central (It will be synched within less than 4 hours)\n</code></pre>\n<p>If some sporadic error happens (e.g., Sonatype timeout), rerun <code>sonaRelease</code> again.</p>\n<h7>Project Structure</h7>\n<pre><code>msgpack-core                 # Contains packer/unpacker implementation that never uses third-party libraries\nmsgpack-jackson              # Contains jackson-dataformat-java implementation\n</code></pre>\n",
    "msgpack_repo_id": "msgpack-msgpack-java",
    "msgpack_repo_homepage": "https://github.com/msgpack/msgpack-java",
    "full_name": "msgpack/msgpack-java",
    "owner": "msgpack",
    "html_url": "https://github.com/msgpack/msgpack-java"
  },
  {
    "msgpack_lang": "Python",
    "msgpack_quickstart_html": "<h5>MessagePack for Python</h5>\n<p><a href=\"https://github.com/msgpack/msgpack-python/actions/workflows/wheel.yml\"><img src=\"https://github.com/msgpack/msgpack-python/actions/workflows/wheel.yml/badge.svg\" alt=\"Build Status\"></a>\n<a href=\"https://msgpack-python.readthedocs.io/en/latest/?badge=latest\"><img src=\"https://readthedocs.org/projects/msgpack-python/badge/?version=latest\" alt=\"Documentation Status\"></a></p>\n<h6>What's this</h6>\n<p><a href=\"https://msgpack.org/\">MessagePack</a> is an efficient binary serialization format.\nIt lets you exchange data among multiple languages like JSON.\nBut it's faster and smaller.\nThis package provides CPython bindings for reading and writing MessagePack data.</p>\n<h6>Install</h6>\n<pre><code>$ pip install msgpack\n</code></pre>\n<h7>Pure Python implementation</h7>\n<p>The extension module in msgpack (<code>msgpack._cmsgpack</code>) does not support PyPy.</p>\n<p>But msgpack provides a pure Python implementation (<code>msgpack.fallback</code>) for PyPy.</p>\n<h7>Windows</h7>\n<p>When you can't use a binary distribution, you need to install Visual Studio\nor Windows SDK on Windows.\nWithout extension, using pure Python implementation on CPython runs slowly.</p>\n<h6>How to use</h6>\n<h7>One-shot pack &amp; unpack</h7>\n<p>Use <code>packb</code> for packing and <code>unpackb</code> for unpacking.\nmsgpack provides <code>dumps</code> and <code>loads</code> as an alias for compatibility with\n<code>json</code> and <code>pickle</code>.</p>\n<p><code>pack</code> and <code>dump</code> packs to a file-like object.\n<code>unpack</code> and <code>load</code> unpacks from a file-like object.</p>\n<pre><code class=\"language-pycon\">&gt;&gt;&gt; import msgpack\n&gt;&gt;&gt; msgpack.packb([1, 2, 3])\n'\\x93\\x01\\x02\\x03'\n&gt;&gt;&gt; msgpack.unpackb(_)\n[1, 2, 3]\n</code></pre>\n<p>Read the docstring for options.</p>\n<h7>Streaming unpacking</h7>\n<p><code>Unpacker</code> is a &quot;streaming unpacker&quot;. It unpacks multiple objects from one\nstream (or from bytes provided through its <code>feed</code> method).</p>\n<pre><code class=\"language-py\">import msgpack\nfrom io import BytesIO\n\nbuf = BytesIO()\nfor i in range(100):\n   buf.write(msgpack.packb(i))\n\nbuf.seek(0)\n\nunpacker = msgpack.Unpacker(buf)\nfor unpacked in unpacker:\n    print(unpacked)\n</code></pre>\n<h7>Packing/unpacking of custom data type</h7>\n<p>It is also possible to pack/unpack custom data types. Here is an example for\n<code>datetime.datetime</code>.</p>\n<pre><code class=\"language-py\">import datetime\nimport msgpack\n\nuseful_dict = {\n    &quot;id&quot;: 1,\n    &quot;created&quot;: datetime.datetime.now(),\n}\n\ndef decode_datetime(obj):\n    if '__datetime__' in obj:\n        obj = datetime.datetime.strptime(obj[&quot;as_str&quot;], &quot;%Y%m%dT%H:%M:%S.%f&quot;)\n    return obj\n\ndef encode_datetime(obj):\n    if isinstance(obj, datetime.datetime):\n        return {'__datetime__': True, 'as_str': obj.strftime(&quot;%Y%m%dT%H:%M:%S.%f&quot;)}\n    return obj\n\n\npacked_dict = msgpack.packb(useful_dict, default=encode_datetime)\nthis_dict_again = msgpack.unpackb(packed_dict, object_hook=decode_datetime)\n</code></pre>\n<p><code>Unpacker</code>'s <code>object_hook</code> callback receives a dict; the\n<code>object_pairs_hook</code> callback may instead be used to receive a list of\nkey-value pairs.</p>\n<p>NOTE: msgpack can encode datetime with tzinfo into standard ext type for now.\nSee <code>datetime</code> option in <code>Packer</code> docstring.</p>\n<h7>Extended types</h7>\n<p>It is also possible to pack/unpack custom data types using the <strong>ext</strong> type.</p>\n<pre><code class=\"language-pycon\">&gt;&gt;&gt; import msgpack\n&gt;&gt;&gt; import array\n&gt;&gt;&gt; def default(obj):\n...     if isinstance(obj, array.array) and obj.typecode == 'd':\n...         return msgpack.ExtType(42, obj.tostring())\n...     raise TypeError(&quot;Unknown type: %r&quot; % (obj,))\n...\n&gt;&gt;&gt; def ext_hook(code, data):\n...     if code == 42:\n...         a = array.array('d')\n...         a.fromstring(data)\n...         return a\n...     return ExtType(code, data)\n...\n&gt;&gt;&gt; data = array.array('d', [1.2, 3.4])\n&gt;&gt;&gt; packed = msgpack.packb(data, default=default)\n&gt;&gt;&gt; unpacked = msgpack.unpackb(packed, ext_hook=ext_hook)\n&gt;&gt;&gt; data == unpacked\nTrue\n</code></pre>\n<h7>Advanced unpacking control</h7>\n<p>As an alternative to iteration, <code>Unpacker</code> objects provide <code>unpack</code>,\n<code>skip</code>, <code>read_array_header</code> and <code>read_map_header</code> methods. The former two\nread an entire message from the stream, respectively de-serialising and returning\nthe result, or ignoring it. The latter two methods return the number of elements\nin the upcoming container, so that each element in an array, or key-value pair\nin a map, can be unpacked or skipped individually.</p>\n<h6>Notes</h6>\n<h7>string and binary type in old msgpack spec</h7>\n<p>Early versions of msgpack didn't distinguish string and binary types.\nThe type for representing both string and binary types was named <strong>raw</strong>.</p>\n<p>You can pack into and unpack from this old spec using <code>use_bin_type=False</code>\nand <code>raw=True</code> options.</p>\n<pre><code class=\"language-pycon\">&gt;&gt;&gt; import msgpack\n&gt;&gt;&gt; msgpack.unpackb(msgpack.packb([b'spam', 'eggs'], use_bin_type=False), raw=True)\n[b'spam', b'eggs']\n&gt;&gt;&gt; msgpack.unpackb(msgpack.packb([b'spam', 'eggs'], use_bin_type=True), raw=False)\n[b'spam', 'eggs']\n</code></pre>\n<h7>ext type</h7>\n<p>To use the <strong>ext</strong> type, pass <code>msgpack.ExtType</code> object to packer.</p>\n<pre><code class=\"language-pycon\">&gt;&gt;&gt; import msgpack\n&gt;&gt;&gt; packed = msgpack.packb(msgpack.ExtType(42, b'xyzzy'))\n&gt;&gt;&gt; msgpack.unpackb(packed)\nExtType(code=42, data='xyzzy')\n</code></pre>\n<p>You can use it with <code>default</code> and <code>ext_hook</code>. See below.</p>\n<h7>Security</h7>\n<p>To unpacking data received from unreliable source, msgpack provides\ntwo security options.</p>\n<p><code>max_buffer_size</code> (default: <code>100*1024*1024</code>) limits the internal buffer size.\nIt is used to limit the preallocated list size too.</p>\n<p><code>strict_map_key</code> (default: <code>True</code>) limits the type of map keys to bytes and str.\nWhile msgpack spec doesn't limit the types of the map keys,\nthere is a risk of the hashdos.\nIf you need to support other types for map keys, use <code>strict_map_key=False</code>.</p>\n<h7>Performance tips</h7>\n<p>CPython's GC starts when growing allocated object.\nThis means unpacking may cause useless GC.\nYou can use <code>gc.disable()</code> when unpacking large message.</p>\n<p>List is the default sequence type of Python.\nBut tuple is lighter than list.\nYou can use <code>use_list=False</code> while unpacking when performance is important.</p>\n<h6>Major breaking changes in the history</h6>\n<h7>msgpack 0.5</h7>\n<p>Package name on PyPI was changed from <code>msgpack-python</code> to <code>msgpack</code> from 0.5.</p>\n<p>When upgrading from msgpack-0.4 or earlier, do <code>pip uninstall msgpack-python</code> before\n<code>pip install -U msgpack</code>.</p>\n<h7>msgpack 1.0</h7>\n<ul>\n<li>\n<p>Python 2 support</p>\n<ul>\n<li>\n<p>The extension module does not support Python 2 anymore.\nThe pure Python implementation (<code>msgpack.fallback</code>) is used for Python 2.</p>\n</li>\n<li>\n<p>msgpack 1.0.6 drops official support of Python 2.7, as pip and\nGitHub Action (setup-python) no longer support Python 2.7.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>Packer</p>\n<ul>\n<li>Packer uses <code>use_bin_type=True</code> by default.\nBytes are encoded in bin type in msgpack.</li>\n<li>The <code>encoding</code> option is removed.  UTF-8 is used always.</li>\n</ul>\n</li>\n<li>\n<p>Unpacker</p>\n<ul>\n<li>Unpacker uses <code>raw=False</code> by default.  It assumes str types are valid UTF-8 string\nand decode them to Python str (unicode) object.</li>\n<li><code>encoding</code> option is removed.  You can use <code>raw=True</code> to support old format (e.g. unpack into bytes, not str).</li>\n<li>Default value of <code>max_buffer_size</code> is changed from 0 to 100 MiB to avoid DoS attack.\nYou need to pass <code>max_buffer_size=0</code> if you have large but safe data.</li>\n<li>Default value of <code>strict_map_key</code> is changed to True to avoid hashdos.\nYou need to pass <code>strict_map_key=False</code> if you have data which contain map keys\nwhich type is not bytes or str.</li>\n</ul>\n</li>\n</ul>\n",
    "msgpack_repo_id": "msgpack-msgpack-python",
    "msgpack_repo_homepage": "https://msgpack.org/",
    "full_name": "msgpack/msgpack-python",
    "owner": "msgpack",
    "html_url": "https://github.com/msgpack/msgpack-python"
  },
  {
    "msgpack_lang": "C#",
    "msgpack_quickstart_html": "<h5>MessagePack for C# (.NET Framework, .NET 8, Unity, Xamarin)</h5>\n<p><a href=\"https://www.nuget.org/packages/messagepack\"><img src=\"https://img.shields.io/nuget/v/MessagePack.svg\" alt=\"NuGet\"></a>\n<a href=\"https://www.nuget.org/packages/messagepack\"><img src=\"https://img.shields.io/nuget/vpre/MessagePack.svg\" alt=\"NuGet\"></a>\n<a href=\"https://github.com/MessagePack-CSharp/MessagePack-CSharp/releases\"><img src=\"https://img.shields.io/github/release/neuecc/MessagePack-CSharp.svg\" alt=\"Releases\"></a></p>\n<p><a href=\"https://gitter.im/MessagePack-CSharp/Lobby?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge\"><img src=\"https://badges.gitter.im/MessagePack-CSharp/Lobby.svg\" alt=\"Join the chat at https://gitter.im/MessagePack-CSharp/Lobby\"></a>\n<a href=\"https://dev.azure.com/ils0086/MessagePack-CSharp/_build/latest?definitionId=2&amp;branchName=master\"><img src=\"https://dev.azure.com/ils0086/MessagePack-CSharp/_apis/build/status/MessagePack-CSharp-CI?branchName=master\" alt=\"Build Status\"></a></p>\n<p>The extremely fast <a href=\"http://msgpack.org/\">MessagePack</a> serializer for C#.\nIt is 10x faster than <a href=\"https://github.com/msgpack/msgpack-cli\">MsgPack-Cli</a> and outperforms other C# serializers. MessagePack for C# also ships with built-in support for LZ4 compression - an extremely fast compression algorithm. Performance is important, particularly in applications like games, distributed computing, microservices, or data caches.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/46207/23835716/89c8ab08-07af-11e7-9183-9e9415bdc87f.png\" alt=\"Perf comparison graph\"></p>\n<p>MessagePack has a compact binary size and a full set of general purpose expressive data types. Please have a look at the <a href=\"#comparison\">comparison with JSON, protobuf, ZeroFormatter section</a> and learn <a href=\"#performance\">why MessagePack C# is the fastest</a>.</p>\n<h6>Table of Contents</h6>\n<ul>\n<li><a href=\"#installation\">Installation</a>\n<ul>\n<li><a href=\"#nuget-packages\">NuGet packages</a></li>\n<li><a href=\"#unity\">Unity</a></li>\n<li><a href=\"#migration-notes-from-v1x\">Migration notes from v1.x</a></li>\n</ul>\n</li>\n<li><a href=\"#quick-start\">Quick Start</a></li>\n<li><a href=\"#analyzer\">Analyzer</a></li>\n<li><a href=\"#built-in-supported-types\">Built-in supported types</a></li>\n<li><a href=\"#object-serialization\">Object Serialization</a></li>\n<li><a href=\"#datacontract-compatibility\">DataContract compatibility</a></li>\n<li><a href=\"#serializing-readonlyimmutable-object-members--serializationconstructor\">Serializing readonly/immutable object members  (SerializationConstructor)</a></li>\n<li><a href=\"#serialization-callback\">Serialization Callback</a></li>\n<li><a href=\"#union\">Union</a></li>\n<li><a href=\"#dynamic-untyped-deserialization\">Dynamic (Untyped) Deserialization</a></li>\n<li><a href=\"#object-type-serialization\">Object Type Serialization</a></li>\n<li><a href=\"#typeless\">Typeless</a></li>\n<li><a href=\"#security\">Security</a></li>\n<li><a href=\"#performance\">Performance</a>\n<ul>\n<li><a href=\"#deserialization-performance-for-different-options\">Deserialization Performance for different options</a></li>\n<li><a href=\"#string-interning\">String interning</a></li>\n</ul>\n</li>\n<li><a href=\"#lz4-compression\">LZ4 Compression</a>\n<ul>\n<li><a href=\"#attributions\">Attributions</a></li>\n</ul>\n</li>\n<li><a href=\"#comparison-with-protobuf-json-zeroformatter\">Comparison with protobuf, JSON, ZeroFormatter</a></li>\n<li><a href=\"#hints-to-achieve-maximum-performance-when-using-messagepack-for-c\">Hints to achieve maximum performance when using MessagePack for C#</a>\n<ul>\n<li><a href=\"#use-indexed-keys-instead-of-string-keys-contractless\">Use indexed keys instead of string keys (Contractless)</a></li>\n<li><a href=\"#create-own-custom-composite-resolver\">Create own custom composite resolver</a></li>\n<li><a href=\"#use-native-resolvers\">Use native resolvers</a></li>\n<li><a href=\"#be-careful-when-copying-buffers\">Be careful when copying buffers</a></li>\n<li><a href=\"#choosing-compression\">Choosing compression</a></li>\n</ul>\n</li>\n<li><a href=\"#extensions\">Extensions</a></li>\n<li><a href=\"#experimental-features\">Experimental Features</a></li>\n<li><a href=\"#high-level-api-messagepackserializer\">High-Level API (<code>MessagePackSerializer</code>)</a>\n<ul>\n<li><a href=\"#multiple-messagepack-structures-on-a-single-stream\">Multiple MessagePack structures on a single <code>Stream</code></a></li>\n</ul>\n</li>\n<li><a href=\"#low-level-api-imessagepackformattert\">Low-Level API (<code>IMessagePackFormatter&lt;T&gt;</code>)</a></li>\n<li><a href=\"#primitive-api-messagepackwriter-messagepackreader\">Primitive API (<code>MessagePackWriter</code>, <code>MessagePackReader</code>)</a>\n<ul>\n<li><a href=\"#messagepackreader\"><code>MessagePackReader</code></a></li>\n<li><a href=\"#messagepackwriter\"><code>MessagePackWriter</code></a></li>\n</ul>\n</li>\n<li><a href=\"#main-extension-point-iformatterresolver\">Main Extension Point (<code>IFormatterResolver</code>)</a></li>\n<li><a href=\"#messagepackformatterattribute\">MessagePackFormatterAttribute</a></li>\n<li><a href=\"#ignoreformatter\">IgnoreFormatter</a></li>\n<li><a href=\"#reserved-extension-types\">Reserved Extension Types</a></li>\n<li><a href=\"#unity-support\">Unity support</a></li>\n<li><a href=\"#aot\">AOT Code Generation (support for Unity/Xamarin)</a></li>\n<li><a href=\"#rpc\">RPC</a>\n<ul>\n<li><a href=\"#magiconion\">MagicOnion</a></li>\n<li><a href=\"#streamjsonrpc\">StreamJsonRpc</a></li>\n</ul>\n</li>\n<li><a href=\"#how-to-build\">How to build</a></li>\n<li><a href=\"#author-info\">Author Info</a></li>\n<li><a href=\"#coc\">Code of Conduct &amp; .NET Foundation notice</a></li>\n</ul>\n<h6>Installation</h6>\n<p>This library is distributed via NuGet. Special <a href=\"#unity\">Unity support</a> is available, too.</p>\n<p>We target .NET Standard 2.0 with special optimizations for .NET 8+ and .NET Framework.\nThe library code is pure C# (with Just-In-Time IL code generation on some platforms or AOT safe source generators).</p>\n<h7>NuGet packages</h7>\n<p>To install with NuGet, just install the <code>MessagePack</code> package:</p>\n<pre><code class=\"language-ps1\">Install-Package MessagePack\n</code></pre>\n<p>There are also a range of official and third party Extension Packages available (learn more in our <a href=\"#extensions\">extensions section</a>):</p>\n<pre><code class=\"language-ps1\">Install-Package MessagePack.ReactiveProperty\nInstall-Package MessagePack.UnityShims\nInstall-Package MessagePack.AspNetCoreMvcFormatter\n</code></pre>\n<h7>Unity</h7>\n<p>For Unity projects, please read the <a href=\"#unity-support\">Unity Support</a> section to install.</p>\n<h7>Migration notes from prior versions</h7>\n<p>Migrating from a prior major version of MessagePack to the latest?\nCheck out <a href=\"doc/migration.md\">these instructions</a>.</p>\n<h6>Quick Start</h6>\n<p>Define the struct or class to be serialized and annotate it with a <code>[MessagePackObject]</code> attribute.\nAnnotate members whose values should be serialized (fields as well as properties) with <code>[Key]</code> attributes.</p>\n<pre><code class=\"language-csharp\">[MessagePackObject]\npublic class MyClass\n{\n    // Key attributes take a serialization index (or string name)\n    // The values must be unique and versioning has to be considered as well.\n    // Keys are described in later sections in more detail.\n    [Key(0)]\n    public int Age { get; set; }\n\n    [Key(1)]\n    public string FirstName { get; set; }\n\n    [Key(2)]\n    public string LastName { get; set; }\n\n    // All fields or properties that should not be serialized must be annotated with [IgnoreMember].\n    [IgnoreMember]\n    public string FullName { get { return FirstName + LastName; } }\n}\n</code></pre>\n<p>Call <code>MessagePackSerializer.Serialize&lt;T&gt;/Deserialize&lt;T&gt;</code> to serialize/deserialize your object instance.\nYou can use the <code>ConvertToJson</code> method to get a human readable representation of any MessagePack binary blob.</p>\n<pre><code class=\"language-csharp\">class Program\n{\n    static void Main(string[] args)\n    {\n        var mc = new MyClass\n        {\n            Age = 99,\n            FirstName = &quot;hoge&quot;,\n            LastName = &quot;huga&quot;,\n        };\n\n        // Call Serialize/Deserialize, that's all.\n        byte[] bytes = MessagePackSerializer.Serialize(mc);\n        MyClass mc2 = MessagePackSerializer.Deserialize&lt;MyClass&gt;(bytes);\n\n        // You can dump MessagePack binary blobs to human readable json.\n        // Using indexed keys (as opposed to string keys) will serialize to MessagePack arrays,\n        // hence property names are not available.\n        // [99,&quot;hoge&quot;,&quot;huga&quot;]\n        var json = MessagePackSerializer.ConvertToJson(bytes);\n        Console.WriteLine(json);\n    }\n}\n</code></pre>\n<p>By default, a <code>MessagePackObject</code> annotation is required. This can be made optional; see the <a href=\"#object-serialization\">Object Serialization section</a> and the <a href=\"#resolvers\">Formatter Resolver section</a> for details.</p>\n<h6>Analyzer</h6>\n<p>The MessagePackAnalyzer package(includes in default) aids with:</p>\n<ol>\n<li>Produces compiler warnings upon incorrect attribute use, member accessibility, and more.</li>\n<li>Automating attributing of your serializable classes and members.</li>\n<li>Optionally improving startup time through <a href=\"#aot\">AOT formatter generation</a>.</li>\n</ol>\n<p>The first two of these features is demonstrated below:</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/46207/23837445/ce734eae-07cb-11e7-9758-d69f0f095bc1.gif\" alt=\"analyzergif\"></p>\n<p>Two assembly-level attributes exist to help with mixing in your own custom formatters with the automatically generated ones:</p>\n<ul>\n<li><code>MessagePackKnownFormatterAttribute</code> - Identifies classes that implement <code>IMessagePackFormatter&lt;T&gt;</code>.\nThe <code>T</code> type argument will <em>not</em> produce an analyzer warning when <code>T</code> is used elsewhere in a serializable object.\nWhen using a source generated resolver, the resolver will refer to this formatter for the appropriate type(s).</li>\n<li><code>MessagePackAssumedFormattableAttribute</code> - Identifies types that are assumed to have an <code>IMessagePackFormatter&lt;T&gt;</code> <em>somewhere</em>, and that will be combined within an <code>IFormatterResolver</code> at runtime to ensure the specified type can be serialized.\nThis attribute will suppress the analyzer warning from using that type although the type does not have a <code>[MessagePackObject]</code> attribute on it.</li>\n</ul>\n<h6>Built-in supported types</h6>\n<p>These types can serialize by default:</p>\n<ul>\n<li>Primitives (<code>int</code>, <code>string</code>, etc...), <code>Enum</code>s, <code>Nullable&lt;&gt;</code>, <code>Lazy&lt;&gt;</code></li>\n<li><code>TimeSpan</code>,  <code>DateTime</code>, <code>DateTimeOffset</code></li>\n<li><code>Guid</code>, <code>Uri</code>, <code>Version</code>, <code>StringBuilder</code></li>\n<li><code>BigInteger</code>, <code>Complex</code>, <code>Half</code></li>\n<li><code>Array[]</code>, <code>Array[,]</code>, <code>Array[,,]</code>, <code>Array[,,,]</code>, <code>ArraySegment&lt;&gt;</code>, <code>BitArray</code></li>\n<li><code>KeyValuePair&lt;,&gt;</code>, <code>Tuple&lt;,...&gt;</code>, <code>ValueTuple&lt;,...&gt;</code></li>\n<li><code>ArrayList</code>, <code>Hashtable</code></li>\n<li><code>List&lt;&gt;</code>, <code>LinkedList&lt;&gt;</code>, <code>Queue&lt;&gt;</code>, <code>Stack&lt;&gt;</code>, <code>HashSet&lt;&gt;</code>, <code>ReadOnlyCollection&lt;&gt;</code>, <code>SortedList&lt;,&gt;</code></li>\n<li><code>IList&lt;&gt;</code>, <code>ICollection&lt;&gt;</code>, <code>IEnumerable&lt;&gt;</code>, <code>IReadOnlyCollection&lt;&gt;</code>, <code>IReadOnlyList&lt;&gt;</code></li>\n<li><code>Dictionary&lt;,&gt;</code>, <code>IDictionary&lt;,&gt;</code>, <code>SortedDictionary&lt;,&gt;</code>, <code>ILookup&lt;,&gt;</code>, <code>IGrouping&lt;,&gt;</code>, <code>ReadOnlyDictionary&lt;,&gt;</code>, <code>IReadOnlyDictionary&lt;,&gt;</code></li>\n<li><code>ObservableCollection&lt;&gt;</code>, <code>ReadOnlyObservableCollection&lt;&gt;</code></li>\n<li><code>ISet&lt;&gt;</code>,</li>\n<li><code>ConcurrentBag&lt;&gt;</code>, <code>ConcurrentQueue&lt;&gt;</code>, <code>ConcurrentStack&lt;&gt;</code>, <code>ConcurrentDictionary&lt;,&gt;</code></li>\n<li>Immutable collections (<code>ImmutableList&lt;&gt;</code>, etc)</li>\n<li>Custom implementations of <code>ICollection&lt;&gt;</code> or <code>IDictionary&lt;,&gt;</code> with a parameterless constructor</li>\n<li>Custom implementations of <code>IList</code> or <code>IDictionary</code> with a parameterless constructor</li>\n</ul>\n<p>You can add support for custom types, and there are some official/third-party extension packages for:</p>\n<ul>\n<li>ReactiveProperty</li>\n<li>for Unity (<code>Vector3</code>, <code>Quaternion</code>, etc...)</li>\n<li>F# (Record, FsList, Discriminated Unions, etc...)</li>\n</ul>\n<p>Please see the <a href=\"#extensions\">extensions section</a>.</p>\n<p><code>MessagePack.Nil</code> is the built-in type representing null/void in MessagePack for C#.</p>\n<h6>Object Serialization</h6>\n<p>MessagePack for C# can serialize your own public <code>class</code> or <code>struct</code> types. By default, serializable types must be annotated with the <code>[MessagePackObject]</code> attribute and members with the <code>[Key]</code> attribute. Keys can be either indexes (<code>int</code>) or arbitrary strings. If all keys are indexes, arrays are used for serialization, which offers advantages in performance and binary size. Otherwise, MessagePack maps (dictionaries) will be used.</p>\n<p>If you use <code>[MessagePackObject(keyAsPropertyName: true)]</code>, then members do not require explicit <code>Key</code> attributes, but string keys will be used.</p>\n<pre><code class=\"language-csharp\">[MessagePackObject]\npublic class Sample1\n{\n    [Key(0)]\n    public int Foo { get; set; }\n    [Key(1)]\n    public int Bar { get; set; }\n}\n\n[MessagePackObject]\npublic class Sample2\n{\n    [Key(&quot;foo&quot;)]\n    public int Foo { get; set; }\n    [Key(&quot;bar&quot;)]\n    public int Bar { get; set; }\n}\n\n[MessagePackObject(keyAsPropertyName: true)]\npublic class Sample3\n{\n    // No need for a Key attribute\n    public int Foo { get; set; }\n\n    // If want to ignore a public member, you can use the  IgnoreMember attribute\n    [IgnoreMember]\n    public int Bar { get; set; }\n}\n\n// [10,20]\nConsole.WriteLine(MessagePackSerializer.SerializeToJson(new Sample1 { Foo = 10, Bar = 20 }));\n\n// {&quot;foo&quot;:10,&quot;bar&quot;:20}\nConsole.WriteLine(MessagePackSerializer.SerializeToJson(new Sample2 { Foo = 10, Bar = 20 }));\n\n// {&quot;Foo&quot;:10}\nConsole.WriteLine(MessagePackSerializer.SerializeToJson(new Sample3 { Foo = 10, Bar = 20 }));\n</code></pre>\n<p>All public instance members (fields as well as properties) will be serialized. If you want to ignore certain public members, annotate the member with a <code>[IgnoreMember]</code> attribute.</p>\n<p>Please note that any serializable struct or class must have public accessibility; private and internal structs and classes cannot be serialized!\nThe default of requiring <code>MessagePackObject</code> annotations is meant to enforce explicitness and therefore may help write more robust code.</p>\n<p>Should you use an indexed (<code>int</code>) key or a string key?\nWe recommend using indexed keys for faster serialization and a more compact binary representation than string keys.\nHowever, the additional information in the strings of string keys can be quite useful when debugging.</p>\n<p>When classes change or are extended, be careful about versioning. <code>MessagePackSerializer</code> will initialize members to their <code>default</code> value if a key does not exist in the serialized binary blob, meaning members using reference types can be initialized to <code>null</code>.\nIf you use indexed (<code>int</code>) keys, the keys should start at 0 and should be sequential. If a later version stops using certain members, you should keep the obsolete members (C# provides an <code>Obsolete</code> attribute to annotate such members) until all other clients had a chance to update and remove their uses of these members as well. Also, when the values of indexed keys &quot;jump&quot; a lot, leaving gaps in the sequence, it will negatively affect the binary size, as <code>null</code> placeholders will be inserted into the resulting arrays. However, you shouldn't reuse indexes of removed members to avoid compatibility issues between clients or when trying to deserialize legacy blobs.</p>\n<p>Example of index gaps and resulting placeholders:</p>\n<pre><code class=\"language-csharp\">[MessagePackObject]\npublic class IntKeySample\n{\n    [Key(3)]\n    public int A { get; set; }\n    [Key(10)]\n    public int B { get; set; }\n}\n\n// [null,null,null,0,null,null,null,null,null,null,0]\nConsole.WriteLine(MessagePackSerializer.SerializeToJson(new IntKeySample()));\n</code></pre>\n<p>If you do not want to explicitly annotate with the <code>MessagePackObject</code>/<code>Key</code> attributes and instead want to use MessagePack for C# more like e.g. <a href=\"https://github.com/JamesNK/Newtonsoft.Json\">Json.NET</a>, you can make use of the contractless resolver.</p>\n<pre><code class=\"language-csharp\">public class ContractlessSample\n{\n    public int MyProperty1 { get; set; }\n    public int MyProperty2 { get; set; }\n}\n\nvar data = new ContractlessSample { MyProperty1 = 99, MyProperty2 = 9999 };\nvar bin = MessagePackSerializer.Serialize(\n  data,\n  MessagePack.Resolvers.ContractlessStandardResolver.Options);\n\n// {&quot;MyProperty1&quot;:99,&quot;MyProperty2&quot;:9999}\nConsole.WriteLine(MessagePackSerializer.ConvertToJson(bin));\n\n// You can also set ContractlessStandardResolver as the default.\n// (Global state; Not recommended when writing library code)\nMessagePackSerializer.DefaultOptions = MessagePack.Resolvers.ContractlessStandardResolver.Options;\n\n// Now serializable...\nvar bin2 = MessagePackSerializer.Serialize(data);\n</code></pre>\n<p>If you want to serialize private members as well, you can use one of the <code>*AllowPrivate</code> resolvers.</p>\n<pre><code class=\"language-csharp\">[MessagePackObject]\npublic class PrivateSample\n{\n    [Key(0)]\n    int x;\n\n    public void SetX(int v)\n    {\n        x = v;\n    }\n\n    public int GetX()\n    {\n        return x;\n    }\n}\n\nvar data = new PrivateSample();\ndata.SetX(9999);\n\n// You can choose either StandardResolverAllowPrivate\n// or ContractlessStandardResolverAllowPrivate\nvar bin = MessagePackSerializer.Serialize(\n  data,\n  MessagePack.Resolvers.DynamicObjectResolverAllowPrivate.Options);\n</code></pre>\n<p>If you want to use MessagePack for C# more like a BinaryFormatter with a typeless serialization API, use the typeless resolver and helpers. Please consult the <a href=\"#typeless\">Typeless section</a>.</p>\n<p>Resolvers are the way to add specialized support for custom types to MessagePack for C#. Please refer to the <a href=\"#resolvers\">Extension point section</a>.</p>\n<h6>DataContract compatibility</h6>\n<p>You can use <code>[DataContract]</code> annotations instead of <code>[MessagePackObject]</code> ones. If type is annotated with <code>DataContract</code>, you can use <code>[DataMember]</code> annotations instead of <code>[Key]</code> ones and <code>[IgnoreDataMember]</code> instead of <code>[IgnoreMember]</code>.</p>\n<p>Then <code>[DataMember(Order = int)]</code> will behave the same as <code>[Key(int)]</code>, <code>[DataMember(Name = string)]</code> the same as <code>[Key(string)]</code>, and <code>[DataMember]</code> the same as <code>[Key(nameof(member name)]</code>.</p>\n<p>Using <code>DataContract</code>, e.g. in shared libraries, makes your classes/structs independent from MessagePack for C# serialization.\nHowever, it is not supported by the analyzers nor source generator.\nAlso, features like <code>UnionAttribute</code>, <code>MessagePackFormatter</code>, <code>SerializationConstructor</code>, etc can not be used.\nDue to this, we recommend that you use the specific MessagePack for C# annotations when possible.</p>\n<h6>Serializing readonly/immutable object members  (SerializationConstructor)</h6>\n<p>MessagePack for C# supports serialization of readonly/immutable objects/members. For example, this struct can be serialized and deserialized.</p>\n<pre><code class=\"language-csharp\">[MessagePackObject]\npublic struct Point\n{\n    [Key(0)]\n    public readonly int X;\n    [Key(1)]\n    public readonly int Y;\n\n    public Point(int x, int y)\n    {\n        this.X = x;\n        this.Y = y;\n    }\n}\n\nvar data = new Point(99, 9999);\nvar bin = MessagePackSerializer.Serialize(data);\n\n// Okay to deserialize immutable object\nvar point = MessagePackSerializer.Deserialize&lt;Point&gt;(bin);\n</code></pre>\n<p><code>MessagePackSerializer</code> will choose the constructor with the best matched argument list, using argument indexes index for index keys, or parameter names for string keys. If it cannot determine an appropriate constructor, a <code>MessagePackDynamicObjectResolverException: can't find matched constructor parameter</code> exception will be thrown.\nYou can specify which constructor to use manually with a <code>[SerializationConstructor]</code> annotation.</p>\n<pre><code class=\"language-csharp\">[MessagePackObject]\npublic struct Point\n{\n    [Key(0)]\n    public readonly int X;\n    [Key(1)]\n    public readonly int Y;\n\n    [SerializationConstructor]\n    public Point(int x)\n    {\n        this.X = x;\n        this.Y = -1;\n    }\n\n    // If not marked attribute, used this(most matched argument)\n    public Point(int x, int y)\n    {\n        this.X = x;\n        this.Y = y;\n    }\n}\n</code></pre>\n<h7>C# 9 <code>record</code> types</h7>\n<p>C# 9.0 record with primary constructor is similar immutable object, also supports serialize/deserialize.</p>\n<pre><code class=\"language-csharp\">// use key as property name\n[MessagePackObject(true)]public record Point(int X, int Y);\n\n// use property: to set KeyAttribute\n[MessagePackObject] public record Point([property:Key(0)] int X, [property: Key(1)] int Y);\n\n// Or use explicit properties\n[MessagePackObject]\npublic record Person\n{\n    [Key(0)]\n    public string FirstName { get; init; }\n\n    [Key(1)]\n    public string LastName { get; init; }\n}\n</code></pre>\n<h7>C# 9 <code>init</code> property setter limitations</h7>\n<p>When using <code>init</code> property setters in <em>generic</em> classes, <a href=\"https://github.com/neuecc/MessagePack-CSharp/issues/1134\">a CLR bug</a> prevents our most efficient code generation from invoking the property setter.\nAs a result, you should avoid using <code>init</code> on property setters in generic classes when using the public-only <code>DynamicObjectResolver</code>/<code>StandardResolver</code>.</p>\n<p>When using the <code>DynamicObjectResolverAllowPrivate</code>/<code>StandardResolverAllowPrivate</code> resolver the bug does not apply and you may use <code>init</code> without restriction.</p>\n<h6>Serialization Callback</h6>\n<p>Objects implementing the <code>IMessagePackSerializationCallbackReceiver</code> interface will received <code>OnBeforeSerialize</code> and <code>OnAfterDeserialize</code> calls during serialization/deserialization.</p>\n<pre><code class=\"language-csharp\">[MessagePackObject]\npublic class SampleCallback : IMessagePackSerializationCallbackReceiver\n{\n    [Key(0)]\n    public int Key { get; set; }\n\n    public void OnBeforeSerialize()\n    {\n        Console.WriteLine(&quot;OnBefore&quot;);\n    }\n\n    public void OnAfterDeserialize()\n    {\n        Console.WriteLine(&quot;OnAfter&quot;);\n    }\n}\n</code></pre>\n<h6>Union</h6>\n<p>MessagePack for C# supports serializing interface-typed and abstract class-typed objects. It behaves like <code>XmlInclude</code> or <code>ProtoInclude</code>. In MessagePack for C# these are called <code>Union</code>. Only interfaces and abstracts classes are allowed to be annotated with <code>Union</code> attributes. Unique union keys are required.</p>\n<pre><code class=\"language-csharp\">// Annotate inheritance types\n[MessagePack.Union(0, typeof(FooClass))]\n[MessagePack.Union(1, typeof(BarClass))]\npublic interface IUnionSample\n{\n}\n\n[MessagePackObject]\npublic class FooClass : IUnionSample\n{\n    [Key(0)]\n    public int XYZ { get; set; }\n}\n\n[MessagePackObject]\npublic class BarClass : IUnionSample\n{\n    [Key(0)]\n    public string OPQ { get; set; }\n}\n\n// ---\n\nIUnionSample data = new FooClass() { XYZ = 999 };\n\n// Serialize interface-typed object.\nvar bin = MessagePackSerializer.Serialize(data);\n\n// Deserialize again.\nvar reData = MessagePackSerializer.Deserialize&lt;IUnionSample&gt;(bin);\n\n// Use with e.g. type-switching in C# 7.0\nswitch (reData)\n{\n    case FooClass x:\n        Console.WriteLine(x.XYZ);\n        break;\n    case BarClass x:\n        Console.WriteLine(x.OPQ);\n        break;\n    default:\n        break;\n}\n</code></pre>\n<p>Unions are internally serialized to two-element arrays.</p>\n<pre><code class=\"language-csharp\">IUnionSample data = new BarClass { OPQ = &quot;FooBar&quot; };\n\nvar bin = MessagePackSerializer.Serialize(data);\n\n// Union is serialized to two-length array, [key, object]\n// [1,[&quot;FooBar&quot;]]\nConsole.WriteLine(MessagePackSerializer.ConvertToJson(bin));\n</code></pre>\n<p>Using <code>Union</code> with abstract classes works the same way.</p>\n<pre><code class=\"language-csharp\">[Union(0, typeof(SubUnionType1))]\n[Union(1, typeof(SubUnionType2))]\n[MessagePackObject]\npublic abstract class ParentUnionType\n{\n    [Key(0)]\n    public int MyProperty { get; set; }\n}\n\n[MessagePackObject]\npublic class SubUnionType1 : ParentUnionType\n{\n    [Key(1)]\n    public int MyProperty1 { get; set; }\n}\n\n[MessagePackObject]\npublic class SubUnionType2 : ParentUnionType\n{\n    [Key(1)]\n    public int MyProperty2 { get; set; }\n}\n</code></pre>\n<p>Please be mindful that you cannot reuse the same keys in derived types that are already present in the parent type, as internally a single flat array or map will be used and thus cannot have duplicate indexes/keys.</p>\n<h6>Dynamic (Untyped) Deserialization</h6>\n<p>When calling <code>MessagePackSerializer.Deserialize&lt;object&gt;</code> or <code>MessagePackSerializer.Deserialize&lt;dynamic&gt;</code>, any values present in the blob will be converted to primitive values, i.e. <code>bool</code>, <code>char</code>, <code>sbyte</code>, <code>byte</code>, <code>short</code>, <code>int</code>, <code>long</code>, <code>ushort</code>, <code>uint</code>, <code>ulong</code>, <code>float</code>, <code>double</code>, <code>DateTime</code>, <code>string</code>, <code>byte[]</code>, <code>object[]</code>, <code>IDictionary&lt;object, object&gt;</code>.</p>\n<pre><code class=\"language-csharp\">// Sample blob.\nvar model = new DynamicModel { Name = &quot;foobar&quot;, Items = new[] { 1, 10, 100, 1000 } };\nvar blob = MessagePackSerializer.Serialize(model, ContractlessStandardResolver.Options);\n\n// Dynamic (&quot;untyped&quot;)\nvar dynamicModel = MessagePackSerializer.Deserialize&lt;dynamic&gt;(blob, ContractlessStandardResolver.Options);\n\n// You can access the data using array/dictionary indexers, as shown above\nConsole.WriteLine(dynamicModel[&quot;Name&quot;]); // foobar\nConsole.WriteLine(dynamicModel[&quot;Items&quot;][2]); // 100\n</code></pre>\n<p>Exploring object trees using the dictionary indexer syntax is the fastest option for untyped deserialization, but it is tedious to read and write.\nWhere performance is not as important as code readability, consider deserializing with <a href=\"doc/ExpandoObject.md\">ExpandoObject</a>.</p>\n<h6>Object Type Serialization</h6>\n<p><code>StandardResolver</code> and <code>ContractlessStandardResolver</code> can serialize <code>object</code>/anonymous typed objects.</p>\n<pre><code class=\"language-csharp\">var objects = new object[] { 1, &quot;aaa&quot;, new ObjectFieldType { Anything = 9999 } };\nvar bin = MessagePackSerializer.Serialize(objects);\n\n// [1,&quot;aaa&quot;,[9999]]\nConsole.WriteLine(MessagePackSerializer.ConvertToJson(bin));\n\n// Support anonymous Type Serialize\nvar anonType = new { Foo = 100, Bar = &quot;foobar&quot; };\nvar bin2 = MessagePackSerializer.Serialize(anonType, MessagePack.Resolvers.ContractlessStandardResolver.Options);\n\n// {&quot;Foo&quot;:100,&quot;Bar&quot;:&quot;foobar&quot;}\nConsole.WriteLine(MessagePackSerializer.ConvertToJson(bin2));\n</code></pre>\n<blockquote>\n<p>Unity supports is limited.</p>\n</blockquote>\n<p>When deserializing, the behavior will be the same as Dynamic (Untyped) Deserialization.</p>\n<h6>Typeless</h6>\n<p>The typeless API is similar to <code>BinaryFormatter</code>, as it will embed type information into the blobs, so no types need to be specified explicitly when calling the API.</p>\n<pre><code class=\"language-csharp\">object mc = new Sandbox.MyClass()\n{\n    Age = 10,\n    FirstName = &quot;hoge&quot;,\n    LastName = &quot;huga&quot;\n};\n\n// Serialize with the typeless API\nvar blob = MessagePackSerializer.Typeless.Serialize(mc);\n\n// Blob has embedded type-assembly information.\n// [&quot;Sandbox.MyClass, Sandbox&quot;,10,&quot;hoge&quot;,&quot;huga&quot;]\nConsole.WriteLine(MessagePackSerializer.ConvertToJson(bin));\n\n// You can deserialize to MyClass again with the typeless API\n// Note that no type has to be specified explicitly in the Deserialize call\n// as type information is embedded in the binary blob\nvar objModel = MessagePackSerializer.Typeless.Deserialize(bin) as MyClass;\n</code></pre>\n<p>Type information is represented by the MessagePack <code>ext</code> format, type code <code>100</code>.</p>\n<p><code>MessagePackSerializer.Typeless</code> is a shortcut of <code>Serialize/Deserialize&lt;object&gt;(TypelessContractlessStandardResolver.Instance)</code>.\nIf you want to configure it as the default resolver, you can use <code>MessagePackSerializer.Typeless.RegisterDefaultResolver</code>.</p>\n<p><code>TypelessFormatter</code> can used standalone or combined with other resolvers.</p>\n<pre><code class=\"language-csharp\">// Replaced `object` uses the typeless resolver\nvar resolver = MessagePack.Resolvers.CompositeResolver.Create(\n    new[] { MessagePack.Formatters.TypelessFormatter.Instance },\n    new[] { MessagePack.Resolvers.StandardResolver.Instance });\n\npublic class Foo\n{\n    // use Typeless(this field only)\n    [MessagePackFormatter(typeof(TypelessFormatter))]\n    public object Bar;\n}\n</code></pre>\n<p>If a type's name is changed later, you can no longer deserialize old blobs. But you can specify a fallback name in such cases, providing a <code>TypelessFormatter.BindToType</code> function of your own.</p>\n<pre><code class=\"language-csharp\">MessagePack.Formatters.TypelessFormatter.BindToType = typeName =&gt;\n{\n    if (typeName.StartsWith(&quot;SomeNamespace&quot;))\n    {\n        typeName = typeName.Replace(&quot;SomeNamespace&quot;, &quot;AnotherNamespace&quot;);\n    }\n\n    return Type.GetType(typeName, false);\n};\n</code></pre>\n<h6><a name=\"security\"></a>Security</h6>\n<p>Deserializing data from an untrusted source can introduce security vulnerabilities in your application.\nDepending on the settings used during deserialization, <strong>untrusted data may be able to execute arbitrary code</strong> or cause a denial of service attack.\nUntrusted data might come from over the network from an untrusted source (e.g. any and every networked client) or can be tampered with by an intermediary when transmitted over an unauthenticated connection, or from a local storage that might have been tampered with, or many other sources. MessagePack for C# does not provide any means to authenticate data or make it tamper-resistant. Please use an appropriate method of authenticating data before deserialization - such as a <a href=\"https://en.wikipedia.org/wiki/Message_authentication_code\"><code>MAC</code></a> .</p>\n<p>Please be very mindful of these attack scenarios; many projects and companies, and serialization library users in general, have been bitten by untrusted user data deserialization in the past.</p>\n<p>When deserializing untrusted data, put MessagePack into a more secure mode by configuring your <code>MessagePackSerializerOptions.Security</code> property:</p>\n<pre><code class=\"language-cs\">var options = MessagePackSerializerOptions.Standard\n    .WithSecurity(MessagePackSecurity.UntrustedData);\n\n// Pass the options explicitly for the greatest control.\nT object = MessagePackSerializer.Deserialize&lt;T&gt;(data, options);\n\n// Or set the security level as the default.\nMessagePackSerializer.DefaultOptions = options;\n</code></pre>\n<p>You should also avoid the Typeless serializer/formatters/resolvers for untrusted data as that opens the door for the untrusted data to potentially deserialize unanticipated types that can compromise security.</p>\n<p>The <code>UntrustedData</code> mode merely hardens against some common attacks, but is no fully secure solution in itself.</p>\n<h6>Performance</h6>\n<p>Benchmarks comparing MessagePack For C# to other serializers were run on <code>Windows 10 Pro x64 Intel Core i7-6700K 4.00GHz, 32GB RAM</code>. Benchmark code is <a href=\"https://github.com/neuecc/ZeroFormatter/tree/master/sandbox/PerformanceComparison\">available here</a> - and their <a href=\"https://github.com/neuecc/ZeroFormatter/blob/bc63cb925d/sandbox/PerformanceComparison/packages.config\">version info</a>.\n<a href=\"https://github.com/neuecc/ZeroFormatter/\">ZeroFormatter</a> and <a href=\"https://google.github.io/flatbuffers/\">FlatBuffers</a> have infinitely fast deserializers, so ignore their deserialization performance.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/46207/23835765/55fe494e-07b0-11e7-98be-5e7a9411da40.png\" alt=\"image\"></p>\n<p>MessagePack for C# uses many techniques to improve performance.</p>\n<ul>\n<li>The serializer uses <code>IBufferWriter&lt;byte&gt;</code> rather than <code>System.IO.Stream</code> to reduce memory overhead.</li>\n<li>Buffers are rented from pools to reduce allocations, keeping throughput high through reduced GC pressure.</li>\n<li>Don't create intermediate utility instances (<code>*Writer/*Reader</code>, <code>*Context</code>, etc...)</li>\n<li>Utilize dynamic code generation and JIT to avoid boxing value types. Use AOT generation on platforms that prohibit JITs.</li>\n<li>Cached generated formatters on static generic fields (don't use dictionary-cache because dictionary lookup is overhead). See <a href=\"https://github.com/neuecc/MessagePack-CSharp/tree/209f301e2e595ed366408624011ba2e856d23429/src/MessagePack/Resolvers\">Resolvers</a></li>\n<li>Heavily tuned dynamic IL code generation and JIT to avoid boxing value types. See <a href=\"https://github.com/neuecc/MessagePack-CSharp/blob/209f301e2e595ed366408624011ba2e856d23429/src/MessagePack/Resolvers/DynamicObjectResolver.cs#L142-L754\">DynamicObjectTypeBuilder</a>. Use AOT generation on platforms that prohibit JIT.</li>\n<li>Call the Primitive API directly when IL code generation determines target types to be  primitive.</li>\n<li>Reduce branching of variable length formats when IL code generation knows the target type (integer/string) ranges</li>\n<li>Don't use the <code>IEnumerable&lt;T&gt;</code> abstraction to iterate over collections when possible, <a href=\"https://github.com/neuecc/MessagePack-CSharp/blob/209f301e2e595ed366408624011ba2e856d23429/src/MessagePack/Formatters/CollectionFormatter.cs#L192-L355\">see: CollectionFormatterBase</a> and derived collection formatters</li>\n<li>Use pre-generated lookup tables to reduce checks of mgpack type constraints, <a href=\"https://github.com/neuecc/MessagePack-CSharp/blob/209f301e2e595ed366408624011ba2e856d23429/src/MessagePack/MessagePackBinary.cs#L15-L212\">see: MessagePackBinary</a></li>\n<li>Uses optimized type key dictionary for non-generic methods, <a href=\"https://github.com/neuecc/MessagePack-CSharp/blob/91312921cb7fe987f48336768c898a76ac7dbb40/src/MessagePack/Internal/ThreadsafeTypeKeyHashTable.cs\">see: ThreadsafeTypeKeyHashTable</a></li>\n<li>Avoid string key decoding for lookup maps (string key and use automata based name lookup with inlined IL code generation, see: <a href=\"https://github.com/neuecc/MessagePack-CSharp/blob/bcedbce3fd98cb294210d6b4a22bdc4c75ccd916/src/MessagePack/Internal/AutomataDictionary.cs\">AutomataDictionary</a></li>\n<li>To encode string keys, use pre-generated member name bytes and fixed sized byte array copies in IL, see: <a href=\"https://github.com/neuecc/MessagePack-CSharp/blob/f17ddc5d107d3a2f66f60398b214ef87919ff892/src/MessagePack/Internal/UnsafeMemory.cs\">UnsafeMemory.cs</a></li>\n</ul>\n<p>Before creating this library, I implemented a fast serializer with <a href=\"https://github.com/neuecc/ZeroFormatter#performance\">ZeroFormatter#Performance</a>. This is a further evolved implementation. MessagePack for C# is always fast and optimized for all types (primitive, small struct, large object, any collections).</p>\n<h7><a name=\"deserialize-performance\"></a>Deserialization Performance for different options</h7>\n<p>Performance varies depending on the options used. This is a micro benchmark with <a href=\"https://github.com/dotnet/BenchmarkDotNet\">BenchmarkDotNet</a>. The target object has 9 members (<code>MyProperty1</code> ~ <code>MyProperty9</code>), values are zero.</p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th style=\"text-align:right\">Mean</th>\n<th style=\"text-align:right\">Error</th>\n<th style=\"text-align:right\">Scaled</th>\n<th style=\"text-align:right\">Gen 0</th>\n<th style=\"text-align:right\">Allocated</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>M IntKey</td>\n<td style=\"text-align:right\">72.67 ns</td>\n<td style=\"text-align:right\">NA</td>\n<td style=\"text-align:right\">1.00</td>\n<td style=\"text-align:right\">0.0132</td>\n<td style=\"text-align:right\">56 B</td>\n</tr>\n<tr>\n<td>M StringKey</td>\n<td style=\"text-align:right\">217.95 ns</td>\n<td style=\"text-align:right\">NA</td>\n<td style=\"text-align:right\">3.00</td>\n<td style=\"text-align:right\">0.0131</td>\n<td style=\"text-align:right\">56 B</td>\n</tr>\n<tr>\n<td>M Typeless_IntKey</td>\n<td style=\"text-align:right\">176.71 ns</td>\n<td style=\"text-align:right\">NA</td>\n<td style=\"text-align:right\">2.43</td>\n<td style=\"text-align:right\">0.0131</td>\n<td style=\"text-align:right\">56 B</td>\n</tr>\n<tr>\n<td>M Typeless_StringKey</td>\n<td style=\"text-align:right\">378.64 ns</td>\n<td style=\"text-align:right\">NA</td>\n<td style=\"text-align:right\">5.21</td>\n<td style=\"text-align:right\">0.0129</td>\n<td style=\"text-align:right\">56 B</td>\n</tr>\n<tr>\n<td>MsgPackCliMap</td>\n<td style=\"text-align:right\">1,355.26 ns</td>\n<td style=\"text-align:right\">NA</td>\n<td style=\"text-align:right\">18.65</td>\n<td style=\"text-align:right\">0.1431</td>\n<td style=\"text-align:right\">608 B</td>\n</tr>\n<tr>\n<td>MsgPackCliArray</td>\n<td style=\"text-align:right\">455.28 ns</td>\n<td style=\"text-align:right\">NA</td>\n<td style=\"text-align:right\">6.26</td>\n<td style=\"text-align:right\">0.0415</td>\n<td style=\"text-align:right\">176 B</td>\n</tr>\n<tr>\n<td>ProtobufNet</td>\n<td style=\"text-align:right\">265.85 ns</td>\n<td style=\"text-align:right\">NA</td>\n<td style=\"text-align:right\">3.66</td>\n<td style=\"text-align:right\">0.0319</td>\n<td style=\"text-align:right\">136 B</td>\n</tr>\n<tr>\n<td>Hyperion</td>\n<td style=\"text-align:right\">366.47 ns</td>\n<td style=\"text-align:right\">NA</td>\n<td style=\"text-align:right\">5.04</td>\n<td style=\"text-align:right\">0.0949</td>\n<td style=\"text-align:right\">400 B</td>\n</tr>\n<tr>\n<td>JsonNetString</td>\n<td style=\"text-align:right\">2,783.39 ns</td>\n<td style=\"text-align:right\">NA</td>\n<td style=\"text-align:right\">38.30</td>\n<td style=\"text-align:right\">0.6790</td>\n<td style=\"text-align:right\">2864 B</td>\n</tr>\n<tr>\n<td>JsonNetStreamReader</td>\n<td style=\"text-align:right\">3,297.90 ns</td>\n<td style=\"text-align:right\">NA</td>\n<td style=\"text-align:right\">45.38</td>\n<td style=\"text-align:right\">1.4267</td>\n<td style=\"text-align:right\">6000 B</td>\n</tr>\n<tr>\n<td>JilString</td>\n<td style=\"text-align:right\">553.65 ns</td>\n<td style=\"text-align:right\">NA</td>\n<td style=\"text-align:right\">7.62</td>\n<td style=\"text-align:right\">0.0362</td>\n<td style=\"text-align:right\">152 B</td>\n</tr>\n<tr>\n<td>JilStreamReader</td>\n<td style=\"text-align:right\">1,408.46 ns</td>\n<td style=\"text-align:right\">NA</td>\n<td style=\"text-align:right\">19.38</td>\n<td style=\"text-align:right\">0.8450</td>\n<td style=\"text-align:right\">3552 B</td>\n</tr>\n</tbody>\n</table>\n<p><code>IntKey</code>, <code>StringKey</code>, <code>Typeless_IntKey</code>, <code>Typeless_StringKey</code> are MessagePack for C# options. All MessagePack for C# options achieve zero memory allocations in the deserialization process. <code>JsonNetString</code>/<code>JilString</code> is deserialized from strings. <code>JsonNetStreamReader</code>/<code>JilStreamReader</code> is deserialized from UTF-8 byte arrays using <code>StreamReader</code>. Deserialization is normally read from Stream. Thus, it will be restored from byte arrays (or Stream) instead of strings.</p>\n<p>MessagePack for C# <code>IntKey</code> is the fastest. <code>StringKey</code> is slower than <code>IntKey</code> because matching the character string of property names is required. <code>IntKey</code> works by reading the array length, then <code>for (array length) { binary decode }</code>. <code>StringKey</code> works by reading map length, <code>for (map length) { decode key, lookup key, binary decode }</code>, so it requires an additional two steps (decoding of keys and lookups of keys).</p>\n<p>String key is often a useful, contractless, simple replacement of JSON, interoperability with other languages, and more robust versioning. MessagePack for C# is also optimized for string keys as much a possible. First of all, it does not decode UTF-8 byte arrays to full string for matching with the member name; instead it will look up the byte arrays as it is (to avoid decoding costs and extra memory allocations).</p>\n<p>And It will try to match each <code>long type</code> (per 8 character, if it is not enough, pad with 0) using <a href=\"https://en.wikipedia.org/wiki/Automata_theory\">automata</a> and inline it when generating IL code.</p>\n<p><img src=\"https://user-images.githubusercontent.com/46207/29754771-216b40e2-8bc7-11e7-8310-1c3602e80a08.png\" alt=\"image\"></p>\n<p>This also avoids calculating the hash code of byte arrays, and the comparison can be made several times faster using the long type.</p>\n<p>This is the sample of decompiled generated deserializer code, decompiled using <a href=\"http://ilspy.net/\">ILSpy</a>.</p>\n<p><img src=\"https://user-images.githubusercontent.com/46207/29754804-b5ba0f44-8bc7-11e7-9f6b-0c8f3c041237.png\" alt=\"image\"></p>\n<p>If the number of nodes is large, searches will use an embedded binary search.</p>\n<p>Extra note, this is serialization benchmark result.</p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th style=\"text-align:right\">Mean</th>\n<th style=\"text-align:right\">Error</th>\n<th style=\"text-align:right\">Scaled</th>\n<th style=\"text-align:right\">Gen 0</th>\n<th style=\"text-align:right\">Allocated</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>IntKey</td>\n<td style=\"text-align:right\">84.11 ns</td>\n<td style=\"text-align:right\">NA</td>\n<td style=\"text-align:right\">1.00</td>\n<td style=\"text-align:right\">0.0094</td>\n<td style=\"text-align:right\">40 B</td>\n</tr>\n<tr>\n<td>StringKey</td>\n<td style=\"text-align:right\">126.75 ns</td>\n<td style=\"text-align:right\">NA</td>\n<td style=\"text-align:right\">1.51</td>\n<td style=\"text-align:right\">0.0341</td>\n<td style=\"text-align:right\">144 B</td>\n</tr>\n<tr>\n<td>Typeless_IntKey</td>\n<td style=\"text-align:right\">183.31 ns</td>\n<td style=\"text-align:right\">NA</td>\n<td style=\"text-align:right\">2.18</td>\n<td style=\"text-align:right\">0.0265</td>\n<td style=\"text-align:right\">112 B</td>\n</tr>\n<tr>\n<td>Typeless_StringKey</td>\n<td style=\"text-align:right\">193.95 ns</td>\n<td style=\"text-align:right\">NA</td>\n<td style=\"text-align:right\">2.31</td>\n<td style=\"text-align:right\">0.0513</td>\n<td style=\"text-align:right\">216 B</td>\n</tr>\n<tr>\n<td>MsgPackCliMap</td>\n<td style=\"text-align:right\">967.68 ns</td>\n<td style=\"text-align:right\">NA</td>\n<td style=\"text-align:right\">11.51</td>\n<td style=\"text-align:right\">0.1297</td>\n<td style=\"text-align:right\">552 B</td>\n</tr>\n<tr>\n<td>MsgPackCliArray</td>\n<td style=\"text-align:right\">284.20 ns</td>\n<td style=\"text-align:right\">NA</td>\n<td style=\"text-align:right\">3.38</td>\n<td style=\"text-align:right\">0.1006</td>\n<td style=\"text-align:right\">424 B</td>\n</tr>\n<tr>\n<td>ProtobufNet</td>\n<td style=\"text-align:right\">176.43 ns</td>\n<td style=\"text-align:right\">NA</td>\n<td style=\"text-align:right\">2.10</td>\n<td style=\"text-align:right\">0.0665</td>\n<td style=\"text-align:right\">280 B</td>\n</tr>\n<tr>\n<td>Hyperion</td>\n<td style=\"text-align:right\">280.14 ns</td>\n<td style=\"text-align:right\">NA</td>\n<td style=\"text-align:right\">3.33</td>\n<td style=\"text-align:right\">0.1674</td>\n<td style=\"text-align:right\">704 B</td>\n</tr>\n<tr>\n<td>ZeroFormatter</td>\n<td style=\"text-align:right\">149.95 ns</td>\n<td style=\"text-align:right\">NA</td>\n<td style=\"text-align:right\">1.78</td>\n<td style=\"text-align:right\">0.1009</td>\n<td style=\"text-align:right\">424 B</td>\n</tr>\n<tr>\n<td>JsonNetString</td>\n<td style=\"text-align:right\">1,432.55 ns</td>\n<td style=\"text-align:right\">NA</td>\n<td style=\"text-align:right\">17.03</td>\n<td style=\"text-align:right\">0.4616</td>\n<td style=\"text-align:right\">1944 B</td>\n</tr>\n<tr>\n<td>JsonNetStreamWriter</td>\n<td style=\"text-align:right\">1,775.72 ns</td>\n<td style=\"text-align:right\">NA</td>\n<td style=\"text-align:right\">21.11</td>\n<td style=\"text-align:right\">1.5526</td>\n<td style=\"text-align:right\">6522 B</td>\n</tr>\n<tr>\n<td>JilString</td>\n<td style=\"text-align:right\">547.51 ns</td>\n<td style=\"text-align:right\">NA</td>\n<td style=\"text-align:right\">6.51</td>\n<td style=\"text-align:right\">0.3481</td>\n<td style=\"text-align:right\">1464 B</td>\n</tr>\n<tr>\n<td>JilStreamWriter</td>\n<td style=\"text-align:right\">778.78 ns</td>\n<td style=\"text-align:right\">NA</td>\n<td style=\"text-align:right\">9.26</td>\n<td style=\"text-align:right\">1.4448</td>\n<td style=\"text-align:right\">6066 B</td>\n</tr>\n</tbody>\n</table>\n<p>Of course, <code>IntKey</code> is fastest but <code>StringKey</code> also performs reasonably well.</p>\n<h7><a name=\"string-interning\"></a>String interning</h7>\n<p>The msgpack format does not provide for reusing strings in the data stream.\nThis naturally leads the deserializer to create a new <code>string</code> object for every string encountered,\neven if it is equal to another string previously encountered.</p>\n<p>When deserializing data that may contain the same strings repeatedly it can be worthwhile\nto have the deserializer take a little extra time to check whether it has seen a given string before\nand reuse it if it has.</p>\n<p>To enable string interning on <em>all</em> string values, use a resolver that specifies <code>StringInterningFormatter</code>\nbefore any of the standard ones, like this:</p>\n<pre><code class=\"language-cs\">var options = MessagePackSerializerOptions.Standard.WithResolver(\n    CompositeResolver.Create(\n        new IMessagePackFormatter[] { new StringInterningFormatter() },\n        new IFormatterResolver[] { StandardResolver.Instance }));\n\nMessagePackSerializer.Deserialize&lt;ClassOfStrings&gt;(data, options);\n</code></pre>\n<p>If you know which fields of a particular type are likely to contain duplicate strings,\nyou can apply the string interning formatter to just those fields so the deserializer only pays\nfor the interned string check where it matters most.\nNote that this technique requires a <code>[MessagePackObject]</code> or <code>[DataContract]</code> class.</p>\n<pre><code class=\"language-cs\">[MessagePackObject]\npublic class ClassOfStrings\n{\n    [Key(0)]\n    [MessagePackFormatter(typeof(StringInterningFormatter))]\n    public string InternedString { get; set; }\n\n    [Key(1)]\n    public string OrdinaryString { get; set; }\n}\n</code></pre>\n<p>If you are writing your own formatter for some type that contains strings,\nyou can call on the <code>StringInterningFormatter</code> directly from your formatter as well for the strings.</p>\n<h6>LZ4 Compression</h6>\n<p>MessagePack is a fast and <em>compact</em> format but it is not compression. <a href=\"https://github.com/lz4/lz4\">LZ4</a> is an extremely fast compression algorithm, and using it MessagePack for C# can achieve extremely fast performance as well as extremely compact binary sizes!</p>\n<p>MessagePack for C# has built-in LZ4 support. You can activate it using a modified options object and passing it into an API like this:</p>\n<pre><code class=\"language-cs\">var lz4Options = MessagePackSerializerOptions.Standard.WithCompression(MessagePackCompression.Lz4BlockArray);\nMessagePackSerializer.Serialize(obj, lz4Options);\n</code></pre>\n<p><code>MessagePackCompression</code> has two modes, <code>Lz4Block</code> and <code>Lz4BlockArray</code>. Neither is a simple binary LZ4 compression, but a special compression integrated into the serialization pipeline, using MessagePack <code>ext</code> code (<code>Lz4BlockArray (98)</code> or <code>Lz4Block (99)</code>). Therefore, it is not readily compatible with compression offered in other languages.</p>\n<p><code>Lz4Block</code> compresses an entire MessagePack sequence as a single LZ4 block. This is the simple compression that achieves best compression ratio, at the cost of copying the entire sequence when necessary to get contiguous memory.</p>\n<p><code>Lz4BlockArray</code> compresses an entire MessagePack sequence as a array of LZ4 blocks. Compressed/decompressed blocks are  chunked and thus do not enter the GC's Large-Object-Heap, but the compression ratio is slightly worse.</p>\n<p>We recommend to use <code>Lz4BlockArray</code> as the default when using compression.\nFor compatibility with MessagePack v1.x, use <code>Lz4Block</code>.</p>\n<p>Regardless of which LZ4 option is set at the deserialization, both methods can be deserialized. For example, when the <code>Lz4BlockArray</code> option was used, binary data using either <code>Lz4Block</code> and <code>Lz4BlockArray</code> can be deserialized. Neither can be decompressed and hence deserialized when the compression option is set to <code>None</code>.</p>\n<h7>Attributions</h7>\n<p>LZ4 compression support is using Milosz Krajewski's <a href=\"https://github.com/MiloszKrajewski/lz4net\">lz4net</a> code with some modifications.</p>\n<h6><a name=\"comparison\"></a>Comparison with protobuf, JSON, ZeroFormatter</h6>\n<p><a href=\"https://github.com/mgravell/protobuf-net\">protobuf-net</a> is major, widely used binary-format library on .NET. I love protobuf-net and respect their great work. But when you use protobuf-net as a general purpose serialization format, you may encounter an annoying issue.</p>\n<pre><code class=\"language-csharp\">[ProtoContract]\npublic class Parent\n{\n    [ProtoMember(1)]\n    public int Primitive { get; set; }\n    [ProtoMember(2)]\n    public Child Prop { get; set; }\n    [ProtoMember(3)]\n    public int[] Array { get; set; }\n}\n\n[ProtoContract]\npublic class Child\n{\n    [ProtoMember(1)]\n    public int Number { get; set; }\n}\n\nusing (var ms = new MemoryStream())\n{\n    // serialize null.\n    ProtoBuf.Serializer.Serialize&lt;Parent&gt;(ms, null);\n\n    ms.Position = 0;\n    var result = ProtoBuf.Serializer.Deserialize&lt;Parent&gt;(ms);\n\n    Console.WriteLine(result != null); // True, not null. but all property are zero formatted.\n    Console.WriteLine(result.Primitive); // 0\n    Console.WriteLine(result.Prop); // null\n    Console.WriteLine(result.Array); // null\n}\n\nusing (var ms = new MemoryStream())\n{\n    // serialize empty array.\n    ProtoBuf.Serializer.Serialize&lt;Parent&gt;(ms, new Parent { Array = System.Array.Empty&lt;int&gt;() });\n\n    ms.Position = 0;\n    var result = ProtoBuf.Serializer.Deserialize&lt;Parent&gt;(ms);\n\n    Console.WriteLine(result.Array == null); // True, null!\n}\n</code></pre>\n<p>protobuf(-net) cannot handle null and empty collection correctly, because protobuf has no <code>null</code> representation (see <a href=\"https://stackoverflow.com/questions/21631428/protobuf-net-deserializes-empty-collection-to-null-when-the-collection-is-a-prop/21632160#21632160\">this SO answer from a protobuf-net author</a>).</p>\n<p><a href=\"https://github.com/msgpack/msgpack/blob/master/spec.md#type-system\">MessagePack's type system</a> can correctly serialize the entire C# type system. This is a strong reason to recommend MessagePack over protobuf.</p>\n<p>Protocol Buffers have good IDL and <a href=\"https://www.grpc.io/\">gRPC</a> support. If you want to use IDL, I recommend <a href=\"https://github.com/google/protobuf/tree/master/csharp/src/Google.Protobuf\">Google.Protobuf</a> over MessagePack.</p>\n<p>JSON is good general-purpose format. It is simple, human-readable and thoroughly-enough specified. <a href=\"https://github.com/neuecc/Utf8Json\">Utf8Json</a> - which I created as well - adopts same architecture as MessagePack for C# and avoids encoding/decoding costs as much as possible just like this library does. If you want to know more about binary vs text formats, see <a href=\"https://github.com/neuecc/Utf8Json#which-serializer-should-be-used\">Utf8Json/which serializer should be used</a>.</p>\n<p><a href=\"https://github.com/neuecc/ZeroFormatter/\">ZeroFormatter</a> is similar as <a href=\"https://google.github.io/flatbuffers/\">FlatBuffers</a> but specialized to C#, and special in that regard. Deserialization is infinitely fast but the produced binary size is larger. And ZeroFormatter's caching algorithm requires additional memory.</p>\n<p>For many common uses, MessagePack for C# would be a better fit.</p>\n<h6>Hints to achieve maximum performance when using MessagePack for C#</h6>\n<p>MessagePack for C# prioritizes maximum performance by default. However, there are also some options that sacrifice performance for convenience.</p>\n<h7>Use indexed keys instead of string keys (Contractless)</h7>\n<p>The <a href=\"https://github.com/neuecc/MessagePack-CSharp#deserialize-performance\">Deserialization Performance for different options</a> section shows the results of indexed keys (<code>IntKey</code>) vs string keys (<code>StringKey</code>) performance. Indexed keys serialize the object graph as a MessagePack array. String keys serializes the object graph as a MessagePack map.</p>\n<p>For example this type is serialized to</p>\n<pre><code class=\"language-csharp\">[MessagePackObject]\npublic class Person\n{\n    [Key(0)] or [Key(&quot;name&quot;)]\n    public string Name { get; set;}\n    [Key(1)] or [Key(&quot;age&quot;)]\n    public int Age { get; set;}\n}\n\nnew Person { Name = &quot;foobar&quot;, Age = 999 }\n</code></pre>\n<ul>\n<li><code>IntKey</code>: <code>[&quot;foobar&quot;, 999]</code></li>\n<li><code>StringKey</code>: <code>{&quot;name:&quot;foobar&quot;,&quot;age&quot;:999}</code>.</li>\n</ul>\n<p><code>IntKey</code> is always fast in both serialization and deserialization because it does not have to handle and lookup key names, and always has the smaller binary size.</p>\n<p><code>StringKey</code> is often a useful, contractless, simple replacement for JSON, interoperability with other languages with MessagePack support, and less error prone versioning. But to achieve maximum performance, use <code>IntKey</code>.</p>\n<h7>Create own custom composite resolver</h7>\n<p><code>CompositeResolver.Create</code> is an easy way to create composite resolvers. But formatter lookups have some overhead. If you create a custom resolver (or use <code>StaticCompositeResolver.Instance</code>), you can avoid this overhead.</p>\n<pre><code class=\"language-csharp\">public class MyApplicationResolver : IFormatterResolver\n{\n    public static readonly IFormatterResolver Instance = new MyApplicationResolver();\n\n    // configure your custom resolvers.\n    private static readonly IFormatterResolver[] Resolvers = new IFormatterResolver[]\n    {\n    };\n\n    private MyApplicationResolver() { }\n\n    public IMessagePackFormatter&lt;T&gt; GetFormatter&lt;T&gt;()\n    {\n        return Cache&lt;T&gt;.Formatter;\n    }\n\n    private static class Cache&lt;T&gt;\n    {\n        public static IMessagePackFormatter&lt;T&gt; Formatter;\n\n        static Cache()\n        {\n            // configure your custom formatters.\n            if (typeof(T) == typeof(XXX))\n            {\n                Formatter = new ICustomFormatter();\n                return;\n            }\n\n            foreach (var resolver in Resolvers)\n            {\n                var f = resolver.GetFormatter&lt;T&gt;();\n                if (f != null)\n                {\n                    Formatter = f;\n                    return;\n                }\n            }\n        }\n    }\n}\n</code></pre>\n<blockquote>\n<p>NOTE: If you are creating a library, recommend using the above custom resolver instead of <code>CompositeResolver.Create</code>. Also, libraries must not use <code>StaticCompositeResolver</code> - as it is global state - to avoid compatibility issues.</p>\n</blockquote>\n<h7>Use native resolvers</h7>\n<p>By default, MessagePack for C# serializes GUID as string. This is much slower than the native .NET format GUID. The same applies to Decimal. If your application makes heavy use of GUID or Decimal and you don't have to worry about interoperability with other languages, you can replace them with the native serializers <code>NativeGuidResolver</code> and <code>NativeDecimalResolver</code> respectively.</p>\n<p>Also, <code>DateTime</code> is serialized using the MessagePack timestamp format. By using the <code>NativeDateTimeResolver</code>, it is possible to maintain Kind and perform faster serialization.</p>\n<h7>Be careful when copying buffers</h7>\n<p><code>MessagePackSerializer.Serialize</code> returns <code>byte[]</code> in default. The final <code>byte[]</code> is copied from an internal buffer pool. That is an extra cost.  You can use <code>IBufferWriter&lt;T&gt;</code> or the <code>Stream</code> API to write to buffers directly. If you want to use a buffer pool outside of the serializer, you should implement custom <code>IBufferWriter&lt;byte&gt;</code> or use an existing one such as <a href=\"https://github.com/AArnott/Nerdbank.Streams/blob/master/doc/Sequence.md\"><code>Sequence&lt;T&gt;</code></a> from the <a href=\"https://nuget.org/packages/Nerdbank.Streams\">Nerdbank.Streams</a> package.</p>\n<p>During deserialization, <code>MessagePackSerializer.Deserialize(ReadOnlyMemory&lt;byte&gt; buffer)</code> is better than the <code>Deserialize(Stream stream)</code> overload. This is because the Stream API version starts by reading the data, generating a <code>ReadOnlySequence&lt;byte&gt;</code>, and only then starts the deserialization.</p>\n<h7>Choosing compression</h7>\n<p>Compression is generally effective when there is duplicate data. In MessagePack, arrays containing objects using string keys (Contractless) can be compressed efficiently because compression can be applied to many duplicate property names. Indexed keys compression is not as effectively compressed as string keys, but indexed keys are smaller in the first place.</p>\n<p>This is some example benchmark performance data;</p>\n<table>\n<thead>\n<tr>\n<th>Serializer</th>\n<th style=\"text-align:right\">Mean</th>\n<th style=\"text-align:right\">DataSize</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>IntKey</td>\n<td style=\"text-align:right\">2.941 us</td>\n<td style=\"text-align:right\">469.00 B</td>\n</tr>\n<tr>\n<td>IntKey(Lz4)</td>\n<td style=\"text-align:right\">3.449 us</td>\n<td style=\"text-align:right\">451.00 B</td>\n</tr>\n<tr>\n<td>StringKey</td>\n<td style=\"text-align:right\">4.340 us</td>\n<td style=\"text-align:right\">1023.00 B</td>\n</tr>\n<tr>\n<td>StringKey(Lz4)</td>\n<td style=\"text-align:right\">5.469 us</td>\n<td style=\"text-align:right\">868.00 B</td>\n</tr>\n</tbody>\n</table>\n<p><code>IntKey(Lz4)</code> is not as effectively compressed, but performance is still somewhat degraded. On the other hand, <code>StringKey</code> can be expected to have a sufficient effect on the binary size. However, this is just an example. Compression can be quite effective depending on the data, too, or have little effect other than slowing down your program. There are also cases in which well-compressible data exists in the values (such as long strings, e.g. containing HTML data with many repeated HTML tags). It is important to verify the actual effects of compression on a case by case basis.</p>\n<h6>Extensions</h6>\n<p>MessagePack for C# has extension points that enable you to provide optimal serialization support for custom types. There are official extension support packages.</p>\n<pre><code class=\"language-ps1\">Install-Package MessagePack.ReactiveProperty\nInstall-Package MessagePack.UnityShims\nInstall-Package MessagePack.AspNetCoreMvcFormatter\n</code></pre>\n<p>The <code>MessagePack.ReactiveProperty</code> package adds support for types of the <a href=\"https://github.com/runceel/ReactiveProperty\">ReactiveProperty</a> library. It adds <code>ReactiveProperty&lt;&gt;</code>, <code>IReactiveProperty&lt;&gt;</code>, <code>IReadOnlyReactiveProperty&lt;&gt;</code>, <code>ReactiveCollection&lt;&gt;</code>, <code>Unit</code> serialization support. It is useful for save viewmodel state.</p>\n<p>The <code>MessagePack.UnityShims</code> package provides shims for <a href=\"https://unity3d.com/\">Unity</a>'s standard structs (<code>Vector2</code>, <code>Vector3</code>, <code>Vector4</code>, <code>Quaternion</code>, <code>Color</code>, <code>Bounds</code>, <code>Rect</code>, <code>AnimationCurve</code>, <code>Keyframe</code>, <code>Matrix4x4</code>, <code>Gradient</code>, <code>Color32</code>, <code>RectOffset</code>, <code>LayerMask</code>, <code>Vector2Int</code>, <code>Vector3Int</code>, <code>RangeInt</code>, <code>RectInt</code>, <code>BoundsInt</code>) and corresponding formatters. It can enable proper communication between servers and Unity clients.</p>\n<p>After installation, extension packages must be enabled, by creating composite resolvers. Here is an example showing how to enable all extensions.</p>\n<pre><code class=\"language-csharp\">// Set extensions to default resolver.\nvar resolver = MessagePack.Resolvers.CompositeResolver.Create(\n    // enable extension packages first\n    ReactivePropertyResolver.Instance,\n    MessagePack.Unity.Extension.UnityBlitResolver.Instance,\n    MessagePack.Unity.UnityResolver.Instance,\n\n    // finally use standard (default) resolver\n    StandardResolver.Instance\n);\nvar options = MessagePackSerializerOptions.Standard.WithResolver(resolver);\n\n// Pass options every time or set as default\nMessagePackSerializer.DefaultOptions = options;\n</code></pre>\n<p>For configuration details, see: <a href=\"#resolvers\">Extension Point section</a>.</p>\n<p>The <code>MessagePack.AspNetCoreMvcFormatter</code> is add-on for <a href=\"https://github.com/aspnet/Mvc\">ASP.NET Core MVC</a>'s serialization to boost up performance. This is configuration sample.</p>\n<pre><code class=\"language-csharp\">public void ConfigureServices(IServiceCollection services)\n{\n    services.AddMvc().AddMvcOptions(option =&gt;\n    {\n        option.OutputFormatters.Clear();\n        option.OutputFormatters.Add(new MessagePackOutputFormatter(ContractlessStandardResolver.Options));\n        option.InputFormatters.Clear();\n        option.InputFormatters.Add(new MessagePackInputFormatter(ContractlessStandardResolver.Options));\n    });\n}\n</code></pre>\n<p>Other authors are creating extension packages, too.</p>\n<ul>\n<li><a href=\"https://github.com/Cysharp/MagicOnion\">MagicOnion</a> - gRPC based HTTP/2 RPC Streaming Framework</li>\n<li><a href=\"https://github.com/Cysharp/MasterMemory\">MasterMemory</a> - Embedded Readonly In-Memory Document Database</li>\n</ul>\n<p>You can make your own extension serializers or integrate with frameworks. Let's create and share!</p>\n<ul>\n<li><a href=\"https://github.com/pocketberserker/MessagePack.FSharpExtensions\">MessagePack.FSharpExtensions</a> - supports F# list, set, map, unit, option, discriminated union</li>\n<li><a href=\"https://github.com/ARKlab/MessagePack\">MessagePack.NodaTime</a> - Support for NodaTime types to MessagePack C#</li>\n<li><a href=\"https://github.com/WebApiContrib/WebAPIContrib.Core#formatters\">WebApiContrib.Core.Formatter.MessagePack</a> - supports ASP.NET Core MVC (<a href=\"https://www.strathweb.com/2017/06/using-messagepack-with-asp-net-core-mvc/\">details in blog post</a>)</li>\n<li><a href=\"https://github.com/sketch7/MessagePack.MediaTypeFormatter\">MessagePack.MediaTypeFormatter</a> - MessagePack MediaTypeFormatter</li>\n</ul>\n<h6>Experimental Features</h6>\n<p>MessagePack for C# has experimental features which provides you with very performant formatters. There is an official package.</p>\n<pre><code class=\"language-ps1\">Install-Package MessagePack.Experimental\n</code></pre>\n<p>For detailed information, see: <a href=\"src/MessagePack.Experimental/Experimental.md\">Experimental.md</a></p>\n<h5>API</h5>\n<h6>High-Level API (<code>MessagePackSerializer</code>)</h6>\n<p>The <code>MessagePackSerializer</code> class is the entry point of MessagePack for C#. Static methods make up the main API of MessagePack for C#.</p>\n<table>\n<thead>\n<tr>\n<th>API</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Serialize&lt;T&gt;</code></td>\n<td>Serializes an object graph to a MessagePack binary blob. Async variant for Stream available. Non-generic overloads available.</td>\n</tr>\n<tr>\n<td><code>Deserialize&lt;T&gt;</code></td>\n<td>Deserializes a MessagePack binary to an object graph. Async variant for Stream available. Non-generic overloads available.</td>\n</tr>\n<tr>\n<td><code>SerializeToJson</code></td>\n<td>Serialize a MessagePack-compatible object graph to JSON instead of MessagePack. Useful for debugging.</td>\n</tr>\n<tr>\n<td><code>ConvertToJson</code></td>\n<td>Convert MessagePack binary to JSON. Useful for debugging.</td>\n</tr>\n<tr>\n<td><code>ConvertFromJson</code></td>\n<td>Convert JSON to a MessagePack binary.</td>\n</tr>\n</tbody>\n</table>\n<p>The <code>MessagePackSerializer.Typeless</code> class offers most of the same APIs as above, but removes all type arguments from the API, forcing serialization to include the full type name of the root object. It uses the <code>TypelessContractlessStandardResolver</code>. Consider the result to be a .NET-specific MessagePack binary that isn't readily compatible with MessagePack deserializers in other runtimes.</p>\n<p>MessagePack for C# fundamentally serializes using <code>IBufferWriter&lt;byte&gt;</code> and deserializes using <code>ReadOnlySequence&lt;byte&gt;</code> or <code>Memory&lt;byte&gt;</code>. Method overloads are provided to conveniently use it with common buffer types and the .NET <code>Stream</code> class, but some of these convenience overloads require copying buffers once and therefore have a certain overhead.</p>\n<p>The high-level API uses a memory pool internally to avoid unnecessary memory allocation. If result size is under 64K, it allocates GC memory only for the return bytes.</p>\n<p>Each serialize/deserialize method takes an optional <code>MessagePackSerializerOptions</code> parameter which can be used to specify a custom <code>IFormatterResolver</code> to use or to activate LZ4 compression support.</p>\n<h7>Multiple MessagePack structures on a single <code>Stream</code></h7>\n<p>To deserialize a <code>Stream</code> that contains multiple consecutive MessagePack data structures,\nyou can use the <code>MessagePackStreamReader</code> class to efficiently identify the <code>ReadOnlySequence&lt;byte&gt;</code>\nfor each data structure and deserialize it. For example:</p>\n<pre><code class=\"language-cs\">static async Task&lt;List&lt;T&gt;&gt; DeserializeListFromStreamAsync&lt;T&gt;(Stream stream, CancellationToken cancellationToken)\n{\n    var dataStructures = new List&lt;T&gt;();\n    using (var streamReader = new MessagePackStreamReader(stream))\n    {\n        while (await streamReader.ReadAsync(cancellationToken) is ReadOnlySequence&lt;byte&gt; msgpack)\n        {\n            dataStructures.Add(MessagePackSerializer.Deserialize&lt;T&gt;(msgpack, cancellationToken: cancellationToken));\n        }\n    }\n\n    return dataStructures;\n}\n</code></pre>\n<h6>Low-Level API (<code>IMessagePackFormatter&lt;T&gt;</code>)</h6>\n<p>The <code>IMessagePackFormatter&lt;T&gt;</code> interface is responsible for serializing a unique type. For example <code>Int32Formatter : IMessagePackFormatter&lt;Int32&gt;</code> represents Int32 MessagePack serializer.</p>\n<pre><code class=\"language-csharp\">public interface IMessagePackFormatter&lt;T&gt;\n{\n    void Serialize(ref MessagePackWriter writer, T value, MessagePackSerializerOptions options);\n    T Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options);\n}\n</code></pre>\n<p>Many built-in formatters exists under <code>MessagePack.Formatters</code>. Your custom types are usually automatically supported with the built-in type resolvers that generate new <code>IMessagePackFormatter&lt;T&gt;</code> types on-the-fly using dynamic code generation. See our <a href=\"#aot\">AOT code generation</a> support for platforms that do not support this.</p>\n<p>However, some types - especially those provided by third party libraries or the runtime itself - cannot be appropriately annotated, and contractless serialization would produce inefficient or even wrong results.\nTo take more control over the serialization of such custom types, write your own <code>IMessagePackFormatter&lt;T&gt;</code> implementation.\nHere is an example of such a custom formatter implementation. Note its use of the primitive API that is described in the next section.</p>\n<pre><code class=\"language-csharp\">/// &lt;summary&gt;Serializes a &lt;see cref=&quot;FileInfo&quot; /&gt; by its full path as a string.&lt;/summary&gt;\npublic class FileInfoFormatter : IMessagePackFormatter&lt;FileInfo&gt;\n{\n    public void Serialize(\n      ref MessagePackWriter writer, FileInfo value, MessagePackSerializerOptions options)\n    {\n        if (value == null)\n        {\n            writer.WriteNil();\n            return;\n        }\n\n        writer.WriteString(value.FullName);\n    }\n\n    public FileInfo Deserialize(\n      ref MessagePackReader reader, MessagePackSerializerOptions options)\n    {\n        if (reader.TryReadNil())\n        {\n            return null;\n        }\n\n        options.Security.DepthStep(ref reader);\n\n        var path = reader.ReadString();\n\n        reader.Depth--;\n        return new FileInfo(path);\n    }\n}\n</code></pre>\n<p>The <code>DepthStep</code> and <code>Depth--</code> statements provide a level of security while deserializing untrusted data\nthat might otherwise be able to execute a denial of service attack by sending MessagePack data that would\ndeserialize into a very deep object graph leading to a <code>StackOverflowException</code> that would crash the process.\nThis pair of statements should surround the bulk of any <code>IMessagePackFormatter&lt;T&gt;.Deserialize</code> method.</p>\n<p><strong>Important</strong>: A message pack formatter must <em>read or write exactly one data structure</em>.\nIn the above example we just read/write a string. If you have more than one element to write out,\nyou must precede it with a map or array header. You must read the entire map/array when deserializing.\nFor example:</p>\n<pre><code class=\"language-csharp\">public class MySpecialObjectFormatter : IMessagePackFormatter&lt;MySpecialObject&gt;\n{\n    public void Serialize(\n      ref MessagePackWriter writer, MySpecialObject value, MessagePackSerializerOptions options)\n    {\n        if (value == null)\n        {\n            writer.WriteNil();\n            return;\n        }\n\n        writer.WriteArrayHeader(2);\n        writer.WriteString(value.FullName);\n        writer.WriteString(value.Age);\n    }\n\n    public MySpecialObject Deserialize(\n      ref MessagePackReader reader, MessagePackSerializerOptions options)\n    {\n        if (reader.TryReadNil())\n        {\n            return null;\n        }\n\n        options.Security.DepthStep(ref reader);\n\n        string fullName = null;\n        int age = 0;\n\n        // Loop over *all* array elements independently of how many we expect,\n        // since if we're serializing an older/newer version of this object it might\n        // vary in number of elements that were serialized, but the contract of the formatter\n        // is that exactly one data structure must be read, regardless.\n        // Alternatively, we could check that the size of the array/map is what we expect\n        // and throw if it is not.\n        int count = reader.ReadArrayHeader();\n        for (int i = 0; i &lt; count; i++)\n        {\n            switch (i)\n            {\n                case 0:\n                    fullName = reader.ReadString();\n                    break;\n                case 1:\n                    age = reader.ReadInt32();\n                    break;\n                default:\n                    reader.Skip();\n                    break;\n            }\n        }\n\n        reader.Depth--;\n        return new MySpecialObject(fullName, age);\n    }\n}\n</code></pre>\n<p>Your custom formatters must be discoverable via some <code>IFormatterResolver</code>. Learn more in our <a href=\"#resolvers\">resolvers</a> section.</p>\n<p>You can see many other samples from <a href=\"https://github.com/neuecc/MessagePack-CSharp/tree/master/src/MessagePack/Formatters\">builtin formatters</a>.</p>\n<h6>Primitive API (<code>MessagePackWriter</code>, <code>MessagePackReader</code>)</h6>\n<p>The <code>MessagePackWriter</code> and <code>MessagePackReader</code> structs make up the lowest-level API. They read and write the primitives types defined in the MessagePack specification.</p>\n<h7><code>MessagePackReader</code></h7>\n<p>A <code>MessagePackReader</code> can efficiently read from <code>ReadOnlyMemory&lt;byte&gt;</code> or <code>ReadOnlySequence&lt;byte&gt;</code> without any allocations, except to allocate a new <code>string</code> as required by the <code>ReadString()</code> method. All other methods return either value structs or <code>ReadOnlySequence&lt;byte&gt;</code> slices for extensions/arrays.\nReading directly from <code>ReadOnlySequence&lt;byte&gt;</code> means the reader can directly consume some modern high performance APIs such as <code>PipeReader</code>.</p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Skip</code></td>\n<td>Advances the reader's position past the current value. If the value is complex (e.g. map, array) the entire structure is skipped.</td>\n</tr>\n<tr>\n<td><code>Read*</code></td>\n<td>Read and return a value whose type is named by the method name from the current reader position. Throws if the expected type does not match the actual type. When reading numbers, the type need not match the binary-specified type exactly. The numeric value will be coerced into the desired type or throw if the integer type is too small for a large value.</td>\n</tr>\n<tr>\n<td><code>TryReadNil</code></td>\n<td>Advances beyond the current value if the current value is <code>nil</code> and returns <code>true</code>; otherwise leaves the reader's position unchanged and returns <code>false</code>.</td>\n</tr>\n<tr>\n<td><code>ReadBytes</code></td>\n<td>Returns a slice of the input sequence representing the contents of a <code>byte[]</code>, and advances the reader.</td>\n</tr>\n<tr>\n<td><code>ReadStringSequence</code></td>\n<td>Returns a slice of the input sequence representing the contents of a <code>string</code> without decoding it, and advances the reader.</td>\n</tr>\n<tr>\n<td><code>Clone</code></td>\n<td>Creates a new <code>MessagePackReader</code> with the specified input sequence and the same settings as the original reader.</td>\n</tr>\n<tr>\n<td><code>CreatePeekReader</code></td>\n<td>Creates a new reader with the same position as this one, allowing the caller to &quot;read ahead&quot; without impacting the original reader's position.</td>\n</tr>\n<tr>\n<td><code>NextCode</code></td>\n<td>Reads the low-level MessagePack <code>byte</code> that describes the type of the next value. Does not advance the reader. See <a href=\"https://github.com/msgpack/msgpack/blob/master/spec.md#overview\">MessagePack format of first byte</a>. Its static class has <code>ToMessagePackType</code> and <code>ToFormatName</code> utility methods. <code>MessagePackRange</code> means Min-Max fix range of MessagePack format.</td>\n</tr>\n<tr>\n<td><code>NextMessagePackType</code></td>\n<td>Describes the <code>NextCode</code> value as a higher level category. Does not advance the reader. See <a href=\"https://github.com/msgpack/msgpack/blob/master/spec.md#serialization-type-to-format-conversion\">MessagePack spec of source types</a>.</td>\n</tr>\n<tr>\n<td>(others)</td>\n<td>Other methods and properties as described by the .xml doc comment file and Intellisense.</td>\n</tr>\n</tbody>\n</table>\n<p>The <code>MessagePackReader</code> is capable of automatically interpreting both the old and new MessagePack spec.</p>\n<h7><code>MessagePackWriter</code></h7>\n<p>A <code>MessagePackWriter</code> writes to a given instance of <code>IBufferWriter&lt;byte&gt;</code>. Several common implementations of this exist, allowing zero allocations and minimal buffer copies while writing directly to several I/O APIs including <code>PipeWriter</code>.</p>\n<p>The <code>MessagePackWriter</code> writes the new MessagePack spec by default, but can write MessagePack compatible with the old spec by setting the <code>OldSpec</code> property to <code>true</code>.</p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Clone</code></td>\n<td>Creates a new <code>MessagePackWriter</code> with the specified underlying <code>IBufferWriter&lt;byte&gt;</code> and the same settings as the original writer.</td>\n</tr>\n<tr>\n<td><code>Flush</code></td>\n<td>Writes any buffered bytes to the underlying <code>IBufferWriter&lt;byte&gt;</code>.</td>\n</tr>\n<tr>\n<td><code>WriteNil</code></td>\n<td>Writes the MessagePack equivalent of .NET's <code>null</code> value.</td>\n</tr>\n<tr>\n<td><code>Write</code></td>\n<td>Writes any MessagePack primitive value in the most compact form possible. Has overloads for every primitive type defined by the MessagePack spec.</td>\n</tr>\n<tr>\n<td><code>Write*IntType*</code></td>\n<td>Writes an integer value in exactly the MessagePack type specified, even if a more compact format exists.</td>\n</tr>\n<tr>\n<td><code>WriteMapHeader</code></td>\n<td>Introduces a map by specifying the number of key=value pairs it contains.</td>\n</tr>\n<tr>\n<td><code>WriteArrayHeader</code></td>\n<td>Introduces an array by specifying the number of elements it contains.</td>\n</tr>\n<tr>\n<td><code>WriteExtensionFormat</code></td>\n<td>Writes the full content of an extension value including length, type code and content.</td>\n</tr>\n<tr>\n<td><code>WriteExtensionFormatHeader</code></td>\n<td>Writes just the header (length and type code) of an extension value.</td>\n</tr>\n<tr>\n<td><code>WriteRaw</code></td>\n<td>Copies the specified bytes directly to the underlying <code>IBufferWriter&lt;byte&gt;</code> without any validation.</td>\n</tr>\n<tr>\n<td>(others)</td>\n<td>Other methods and properties as described by the .xml doc comment file and Intellisense.</td>\n</tr>\n</tbody>\n</table>\n<p><code>DateTime</code> is serialized to <a href=\"https://github.com/msgpack/msgpack/blob/master/spec.md#formats-timestamp\">MessagePack Timestamp format</a>, it serialize/deserialize UTC and loses <code>Kind</code> info and requires that <code>MessagePackWriter.OldSpec == false</code>.\nIf you use the <code>NativeDateTimeResolver</code>, <code>DateTime</code> values will be serialized using .NET's native <code>Int64</code> representation, which preserves <code>Kind</code> info but may not be interoperable with non-.NET platforms.</p>\n<h6><a name=\"resolvers\"></a>Main Extension Point (<code>IFormatterResolver</code>)</h6>\n<p>An <code>IFormatterResolver</code> is storage of typed serializers. The <code>MessagePackSerializer</code> API accepts a <code>MessagePackSerializerOptions</code> object which specifies the <code>IFormatterResolver</code> to use, allowing customization of the serialization of complex types.</p>\n<table>\n<thead>\n<tr>\n<th>Resolver Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>BuiltinResolver</td>\n<td>Builtin primitive and standard classes resolver. It includes primitive(int, bool, string...) and there nullable, array and list. and some extra builtin types(<code>Guid</code>, <code>Uri</code>, <code>BigInteger</code>, etc...).</td>\n</tr>\n<tr>\n<td>StandardResolver</td>\n<td>Composited resolver. It resolves in the following order <code>builtin -&gt; attribute -&gt; dynamic enum -&gt; dynamic generic -&gt; dynamic union -&gt; dynamic object -&gt; dynamic object fallback</code>. This is the default of MessagePackSerializer.</td>\n</tr>\n<tr>\n<td>ContractlessStandardResolver</td>\n<td>Composited <code>StandardResolver</code>(except dynamic object fallback) -&gt; <code>DynamicContractlessObjectResolver</code> -&gt; <code>DynamicObjectTypeFallbackResolver</code>. It enables contractless serialization.</td>\n</tr>\n<tr>\n<td>StandardResolverAllowPrivate</td>\n<td>Same as StandardResolver but allow serialize/deserialize private members.</td>\n</tr>\n<tr>\n<td>ContractlessStandardResolverAllowPrivate</td>\n<td>Same as ContractlessStandardResolver but allow serialize/deserialize private members.</td>\n</tr>\n<tr>\n<td>PrimitiveObjectResolver</td>\n<td>MessagePack primitive object resolver. It is used fallback in <code>object</code> type and supports <code>bool</code>, <code>char</code>, <code>sbyte</code>, <code>byte</code>, <code>short</code>, <code>int</code>, <code>long</code>, <code>ushort</code>, <code>uint</code>, <code>ulong</code>, <code>float</code>, <code>double</code>, <code>DateTime</code>, <code>string</code>, <code>byte[]</code>, <code>ICollection</code>, <code>IDictionary</code>.</td>\n</tr>\n<tr>\n<td>DynamicObjectTypeFallbackResolver</td>\n<td>Serialize is used type in from <code>object</code> type, deserialize is used PrimitiveObjectResolver.</td>\n</tr>\n<tr>\n<td>AttributeFormatterResolver</td>\n<td>Get formatter from <code>[MessagePackFormatter]</code> attribute.</td>\n</tr>\n<tr>\n<td>CompositeResolver</td>\n<td>Composes several resolvers and/or formatters together in an ordered list, allowing reuse and overriding of behaviors of existing resolvers and formatters.</td>\n</tr>\n<tr>\n<td>NativeDateTimeResolver</td>\n<td>Serialize by .NET native DateTime binary format. It keeps <code>DateTime.Kind</code> that loses by standard(MessagePack timestamp) format.</td>\n</tr>\n<tr>\n<td>NativeGuidResolver</td>\n<td>Serialize by .NET native Guid binary representation. It is faster than standard(string) representation.</td>\n</tr>\n<tr>\n<td>NativeDecimalResolver</td>\n<td>Serialize by .NET native decimal binary representation. It is faster than standard(string) representation.</td>\n</tr>\n<tr>\n<td>DynamicEnumResolver</td>\n<td>Resolver of enum and there nullable, serialize there underlying type. It uses dynamic code generation to avoid boxing and boostup performance serialize there name.</td>\n</tr>\n<tr>\n<td>DynamicEnumAsStringResolver</td>\n<td>Resolver of enum and there nullable.  It uses reflection call for resolve nullable at first time.</td>\n</tr>\n<tr>\n<td>DynamicGenericResolver</td>\n<td>Resolver of generic type(<code>Tuple&lt;&gt;</code>, <code>List&lt;&gt;</code>, <code>Dictionary&lt;,&gt;</code>, <code>Array</code>, etc). It uses reflection call for resolve generic argument at first time.</td>\n</tr>\n<tr>\n<td>DynamicUnionResolver</td>\n<td>Resolver of interface marked by UnionAttribute. It uses dynamic code generation to create dynamic formatter.</td>\n</tr>\n<tr>\n<td>DynamicObjectResolver</td>\n<td>Resolver of class and struct made by MessagePackObjectAttribute. It uses dynamic code generation to create dynamic formatter.</td>\n</tr>\n<tr>\n<td>DynamicContractlessObjectResolver</td>\n<td>Resolver of all classes and structs. It does not needs <code>MessagePackObjectAttribute</code> and serialized key as string(same as marked <code>[MessagePackObject(true)]</code>).</td>\n</tr>\n<tr>\n<td>DynamicObjectResolverAllowPrivate</td>\n<td>Same as DynamicObjectResolver but allow serialize/deserialize private members.</td>\n</tr>\n<tr>\n<td>DynamicContractlessObjectResolverAllowPrivate</td>\n<td>Same as DynamicContractlessObjectResolver but allow serialize/deserialize private members.</td>\n</tr>\n<tr>\n<td>TypelessObjectResolver</td>\n<td>Used for <code>object</code>, embed .NET type in binary by <code>ext(100)</code> format so no need to pass type in deserialization.</td>\n</tr>\n<tr>\n<td>TypelessContractlessStandardResolver</td>\n<td>Composited resolver. It resolves in the following order <code>nativedatetime -&gt; builtin -&gt; attribute -&gt; dynamic enum -&gt; dynamic generic -&gt; dynamic union -&gt; dynamic object -&gt; dynamiccontractless -&gt; typeless</code>. This is the default of <code>MessagePackSerializer.Typeless</code></td>\n</tr>\n</tbody>\n</table>\n<p>Each instance of <code>MessagePackSerializer</code> accepts only a single resolver. Most object graphs will need more than one for serialization, so composing a single resolver made up of several is often required, and can be done with the <code>CompositeResolver</code> as shown below:</p>\n<pre><code class=\"language-csharp\">// Do this once and store it for reuse.\nvar resolver = MessagePack.Resolvers.CompositeResolver.Create(\n    // resolver custom types first\n    ReactivePropertyResolver.Instance,\n    MessagePack.Unity.Extension.UnityBlitResolver.Instance,\n    MessagePack.Unity.UnityResolver.Instance,\n\n    // finally use standard resolver\n    StandardResolver.Instance\n);\nvar options = MessagePackSerializerOptions.Standard.WithResolver(resolver);\n\n// Each time you serialize/deserialize, specify the options:\nbyte[] msgpackBytes = MessagePackSerializer.Serialize(myObject, options);\nT myObject2 = MessagePackSerializer.Deserialize&lt;MyObject&gt;(msgpackBytes, options);\n</code></pre>\n<p>A resolver can be set as default with <code>MessagePackSerializer.DefaultOptions = options</code>, but <strong>WARNING</strong>:\nWhen developing an application where you control all MessagePack-related code it may be safe to rely on this mutable static to control behavior.\nFor all other libraries or multi-purpose applications that use <code>MessagePackSerializer</code> you should explicitly specify the <code>MessagePackSerializerOptions</code> to use with each method invocation to guarantee your code behaves as you expect even when sharing an <code>AppDomain</code> or process with other MessagePack users that may change this static property.</p>\n<p>Here is sample of use <code>DynamicEnumAsStringResolver</code> with <code>DynamicContractlessObjectResolver</code> (It is Json.NET-like lightweight setting.)</p>\n<pre><code class=\"language-csharp\">// composite same as StandardResolver\nvar resolver = MessagePack.Resolvers.CompositeResolver.Create(\n    MessagePack.Resolvers.BuiltinResolver.Instance,\n    MessagePack.Resolvers.AttributeFormatterResolver.Instance,\n\n    // replace enum resolver\n    MessagePack.Resolvers.DynamicEnumAsStringResolver.Instance,\n\n    MessagePack.Resolvers.DynamicGenericResolver.Instance,\n    MessagePack.Resolvers.DynamicUnionResolver.Instance,\n    MessagePack.Resolvers.DynamicObjectResolver.Instance,\n\n    MessagePack.Resolvers.PrimitiveObjectResolver.Instance,\n\n    // final fallback(last priority)\n    MessagePack.Resolvers.DynamicContractlessObjectResolver.Instance\n);\n</code></pre>\n<p>If you want to make an extension package, you should write both a formatter and resolver\nfor easier consumption.\nHere is sample of a resolver:</p>\n<pre><code class=\"language-csharp\">public class SampleCustomResolver : IFormatterResolver\n{\n    // Resolver should be singleton.\n    public static readonly IFormatterResolver Instance = new SampleCustomResolver();\n\n    private SampleCustomResolver()\n    {\n    }\n\n    // GetFormatter&lt;T&gt;'s get cost should be minimized so use type cache.\n    public IMessagePackFormatter&lt;T&gt; GetFormatter&lt;T&gt;()\n    {\n        return FormatterCache&lt;T&gt;.Formatter;\n    }\n\n    private static class FormatterCache&lt;T&gt;\n    {\n        public static readonly IMessagePackFormatter&lt;T&gt; Formatter;\n\n        // generic's static constructor should be minimized for reduce type generation size!\n        // use outer helper method.\n        static FormatterCache()\n        {\n            Formatter = (IMessagePackFormatter&lt;T&gt;)SampleCustomResolverGetFormatterHelper.GetFormatter(typeof(T));\n        }\n    }\n}\n\ninternal static class SampleCustomResolverGetFormatterHelper\n{\n    // If type is concrete type, use type-formatter map\n    static readonly Dictionary&lt;Type, object&gt; formatterMap = new Dictionary&lt;Type, object&gt;()\n    {\n        {typeof(FileInfo), new FileInfoFormatter()}\n        // add more your own custom serializers.\n    };\n\n    internal static object GetFormatter(Type t)\n    {\n        object formatter;\n        if (formatterMap.TryGetValue(t, out formatter))\n        {\n            return formatter;\n        }\n\n        // If type can not get, must return null for fallback mechanism.\n        return null;\n    }\n}\n</code></pre>\n<h6>MessagePackFormatterAttribute</h6>\n<p>MessagePackFormatterAttribute is a lightweight extension point of class, struct, interface, enum and property/field. This is like Json.NET's JsonConverterAttribute. For example, serialize private field, serialize x10 formatter.</p>\n<pre><code class=\"language-csharp\">[MessagePackFormatter(typeof(CustomObjectFormatter))]\npublic class CustomObject\n{\n    string internalId;\n\n    public CustomObject()\n    {\n        this.internalId = Guid.NewGuid().ToString();\n    }\n\n    // serialize/deserialize internal field.\n    class CustomObjectFormatter : IMessagePackFormatter&lt;CustomObject&gt;\n    {\n        public void Serialize(ref MessagePackWriter writer, CustomObject value, MessagePackSerializerOptions options)\n        {\n            options.Resolver.GetFormatterWithVerify&lt;string&gt;().Serialize(ref writer, value.internalId, options);\n        }\n\n        public CustomObject Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)\n        {\n            var id = options.Resolver.GetFormatterWithVerify&lt;string&gt;().Deserialize(ref reader, options);\n            return new CustomObject { internalId = id };\n        }\n    }\n}\n\n// per field, member\n\npublic class Int_x10Formatter : IMessagePackFormatter&lt;int&gt;\n{\n    public int Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)\n    {\n        return reader.ReadInt32() * 10;\n    }\n\n    public void Serialize(ref MessagePackWriter writer, int value, MessagePackSerializerOptions options)\n    {\n        writer.WriteInt32(value * 10);\n    }\n}\n\n[MessagePackObject]\npublic class MyClass\n{\n    // You can attach custom formatter per member.\n    [Key(0)]\n    [MessagePackFormatter(typeof(Int_x10Formatter))]\n    public int MyProperty1 { get; set; }\n}\n</code></pre>\n<p>Formatter is retrieved by <code>AttributeFormatterResolver</code>, it is included in <code>StandardResolver</code>.</p>\n<h6>IgnoreFormatter</h6>\n<p><code>IgnoreFormatter&lt;T&gt;</code> is lightweight extension point of class and struct. If there exists types that can't be serialized, you can register <code>IgnoreFormatter&lt;T&gt;</code> that serializes those to nil/null.</p>\n<pre><code class=\"language-csharp\">// CompositeResolver can set custom formatter.\nvar resolver = MessagePack.Resolvers.CompositeResolver.Create(\n    new IMessagePackFormatter[]\n    {\n        // for example, register reflection infos (can not serialize)\n        new IgnoreFormatter&lt;MethodBase&gt;(),\n        new IgnoreFormatter&lt;MethodInfo&gt;(),\n        new IgnoreFormatter&lt;PropertyInfo&gt;(),\n        new IgnoreFormatter&lt;FieldInfo&gt;()\n    },\n    new IFormatterResolver[]\n    {\n        ContractlessStandardResolver.Instance\n    });\n</code></pre>\n<h6>Reserved Extension Types</h6>\n<p>MessagePack for C# already used some MessagePack extension type codes, be careful to avoid using the same ext code for other purposes.</p>\n<table>\n<thead>\n<tr>\n<th>Range</th>\n<th>Reserved for</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[-128, -1]</td>\n<td>Reserved by the msgpack spec for predefined types</td>\n</tr>\n<tr>\n<td>[30, 120)</td>\n<td>Reserved for this library's use to support common types in .NET</td>\n</tr>\n</tbody>\n</table>\n<p>This leaves the following ranges for your use:</p>\n<ul>\n<li>[0, 30)</li>\n<li>[120, 127]</li>\n</ul>\n<p>Within the <em>reserved</em> ranges, this library defines or implements extensions that use these type codes:</p>\n<table>\n<thead>\n<tr>\n<th>Code</th>\n<th>Type</th>\n<th>Use by</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-1</td>\n<td>DateTime</td>\n<td>MessagePack-spec reserved for timestamp</td>\n</tr>\n<tr>\n<td>30</td>\n<td>Vector2[]</td>\n<td>for Unity, UnsafeBlitFormatter</td>\n</tr>\n<tr>\n<td>31</td>\n<td>Vector3[]</td>\n<td>for Unity, UnsafeBlitFormatter</td>\n</tr>\n<tr>\n<td>32</td>\n<td>Vector4[]</td>\n<td>for Unity, UnsafeBlitFormatter</td>\n</tr>\n<tr>\n<td>33</td>\n<td>Quaternion[]</td>\n<td>for Unity, UnsafeBlitFormatter</td>\n</tr>\n<tr>\n<td>34</td>\n<td>Color[]</td>\n<td>for Unity, UnsafeBlitFormatter</td>\n</tr>\n<tr>\n<td>35</td>\n<td>Bounds[]</td>\n<td>for Unity, UnsafeBlitFormatter</td>\n</tr>\n<tr>\n<td>36</td>\n<td>Rect[]</td>\n<td>for Unity, UnsafeBlitFormatter</td>\n</tr>\n<tr>\n<td>37</td>\n<td>Int[]</td>\n<td>for Unity, UnsafeBlitFormatter</td>\n</tr>\n<tr>\n<td>38</td>\n<td>Float[]</td>\n<td>for Unity, UnsafeBlitFormatter</td>\n</tr>\n<tr>\n<td>39</td>\n<td>Double[]</td>\n<td>for Unity, UnsafeBlitFormatter</td>\n</tr>\n<tr>\n<td>98</td>\n<td>All</td>\n<td>MessagePackCompression.Lz4BlockArray</td>\n</tr>\n<tr>\n<td>99</td>\n<td>All</td>\n<td>MessagePackCompression.Lz4Block</td>\n</tr>\n<tr>\n<td>100</td>\n<td>object</td>\n<td>TypelessFormatter</td>\n</tr>\n</tbody>\n</table>\n<h6>Unity support</h6>\n<p>The minimum supported Unity version will be <code>2022.3.12f1</code>, as it is necessary to support IL2CPP via C# Source Generator.</p>\n<p>There are two installation steps required to use it in Unity. Do both, not just one.</p>\n<ol>\n<li>\n<p>Install <code>MessagePack</code> from NuGet using <a href=\"https://github.com/GlitchEnzo/NuGetForUnity\">NuGetForUnity</a>\nOpen Window from NuGet -&gt; Manage NuGet Packages, Search &quot;MessagePack&quot; and Press Install.</p>\n</li>\n<li>\n<p>Install <code>MessagePack.Unity</code> package by referencing the git URL.\nOpen Package Manager window and press <code>Add Package from git URL...</code>, enter following path</p>\n<pre><code>https://github.com/MessagePack-CSharp/MessagePack-CSharp.git?path=src/MessagePack.UnityClient/Assets/Scripts/MessagePack\n</code></pre>\n<p>MessagePack uses the ..* release tag, so you can specify a version like #v3.0.0. For example: <code>https://github.com/MessagePack-CSharp/MessagePack-CSharp.git?path=src/MessagePack.UnityClient/Assets/Scripts/MessagePack#v3.0.0</code></p>\n</li>\n</ol>\n<p>In Unity, MessagePackSerializer can serialize <code>Vector2</code>, <code>Vector3</code>, <code>Vector4</code>, <code>Quaternion</code>, <code>Color</code>, <code>Bounds</code>, <code>Rect</code>, <code>AnimationCurve</code>, <code>Keyframe</code>, <code>Matrix4x4</code>, <code>Gradient</code>, <code>Color32</code>, <code>RectOffset</code>, <code>LayerMask</code>, <code>Vector2Int</code>, <code>Vector3Int</code>, <code>RangeInt</code>, <code>RectInt</code>, <code>BoundsInt</code> and their nullable, array and list types with the built-in extension <code>UnityResolver</code>.</p>\n<p><code>MessagePack.Unity</code> automatically adds <code>UnityResolver</code> to the default options Resolver when the application starts with code like this in the unity package to enable this serialization:</p>\n<pre><code class=\"language-csharp\">[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.SubsystemRegistration)]\nprivate static void Init()\n{\n    MessagePackSerializer.DefaultOptions = MessagePackSerializerOptions.Standard.WithResolver(UnityResolver.InstanceWithStandardResolver);\n}\n</code></pre>\n<p>If you want to customize the Resolver or change the DefaultOptions, it would be good to keep this in mind.</p>\n<h7>Share types with .NET</h7>\n<p>The <code>MessagePack.UnityShims</code> NuGet package is for .NET server-side serialization support to communicate with Unity. It includes shims for Vector3 etc and the Safe/Unsafe serialization extension.</p>\n<p>There are several ways to share types between .NET and Unity:</p>\n<ul>\n<li>Share using symbolic links</li>\n<li>Place the actual files on the Unity side and reference them as link files in the .NET csproj</li>\n<li>Use UPM local references to reference the .NET project from the Unity side</li>\n</ul>\n<p>While the setup is a bit challenging, the smoothest way to share is using UPM local references. For detailed steps, please refer to the <a href=\"https://github.com/Cysharp/MagicOnion/tree/main/samples/ChatApp\">MagicOnion Sample</a>.</p>\n<h7>UnsafeBlitResolver</h7>\n<p>MessagePack for C# has an additional unsafe extension.  <code>UnsafeBlitResolver</code> is special resolver for extremely fast but unsafe serialization/deserialization of struct arrays.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/46207/23837633/76589924-07ce-11e7-8b26-e50eab548938.png\" alt=\"image\"></p>\n<p>x20 faster Vector3[] serialization than native JsonUtility. If use <code>UnsafeBlitResolver</code>, serialization uses a special format (ext:typecode 30~39)  for <code>Vector2[]</code>, <code>Vector3[]</code>, <code>Quaternion[]</code>, <code>Color[]</code>, <code>Bounds[]</code>, <code>Rect[]</code>. If use <code>UnityBlitWithPrimitiveArrayResolver</code>, it supports <code>int[]</code>, <code>float[]</code>, <code>double[]</code> too. This special feature is useful for serializing Mesh (many <code>Vector3[]</code>) or many transform positions.</p>\n<p>If you want to use unsafe resolver, register <code>UnityBlitResolver</code> or <code>UnityBlitWithPrimitiveArrayResolver</code>.</p>\n<p>Here is sample of configuration.</p>\n<pre><code class=\"language-csharp\">StaticCompositeResolver.Instance.Register(\n    MessagePack.Unity.UnityResolver.Instance,\n    MessagePack.Unity.Extension.UnityBlitWithPrimitiveArrayResolver.Instance,\n    MessagePack.Resolvers.StandardResolver.Instance\n);\n\nvar options = MessagePackSerializerOptions.Standard.WithResolver(StaticCompositeResolver.Instance);\nMessagePackSerializer.DefaultOptions = options;\n</code></pre>\n<h6><a name=\"aot\"></a>AOT Code Generation</h6>\n<p>A source generator is provided in the <code>MessagePackAnalyzer</code> package, which is automatically installed when you install <code>MessagePack</code> via NuGet.\nThis will source generate the formatters required for all your <code>[MessagePackObject]</code>-annotated data types during compilation for the fastest possible startup and runtime.\nAn <code>IFormatterResolver</code> is also generated that bundles all source generated and user-written formatters together.\nThe <code>StandardResolver</code> includes the <code>SourceGeneratedFormatterResolver</code> which discovers and uses your source generated resolver automatically.</p>\n<p>Therefore, in the usual scenario, it will work with AOT Safe without any special handling.\nIf you prefer to restrict your resolver to source-generated formatters, you should use the <code>MessagePack.GeneratedMessagePackResolver</code>, which is source generated into your project for that purpose.\nThis type's name and namespace can be customized by applying <code>[GeneratedMessagePackResolver]</code> to a <code>partial class</code> that you define, at which point that class becomes the resolver for you to use.</p>\n<p>At runtime, if a source generated or hand-written formatter cannot be found for a given <code>[MessagePackObject]</code> type, MessagePack will generate the formatters on the fly using <a href=\"https://learn.microsoft.com/dotnet/api/system.reflection.emit.ilgenerator\">Reflection.Emit</a> to create highly-tuned formatters for each type.\nThis code generation has a minor upfront performance cost.</p>\n<blockquote>\n<p>Note: When using Unity, dynamic code generation only works when targeting .NET Framework 4.x + mono runtime.\nFor all other Unity targets, AOT is required.</p>\n</blockquote>\n<h7>Customizations</h7>\n<p>You can customize the generated source through properties on the <code>GeneratedMessagePackResolverAttribute</code>.</p>\n<pre><code class=\"language-cs\">[GeneratedMessagePackResolver]\npartial class MyResolver\n{\n}\n</code></pre>\n<p>When exposing the generated resolver publicly, consumers outside the library should aggregate the resolver using its <code>Instance</code> property, which contains <em>only</em> the generated formatters.</p>\n<p>Two assembly-level attributes exist to help with mixing in your own custom formatters with the automatically generated ones:</p>\n<ul>\n<li><code>MessagePackKnownFormatterAttribute</code></li>\n<li><code>MessagePackAssumedFormattableAttribute</code></li>\n</ul>\n<p>Learn more about using a mix of your own custom formatters and automatically generated ones in <a href=\"#analyzer\">the Analyzer section</a>.</p>\n<h7>MagicOnion</h7>\n<p><a href=\"https://github.com/Cysharp/MagicOnion\">MagicOnion</a> is a code-first gRPC framework based on grpc-dotnet and MessagePack. gRPC usually communicates with Protocol Buffers using IDL. But MagicOnion uses MessagePack for C# and does not need IDL. When communicating C# to C#, schemaless (or rather C# classes as schema) is better than using IDL.</p>\n<h7>StreamJsonRpc</h7>\n<p>The StreamJsonRpc library is based on <a href=\"https://www.jsonrpc.org/\">JSON-RPC</a> and includes <a href=\"https://github.com/microsoft/vs-streamjsonrpc/blob/master/doc/extensibility.md#alternative-formatters\">a pluggable formatter architecture</a> and as of v2.3 includes <a href=\"https://github.com/microsoft/vs-streamjsonrpc/blob/master/doc/extensibility.md#message-formatterss\">MessagePack support</a>.</p>\n<h6>How to build</h6>\n<p>See our <a href=\"CONTRIBUTING.md\">contributor's guide</a>.</p>\n<h6><a name=\"coc\"></a>Code of Conduct</h6>\n<p>This project has adopted the code of conduct defined by the Contributor Covenant to clarify expected behavior in our community.\nFor more information see the <a href=\"https://dotnetfoundation.org/code-of-conduct\">.NET Foundation Code of Conduct</a>.</p>\n<h6>.NET Foundation</h6>\n<p>This project is supported by the <a href=\"https://dotnetfoundation.org\">.NET Foundation</a>.</p>\n",
    "msgpack_repo_id": "MessagePack-CSharp-MessagePack-CSharp",
    "msgpack_repo_homepage": "https://github.com/MessagePack-CSharp/MessagePack-CSharp",
    "full_name": "MessagePack-CSharp/MessagePack-CSharp",
    "owner": "MessagePack-CSharp",
    "html_url": "https://github.com/MessagePack-CSharp/MessagePack-CSharp"
  },
  {
    "msgpack_lang": "Go",
    "msgpack_quickstart_html": "<p><strong>MessagePack and <a href=\"http://github.com/ugorji/binc\">Binc</a> Codec for <a href=\"http://golang.org\">Go</a> Language.</strong></p>\n<p><em>A High Performance, Feature-Rich, Idiomatic encode/decode and rpc library</em>.</p>\n<p>To install:</p>\n<pre><code>go get github.com/ugorji/go/codec\n</code></pre>\n<p>Source: [http://github.com/ugorji/go]<br>\nOnline documentation: [http://godoc.org/github.com/ugorji/go/codec]</p>\n<p>Typical usage:</p>\n<pre><code class=\"language-go\">    // create and use decoder/encoder\n    var (\n        v interface{} // value to decode/encode into\n        r io.Reader\n        w io.Writer\n        b []byte\n        mh codec.MsgpackHandle\n    )\n    \n    dec = codec.NewDecoder(r, &amp;mh)\n    dec = codec.NewDecoderBytes(b, &amp;mh)\n    err = dec.Decode(&amp;v) \n    \n    enc = codec.NewEncoder(w, &amp;mh)\n    enc = codec.NewEncoderBytes(&amp;b, &amp;mh)\n    err = enc.Encode(v)\n    \n    //RPC Server\n    go func() {\n        for {\n            conn, err := listener.Accept()\n            rpcCodec := codec.GoRpc.ServerCodec(conn, h)\n            //OR rpcCodec := codec.MsgpackSpecRpc.ServerCodec(conn, h)\n            rpc.ServeCodec(rpcCodec)\n        }\n    }()\n    \n    //RPC Communication (client side)\n    conn, err = net.Dial(&quot;tcp&quot;, &quot;localhost:5555&quot;)\n    rpcCodec := codec.GoRpc.ClientCodec(conn, h)\n    //OR rpcCodec := codec.MsgpackSpecRpc.ClientCodec(conn, h)\n    client := rpc.NewClientWithCodec(rpcCodec)\n</code></pre>\n",
    "msgpack_repo_id": "ugorji-go",
    "msgpack_repo_homepage": "https://github.com/ugorji/go",
    "full_name": "ugorji/go",
    "owner": "ugorji",
    "html_url": "https://github.com/ugorji/go"
  },
  {
    "msgpack_lang": "Rust",
    "msgpack_quickstart_html": "<h5>RMP - Rust MessagePack</h5>\n<p>RMP is a complete pure-Rust <a href=\"http://msgpack.org\">MessagePack</a> implementation. MessagePack a compact self-describing binary serialization format.</p>\n<p>This project consists of three crates:</p>\n<ul>\n<li><a href=\"https://lib.rs/crates/rmp-serde\">RMP-Serde</a> (<a href=\"https://docs.rs/rmp-serde\">Documentation</a>) — easy serializing/deserializing via <a href=\"https://serde.rs\">Serde</a>.</li>\n<li><a href=\"https://lib.rs/crates/rmpv\">RMP-Value</a> (<a href=\"https://docs.rs/rmpv\">Documentation</a>) — a universal <code>Value</code> enum that can hold any MessagePack type. Allows deserializing arbitrary messages without a known schema.</li>\n<li><a href=\"https://lib.rs/crates/rmp\">RMP</a> (<a href=\"https://docs.rs/rmp\">Documentation</a>) — low-level functions for reading/writing encoded data.</li>\n</ul>\n<h6>Features</h6>\n<ul>\n<li>\n<p><strong>Convenient and powerful APIs</strong></p>\n<p>RMP is designed to be lightweight and straightforward. There is a high-level API with support for Serde,\nwhich provides you convenient interface for encode/decode Rust's data structures using <code>derive</code> attribute.\nThere are also low-level APIs, which give you full control over data encoding/decoding process,\nwith no-std support and without heap allocations.</p>\n</li>\n<li>\n<p><strong>Zero-copy value decoding</strong></p>\n<p>RMP allows to decode bytes from a buffer in a zero-copy manner. Parsing is implemented in safe Rust.</p>\n</li>\n<li>\n<p><strong>Robust, stable and tested</strong></p>\n<p>This project is developed using TDD and CI, so any found bugs will be fixed without breaking\nexisting functionality.</p>\n</li>\n</ul>\n<h6>Why MessagePack?</h6>\n<p>It's smaller and much simpler to parse than JSON. The encoded data is self-describing and extensible, without using any schema definitions. It supports the same data types as JSON, plus binary data, non-string map keys, all float values, and 64-bit numbers. Msgpack values use <code>&lt;lenght&gt;&lt;data&gt;</code> encoding, so they can be safely concatenated and read from a stream.</p>\n<p>MessagePack is similar to CBOR, but has simpler data types (no bignums, decimal floats, dates, or indefinite-length sets, etc.)</p>\n<h6>Requirements</h6>\n<ul>\n<li>An up-to-date stable version of <a href=\"https://www.rust-lang.org\">Rust</a>, preferably from <a href=\"https://rustup.rs\">rustup</a>.</li>\n</ul>\n<p><a href=\"https://github.com/3Hren/msgpack-rust/actions/workflows/ci.yml\"><img src=\"https://github.com/3Hren/msgpack-rust/actions/workflows/ci.yml/badge.svg\" alt=\"Build\"></a> <a href=\"https://coveralls.io/github/3Hren/msgpack-rust?branch=master\"><img src=\"https://coveralls.io/repos/3Hren/msgpack-rust/badge.svg?branch=master&amp;service=github\" alt=\"Coverage Status\"></a></p>\n",
    "msgpack_repo_id": "3Hren-msgpack-rust",
    "msgpack_repo_homepage": "https://github.com/3Hren/msgpack-rust",
    "full_name": "3Hren/msgpack-rust",
    "owner": "3Hren",
    "html_url": "https://github.com/3Hren/msgpack-rust"
  },
  {
    "msgpack_lang": "Go",
    "msgpack_quickstart_html": "<h5>MessagePack Code Generator</h5>\n<p><a href=\"https://pkg.go.dev/github.com/tinylib/msgp\"><img src=\"https://pkg.go.dev/badge/github.com/tinylib/msgp.svg\" alt=\"Go Reference\"></a>\n<a href=\"https://github.com/tinylib/msgp/actions/workflows/test.yml\"><img src=\"https://github.com/tinylib/msgp/actions/workflows/test.yml/badge.svg\" alt=\"test\"></a>\n<a href=\"https://github.com/tinylib/msgp/actions/workflows/validate.yml\"><img src=\"https://github.com/tinylib/msgp/actions/workflows/validate.yml/badge.svg\" alt=\"validate\"></a></p>\n<p>This is a code generation tool and serialization library for <a href=\"http://msgpack.org\">MessagePack</a>. You can read more about MessagePack <a href=\"http://github.com/tinylib/msgp/wiki\">in the wiki</a>, or at <a href=\"http://msgpack.org\">msgpack.org</a>.</p>\n<h7>Why?</h7>\n<ul>\n<li>Use Go as your schema language</li>\n<li>Performance</li>\n<li><a href=\"https://pkg.go.dev/github.com/tinylib/msgp/msgp#CopyToJSON\">JSON interop</a></li>\n<li><a href=\"http://github.com/tinylib/msgp/wiki/Using-Extensions\">User-defined extensions</a></li>\n<li>Type safety</li>\n<li>Encoding flexibility</li>\n</ul>\n<h7>Quickstart</h7>\n<p>First install the <code>msgp</code> generator command. Using Go this is done with <code>go install github.com/tinylib/msgp@latest</code></p>\n<p>In a source file, include the following directive:</p>\n<pre><code class=\"language-go\">//go:generate msgp\n</code></pre>\n<p>The <code>msgp</code> command will generate serialization methods for all exported type declarations in the file.</p>\n<p>You can <a href=\"http://github.com/tinylib/msgp/wiki/Using-the-Code-Generator\">read more about the code generation options here</a>.</p>\n<h7>Use</h7>\n<p>Field names can be set in much the same way as the <code>encoding/json</code> package. For example:</p>\n<pre><code class=\"language-go\">type Person struct {\n\tName       string `msg:&quot;name&quot;`\n\tAddress    string `msg:&quot;address&quot;`\n\tAge        int    `msg:&quot;age&quot;`\n\tHidden     string `msg:&quot;-&quot;` // this field is ignored\n\tunexported bool             // this field is also ignored\n}\n</code></pre>\n<p>By default, the code generator will satisfy <code>msgp.Sizer</code>, <code>msgp.Encodable</code>, <code>msgp.Decodable</code>,\n<code>msgp.Marshaler</code>, and <code>msgp.Unmarshaler</code>. Carefully-designed applications can use these methods to do\nmarshalling/unmarshalling with zero heap allocations.</p>\n<p>While <code>msgp.Marshaler</code> and <code>msgp.Unmarshaler</code> are quite similar to the standard library's\n<code>json.Marshaler</code> and <code>json.Unmarshaler</code>, <code>msgp.Encodable</code> and <code>msgp.Decodable</code> are useful for\nstream serialization. (<code>*msgp.Writer</code> and <code>*msgp.Reader</code> are essentially protocol-aware versions\nof <code>*bufio.Writer</code> and <code>*bufio.Reader</code>, respectively.)</p>\n<p>An important thing to note is that msgp operates on <em>individual files</em>.\nThis means if your structs include types defined in other files, these must be processed as well.</p>\n<h7>Features</h7>\n<ul>\n<li>Extremely fast generated code</li>\n<li>Test and benchmark generation</li>\n<li>JSON interoperability (see <code>msgp.CopyToJSON() and msgp.UnmarshalAsJSON()</code>)</li>\n<li>Support for complex type declarations</li>\n<li>Native support for Go's <code>time.Time</code>, <code>complex64</code>, and <code>complex128</code> types</li>\n<li>Generation of both <code>[]byte</code>-oriented and <code>io.Reader/io.Writer</code>-oriented methods</li>\n<li>Support for arbitrary type system extensions</li>\n<li><a href=\"http://github.com/tinylib/msgp/wiki/Preprocessor-Directives\">Preprocessor directives</a></li>\n<li>File-based dependency model means fast codegen regardless of source tree size.</li>\n</ul>\n<p>Consider the following:</p>\n<pre><code class=\"language-go\">const Eight = 8\ntype MyInt int\ntype Data []byte\n\ntype Struct struct {\n\tWhich  map[string]*MyInt `msg:&quot;which&quot;`\n\tOther  Data              `msg:&quot;other&quot;`\n\tNums   [Eight]float64    `msg:&quot;nums&quot;`\n}\n</code></pre>\n<p>As long as the declarations of <code>MyInt</code> and <code>Data</code> are in the same file as <code>Struct</code>, the parser will determine that the type information for <code>MyInt</code> and <code>Data</code> can be passed into the definition of <code>Struct</code> before its methods are generated.</p>\n<h8>Extensions</h8>\n<p>MessagePack supports defining your own types through &quot;extensions,&quot; which are just a tuple of\nthe data &quot;type&quot; (<code>int8</code>) and the raw binary. You <a href=\"http://github.com/tinylib/msgp/wiki/Using-Extensions\">can see a worked example in the wiki.</a></p>\n<h7>Status</h7>\n<p>Mostly stable, in that no breaking changes have been made to the <code>/msgp</code> library in more than a year. Newer versions\nof the code may generate different code than older versions for performance reasons. I (@philhofer) am aware of a\nnumber of stability-critical commercial applications that use this code with good results. But, caveat emptor.</p>\n<p>You can read more about how <code>msgp</code> maps MessagePack types onto Go types <a href=\"http://github.com/tinylib/msgp/wiki\">in the wiki</a>.</p>\n<p>Here some of the known limitations/restrictions:</p>\n<ul>\n<li>Identifiers from outside the processed source file are assumed (optimistically) to satisfy the generator's interfaces. If this isn't the case, your code will fail to compile.</li>\n<li>Like most serializers, <code>chan</code> and <code>func</code> fields are ignored, as well as non-exported fields.</li>\n<li>Encoding of <code>interface{}</code> is limited to built-ins or types that have explicit encoding methods.</li>\n<li><em>Maps must have <code>string</code> keys.</em> This is intentional (as it preserves JSON interop.) Although non-string map keys are not forbidden by the MessagePack standard, many serializers impose this restriction. (It also means <em>any</em> well-formed <code>struct</code> can be de-serialized into a <code>map[string]interface{}</code>.) The only exception to this rule is that the deserializers will allow you to read map keys encoded as <code>bin</code> types, due to the fact that some legacy encodings permitted this. (However, those values will still be cast to Go <code>string</code>s, and they will be converted to <code>str</code> types when re-encoded. It is the responsibility of the user to ensure that map keys are UTF-8 safe in this case.) The same rules hold true for JSON translation.</li>\n</ul>\n<p>If the output compiles, then there's a pretty good chance things are fine. (Plus, we generate tests for you.) <em>Please, please, please</em> file an issue if you think the generator is writing broken code.</p>\n<h7>Performance</h7>\n<p>If you like benchmarks, see <a href=\"http://bravenewgeek.com/so-you-wanna-go-fast/\">here</a> and <a href=\"https://github.com/alecthomas/go_serialization_benchmarks\">here</a>.</p>\n<p>As one might expect, the generated methods that deal with <code>[]byte</code> are faster for small objects, but the <code>io.Reader/Writer</code> methods are generally more memory-efficient (and, at some point, faster) for large (&gt; 2KB) objects.</p>\n",
    "msgpack_repo_id": "tinylib-msgp",
    "msgpack_repo_homepage": "https://github.com/tinylib/msgp",
    "full_name": "tinylib/msgp",
    "owner": "tinylib",
    "html_url": "https://github.com/tinylib/msgp"
  },
  {
    "msgpack_lang": "Ruby",
    "msgpack_quickstart_html": "<h5>MessagePack for Ruby</h5>\n<pre><code>require 'msgpack'\nmsg = [1,2,3].to_msgpack  #=&gt; &quot;\\x93\\x01\\x02\\x03&quot;\nMessagePack.unpack(msg)   #=&gt; [1,2,3]\n</code></pre>\n<h6>Install</h6>\n<p>Add msgpack to your Gemfile to install with Bundler:</p>\n<pre><code># Gemfile\ngem 'msgpack'\n</code></pre>\n<p>Or, use RubyGems to install:</p>\n<pre><code>gem install msgpack\n</code></pre>\n<h6>Use cases</h6>\n<ul>\n<li>Create REST API returing MessagePack using Rails + <a href=\"https://github.com/nesquena/rabl\">RABL</a></li>\n<li>Store objects efficiently in memcached or Redis</li>\n<li>Upload data in efficient format from mobile devices. See also MessagePack for <a href=\"https://github.com/msgpack/msgpack-objectivec\">Objective-C</a> and <a href=\"https://github.com/msgpack/msgpack-java\">Java</a></li>\n</ul>\n<h6>Links</h6>\n<ul>\n<li><a href=\"https://github.com/msgpack/msgpack-ruby\">GitHub repo msgpack/msgpack-ruby</a></li>\n<li><a href=\"https://ruby.msgpack.org/\">API documentation</a></li>\n</ul>\n<h6>Streaming API</h6>\n<pre><code># serialize a 2-element array [e1, e2]\npk = MessagePack::Packer.new(io)\npk.write_array_header(2).write(e1).write(e2).flush\n</code></pre>\n<pre><code># deserialize objects from an IO\nu = MessagePack::Unpacker.new(io)\nu.each { |obj| ... }\n</code></pre>\n<pre><code># event-driven deserialization\ndef on_read(data)\n  @u ||= MessagePack::Unpacker.new\n  @u.feed_each(data) { |obj| ... }\nend\n</code></pre>\n",
    "msgpack_repo_id": "msgpack-msgpack-ruby",
    "msgpack_repo_homepage": "https://github.com/msgpack/msgpack-ruby",
    "full_name": "msgpack/msgpack-ruby",
    "owner": "msgpack",
    "html_url": "https://github.com/msgpack/msgpack-ruby"
  },
  {
    "msgpack_lang": "C#",
    "msgpack_quickstart_html": "<h5>MessagePack for CLI</h5>\n<h6>CI Status</h6>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"><strong>Configuration</strong></th>\n<th style=\"text-align:left\"><strong>Status</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Release</td>\n<td style=\"text-align:left\"><a href=\"https://ci.appveyor.com/project/yfakariya/msgpack-cli-x2p85\"><img src=\"https://ci.appveyor.com/api/projects/status/5ln7u7efwjepj6o8?svg=true\" alt=\"Build status release\"></a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Debug (.NET Core 2.0)</td>\n<td style=\"text-align:left\"><a href=\"https://ci.appveyor.com/project/yfakariya/msgpack-cli\"><img src=\"https://ci.appveyor.com/api/projects/status/dlc0v4rrolwj0t2t?svg=true\" alt=\"Build status debug (.NET Core 2.0)\"></a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Debug (.NET Core 2.0)</td>\n<td style=\"text-align:left\"><a href=\"https://ci.appveyor.com/project/yfakariya/msgpack-cli-g3guk\"><img src=\"https://ci.appveyor.com/api/projects/status/avurf519all92v5u?svg=true\" alt=\"Build status debug (.NET Core 1.0)\"></a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Debug (.NET Framework 4.x)</td>\n<td style=\"text-align:left\"><a href=\"https://ci.appveyor.com/project/yfakariya/msgpack-cli-nuf62\"><img src=\"https://ci.appveyor.com/api/projects/status/np6723q2uiqofr1a?svg=true\" alt=\"Build status debug (.NET Framework 4.x)\"></a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Debug (Code DOM)]</td>\n<td style=\"text-align:left\"><a href=\"https://ci.appveyor.com/project/yfakariya/msgpack-cli-rhnh0\"><img src=\"https://ci.appveyor.com/api/projects/status/1mw78wkxx50jvab1?svg=true\" alt=\"Build status debug (Code DOM)\"></a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Debug (miscs)]</td>\n<td style=\"text-align:left\"><a href=\"https://ci.appveyor.com/project/yfakariya/msgpack-cli-bo856\"><img src=\"https://ci.appveyor.com/api/projects/status/avufc51yu2cm6idw?svg=true\" alt=\"Build status debug (miscs)\"></a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Debug (.NET Framework 3.5)</td>\n<td style=\"text-align:left\"><a href=\"https://ci.appveyor.com/project/yfakariya/msgpack-cli-3jme9\"><img src=\"https://ci.appveyor.com/api/projects/status/cjp8phlnbwj7gkj9?svg=true\" alt=\"Build status debug (.NET Framework 3.5)\"></a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Debug (.NET Framework 3.5 Code DOM)</td>\n<td style=\"text-align:left\"><a href=\"https://ci.appveyor.com/project/yfakariya/msgpack-cli-rhnh0\"><img src=\"https://ci.appveyor.com/api/projects/status/1mw78wkxx50jvab1?svg=true\" alt=\"Build status debug (.NET Framework 3.5 Code DOM)\"></a></td>\n</tr>\n</tbody>\n</table>\n<h6>What is it?</h6>\n<p>This is MessagePack serialization/deserialization for CLI (Common Language Infrastructure) implementations such as .NET Framework, Silverlight, Mono (including Moonlight.)\nThis library can be used from ALL CLS compliant languages such as C#, F#, Visual Basic, Iron Python, Iron Ruby, PowerShell, C++/CLI or so.</p>\n<h6>Usage</h6>\n<p>You can serialize/deserialize objects as following:</p>\n<ol>\n<li>Create serializer via <code>MessagePackSerializer.Get</code> generic method. This method creates dependent types serializers as well.</li>\n<li>Invoke serializer as following:</li>\n</ol>\n<ul>\n<li><code>Pack</code> method with destination <code>Stream</code> and target object for serialization.</li>\n<li><code>Unpack</code> method with source <code>Stream</code>.</li>\n</ul>\n<pre><code class=\"language-c#\">// Creates serializer.\nvar serializer = MessagePackSerializer.Get&lt;T&gt;();\n// Pack obj to stream.\nserializer.Pack(stream, obj);\n// Unpack from stream.\nvar unpackedObject = serializer.Unpack(stream);\n</code></pre>\n<pre><code class=\"language-vb\">' Creates serializer.\nDim serializer = MessagePackSerializer.Get(Of T)()\n' Pack obj to stream.\nserializer.Pack(stream, obj)\n' Unpack from stream.\nDim unpackedObject = serializer.Unpack(stream)\n</code></pre>\n<p><strong>For production environment, you should instantiate own <code>SerializationContext</code> and manage its lifetime. It is good idea to treat it as singleton because <code>SerializationContext</code> is thread-safe.</strong></p>\n<h6>Features</h6>\n<ul>\n<li>Fast and interoperable binary format serialization with simple API.</li>\n<li>Generating pre-compiled assembly for rapid start up.</li>\n<li>Flexible MessagePackObject which represents MessagePack type system naturally.</li>\n</ul>\n<p><strong>Note: AOT support is limited yet. Use <a href=\"https://github.com/msgpack/msgpack-cli/wiki/Xamarin-and-Unity\">serializer pre-generation</a> with <code>mpu -s</code> utility or API.</strong><br>\nIf you do not pre-generated serializers, MsgPack for CLI uses reflection in AOT environments, it is slower and it sometimes causes AOT related error (<code>ExecutionEngineException</code> for runtime JIT compilation). <strong>You also have to call <code>MessagePackSerializer.PrepareType&lt;T&gt;</code> and companions in advance to avoid AOT related error.</strong> See <a href=\"https://github.com/msgpack/msgpack-cli/wiki/Xamarin-and-Unity\">wiki</a> for details.</p>\n<h6>Documentation</h6>\n<p>See <a href=\"https://github.com/msgpack/msgpack-cli/wiki\">wiki</a></p>\n<h6>Installation</h6>\n<ul>\n<li>Binary files distributed via the NuGet package <a href=\"http://www.nuget.org/packages/MsgPack.Cli/\">MsgPack.Cli</a>.</li>\n<li>You can extract binary (DLL) file as following:\n<ol>\n<li>Download *.zip file from <a href=\"https://github.com/msgpack/msgpack-cli/releases/\">GitHub Release page</a>.</li>\n<li>Extract it.</li>\n<li>Under the <code>bin</code> directory, binaries are there!</li>\n</ol>\n<ul>\n<li>For mono, you can use <code>net461</code> or <code>net35</code> drops as you run with.</li>\n<li>For Unity, <code>unity3d</code> drop is suitable.</li>\n</ul>\n</li>\n</ul>\n<h6>How to build</h6>\n<h7>For .NET Framework</h7>\n<ol>\n<li>\n<p>Install Visual Studio 2017 (Community edition is OK) and 2015 (for MsgPack.Windows.sln).</p>\n<ul>\n<li>You must install .NET Framework 3.5, 4.x, .NET Core, and Xamarin dev tools to build all builds successfully.\nIf you do not want to install options, edit <code>&lt;TargetFrameworks&gt;</code> element in <code>*.csproj</code> files to exclude platforms you want to exclude.</li>\n</ul>\n</li>\n<li>\n<p>Install latest .NET Core SDK.</p>\n</li>\n<li>\n<p>Run with Visual Studio Developer Command Prompt:</p>\n<p>msbuild MsgPack.sln /t:Restore\nmsbuild MsgPack.sln</p>\n</li>\n</ol>\n<p>Or (for Unity 3D drops):</p>\n<pre><code>msbuild MsgPack.compats.sln /t:Restore\nmsbuild MsgPack.compats.sln\n</code></pre>\n<p>Or (for Windows Runtime/Phone drops and Silverlight 5 drops):</p>\n<pre><code>msbuild MsgPack.Windows.sln /t:Restore\nmsbuild MsgPack.Windows.sln\n</code></pre>\n<p>Or (for Xamarin unit testing, you must have Xamarin Business or upper license and Mac machine on the LAN to build on Windows):</p>\n<pre><code>msbuild MsgPack.Xamarin.sln /t:Restore\nmsbuild MsgPack.Xamarin.sln\n</code></pre>\n<p>Or open one of above solution files in your IDE and run build command in it.</p>\n<h7>For Mono</h7>\n<ol>\n<li>Install latest Mono and .NET Core SDK.</li>\n<li>Now, you can build MsgPack.sln and MsgPack.Xamarin.sln with above instructions and <code>msbuild</code> in latest Mono. Note that <code>xbuild</code> does not work because it does not support latest csproj format.</li>\n</ol>\n<h7>Own Unity 3D Build</h7>\n<p>First of all, there are binary drops on github release page, you should use it to save your time.<br>\nBecause we will not guarantee source code organization compatibilities, we might add/remove non-public types or members, which should break source code build.<br>\nIf you want to import sources, you must include just only described on MsgPack.Unity3D.csproj.<br>\nIf you want to use &quot;.NET 2.0 Subset&quot; settings, you must use just only described on MsgPack.Unity3D.CorLibOnly.csproj file, and define <code>CORLIB_ONLY</code> compiler constants.</p>\n<h7>Xamarin Android testing</h7>\n<p>If you run on Windows, it is recommended to use HXM instead of Hyper-V based emulator.<br>\nYou can disable Hyper-V from priviledged (administrator) powershell as follows:</p>\n<pre><code class=\"language-powershell\">Disable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V-Hypervisor\n</code></pre>\n<p>If you want to use Hyper-V again (such as for Docker for Windows etc.), you can do it by following in priviledged (administrator) powershell:</p>\n<pre><code class=\"language-powershell\">Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V-Hypervisor\n</code></pre>\n<h8>Xamarin Android Trouble shooting tips</h8>\n<ul>\n<li><strong>Q:</strong> Javac shows compilation error.\n<ul>\n<li><strong>A:</strong> Rebuild the test project and try it run again.</li>\n</ul>\n</li>\n</ul>\n<h7>Xamarin iOS testing</h7>\n<p>You must create provisoning profiles in your MacOS devices.<br>\nSee <a href=\"https://developer.xamarin.com/guides/ios/getting_started/installation/device_provisioning/free-provisioning/\">Xamarin documents about provisining</a> for details.</p>\n<p>There are bundle IDs of current iOS tests:</p>\n<ul>\n<li><code>org.msgpack.msgpack-cli-xamarin-ios-test</code></li>\n<li><code>org.msgpack.msgpack-cli-xamarin-ios-test-packer</code></li>\n<li><code>org.msgpack.msgpack-cli-xamarin-ios-test-unpacker</code></li>\n<li><code>org.msgpack.msgpack-cli-xamarin-ios-test-unpacking</code></li>\n<li><code>org.msgpack.msgpack-cli-xamarin-ios-test-timestamp</code></li>\n<li><code>org.msgpack.msgpack-cli-xamarin-ios-test-arrayserialization</code></li>\n<li><code>org.msgpack.msgpack-cli-xamarin-ios-test-mapserialization</code></li>\n</ul>\n<p><em>Note that some reflection based serializer tests failed with AOT related limitation.</em></p>\n<h8>Xamarin iOS Trouble shooting tips</h8>\n<p>See <a href=\"https://developer.xamarin.com/guides/ios/getting_started/installation/windows/connecting-to-mac/troubleshooting/\">Xamarin's official trouble shooting docs first.</a></p>\n<ul>\n<li><strong>Q:</strong> An error occurred while running unit test project.\n<ul>\n<li><strong>A:</strong> Rebuild the project and rerun it. Or, login your Mac again, ant retry it.</li>\n</ul>\n</li>\n<li><strong>Q:</strong> It is hard to read English.\n<ul>\n<li><strong>A:</strong> You can read localized Xamarin docs with putting <code>{region}-{lang}</code> as the first component of URL path such as <code>https://developer.xamarin.com/ja-jp/guides/...</code>.</li>\n</ul>\n</li>\n</ul>\n<h6>Maintenance</h6>\n<h7>MsgPack.Windows.sln</h7>\n<p>This solution contains Silverlight5 and (old) UWP project for backward compability. They are required Visual Studio 2015 to build and test.<br>\nYou can download Visual Studio 2015 community edition from <a href=\"https://visualstudio.microsoft.com/vs/older-downloads/\">here</a>.</p>\n<p><strong>You do not have to install Visual Studio 2015 as long as you don't edit/test/build Silverlight and/or old UWP project.</strong></p>\n<h6>See also</h6>\n<ul>\n<li>GitHub Page           : http://cli.msgpack.org/</li>\n<li>Wiki (documentation)  : https://github.com/msgpack/msgpack-cli/wiki</li>\n<li>API Reference         : http://cli.msgpack.org/doc/top.html</li>\n<li>Issue tracker         : https://github.com/msgpack/msgpack-cli/issues</li>\n<li>MSBuild reference     : http://msdn.microsoft.com/en-us/library/0k6kkbsd.aspx</li>\n<li>Mono xbuild reference : http://www.mono-project.com/Microsoft.Build</li>\n</ul>\n",
    "msgpack_repo_id": "msgpack-msgpack-cli",
    "msgpack_repo_homepage": "https://github.com/msgpack/msgpack-cli",
    "full_name": "msgpack/msgpack-cli",
    "owner": "msgpack",
    "html_url": "https://github.com/msgpack/msgpack-cli"
  },
  {
    "msgpack_lang": "JavaScript",
    "msgpack_quickstart_html": "<h5>msgpack-lite <a href=\"http://badge.fury.io/js/msgpack-lite\"><img src=\"https://badge.fury.io/js/msgpack-lite.svg\" alt=\"npm version\"></a> <a href=\"https://travis-ci.org/kawanet/msgpack-lite\"><img src=\"https://travis-ci.org/kawanet/msgpack-lite.svg?branch=master\" alt=\"Build Status\"></a></h5>\n<p>Fast Pure JavaScript MessagePack Encoder and Decoder</p>\n<p><a href=\"https://saucelabs.com/u/msgpack-lite\"><img src=\"https://saucelabs.com/browser-matrix/msgpack-lite.svg\" alt=\"Sauce Test Status\"></a></p>\n<p>Online demo: <a href=\"http://kawanet.github.io/msgpack-lite/\">http://kawanet.github.io/msgpack-lite/</a></p>\n<h7>Features</h7>\n<ul>\n<li>Pure JavaScript only (No node-gyp nor gcc required)</li>\n<li>Faster than any other pure JavaScript libraries on node.js v4</li>\n<li>Even faster than node-gyp C++ based <a href=\"https://www.npmjs.com/package/msgpack\">msgpack</a> library (<strong>90% faster</strong> on encoding)</li>\n<li>Streaming encoding and decoding interface is also available. It's more faster.</li>\n<li>Ready for <a href=\"https://saucelabs.com/u/msgpack-lite\">Web browsers</a> including Chrome, Firefox, Safari and even IE8</li>\n<li><a href=\"https://travis-ci.org/kawanet/msgpack-lite\">Tested</a> on Node.js v0.10, v0.12, v4, v5 and v6 as well as Web browsers</li>\n</ul>\n<h7>Encoding and Decoding MessagePack</h7>\n<pre><code class=\"language-js\">var msgpack = require(&quot;msgpack-lite&quot;);\n\n// encode from JS Object to MessagePack (Buffer)\nvar buffer = msgpack.encode({&quot;foo&quot;: &quot;bar&quot;});\n\n// decode from MessagePack (Buffer) to JS Object\nvar data = msgpack.decode(buffer); // =&gt; {&quot;foo&quot;: &quot;bar&quot;}\n\n// if encode/decode receives an invalid argument an error is thrown\n</code></pre>\n<h7>Writing to MessagePack Stream</h7>\n<pre><code class=\"language-js\">var fs = require(&quot;fs&quot;);\nvar msgpack = require(&quot;msgpack-lite&quot;);\n\nvar writeStream = fs.createWriteStream(&quot;test.msp&quot;);\nvar encodeStream = msgpack.createEncodeStream();\nencodeStream.pipe(writeStream);\n\n// send multiple objects to stream\nencodeStream.write({foo: &quot;bar&quot;});\nencodeStream.write({baz: &quot;qux&quot;});\n\n// call this once you're done writing to the stream.\nencodeStream.end();\n</code></pre>\n<h7>Reading from MessagePack Stream</h7>\n<pre><code class=\"language-js\">var fs = require(&quot;fs&quot;);\nvar msgpack = require(&quot;msgpack-lite&quot;);\n\nvar readStream = fs.createReadStream(&quot;test.msp&quot;);\nvar decodeStream = msgpack.createDecodeStream();\n\n// show multiple objects decoded from stream\nreadStream.pipe(decodeStream).on(&quot;data&quot;, console.warn);\n</code></pre>\n<h7>Decoding MessagePack Bytes Array</h7>\n<pre><code class=\"language-js\">var msgpack = require(&quot;msgpack-lite&quot;);\n\n// decode() accepts Buffer instance per default\nmsgpack.decode(Buffer([0x81, 0xA3, 0x66, 0x6F, 0x6F, 0xA3, 0x62, 0x61, 0x72]));\n\n// decode() also accepts Array instance\nmsgpack.decode([0x81, 0xA3, 0x66, 0x6F, 0x6F, 0xA3, 0x62, 0x61, 0x72]);\n\n// decode() accepts raw Uint8Array instance as well\nmsgpack.decode(new Uint8Array([0x81, 0xA3, 0x66, 0x6F, 0x6F, 0xA3, 0x62, 0x61, 0x72]));\n</code></pre>\n<h7>Command Line Interface</h7>\n<p>A CLI tool bin/msgpack converts data stream from JSON to MessagePack and vice versa.</p>\n<pre><code class=\"language-sh\">$ echo '{&quot;foo&quot;: &quot;bar&quot;}' | ./bin/msgpack -Jm | od -tx1\n0000000    81  a3  66  6f  6f  a3  62  61  72\n\n$ echo '{&quot;foo&quot;: &quot;bar&quot;}' | ./bin/msgpack -Jm | ./bin/msgpack -Mj\n{&quot;foo&quot;:&quot;bar&quot;}\n</code></pre>\n<h7>Installation</h7>\n<pre><code class=\"language-sh\">$ npm install --save msgpack-lite\n</code></pre>\n<h7>Tests</h7>\n<p>Run tests on node.js:</p>\n<pre><code class=\"language-sh\">$ make test\n</code></pre>\n<p>Run tests on browsers:</p>\n<pre><code class=\"language-sh\">$ make test-browser-local\nopen the following url in a browser:\nhttp://localhost:4000/__zuul\n</code></pre>\n<h7>Browser Build</h7>\n<p>Browser version <a href=\"https://rawgit.com/kawanet/msgpack-lite/master/dist/msgpack.min.js\">msgpack.min.js</a> is also available. 50KB minified, 14KB gziped.</p>\n<pre><code class=\"language-html\">&lt;!--[if lte IE 9]&gt;\n&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/es5-shim/4.1.10/es5-shim.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/json3/3.3.2/json3.min.js&quot;&gt;&lt;/script&gt;\n&lt;![endif]--&gt;\n&lt;script src=&quot;https://rawgit.com/kawanet/msgpack-lite/master/dist/msgpack.min.js&quot;&gt;&lt;/script&gt;\n&lt;script&gt;\n// encode from JS Object to MessagePack (Uint8Array)\nvar buffer = msgpack.encode({foo: &quot;bar&quot;});\n\n// decode from MessagePack (Uint8Array) to JS Object\nvar array = new Uint8Array([0x81, 0xA3, 0x66, 0x6F, 0x6F, 0xA3, 0x62, 0x61, 0x72]);\nvar data = msgpack.decode(array);\n&lt;/script&gt;\n</code></pre>\n<h7>MessagePack With Browserify</h7>\n<p>Step #1: write some code at first.</p>\n<pre><code class=\"language-js\">var msgpack = require(&quot;msgpack-lite&quot;);\nvar buffer = msgpack.encode({&quot;foo&quot;: &quot;bar&quot;});\nvar data = msgpack.decode(buffer);\nconsole.warn(data); // =&gt; {&quot;foo&quot;: &quot;bar&quot;}\n</code></pre>\n<p>Proceed to the next steps if you prefer faster browserify compilation time.</p>\n<p>Step #2: add <code>browser</code> property on <code>package.json</code> in your project. This refers the global <code>msgpack</code> object instead of including whole of <code>msgpack-lite</code> source code.</p>\n<pre><code class=\"language-json\">{\n  &quot;dependencies&quot;: {\n    &quot;msgpack-lite&quot;: &quot;*&quot;\n  },\n  &quot;browser&quot;: {\n    &quot;msgpack-lite&quot;: &quot;msgpack-lite/global&quot;\n  }\n}\n</code></pre>\n<p>Step #3: compile it with <a href=\"https://www.npmjs.com/package/browserify\">browserify</a> and <a href=\"https://www.npmjs.com/package/uglify-js\">uglifyjs</a>.</p>\n<pre><code class=\"language-sh\">browserify src/main.js -o tmp/main.browserify.js -s main\nuglifyjs tmp/main.browserify.js -m -c -o js/main.min.js\ncp node_modules/msgpack-lite/dist/msgpack.min.js js/msgpack.min.js\n</code></pre>\n<p>Step #4: load <a href=\"https://rawgit.com/kawanet/msgpack-lite/master/dist/msgpack.min.js\">msgpack.min.js</a> before your code.</p>\n<pre><code class=\"language-html\">&lt;script src=&quot;js/msgpack.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;js/main.min.js&quot;&gt;&lt;/script&gt;\n</code></pre>\n<h7>Interoperability</h7>\n<p>It is tested to have basic compatibility with other Node.js MessagePack modules below:</p>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/msgpack\">https://www.npmjs.com/package/msgpack</a> (1.0.2)</li>\n<li><a href=\"https://www.npmjs.com/package/msgpack-js\">https://www.npmjs.com/package/msgpack-js</a> (0.3.0)</li>\n<li><a href=\"https://www.npmjs.com/package/msgpack-js-v5\">https://www.npmjs.com/package/msgpack-js-v5</a> (0.3.0-v5)</li>\n<li><a href=\"https://www.npmjs.com/package/msgpack-unpack\">https://www.npmjs.com/package/msgpack-unpack</a> (2.1.1)</li>\n<li><a href=\"https://github.com/msgpack/msgpack-javascript\">https://github.com/msgpack/msgpack-javascript</a> (msgpack.codec)</li>\n<li><a href=\"https://www.npmjs.com/package/msgpack5\">https://www.npmjs.com/package/msgpack5</a> (3.3.0)</li>\n<li><a href=\"https://www.npmjs.com/package/notepack\">https://www.npmjs.com/package/notepack</a> (0.0.2)</li>\n</ul>\n<h7>Benchmarks</h7>\n<p>A benchmark tool <code>lib/benchmark.js</code> is available to compare encoding/decoding speed\n(operation per second) with other MessagePack modules.\nIt counts operations of <a href=\"https://github.com/kawanet/msgpack-lite/blob/master/test/example.json\">1KB JSON document</a> in 10 seconds.</p>\n<pre><code class=\"language-sh\">$ npm install msgpack msgpack-js msgpack-js-v5 msgpack-unpack msgpack5 notepack\n$ npm run benchmark 10\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>operation</th>\n<th style=\"text-align:right\">op</th>\n<th style=\"text-align:right\">ms</th>\n<th style=\"text-align:right\">op/s</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>buf = Buffer(JSON.stringify(obj));</td>\n<td style=\"text-align:right\">1055200</td>\n<td style=\"text-align:right\">10000</td>\n<td style=\"text-align:right\">105520</td>\n</tr>\n<tr>\n<td>obj = JSON.parse(buf);</td>\n<td style=\"text-align:right\">863800</td>\n<td style=\"text-align:right\">10000</td>\n<td style=\"text-align:right\">86380</td>\n</tr>\n<tr>\n<td>buf = require(&quot;msgpack-lite&quot;).encode(obj);</td>\n<td style=\"text-align:right\">969100</td>\n<td style=\"text-align:right\">10000</td>\n<td style=\"text-align:right\">96910</td>\n</tr>\n<tr>\n<td>obj = require(&quot;msgpack-lite&quot;).decode(buf);</td>\n<td style=\"text-align:right\">600300</td>\n<td style=\"text-align:right\">10000</td>\n<td style=\"text-align:right\">60030</td>\n</tr>\n<tr>\n<td>buf = require(&quot;msgpack&quot;).pack(obj);</td>\n<td style=\"text-align:right\">503500</td>\n<td style=\"text-align:right\">10001</td>\n<td style=\"text-align:right\">50344</td>\n</tr>\n<tr>\n<td>obj = require(&quot;msgpack&quot;).unpack(buf);</td>\n<td style=\"text-align:right\">560200</td>\n<td style=\"text-align:right\">10001</td>\n<td style=\"text-align:right\">56014</td>\n</tr>\n<tr>\n<td>buf = Buffer(require(&quot;msgpack.codec&quot;).msgpack.pack(obj));</td>\n<td style=\"text-align:right\">653500</td>\n<td style=\"text-align:right\">10000</td>\n<td style=\"text-align:right\">65349</td>\n</tr>\n<tr>\n<td>obj = require(&quot;msgpack.codec&quot;).msgpack.unpack(buf);</td>\n<td style=\"text-align:right\">367500</td>\n<td style=\"text-align:right\">10001</td>\n<td style=\"text-align:right\">36746</td>\n</tr>\n<tr>\n<td>buf = require(&quot;msgpack-js-v5&quot;).encode(obj);</td>\n<td style=\"text-align:right\">189500</td>\n<td style=\"text-align:right\">10002</td>\n<td style=\"text-align:right\">18946</td>\n</tr>\n<tr>\n<td>obj = require(&quot;msgpack-js-v5&quot;).decode(buf);</td>\n<td style=\"text-align:right\">408900</td>\n<td style=\"text-align:right\">10000</td>\n<td style=\"text-align:right\">40890</td>\n</tr>\n<tr>\n<td>buf = require(&quot;msgpack-js&quot;).encode(obj);</td>\n<td style=\"text-align:right\">189200</td>\n<td style=\"text-align:right\">10000</td>\n<td style=\"text-align:right\">18920</td>\n</tr>\n<tr>\n<td>obj = require(&quot;msgpack-js&quot;).decode(buf);</td>\n<td style=\"text-align:right\">375600</td>\n<td style=\"text-align:right\">10002</td>\n<td style=\"text-align:right\">37552</td>\n</tr>\n<tr>\n<td>buf = require(&quot;msgpack5&quot;)().encode(obj);</td>\n<td style=\"text-align:right\">110500</td>\n<td style=\"text-align:right\">10009</td>\n<td style=\"text-align:right\">11040</td>\n</tr>\n<tr>\n<td>obj = require(&quot;msgpack5&quot;)().decode(buf);</td>\n<td style=\"text-align:right\">165500</td>\n<td style=\"text-align:right\">10000</td>\n<td style=\"text-align:right\">16550</td>\n</tr>\n<tr>\n<td>buf = require(&quot;notepack&quot;)().encode(obj);</td>\n<td style=\"text-align:right\">847800</td>\n<td style=\"text-align:right\">10000</td>\n<td style=\"text-align:right\">84780</td>\n</tr>\n<tr>\n<td>obj = require(&quot;notepack&quot;)().decode(buf);</td>\n<td style=\"text-align:right\">599800</td>\n<td style=\"text-align:right\">10000</td>\n<td style=\"text-align:right\">59980</td>\n</tr>\n<tr>\n<td>obj = require(&quot;msgpack-unpack&quot;).decode(buf);</td>\n<td style=\"text-align:right\">48100</td>\n<td style=\"text-align:right\">10002</td>\n<td style=\"text-align:right\">4809</td>\n</tr>\n</tbody>\n</table>\n<p>Streaming benchmark tool <code>lib/benchmark-stream.js</code> is also available.\nIt counts milliseconds for 1,000,000 operations of 30 bytes fluentd msgpack fragment.\nThis shows streaming encoding and decoding are super faster.</p>\n<pre><code class=\"language-sh\">$ npm run benchmark-stream 2\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>operation (1000000 x 2)</th>\n<th style=\"text-align:right\">op</th>\n<th style=\"text-align:right\">ms</th>\n<th style=\"text-align:right\">op/s</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>stream.write(msgpack.encode(obj));</td>\n<td style=\"text-align:right\">1000000</td>\n<td style=\"text-align:right\">3027</td>\n<td style=\"text-align:right\">330360</td>\n</tr>\n<tr>\n<td>stream.write(notepack.encode(obj));</td>\n<td style=\"text-align:right\">1000000</td>\n<td style=\"text-align:right\">2012</td>\n<td style=\"text-align:right\">497017</td>\n</tr>\n<tr>\n<td>msgpack.Encoder().on(&quot;data&quot;,ondata).encode(obj);</td>\n<td style=\"text-align:right\">1000000</td>\n<td style=\"text-align:right\">2956</td>\n<td style=\"text-align:right\">338294</td>\n</tr>\n<tr>\n<td>msgpack.createEncodeStream().write(obj);</td>\n<td style=\"text-align:right\">1000000</td>\n<td style=\"text-align:right\">1888</td>\n<td style=\"text-align:right\">529661</td>\n</tr>\n<tr>\n<td>stream.write(msgpack.decode(buf));</td>\n<td style=\"text-align:right\">1000000</td>\n<td style=\"text-align:right\">2020</td>\n<td style=\"text-align:right\">495049</td>\n</tr>\n<tr>\n<td>stream.write(notepack.decode(buf));</td>\n<td style=\"text-align:right\">1000000</td>\n<td style=\"text-align:right\">1794</td>\n<td style=\"text-align:right\">557413</td>\n</tr>\n<tr>\n<td>msgpack.Decoder().on(&quot;data&quot;,ondata).decode(buf);</td>\n<td style=\"text-align:right\">1000000</td>\n<td style=\"text-align:right\">2744</td>\n<td style=\"text-align:right\">364431</td>\n</tr>\n<tr>\n<td>msgpack.createDecodeStream().write(buf);</td>\n<td style=\"text-align:right\">1000000</td>\n<td style=\"text-align:right\">1341</td>\n<td style=\"text-align:right\">745712</td>\n</tr>\n</tbody>\n</table>\n<p>Test environment: msgpack-lite 0.1.14, Node v4.2.3, Intel(R) Xeon(R) CPU E5-2666 v3 @ 2.90GHz</p>\n<h7>MessagePack Mapping Table</h7>\n<p>The following table shows how JavaScript objects (value) will be mapped to\n<a href=\"https://github.com/msgpack/msgpack/blob/master/spec.md\">MessagePack formats</a>\nand vice versa.</p>\n<table>\n<thead>\n<tr>\n<th>Source Value</th>\n<th>MessagePack Format</th>\n<th>Value Decoded</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>null, undefined</td>\n<td>nil format family</td>\n<td>null</td>\n</tr>\n<tr>\n<td>Boolean (true, false)</td>\n<td>bool format family</td>\n<td>Boolean (true, false)</td>\n</tr>\n<tr>\n<td>Number (32bit int)</td>\n<td>int format family</td>\n<td>Number (int or double)</td>\n</tr>\n<tr>\n<td>Number (64bit double)</td>\n<td>float format family</td>\n<td>Number (double)</td>\n</tr>\n<tr>\n<td>String</td>\n<td>str format family</td>\n<td>String</td>\n</tr>\n<tr>\n<td>Buffer</td>\n<td>bin format family</td>\n<td>Buffer</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>array format family</td>\n<td>Array</td>\n</tr>\n<tr>\n<td>Map</td>\n<td>map format family</td>\n<td>Map (if <code>usemap=true</code>)</td>\n</tr>\n<tr>\n<td>Object (plain object)</td>\n<td>map format family</td>\n<td>Object (or Map if <code>usemap=true</code>)</td>\n</tr>\n<tr>\n<td>Object (see below)</td>\n<td>ext format family</td>\n<td>Object (see below)</td>\n</tr>\n</tbody>\n</table>\n<p>Note that both <code>null</code> and <code>undefined</code> are mapped to nil <code>0xC1</code> type.\nThis means <code>undefined</code> value will be <em>upgraded</em> to <code>null</code> in other words.</p>\n<h7>Extension Types</h7>\n<p>The MessagePack specification allows 128 application-specific extension types.\nThe library uses the following types to make round-trip conversion possible\nfor JavaScript native objects.</p>\n<table>\n<thead>\n<tr>\n<th>Type</th>\n<th>Object</th>\n<th>Type</th>\n<th>Object</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0x00</td>\n<td></td>\n<td>0x10</td>\n<td></td>\n</tr>\n<tr>\n<td>0x01</td>\n<td>EvalError</td>\n<td>0x11</td>\n<td>Int8Array</td>\n</tr>\n<tr>\n<td>0x02</td>\n<td>RangeError</td>\n<td>0x12</td>\n<td>Uint8Array</td>\n</tr>\n<tr>\n<td>0x03</td>\n<td>ReferenceError</td>\n<td>0x13</td>\n<td>Int16Array</td>\n</tr>\n<tr>\n<td>0x04</td>\n<td>SyntaxError</td>\n<td>0x14</td>\n<td>Uint16Array</td>\n</tr>\n<tr>\n<td>0x05</td>\n<td>TypeError</td>\n<td>0x15</td>\n<td>Int32Array</td>\n</tr>\n<tr>\n<td>0x06</td>\n<td>URIError</td>\n<td>0x16</td>\n<td>Uint32Array</td>\n</tr>\n<tr>\n<td>0x07</td>\n<td></td>\n<td>0x17</td>\n<td>Float32Array</td>\n</tr>\n<tr>\n<td>0x08</td>\n<td></td>\n<td>0x18</td>\n<td>Float64Array</td>\n</tr>\n<tr>\n<td>0x09</td>\n<td></td>\n<td>0x19</td>\n<td>Uint8ClampedArray</td>\n</tr>\n<tr>\n<td>0x0A</td>\n<td>RegExp</td>\n<td>0x1A</td>\n<td>ArrayBuffer</td>\n</tr>\n<tr>\n<td>0x0B</td>\n<td>Boolean</td>\n<td>0x1B</td>\n<td>Buffer</td>\n</tr>\n<tr>\n<td>0x0C</td>\n<td>String</td>\n<td>0x1C</td>\n<td></td>\n</tr>\n<tr>\n<td>0x0D</td>\n<td>Date</td>\n<td>0x1D</td>\n<td>DataView</td>\n</tr>\n<tr>\n<td>0x0E</td>\n<td>Error</td>\n<td>0x1E</td>\n<td></td>\n</tr>\n<tr>\n<td>0x0F</td>\n<td>Number</td>\n<td>0x1F</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>Other extension types are mapped to built-in ExtBuffer object.</p>\n<h7>Custom Extension Types (Codecs)</h7>\n<p>Register a custom extension type number to serialize/deserialize your own class instances.</p>\n<pre><code class=\"language-js\">var msgpack = require(&quot;msgpack-lite&quot;);\n\nvar codec = msgpack.createCodec();\ncodec.addExtPacker(0x3F, MyVector, myVectorPacker);\ncodec.addExtUnpacker(0x3F, myVectorUnpacker);\n\nvar data = new MyVector(1, 2);\nvar encoded = msgpack.encode(data, {codec: codec});\nvar decoded = msgpack.decode(encoded, {codec: codec});\n\nfunction MyVector(x, y) {\n  this.x = x;\n  this.y = y;\n}\n\nfunction myVectorPacker(vector) {\n  var array = [vector.x, vector.y];\n  return msgpack.encode(array); // return Buffer serialized\n}\n\nfunction myVectorUnpacker(buffer) {\n  var array = msgpack.decode(buffer);\n  return new MyVector(array[0], array[1]); // return Object deserialized\n}\n</code></pre>\n<p>The first argument of <code>addExtPacker</code> and <code>addExtUnpacker</code> should be an integer within the range of 0 and 127 (0x0 and 0x7F). <code>myClassPacker</code> is a function that accepts an instance of <code>MyClass</code>, and should return a buffer representing that instance. <code>myClassUnpacker</code> is the opposite: it accepts a buffer and should return an instance of <code>MyClass</code>.</p>\n<p>If you pass an array of functions to <code>addExtPacker</code> or <code>addExtUnpacker</code>, the value to be encoded/decoded will pass through each one in order. This allows you to do things like this:</p>\n<pre><code class=\"language-js\">codec.addExtPacker(0x00, Date, [Number, msgpack.encode]);\n</code></pre>\n<p>You can also pass the <code>codec</code> option to <code>msgpack.Decoder(options)</code>, <code>msgpack.Encoder(options)</code>, <code>msgpack.createEncodeStream(options)</code>, and <code>msgpack.createDecodeStream(options)</code>.</p>\n<p>If you wish to modify the default built-in codec, you can access it at <code>msgpack.codec.preset</code>.</p>\n<h7>Custom Codec Options</h7>\n<p><code>msgpack.createCodec()</code> function accepts some options.</p>\n<p>It does NOT have the preset extension types defined when no options given.</p>\n<pre><code class=\"language-js\">var codec = msgpack.createCodec();\n</code></pre>\n<p><code>preset</code>: It has the preset extension types described above.</p>\n<pre><code class=\"language-js\">var codec = msgpack.createCodec({preset: true});\n</code></pre>\n<p><code>safe</code>: It runs a validation of the value before writing it into buffer. This is the default behavior for some old browsers which do not support <code>ArrayBuffer</code> object.</p>\n<pre><code class=\"language-js\">var codec = msgpack.createCodec({safe: true});\n</code></pre>\n<p><code>useraw</code>: It uses <code>raw</code> formats instead of <code>bin</code> and <code>str</code>.</p>\n<pre><code class=\"language-js\">var codec = msgpack.createCodec({useraw: true});\n</code></pre>\n<p><code>int64</code>: It decodes msgpack's <code>int64</code>/<code>uint64</code> formats with <a href=\"https://github.com/kawanet/int64-buffer\">int64-buffer</a> object.</p>\n<pre><code class=\"language-js\">var codec = msgpack.createCodec({int64: true});\n</code></pre>\n<p><code>binarraybuffer</code>: It ties msgpack's <code>bin</code> format with <code>ArrayBuffer</code> object, instead of <code>Buffer</code> object.</p>\n<pre><code class=\"language-js\">var codec = msgpack.createCodec({binarraybuffer: true, preset: true});\n</code></pre>\n<p><code>uint8array</code>: It returns Uint8Array object when encoding, instead of <code>Buffer</code> object.</p>\n<pre><code class=\"language-js\">var codec = msgpack.createCodec({uint8array: true});\n</code></pre>\n<p><code>usemap</code>: Uses the global JavaScript Map type, if available, to unpack\nMessagePack map elements.</p>\n<pre><code class=\"language-js\">var codec = msgpack.createCodec({usemap: true});\n</code></pre>\n<h7>Compatibility Mode</h7>\n<p>The <a href=\"https://github.com/kawanet/msgpack-lite/issues/22\">compatibility mode</a> respects for <a href=\"https://github.com/msgpack/msgpack/blob/master/spec-old.md\">msgpack's old spec</a>. Set <code>true</code> to <code>useraw</code>.</p>\n<pre><code class=\"language-js\">// default mode handles both str and bin formats individually\nmsgpack.encode(&quot;Aa&quot;); // =&gt; &lt;Buffer a2 41 61&gt; (str format)\nmsgpack.encode(new Buffer([0x41, 0x61])); // =&gt; &lt;Buffer c4 02 41 61&gt; (bin format)\n\nmsgpack.decode(new Buffer([0xa2, 0x41, 0x61])); // =&gt; 'Aa' (String)\nmsgpack.decode(new Buffer([0xc4, 0x02, 0x41, 0x61])); // =&gt; &lt;Buffer 41 61&gt; (Buffer)\n\n// compatibility mode handles only raw format both for String and Buffer\nvar options = {codec: msgpack.createCodec({useraw: true})};\nmsgpack.encode(&quot;Aa&quot;, options); // =&gt; &lt;Buffer a2 41 61&gt; (raw format)\nmsgpack.encode(new Buffer([0x41, 0x61]), options); // =&gt; &lt;Buffer a2 41 61&gt; (raw format)\n\nmsgpack.decode(new Buffer([0xa2, 0x41, 0x61]), options); // =&gt; &lt;Buffer 41 61&gt; (Buffer)\nmsgpack.decode(new Buffer([0xa2, 0x41, 0x61]), options).toString(); // =&gt; 'Aa' (String)\n</code></pre>\n<h7>Repository</h7>\n<ul>\n<li><a href=\"https://github.com/kawanet/msgpack-lite\">https://github.com/kawanet/msgpack-lite</a></li>\n</ul>\n<h7>See Also</h7>\n<ul>\n<li><a href=\"http://msgpack.org/\">http://msgpack.org/</a></li>\n</ul>\n<h7>License</h7>\n<p>The MIT License (MIT)</p>\n<p>Copyright (c) 2015-2016 Yusuke Kawasaki</p>\n<p>Permission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the &quot;Software&quot;), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:</p>\n<p>The above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.</p>\n<p>THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.</p>\n",
    "msgpack_repo_id": "kawanet-msgpack-lite",
    "msgpack_repo_homepage": "https://www.npmjs.com/package/msgpack-lite",
    "full_name": "kawanet/msgpack-lite",
    "owner": "kawanet",
    "html_url": "https://github.com/kawanet/msgpack-lite"
  },
  {
    "msgpack_lang": "Haskell",
    "msgpack_quickstart_html": "<h5>MessagePack for Haskell <a href=\"https://travis-ci.org/msgpack/msgpack-haskell\"><img src=\"https://travis-ci.org/msgpack/msgpack-haskell.svg?branch=master\" alt=\"Build Status\"></a></h5>\n<p>This is an implementation of <a href=\"https://en.wikipedia.org/wiki/MessagePack\">MessagePack</a> for <a href=\"https://www.haskell.org\">Haskell</a>.</p>\n<p>It contains:</p>\n<ul>\n<li>Serializer/Deserializer</li>\n<li>RPC</li>\n</ul>\n<h5>Installation</h5>\n<p>Execute following instructions:</p>\n<pre><code class=\"language-{.bash}\">$ cabal update\n$ cabal install msgpack\n$ cabal install msgpack-rpc\n</code></pre>\n<h5>Documentation</h5>\n<p><a href=\"https://www.haskell.org/haddock\">Haddock</a> documentation can be found on Hackage:</p>\n<ul>\n<li><a href=\"http://hackage.haskell.org/package/msgpack\">http://hackage.haskell.org/package/msgpack</a></li>\n<li><a href=\"http://hackage.haskell.org/package/msgpack-rpc\">http://hackage.haskell.org/package/msgpack-rpc</a></li>\n<li><a href=\"http://hackage.haskell.org/package/msgpack-aeson\">http://hackage.haskell.org/package/msgpack-aeson</a></li>\n<li><a href=\"http://hackage.haskell.org/package/msgpack-idl\">http://hackage.haskell.org/package/msgpack-idl</a></li>\n</ul>\n",
    "msgpack_repo_id": "msgpack-msgpack-haskell",
    "msgpack_repo_homepage": "http://hackage.haskell.org/package/msgpack",
    "full_name": "msgpack/msgpack-haskell",
    "owner": "msgpack",
    "html_url": "https://github.com/msgpack/msgpack-haskell"
  },
  {
    "msgpack_lang": "Node",
    "msgpack_quickstart_html": "<h5>msgpack5  <a href=\"https://github.com/mcollina/msgpack5/actions?query=workflow%3ACI\"><img src=\"https://github.com/mcollina/msgpack5/workflows/CI/badge.svg\" alt=\"CI\"></a></h5>\n<p>A msgpack v5 implementation for node.js and the browser, with extension point support.</p>\n<h6>Install</h6>\n<pre><code class=\"language-bash\">npm install msgpack5 --save\n</code></pre>\n<h6>Usage</h6>\n<pre><code class=\"language-js\">var msgpack = require('msgpack5')() // namespace our extensions\n  , a       = new MyType(2, 'a')\n  , encode  = msgpack.encode\n  , decode  = msgpack.decode\n\nmsgpack.register(0x42, MyType, mytipeEncode, mytipeDecode)\n\nconst hex = encode({ 'hello': 'world' }).toString('hex')\nconsole.log(hex)\n// 81a568656c6c6fa5776f726c64\nconst obj = decode(Buffer.from(hex, 'hex'))\nconsole.log(obj)\n// { hello: 'world' }\n\nconsole.log(decode(encode({ 'hello': 'world' })))\n// { hello: 'world' }\nconsole.log(encode(a).toString('hex'))\n// d5426161\nconsole.log(decode(encode(a)) instanceof MyType)\n// true\nconsole.log(decode(encode(a)))\n// { value: 'a', size: 2 }\n\nfunction MyType(size, value) {\n  this.value = value\n  this.size  = size\n}\n\nfunction mytipeEncode(obj) {\n  var buf = new Buffer(obj.size)\n  buf.fill(obj.value)\n  return buf\n}\n\nfunction mytipeDecode(data) {\n  var result = new MyType(data.length, data.toString('utf8', 0, 1))\n    , i\n\n  for (i = 0; i &lt; data.length; i++) {\n    if (data.readUInt8(0) != data.readUInt8(i)) {\n      throw new Error('should all be the same')\n    }\n  }\n\n  return result\n}\n</code></pre>\n<h6>In the Browser</h6>\n<p>This library is compatible with <a href=\"http://npm.im/browserify\">Browserify</a>.</p>\n<p>If you want to use standalone, grab the file in the <code>dist</code> folder of\nthis repo, and use in your own HTML page, the module will expose a\n<code>msgpack5</code> global.</p>\n<pre><code>&lt;script type=&quot;text/javascript&quot;\n        src=&quot;./msgpack5.min.js&quot;&gt;\n&lt;/script&gt;\n</code></pre>\n<h7>To build</h7>\n<pre><code>\tnpm run build\n</code></pre>\n<h6>API</h6>\n<p><a name=\"api\"></a></p>\n<h6>API</h6>\n<ul>\n<li><a href=\"#msgpack\"><code><b>msgpack()</b></code></a></li>\n<li><a href=\"#encode\"><code>msgpack().<b>encode()</b></code></a></li>\n<li><a href=\"#decode\"><code>msgpack().<b>decode()</b></code></a></li>\n<li><a href=\"#registerEncoder\"><code>msgpack().<b>registerEncoder()</b></code></a></li>\n<li><a href=\"#registerDecoder\"><code>msgpack().<b>registerDecoder()</b></code></a></li>\n<li><a href=\"#register\"><code>msgpack().<b>register()</b></code></a></li>\n<li><a href=\"#encoder\"><code>msgpack().<b>encoder()</b></code></a></li>\n<li><a href=\"#decoder\"><code>msgpack().<b>decoder()</b></code></a></li>\n</ul>\n<hr>\n<p><a name=\"msgpack\"></a></p>\n<h7>msgpack(options(obj))</h7>\n<p>Creates a new instance on which you can register new types for being\nencoded.</p>\n<p>options:</p>\n<ul>\n<li><code>forceFloat64</code>, a boolean to that forces all floats to be encoded as 64-bits floats. Defaults to false.</li>\n<li><code>sortKeys</code>, a boolean to force a determinate keys order</li>\n<li><code>compatibilityMode</code>, a boolean that enables &quot;compatibility mode&quot; which doesn't use bin format family and str 8 format. Defaults to false.</li>\n<li><code>disableTimestampEncoding</code>, a boolean that when set disables the encoding of Dates into the <a href=\"https://github.com/msgpack/msgpack/blob/master/spec.md#timestamp-extension-type\">timestamp extension type</a>. Defaults to false.</li>\n<li><code>preferMap</code>, a boolean that forces all maps to be decoded to <code>Map</code>s rather than plain objects. This ensures that <code>decode(encode(new Map())) instanceof Map</code> and that iteration order is preserved. Defaults to false.</li>\n<li><code>protoAction</code>, a string which can be <code>error|ignore|remove</code> that determines what happens when decoding a plain object with a <code>__proto__</code> property which would cause prototype poisoning. <code>error</code> (default) throws an error, <code>remove</code> removes the property, <code>ignore</code> (not recommended) allows the property, thereby causing prototype poisoning on the decoded object.</li>\n</ul>\n<hr>\n<p><a name=\"encode\"></a></p>\n<h7>encode(object)</h7>\n<p>Encodes <code>object</code> in msgpack, returns a <a href=\"http://npm.im/bl\">bl</a>.</p>\n<hr>\n<p><a name=\"decode\"></a></p>\n<h7>decode(buf)</h7>\n<p>Decodes buf from in msgpack. <code>buf</code> can be a <code>Buffer</code> or a <a href=\"http://npm.im/bl\">bl</a> instance.</p>\n<p>In order to support a stream interface, a user must pass in a <a href=\"http://npm.im/bl\">bl</a> instance.</p>\n<hr>\n<p><a name=\"registerEncoder\"></a></p>\n<h7>registerEncoder(check(obj), encode(obj))</h7>\n<p>Register a new custom object type for being automatically encoded.\nThe arguments are:</p>\n<ul>\n<li><code>check</code>, a function that will be called to check if the passed\nobject should be encoded with the <code>encode</code> function</li>\n<li><code>encode</code>, a function that will be called to encode an object in binary\nform; this function <strong>must</strong> return a <code>Buffer</code> which include the same type\nfor <a href=\"#registerDecoder\">registerDecoder</a>.</li>\n</ul>\n<hr>\n<p><a name=\"registerDecoder\"></a></p>\n<h7>registerDecoder(type, decode(buf))</h7>\n<p>Register a new custom object type for being automatically decoded.\nThe arguments are:</p>\n<ul>\n<li><code>type</code>, is a greater than zero integer identificating the type once serialized</li>\n<li><code>decode</code>, a function that will be called to decode the object from\nthe passed <code>Buffer</code></li>\n</ul>\n<hr>\n<p><a name=\"register\"></a></p>\n<h7>register(type, constructor, encode(obj), decode(buf))</h7>\n<p>Register a new custom object type for being automatically encoded and\ndecoded. The arguments are:</p>\n<ul>\n<li><code>type</code>, is a greater than zero integer identificating the type once serialized</li>\n<li><code>constructor</code>, the function that will be used to match the objects\nwith <code>instanceof</code></li>\n<li><code>encode</code>, a function that will be called to encode an object in binary\nform; this function <strong>must</strong> return a <code>Buffer</code> that can be\ndeserialized by the <code>decode</code> function</li>\n<li><code>decode</code>, a function that will be called to decode the object from\nthe passed <code>Buffer</code></li>\n</ul>\n<p>This is just a commodity that calls\n<a href=\"#registerEncoder\"><code>registerEncoder</code></a> and\n<a href=\"#registerDecoder\"><code>registerDecoder</code></a> internally.</p>\n<hr>\n<p><a name=\"encoder\"></a></p>\n<h7>encoder(options)</h7>\n<p>Builds a stream in object mode that encodes msgpack.</p>\n<p>Supported options:</p>\n<ul>\n<li><code>wrap</code>, objects should be passed to encoder in wrapped object {value: data}. Wrap option should be used if you need to pass null to encoder.</li>\n</ul>\n<hr>\n<p><a name=\"decoder\"></a></p>\n<h7>decoder(options)</h7>\n<p>Builds a stream in object mode that decodes msgpack.</p>\n<p>Supported options:</p>\n<ul>\n<li><code>wrap</code>, decoded objects returned in wrapped object {value: data}. Wrap option should be used if stream contains msgpack nil.</li>\n</ul>\n<h6>LevelUp Support</h6>\n<p><strong>msgpack5</strong> can be used as a LevelUp\n<a href=\"https://github.com/rvagg/node-levelup#leveluplocation-options-callback\"><code>valueEncoding</code></a> straight away:</p>\n<pre><code class=\"language-js\">var level = require('level')\n  , pack  = msgpack()\n  , db    = level('foo', {\n      valueEncoding: pack\n    })\n  , obj   = { my: 'obj' }\n\ndb.put('hello', obj, function(err) {\n  db.get('hello', function(err, result) {\n    console.log(result)\n    db.close()\n  })\n})\n\n</code></pre>\n<h6>Related projects</h6>\n<ul>\n<li><a href=\"http://npmjs.com/package/msgpack5rpc\">msgpack5rpc</a>: An implementation of the\n<a href=\"https://github.com/msgpack-rpc/msgpack-rpc/blob/master/spec.md\">msgpack-rpc spec</a>\non top of this library.</li>\n</ul>\n<h6>Disclaimer</h6>\n<p>This library is built fully on JS and on <a href=\"http://npm.im/bl\">bl</a> to\nsimplify the code. Every improvement that keeps the same API is welcome.</p>\n<h6>Acknowledgements</h6>\n<p>This project was kindly sponsored by <a href=\"http://nearform.com\">nearForm</a>.</p>\n<p>This library was originally built as the data format for\n<a href=\"http://npm.im/jschan\">JSChan</a>.</p>\n<h6>License</h6>\n<p>MIT</p>\n",
    "msgpack_repo_id": "mcollina-msgpack5",
    "msgpack_repo_homepage": "https://github.com/mcollina/msgpack5",
    "full_name": "mcollina/msgpack5",
    "owner": "mcollina",
    "html_url": "https://github.com/mcollina/msgpack5"
  },
  {
    "msgpack_lang": "Erlang",
    "msgpack_quickstart_html": "<h5>MessagePack Erlang</h5>\n<p><a href=\"https://hex.pm/packages/msgpack\"><img src=\"https://img.shields.io/hexpm/v/msgpack.svg\" alt=\"hex.pm version\"></a></p>\n<h6>Prerequisites for runtime</h6>\n<p><a href=\"http://erlang.org/\">Erlang/OTP</a>, &gt;= 22.0 Also based on\n<a href=\"https://github.com/msgpack/msgpack/blob/0b8f5ac67cdd130f4d4d4fe6afb839b989fdb86a/spec.md\">the new msgpack spec 0b8f5a</a>.</p>\n<h6>edit rebar.config to use in your application</h6>\n<pre><code class=\"language-erlang\">{deps, [\n  {msgpack, &quot;.*&quot;,\n    {git, &quot;git://github.com/msgpack/msgpack-erlang.git&quot;, {branch, &quot;master&quot;}}}\n]}.\n</code></pre>\n<p>Or as it is <a href=\"https://hex.pm/packages/msgpack\">now published at hex.pm</a>, just</p>\n<pre><code class=\"language-erlang\">{deps, [msgpack]}.\n</code></pre>\n<p>might work.</p>\n<h6>Simple deserialization</h6>\n<pre><code class=\"language-erlang\">Ham = msgpack:pack(Spam),\n{ok, Spam} = msgpack:unpack(Ham).\n</code></pre>\n<h6>Stream deserialization</h6>\n<pre><code class=\"language-erlang\">{Term0, Rest0} = msgpack:unpack_stream(Binary),\n{Term1, Rest1} = msgpack:unpack_stream(Rest0),\n...\n</code></pre>\n<h6>Options, for packing and unpacking</h6>\n<h7><code>{spec, new|old}</code></h7>\n<p>Both for packing and unpacking. Default is <code>new</code>. Major difference\nbetween old and new spec is:</p>\n<ul>\n<li>raw family (<code>0xa0~0xbf</code>, <code>0xda</code>, <code>0xdb</code>) becomes new str family</li>\n<li><code>0xd9</code> is new as str8</li>\n<li>new bin space (<code>0xc4, 0xc5, 0xc6</code> as bin8, bin16, bin32)</li>\n<li>new ext space (<code>0xc7, 0xc8, 0xc9</code> as ext8, ext16, ext32)</li>\n<li>new fixext space (<code>0xd4, 0xd5, 0xd6, 0xd7, 0xd8</code> as fixext1, fixext2, fixext4, fixext8, fixext16),</li>\n</ul>\n<p>The default is new spec. Old spec mode does not handle these new types but\nreturns error. To use\n<a href=\"https://github.com/msgpack/msgpack/blob/master/spec-old.md\">old spec</a>\nmode, this option is explicitly added.</p>\n<pre><code class=\"language-erlang\">OldHam = msgpack:pack(Spam, [{spec, old}]),\n{ok, Spam} = msgpack:unpack(OldHam, [{spec, old}]).\n</code></pre>\n<h7><code>{allow_atom, none|pack}</code></h7>\n<p>Only in packing. Atoms are packed as binaries. Default value is <code>pack</code>.\nOtherwise, any term including atoms throws badarg.</p>\n<h7><code>{known_atoms, [atom()]}</code></h7>\n<p>Both in packing and unpacking. In packing, if an atom is in this list\na binary is encoded as a binary. In unpacking, msgpacked binaries are\ndecoded as atoms with <code>erlang:binary_to_existing_atom/2</code> with encoding\n<code>utf8</code>. Default value is an empty list.</p>\n<p>Even if <code>allow_atom</code> is <code>none</code>, known atoms are packed.</p>\n<h7><code>{unpack_str, as_binary|as_list}</code></h7>\n<p>A switch to choose decoded term style of <code>str</code> type when <em>unpacking</em>.\nOnly available at new spec. Default is <code>as_list</code>.</p>\n<pre><code>mode        as_binary    as_list\n-----------+------------+-------\nbin         binary()     binary()\nstr         binary()     string()\n</code></pre>\n<h7><code>{use_nil, boolean()}</code></h7>\n<p>Handles Elixir <code>nil</code> as <code>null</code> Erlang atom. Default value is <code>false</code>.</p>\n<h7><code>{validate_string, boolean()}</code></h7>\n<p>Only in unpacking, UTF-8 validation at unpacking from <code>str</code> type will\nbe enabled. Default value is <code>false</code>.</p>\n<h7><code>{pack_str, from_binary|from_list|none}</code></h7>\n<p>A switch to choose packing of <code>string()</code> when packing. Only available\nat new spec. Default is <code>from_list</code> for symmetry with <code>unpack_str</code>\noption.</p>\n<pre><code>mode        from_list    from_binary    none\n-----------+------------+--------------+-----------------\nbinary()    bin          str*/bin       bin\nstring()    str*/array   array of int   array of int\nlist()      array        array          array\n</code></pre>\n<p>But the default option pays the cost of performance for symmetry. If\nthe overhead of UTF-8 validation is unacceptable, choosing <code>none</code> as\nthe option would be the best.</p>\n<ul>\n<li>* Tries to pack as <code>str</code> if it is a valid <code>string()</code>.</li>\n</ul>\n<h7><code>{map_format, map|jiffy|jsx}</code></h7>\n<p>Both at packing and unpacking. Default value is <code>map</code>.</p>\n<pre><code class=\"language-erlang\">msgpack:pack(#{ &lt;&lt;&quot;key&quot;&gt;&gt; =&gt; &lt;&lt;&quot;value&quot;&gt;&gt; }, []).\nmsgpack:pack(#{ &lt;&lt;&quot;key&quot;&gt;&gt; =&gt; &lt;&lt;&quot;value&quot;&gt;&gt; }, [{map_format, map}]).\nmsgpack:pack({[{&lt;&lt;&quot;key&quot;&gt;&gt;, &lt;&lt;&quot;value&quot;&gt;&gt;}]}, [{map_format, jiffy}]),\nmsgpack:pack([{&lt;&lt;&quot;key&quot;&gt;&gt;, &lt;&lt;&quot;value&quot;&gt;&gt;}], [{map_format, jsx}]).\n</code></pre>\n<h7><code>{ext, {msgpack_ext_packer(), msgpack_ext_unpacker()}|module()}</code></h7>\n<p>At both. The default behaviour in case of facing ext data at decoding\nis to ignore them as its length is known.</p>\n<p>Now msgpack-erlang supports ext type. Now you can serialize everything\nwith your original (de)serializer. That will enable us to handle\nerlang- native types like <code>pid()</code>, <code>ref()</code> contained in <code>tuple()</code>. See\n<code>test/msgpack_ext_example_tests.erl</code> for example code.</p>\n<pre><code class=\"language-erlang\">Packer = fun({ref, Ref}, Opt) when is_reference(Ref) -&gt; {ok, {12, term_to_binary(Ref)}} end,\nUnpacker = fun(12, Bin) -&gt; {ok, {ref, binary_to_term(Bin)}} end,\nRef = make_ref(),\nOpt = [{ext,{Packer,Unpacker}}],\n{ok, {ref, Ref}} = msgpack:unpack(msgpack:pack({ref, Ref}, Opt), Opt).\n</code></pre>\n<h6>Misc</h6>\n<h7>Float type</h7>\n<p>The Float type of Message Pack represents IEEE 754 floating point number, so it includes Nan and Infinity.\nIn unpacking, msgpack-erlang returns <code>nan</code>, <code>positive_infinity</code> and <code>negative_infinity</code>.</p>\n<h6>License</h6>\n<p>Apache License 2.0</p>\n<h5>Release Notes</h5>\n<h6>0.7.0</h6>\n<ul>\n<li>Support <code>nan</code>, <code>positive_infinity</code> and <code>negative_infinity</code></li>\n</ul>\n<h6>0.6.0</h6>\n<ul>\n<li>Support OTP 19.0</li>\n</ul>\n<h6>0.5.0</h6>\n<ul>\n<li>Renewed optional arguments to pack/unpack interface. This is\nincompatible change from 0.4 series.</li>\n</ul>\n<h6>0.4.0</h6>\n<ul>\n<li>Deprecate <code>nil</code></li>\n<li>Moved to rebar3</li>\n<li>Promote default map unpacker as default format when OTP is &gt;= 17</li>\n<li>Added QuickCheck tests</li>\n<li>Since this version OTP older than R16B03-1 are no more supported</li>\n</ul>\n<h6>0.3.5 / 0.3.4</h6>\n<ul>\n<li>0.3 series will be the last versions that supports R16B or older\nversions of OTP.</li>\n<li>OTP 18.0 support</li>\n<li>Promote default map unpacker as default format when OTP is &gt;= 18</li>\n</ul>\n<h6>0.3.3</h6>\n<ul>\n<li>Add OTP 17 series to Travis-CI tests</li>\n<li>Fix wrong numbering for ext types</li>\n<li>Allow packing maps even when {format,map} is not set</li>\n<li>Fix Dialyzer invalid contract warning</li>\n<li>Proper use of null for jiffy-style encoding/decoding</li>\n</ul>\n<h6>0.3.2</h6>\n<ul>\n<li>set back default style as jiffy</li>\n<li>fix bugs around nil/null handling</li>\n</ul>\n<h6>0.3.0</h6>\n<ul>\n<li>supports map new in 17.0</li>\n<li>jiffy-style maps will be deprecated in near future</li>\n<li>set default style as map</li>\n</ul>\n<h6>0.2.8</h6>\n<p>0.2 series works with OTP 17.0, R16, R15, and with MessagePack's new\nand old format. But does not support <code>map</code> type introduced in\nOTP 17.0.</p>\n<p>It also supports JSX-compatible mode.</p>\n",
    "msgpack_repo_id": "msgpack-msgpack-erlang",
    "msgpack_repo_homepage": "https://github.com/msgpack/msgpack-erlang",
    "full_name": "msgpack/msgpack-erlang",
    "owner": "msgpack",
    "html_url": "https://github.com/msgpack/msgpack-erlang"
  },
  {
    "msgpack_lang": "D",
    "msgpack_quickstart_html": "<p><a href=\"https://github.com/msgpack/msgpack-d/actions/workflows/d.yml\"><img src=\"https://github.com/msgpack/msgpack-d/actions/workflows/d.yml/badge.svg\" alt=\"CI\"></a></p>\n<h5>MessagePack for D</h5>\n<p>MessagePack is a binary-based JSON-like serialization library.</p>\n<p>MessagePack for D is a pure D implementation of MessagePack.</p>\n<h5>Features</h5>\n<ul>\n<li>Small size and High performance</li>\n<li>Zero copy serialization / deserialization</li>\n<li>Streaming deserializer for non-contiguous IO situation</li>\n<li>Supports D features (Ranges, Tuples, real type)</li>\n</ul>\n<p>Note: The <code>real</code> type is only supported in D.\nDon't use the <code>real</code> type when communicating with other programming languages.\nNote that <code>Unpacker</code> will raise an exception if a loss of precision occurs.</p>\n<h6>Current Limitations</h6>\n<ul>\n<li>No circular references support</li>\n<li>If you want to use the LDC compiler, you need at least version 0.15.2 beta2</li>\n</ul>\n<h5>Install</h5>\n<p>Use dub to add it as a dependency:</p>\n<pre><code class=\"language-sh\">% dub install msgpack-d\n</code></pre>\n<h5>Usage</h5>\n<p>Example code can be found in the <code>example</code> directory.</p>\n<p>The documentation can be found <a href=\"http://msgpack.github.io/msgpack-d/\">here</a></p>\n<h6>pack / unpack</h6>\n<p>msgpack-d is very simple to use. Use <code>pack</code> for serialization, and <code>unpack</code> for deserialization:</p>\n<pre><code class=\"language-D\">import std.file;\nimport msgpack;\n\nstruct S { int x; float y; string z; }\n\nvoid main()\n{\n    S input = S(10, 25.5, &quot;message&quot;);\n\n    // serialize data\n    ubyte[] inData = pack(input);\n\n    // write data to a file\n    write(&quot;file.dat&quot;, inData);\n\n    // read data from a file\n    ubyte[] outData = cast(ubyte[])read(&quot;file.dat&quot;);\n\n    // unserialize the data\n    S target = outData.unpack!S();\n\n    // verify data is the same\n    assert(target.x == input.x);\n    assert(target.y == input.y);\n    assert(target.z == input.z);\n}\n</code></pre>\n<h7>Feature: Skip serialization/deserialization of a specific field.</h7>\n<p>Use the <code>@nonPacked</code> attribute:</p>\n<pre><code class=\"language-d\">struct User\n{\n    string name;\n    @nonPacked int level;  // pack / unpack will ignore the 'level' field\n}\n</code></pre>\n<h7>Feature: Use your own serialization/deserialization routines for custom class and struct types.</h7>\n<p>msgpack-d provides the functions <code>registerPackHandler</code> / <code>registerUnpackHandler</code> to allow you\nto use custom routines during the serialization or deserialization of user-defined class and struct types.\nThis feature is especially useful when serializing a derived class object when that object is statically\ntyped as a base class object.</p>\n<p>For example:</p>\n<pre><code class=\"language-d\">class Document { }\nclass XmlDocument : Document\n{\n    this() { }\n    this(string name) { this.name = name; }\n    string name;\n}\n\nvoid xmlPackHandler(ref Packer p, ref XmlDocument xml)\n{\n    p.pack(xml.name);\n}\n\nvoid xmlUnpackHandler(ref Unpacker u, ref XmlDocument xml)\n{\n    u.unpack(xml.name);\n}\n\nvoid main()\n{\n    /// Register the 'xmlPackHandler' and 'xmlUnpackHandler' routines for\n    /// XmlDocument object instances.\n    registerPackHandler!(XmlDocument, xmlPackHandler);\n    registerUnpackHandler!(XmlDocument, xmlUnpackHandler);\n\n    /// Now we can serialize/deserialize XmlDocument object instances via a\n    /// base class reference.\n    Document doc = new XmlDocument(&quot;test.xml&quot;);\n    auto data = pack(doc);\n    XmlDocument xml = unpack!XmlDocument(data);\n    assert(xml.name == &quot;test.xml&quot;);  // xml.name is &quot;test.xml&quot;\n}\n</code></pre>\n<p>In addition, here is also a method using <code>@serializedAs</code> attribute:</p>\n<pre><code class=\"language-d\">import std.datetime: Clock, SysTime;\nstatic struct SysTimePackProxy\n{\n    static void serialize(ref Packer p, ref in SysTime tim)\n    {\n        p.pack(tim.toISOExtString());\n    }\n\n    static void deserialize(ref Unpacker u, ref SysTime tim)\n    {\n        string tmp;\n        u.unpack(tmp);\n        tim = SysTime.fromISOExtString(tmp);\n    }\n}\nstatic struct LogData\n{\n    string msg;\n    string file;\n    ulong  line;\n    @serializedAs!SysTimePackProxy SysTime timestamp;\n\n    this(string message, string file = __FILE__, ulong line = __LINE__)\n    {\n        this.msg = message;\n        this.file = file;\n        this.line = line;\n        this.timestamp = Clock.currTime();\n    }\n}\n\nvoid main()\n{\n    /// Now we can serialize/deserialize LogData\n    LogData[] logs;\n    logs ~= LogData(&quot;MessagePack is nice!&quot;);\n    auto data = pack(logs);\n    LogData[] datas = unpack!(LogData[])(data);\n    assert(datas[0].timestamp.toString() == datas[0].timestamp.toString());\n}\n</code></pre>\n<h6>The PackerImpl / Unpacker / StreamingUnpacker types</h6>\n<p>These types are used by the <code>pack</code> and <code>unpack</code> functions.</p>\n<p>See the documentation of <a href=\"http://msgpack.github.io/msgpack-d/#PackerImpl\">PackerImpl</a>, <a href=\"http://msgpack.github.io/msgpack-d/#Unpacker\">Unpacker</a> and <a href=\"http://msgpack.github.io/msgpack-d/#StreamingUnpacker\">StreamingUnpacker</a> for more details.</p>\n<h5>Links</h5>\n<ul>\n<li>\n<p><a href=\"http://msgpack.org/\">The MessagePack Project</a></p>\n<p>The official MessagePack protocol website.</p>\n</li>\n<li>\n<p><a href=\"https://github.com/msgpack/msgpack-d/issues\">msgpack-d's issue tracker</a></p>\n<p>Use this issue tracker to review and file bugs in msgpack-d.</p>\n</li>\n<li>\n<p><a href=\"http://github.com/msgpack/\">MessagePack's Github</a></p>\n<p>Other language bindings and implementations of the msgpack protocol can be found here.</p>\n</li>\n</ul>\n<h5>Copyright</h5>\n<pre><code>Copyright (c) 2010- Masahiro Nakagawa\n</code></pre>\n<h5>License</h5>\n<p>Distributed under the <a href=\"http://www.boost.org/users/license.html\">Boost Software License, Version 1.0</a>.</p>\n",
    "msgpack_repo_id": "msgpack-msgpack-d",
    "msgpack_repo_homepage": "https://github.com/msgpack/msgpack-d",
    "full_name": "msgpack/msgpack-d",
    "owner": "msgpack",
    "html_url": "https://github.com/msgpack/msgpack-d"
  },
  {
    "msgpack_lang": "C",
    "msgpack_quickstart_html": "<h6>Introduction</h6>\n<p>MPack is a C implementation of an encoder and decoder for the <a href=\"http://msgpack.org/\">MessagePack</a> serialization format. It is:</p>\n<ul>\n<li>Simple and easy to use</li>\n<li>Secure against untrusted data</li>\n<li>Lightweight, suitable for embedded</li>\n<li><a href=\"http://ludocode.github.io/mpack/\">Extensively documented</a></li>\n<li><a href=\"https://github.com/ludocode/schemaless-benchmarks#speed---desktop-pc\">Extremely fast</a></li>\n</ul>\n<p>The core of MPack contains a buffered reader and writer, and a tree-style parser that decodes into a tree of dynamically typed nodes. Helper functions can be enabled to read values of expected type, to work with files, to grow buffers or allocate strings automatically, to check UTF-8 encoding, and more.</p>\n<p>The MPack code is small enough to be embedded directly into your codebase. Simply download the <a href=\"https://github.com/ludocode/mpack/releases\">amalgamation package</a> and add <code>mpack.h</code> and <code>mpack.c</code> to your project.</p>\n<p>MPack supports all modern compilers, all desktop and smartphone OSes, WebAssembly, <a href=\"https://github.com/ludocode/mpack-linux-kernel\">inside the Linux kernel</a>, and even 8-bit microcontrollers such as Arduino. The MPack featureset can be customized at compile-time to set which features, components and debug checks are compiled, and what dependencies are available.</p>\n<h6>Build Status</h6>\n<p><a href=\"https://github.com/ludocode/mpack/actions?query=workflow%3A%22Unit+Tests%22\"><img src=\"https://github.com/ludocode/mpack/workflows/Unit%20Tests/badge.svg\" alt=\"Unit Tests\"></a>\n<a href=\"https://coveralls.io/github/ludocode/mpack?branch=develop\"><img src=\"https://coveralls.io/repos/ludocode/mpack/badge.svg?branch=develop&amp;service=github\" alt=\"Coverage\"></a></p>\n<h6>The Node API</h6>\n<p>The Node API parses a chunk of MessagePack data into an immutable tree of dynamically-typed nodes. A series of helper functions can be used to extract data of specific types from each node.</p>\n<pre><code class=\"language-C\">// parse a file into a node tree\nmpack_tree_t tree;\nmpack_tree_init_filename(&amp;tree, &quot;homepage-example.mp&quot;, 0);\nmpack_tree_parse(&amp;tree);\nmpack_node_t root = mpack_tree_root(&amp;tree);\n\n// extract the example data on the msgpack homepage\nbool compact = mpack_node_bool(mpack_node_map_cstr(root, &quot;compact&quot;));\nint schema = mpack_node_i32(mpack_node_map_cstr(root, &quot;schema&quot;));\n\n// clean up and check for errors\nif (mpack_tree_destroy(&amp;tree) != mpack_ok) {\n    fprintf(stderr, &quot;An error occurred decoding the data!\\n&quot;);\n    return;\n}\n</code></pre>\n<p>Note that no additional error handling is needed in the above code. If the file is missing or corrupt, if map keys are missing or if nodes are not in the expected types, special &quot;nil&quot; nodes and false/zero values are returned and the tree is placed in an error state. An error check is only needed before using the data.</p>\n<p>The above example allocates nodes automatically. A fixed node pool can be provided to the parser instead in memory-constrained environments. For maximum performance and minimal memory usage, the <a href=\"docs/expect.md\">Expect API</a> can be used to parse data of a predefined schema.</p>\n<h6>The Write API</h6>\n<p>The Write API encodes structured data to MessagePack.</p>\n<pre><code class=\"language-C\">// encode to memory buffer\nchar* data;\nsize_t size;\nmpack_writer_t writer;\nmpack_writer_init_growable(&amp;writer, &amp;data, &amp;size);\n\n// write the example on the msgpack homepage\nmpack_build_map(&amp;writer);\nmpack_write_cstr(&amp;writer, &quot;compact&quot;);\nmpack_write_bool(&amp;writer, true);\nmpack_write_cstr(&amp;writer, &quot;schema&quot;);\nmpack_write_uint(&amp;writer, 0);\nmpack_complete_map(&amp;writer);\n\n// finish writing\nif (mpack_writer_destroy(&amp;writer) != mpack_ok) {\n    fprintf(stderr, &quot;An error occurred encoding the data!\\n&quot;);\n    return;\n}\n\n// use the data\ndo_something_with_data(data, size);\nfree(data);\n</code></pre>\n<p>In the above example, we encode to a growable memory buffer. The writer can instead write to a pre-allocated or stack-allocated buffer (with up-front sizes for compound types), avoiding the need for memory allocation. The writer can also be provided with a flush function (such as a file or socket write function) to call when the buffer is full or when writing is done.</p>\n<p>If any error occurs, the writer is placed in an error state. The writer will flag an error if too much data is written, if the wrong number of elements are written, if an allocation failure occurs, if the data could not be flushed, etc. No additional error handling is needed in the above code; any subsequent writes are ignored when the writer is in an error state, so you don't need to check every write for errors.</p>\n<p>The above example uses <code>mpack_build_map()</code> to automatically determine the number of key-value pairs contained. If you know up-front the number of elements needed, you can pass it to <code>mpack_start_map()</code> instead. In that case the corresponding <code>mpack_finish_map()</code> will assert in debug mode that the expected number of elements were actually written, which is something that other MessagePack C/C++ libraries may not do.</p>\n<h6>Comparison With Other Parsers</h6>\n<p>MPack is rich in features while maintaining very high performance and a small code footprint. Here's a short feature table comparing it to other C parsers:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"></th>\n<th style=\"text-align:center\"><a href=\"https://github.com/ludocode/mpack\">MPack</a><br>(v1.1)</th>\n<th style=\"text-align:center\"><a href=\"https://github.com/msgpack/msgpack-c\">msgpack-c</a><br>(v3.3.0)</th>\n<th style=\"text-align:center\"><a href=\"https://github.com/camgunz/cmp\">CMP</a><br>(v19)</th>\n<th style=\"text-align:center\"><a href=\"https://github.com/clwi/CWPack\">CWPack</a><br>(v1.3.1)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">No libc requirement</td>\n<td style=\"text-align:center\">✓</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">✓</td>\n<td style=\"text-align:center\">✓</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Growable memory writer</td>\n<td style=\"text-align:center\">✓</td>\n<td style=\"text-align:center\">✓</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">✓*</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">File I/O helpers</td>\n<td style=\"text-align:center\">✓</td>\n<td style=\"text-align:center\">✓</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">✓*</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Stateful error handling</td>\n<td style=\"text-align:center\">✓</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">✓</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Incremental parser</td>\n<td style=\"text-align:center\">✓</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">✓</td>\n<td style=\"text-align:center\">✓</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Tree stream parser</td>\n<td style=\"text-align:center\">✓</td>\n<td style=\"text-align:center\">✓</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Compound size tracking</td>\n<td style=\"text-align:center\">✓</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Automatic compound size</td>\n<td style=\"text-align:center\">✓</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n<p>A larger feature comparison table is available <a href=\"docs/features.md\">here</a> which includes descriptions of the various entries in the table.</p>\n<p><a href=\"https://github.com/ludocode/schemaless-benchmarks\">This benchmarking suite</a> compares the performance of MPack to other implementations of schemaless serialization formats. MPack outperforms all JSON and MessagePack libraries (except <a href=\"https://github.com/clwi/CWPack\">CWPack</a>), and in some tests MPack is several times faster than <a href=\"https://github.com/miloyip/rapidjson\">RapidJSON</a> for equivalent data.</p>\n<h6>Why Not Just Use JSON?</h6>\n<p>Conceptually, MessagePack stores data similarly to JSON: they are both composed of simple values such as numbers and strings, stored hierarchically in maps and arrays. So why not just use JSON instead? The main reason is that JSON is designed to be human-readable, so it is not as efficient as a binary serialization format:</p>\n<ul>\n<li>\n<p>Compound types such as strings, maps and arrays are delimited, so appropriate storage cannot be allocated upfront. The whole object must be parsed to determine its size.</p>\n</li>\n<li>\n<p>Strings are not stored in their native encoding. Special characters such as quotes and backslashes must be escaped when written and converted back when read.</p>\n</li>\n<li>\n<p>Numbers are particularly inefficient (especially when parsing back floats), making JSON inappropriate as a base format for structured data that contains lots of numbers.</p>\n</li>\n<li>\n<p>Binary data is not supported by JSON at all. Small binary blobs such as icons and thumbnails need to be Base64 encoded or passed out-of-band.</p>\n</li>\n</ul>\n<p>The above issues greatly increase the complexity of the decoder. Full-featured JSON decoders are quite large, and minimal decoders tend to leave out such features as string unescaping and float parsing, instead leaving these up to the user or platform. This can lead to hard-to-find platform-specific and locale-specific bugs, as well as a greater potential for security vulnerabilites. This also significantly decreases performance, making JSON unattractive for use in applications such as mobile games.</p>\n<p>While the space inefficiencies of JSON can be partially mitigated through minification and compression, the performance inefficiencies cannot. More importantly, if you are minifying and compressing the data, then why use a human-readable format in the first place?</p>\n<h6>Testing MPack</h6>\n<p>The MPack build process does not build MPack into a library; it is used to build and run the unit tests. You do not need to build MPack or the unit testing suite to use MPack.</p>\n<p>See <a href=\"test/README.md\">test/README.md</a> for information on how to test MPack.</p>\n",
    "msgpack_repo_id": "ludocode-mpack",
    "msgpack_repo_homepage": "https://github.com/ludocode/mpack",
    "full_name": "ludocode/mpack",
    "owner": "ludocode",
    "html_url": "https://github.com/ludocode/mpack"
  },
  {
    "msgpack_lang": "Objective-C",
    "msgpack_quickstart_html": null,
    "msgpack_repo_id": "msgpack-msgpack-objectivec",
    "msgpack_repo_homepage": "https://github.com/msgpack/msgpack-objectivec",
    "full_name": "msgpack/msgpack-objectivec",
    "owner": "msgpack",
    "html_url": "https://github.com/msgpack/msgpack-objectivec"
  },
  {
    "msgpack_lang": "C",
    "msgpack_quickstart_html": "<h5>CMP</h5>\n<p><a href=\"https://travis-ci.org/camgunz/cmp\"><img src=\"https://travis-ci.org/camgunz/cmp.svg?branch=master\" alt=\"Build Status\"></a> <a href=\"https://coveralls.io/github/camgunz/cmp?branch=develop\"><img src=\"https://coveralls.io/repos/github/camgunz/cmp/badge.svg?branch=develop\" alt=\"Coverage Status\"></a></p>\n<p>CMP is a C implementation of the MessagePack serialization format.  It\ncurrently implements version 5 of the <a href=\"http://github.com/msgpack/msgpack/blob/master/spec.md\">MessagePack\nSpec</a>.</p>\n<p>CMP's goal is to be lightweight and straightforward, forcing nothing on the\nprogrammer.</p>\n<h6>License</h6>\n<p>While I'm a big believer in the GPL, I license CMP under the MIT license.</p>\n<h6>Example Usage</h6>\n<p>The following examples use a file as the backend, and are modeled after the\nexamples included with the msgpack-c project.</p>\n<pre><code class=\"language-C\">#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n#include &quot;cmp.h&quot;\n\nstatic bool read_bytes(void *data, size_t sz, FILE *fh) {\n    return fread(data, sizeof(uint8_t), sz, fh) == (sz * sizeof(uint8_t));\n}\n\nstatic bool file_reader(cmp_ctx_t *ctx, void *data, size_t limit) {\n    return read_bytes(data, limit, (FILE *)ctx-&gt;buf);\n}\n\nstatic bool file_skipper(cmp_ctx_t *ctx, size_t count) {\n    return fseek((FILE *)ctx-&gt;buf, count, SEEK_CUR);\n}\n\nstatic size_t file_writer(cmp_ctx_t *ctx, const void *data, size_t count) {\n    return fwrite(data, sizeof(uint8_t), count, (FILE *)ctx-&gt;buf);\n}\n\nstatic void error_and_exit(const char *msg) {\n    fprintf(stderr, &quot;%s\\n\\n&quot;, msg);\n    exit(EXIT_FAILURE);\n}\n\nint main(void) {\n    FILE *fh = NULL;\n    cmp_ctx_t cmp = {0};\n    uint32_t array_size = 0;\n    uint32_t str_size = 0;\n    char hello[6] = {0};\n    char message_pack[12] = {0};\n\n    fh = fopen(&quot;cmp_data.dat&quot;, &quot;w+b&quot;);\n\n    if (fh == NULL) {\n        error_and_exit(&quot;Error opening data.dat&quot;);\n    }\n\n    cmp_init(&amp;cmp, fh, file_reader, file_skipper, file_writer);\n\n    if (!cmp_write_array(&amp;cmp, 2)) {\n        error_and_exit(cmp_strerror(&amp;cmp));\n    }\n\n    if (!cmp_write_str(&amp;cmp, &quot;Hello&quot;, 5)) {\n        error_and_exit(cmp_strerror(&amp;cmp));\n    }\n\n    if (!cmp_write_str(&amp;cmp, &quot;MessagePack&quot;, 11)) {\n        error_and_exit(cmp_strerror(&amp;cmp));\n    }\n\n    rewind(fh);\n\n    if (!cmp_read_array(&amp;cmp, &amp;array_size)) {\n        error_and_exit(cmp_strerror(&amp;cmp));\n    }\n\n    /* You can read the str byte size and then read str bytes... */\n\n    if (!cmp_read_str_size(&amp;cmp, &amp;str_size)) {\n        error_and_exit(cmp_strerror(&amp;cmp));\n    }\n\n    if (str_size &gt; (sizeof(hello) - 1)) {\n        error_and_exit(&quot;Packed 'hello' length too long\\n&quot;);\n    }\n\n    if (!read_bytes(hello, str_size, fh)) {\n        error_and_exit(cmp_strerror(&amp;cmp));\n    }\n\n    /*\n     * ...or you can set the maximum number of bytes to read and do it all in\n     * one call\n     */\n\n    str_size = sizeof(message_pack);\n    if (!cmp_read_str(&amp;cmp, message_pack, &amp;str_size)) {\n        error_and_exit(cmp_strerror(&amp;cmp));\n    }\n\n    printf(&quot;Array Length: %u.\\n&quot;, array_size);\n    printf(&quot;[\\&quot;%s\\&quot;, \\&quot;%s\\&quot;]\\n&quot;, hello, message_pack);\n\n    fclose(fh);\n\n    return EXIT_SUCCESS;\n}\n</code></pre>\n<h6>Advanced Usage</h6>\n<p>See the <code>examples</code> folder.</p>\n<h6>Fast, Lightweight, Flexible, and Robust</h6>\n<p>CMP uses no internal buffers; conversions, encoding and decoding are done on\nthe fly.</p>\n<p>CMP's source and header file together are ~4k LOC.</p>\n<p>CMP makes no heap allocations.</p>\n<p>CMP uses standardized types rather than declaring its own, and it depends only\non <code>stdbool.h</code>, <code>stdint.h</code> and <code>string.h</code>.</p>\n<p>CMP is written using C89 (ANSI C), aside, of course, from its use of\nfixed-width integer types and <code>bool</code>.</p>\n<p>On the other hand, CMP's test suite requires C99.</p>\n<p>CMP only requires the programmer supply a read function, a write function, and\nan optional skip function.  In this way, the programmer can use CMP on memory,\nfiles, sockets, etc.</p>\n<p>CMP is portable.  It uses fixed-width integer types, and checks the endianness\nof the machine at runtime before swapping bytes (MessagePack is big-endian).</p>\n<p>CMP provides a fairly comprehensive error reporting mechanism modeled after\n<code>errno</code> and <code>strerror</code>.</p>\n<p>CMP is thread aware; while contexts cannot be shared between threads, each\nthread may use its own context freely.</p>\n<p>CMP is tested using the MessagePack test suite as well as a large set of custom\ntest cases.  Its small test program is compiled with clang using <code>-Wall -Werror -Wextra ...</code> along with several other flags, and generates no compilation\nerrors in either clang or GCC.</p>\n<p>CMP's source is written as readably as possible, using explicit, descriptive\nvariable names and a consistent, clear style.</p>\n<p>CMP's source is written to be as secure as possible.  Its testing suite checks\nfor invalid values, and data is always treated as suspect before it passes\nvalidation.</p>\n<p>CMP's API is designed to be clear, convenient and unsurprising.  Strings are\nnull-terminated, binary data is not, error codes are clear, and so on.</p>\n<p>CMP provides optional backwards compatibility for use with other MessagePack\nimplementations that only implement version 4 of the spec.</p>\n<h6>Building</h6>\n<p>There is no build system for CMP.  The programmer can drop <code>cmp.c</code> and <code>cmp.h</code>\nin their source tree and modify as necessary.  No special compiler settings are\nrequired to build it, and it generates no compilation errors in either clang or\ngcc.</p>\n<h6>Versioning</h6>\n<p>CMP's versions are single integers.  I don't use semantic versioning because\nI don't guarantee that any version is completely compatible with any other.  In\ngeneral, semantic versioning provides a false sense of security.  You should be\nevaluating compatibility yourself, not relying on some stranger's versioning\nconvention.</p>\n<h6>Stability</h6>\n<p>I only guarantee stability for versions released on\n<a href=\"../../releases\">the releases page</a>.  While rare, both <code>master</code> and <code>develop</code>\nbranches may have errors or mismatched versions.</p>\n<h6>Backwards Compatibility</h6>\n<p>Version 4 of the MessagePack spec has no <code>BIN</code> type, and provides no <code>STR8</code>\nmarker.  In order to remain backwards compatible with version 4 of MessagePack,\ndo the following:</p>\n<p>Avoid these functions:</p>\n<ul>\n<li><code>cmp_write_bin</code></li>\n<li><code>cmp_write_bin_marker</code></li>\n<li><code>cmp_write_str8_marker</code></li>\n<li><code>cmp_write_str8</code></li>\n<li><code>cmp_write_bin8_marker</code></li>\n<li><code>cmp_write_bin8</code></li>\n<li><code>cmp_write_bin16_marker</code></li>\n<li><code>cmp_write_bin16</code></li>\n<li><code>cmp_write_bin32_marker</code></li>\n<li><code>cmp_write_bin32</code></li>\n</ul>\n<p>Use these functions in lieu of their v5 counterparts:</p>\n<ul>\n<li><code>cmp_write_str_marker_v4</code> instead of <code>cmp_write_str_marker</code></li>\n<li><code>cmp_write_str_v4</code> instead of <code>cmp_write_str</code></li>\n<li><code>cmp_write_object_v4</code> instead of <code>cmp_write_object</code></li>\n</ul>\n<h6>Disabling Floating Point Operations</h6>\n<p>Thanks to <a href=\"https://github.com/tdragon\">tdragon</a> it's possible to disable\nfloating point operations in CMP by defining <code>CMP_NO_FLOAT</code>. No floating point\nfunctionality will be included.  Fair warning: this changes the ABI.</p>\n<h6>Setting Endianness at Compile Time</h6>\n<p>CMP will honor <code>WORDS_BIGENDIAN</code>. If defined to <code>0</code> it will convert data\nto/from little-endian format when writing/reading. If defined to <code>1</code> it won't.\nIf not defined, CMP will check at runtime.</p>\n",
    "msgpack_repo_id": "camgunz-cmp",
    "msgpack_repo_homepage": "https://github.com/camgunz/cmp",
    "full_name": "camgunz/cmp",
    "owner": "camgunz",
    "html_url": "https://github.com/camgunz/cmp"
  },
  {
    "msgpack_lang": "Objective-C",
    "msgpack_quickstart_html": "<h5>Install</h5>\n<pre><code>pod &quot;MPMessagePack&quot;\n</code></pre>\n<h6>Writing</h6>\n<pre><code class=\"language-objc\">#import &lt;MPMessagePack/MPMessagePack.h&gt;\n\nNSDictionary *dict =\n@{\n@&quot;n&quot;: @(32134123),\n@&quot;bool&quot;: @(YES),\n@&quot;array&quot;: @[@(1.1f), @(2.1)],\n@&quot;body&quot;: [NSData data],\n};\n\nNSData *data = [dict mp_messagePack];\n</code></pre>\n<p>Or via <code>MPMessagePackWriter</code>.</p>\n<pre><code class=\"language-objc\">NSError *error = nil;\nNSData *data = [MPMessagePackWriter writeObject:dict error:&amp;error];\n</code></pre>\n<p>If you need to use an ordered dictionary.</p>\n<pre><code class=\"language-objc\">MPOrderedDictionary *dict = [[MPOrderedDictionary alloc] init];\n[dict addEntriesFromDictionary:@{@&quot;c&quot;: @(1), @&quot;b&quot;: @(2), @&quot;a&quot;: @(3)}];\n[dict sortKeysUsingSelector:@selector(localizedCaseInsensitiveCompare:)];\n[dict mp_messagePack];\n</code></pre>\n<h6>Reading</h6>\n<pre><code class=\"language-objc\">id obj = [MPMessagePackReader readData:data error:&amp;error];\n</code></pre>\n<pre><code class=\"language-objc\">MPMessagePackReader *reader = [[MPMessagePackReader alloc] initWithData:data];\nid obj1 = [reader read:&amp;error]; // Read an object\nid obj2 = [reader read:&amp;error]; // Read another object\n</code></pre>\n",
    "msgpack_repo_id": "gabriel-MPMessagePack",
    "msgpack_repo_homepage": "https://github.com/gabriel/MPMessagePack",
    "full_name": "gabriel/MPMessagePack",
    "owner": "gabriel",
    "html_url": "https://github.com/gabriel/MPMessagePack"
  },
  {
    "msgpack_lang": "C++11",
    "msgpack_quickstart_html": "<h5>MsgPack v5 implementation for C++ 11</h5>\n<p><a href=\"https://www.gnu.org/licenses/gpl-3.0.en.html\"><img src=\"https://img.shields.io/badge/License-GPLv3-brightgreen.svg\" alt=\"License\"></a></p>\n<h6>Features</h6>\n<ul>\n<li>std::streambuf serializer and deserializer</li>\n<li>hierarchy or token stream</li>\n<li>push and pull parser</li>\n<li>byte wise data flow control</li>\n</ul>\n<h6>Small Example</h6>\n<pre><code>MsgPack::Serializer serializer(socket);  \nstd::vector&lt;std::unique_ptr&lt;MsgPack::Element&gt;&gt; arrayWithoutElements, arrayWith3Elements;\narrayWith3Elements.push_back(MsgPack::Factory(true));\narrayWith3Elements.push_back(MsgPack__Factory(Array(std::move(arrayWithoutElements))));\narrayWith3Elements.push_back(MsgPack::Factory(&quot;Hello World!&quot;));  \nserializer &lt;&lt; MsgPack__Factory(Array(std::move(arrayWith3Elements)));\n\nMsgPack::Deserializer deserializer(socket);  \ndeserializer.deserialize([](std::unique_ptr&lt;MsgPack::Element&gt; parsed) {\n    std::cout &lt;&lt; &quot;Parsed: &quot; &lt;&lt; *parsed &lt;&lt; &quot;\\n&quot;;\n    return false;\n}, true);\n</code></pre>\n<h6>Read More</h6>\n<p><a href=\"https://github.com/Lichtso/netLink/wiki/MsgPack\">Tutorial</a></p>\n",
    "msgpack_repo_id": "Lichtso-netLink",
    "msgpack_repo_homepage": "https://github.com/Lichtso/netLink",
    "full_name": "Lichtso/netLink",
    "owner": "Lichtso",
    "html_url": "https://github.com/Lichtso/netLink"
  },
  {
    "msgpack_lang": "C++17",
    "msgpack_quickstart_html": "<p><a href=\"https://travis-ci.com/mikeloomisgg/cppack\"><img src=\"https://travis-ci.com/mikeloomisgg/cppack.svg?branch=master\" alt=\"Build Status\"></a></p>\n<h5>cppack</h5>\n<p>A modern (c++17 required) implementation of the <a href=\"https://github.com/msgpack/msgpack/blob/master/spec.md\">msgpack spec</a>.</p>\n<p>Msgpack is a binary serialization specification. It allows you to save and load application objects like classes and structs over networks, to files, and between programs and even different languages.</p>\n<p>Check out <a href=\"https://mikeloomisgg.github.io/2019-07-02-making-a-serialization-library/\">this blog</a> for my rational creating this library.</p>\n<h6>Features</h6>\n<ul>\n<li>Fast and compact</li>\n<li>Full test coverage</li>\n<li>Easy to use</li>\n<li>Automatic type handling</li>\n<li>Open source MIT license</li>\n<li>Easy error handling</li>\n</ul>\n<h7>Single Header only template library</h7>\n<p>Want to use this library? Just #include the header and you're good to go. Its less than 1000 lines of code.</p>\n<h7>Cereal style packaging</h7>\n<p>Easily pack objects into byte arrays using a pack free function:</p>\n<pre><code class=\"language-c++\">struct Person {\n  std::string name;\n  uint16_t age;\n  std::vector&lt;std::string&gt; aliases;\n\n  template&lt;class T&gt;\n  void msgpack(T &amp;pack) {\n    pack(name, age, aliases);\n  }\n};\n\nint main() {\n    auto person = Person{&quot;John&quot;, 22, {&quot;Ripper&quot;, &quot;Silverhand&quot;}};\n\n    auto data = msgpack::pack(person); // Pack your object\n    auto john = msgpack::unpack&lt;Person&gt;(data.data()); // Unpack it\n}\n</code></pre>\n<p><a href=\"msgpack/tests/examples.cpp\">More Examples</a></p>\n<h7>Roadmap</h7>\n<ul>\n<li>Support for extension types\n<ul>\n<li>The msgpack spec allows for additional types to be enumerated as Extensions. If reasonable use cases come about for this feature then it may be added.</li>\n</ul>\n</li>\n<li>Name/value pairs\n<ul>\n<li>The msgpack spec uses the 'map' type differently than this library. This library implements maps in which key/value pairs must all have the same value types.</li>\n</ul>\n</li>\n<li>Endian conversion shortcuts\n<ul>\n<li>On platforms that already hold types in big endian, the serialization could be optimized using type traits.</li>\n</ul>\n</li>\n</ul>\n",
    "msgpack_repo_id": "mikeloomisgg-cppack",
    "msgpack_repo_homepage": "https://github.com/mikeloomisgg/cppack",
    "full_name": "mikeloomisgg/cppack",
    "owner": "mikeloomisgg",
    "html_url": "https://github.com/mikeloomisgg/cppack"
  },
  {
    "msgpack_lang": "Swift",
    "msgpack_quickstart_html": "<h5>MessagePack.swift</h5>\n<p><a href=\"http://cocoapods.org/pods/MessagePack.swift\"><img src=\"https://img.shields.io/cocoapods/v/MessagePack.swift.svg?style=flat\" alt=\"Version\"></a>\n<a href=\"http://cocoapods.org/pods/MessagePack.swift\"><img src=\"https://img.shields.io/cocoapods/l/MessagePack.swift.svg?style=flat\" alt=\"License\"></a>\n<a href=\"http://cocoapods.org/pods/MessagePack.swift\"><img src=\"https://img.shields.io/cocoapods/p/MessagePack.swift.svg?style=flat\" alt=\"Platform\"></a></p>\n<p>A fast, zero-dependency MessagePack implementation written in Swift 4. Supports Apple platforms and Linux.</p>\n<h6>Installation</h6>\n<h7>CocoaPods</h7>\n<p>To use CocoaPods, add the following to your Podfile:</p>\n<pre><code class=\"language-ruby\">pod 'MessagePack.swift', '~&gt; 4.0'\n</code></pre>\n<h7>Carthage</h7>\n<p>To use Carthage, add the following to your Cartfile:</p>\n<pre><code class=\"language-ogdl\">github &quot;a2/MessagePack.swift&quot; ~&gt; 4.0\n</code></pre>\n<h7>SPM (Swift Package Manager)</h7>\n<p>You can easily integrate MessagePack.swift in your app with SPM. Just add MessagePack.swift as a dependency:</p>\n<pre><code class=\"language-swift\">import PackageDescription\n\nlet package = Package(\n    name: &quot;MyAwesomeApp&quot;,\n    dependencies: [\n        .Package(url: &quot;https://github.com/a2/MessagePack.swift.git&quot;, majorVersion: 4),\n    ]\n)\n</code></pre>\n<h6>Version</h6>\n<ul>\n<li>Versions 4.x support Swift 5.2.</li>\n<li>Versions 3.x support Swift 4.</li>\n<li>Support for Swift 3 was dropped after <a href=\"https://github.com/a2/MessagePack.swift/releases/tag/2.1.1\">2.1.1</a>.</li>\n<li>Support for Swift 2 was dropped after <a href=\"https://github.com/a2/MessagePack.swift/releases/tag/1.2.0\">1.2.0</a>.</li>\n</ul>\n<h6>Authors</h6>\n<p>Alexsander Akers, me@a2.io</p>\n<h6>License</h6>\n<p>MessagePack.swift is available under the MIT license. See the LICENSE file for more info.</p>\n",
    "msgpack_repo_id": "a2-MessagePack.swift",
    "msgpack_repo_homepage": "https://github.com/a2/MessagePack.swift",
    "full_name": "a2/MessagePack.swift",
    "owner": "a2",
    "html_url": "https://github.com/a2/MessagePack.swift"
  },
  {
    "msgpack_lang": "Dart",
    "msgpack_quickstart_html": "<h5>msgpack_dart</h5>\n<p>MessagePack implementation for dart.</p>\n<p>Clean, simple, fast and with sane API and implementation.</p>\n",
    "msgpack_repo_id": "knopp-msgpack_dart",
    "msgpack_repo_homepage": "https://github.com/knopp/msgpack_dart",
    "full_name": "knopp/msgpack_dart",
    "owner": "knopp",
    "html_url": "https://github.com/knopp/msgpack_dart"
  },
  {
    "msgpack_lang": "Elixir",
    "msgpack_quickstart_html": "<h5>Msgpax</h5>\n<p><img src=\"https://github.com/lexmag/msgpax/workflows/CI/badge.svg\" alt=\"CI Status\">\n<a href=\"https://hex.pm/packages/msgpax\"><img src=\"https://img.shields.io/hexpm/v/msgpax.svg\" alt=\"Hex Version\"></a></p>\n<p>Msgpax is a high-performance and comprehensive library for serializing and deserializing Elixir terms using the <a href=\"http://msgpack.org/\">MessagePack</a> format.</p>\n<p><a href=\"http://hexdocs.pm/msgpax\">Documentation is available online</a>.</p>\n<h6>Features</h6>\n<ul>\n<li>Packing and unpacking Elixir terms via <a href=\"http://hexdocs.pm/msgpax/Msgpax.html#pack/1\"><code>Msgpax.pack/1</code></a> and <a href=\"http://hexdocs.pm/msgpax/Msgpax.html#unpack/1\"><code>Msgpax.unpack/1</code></a> (and their bang! variants).</li>\n<li>Unpacking of partial slices of MessagePack-encoded terms via <a href=\"http://hexdocs.pm/msgpax/Msgpax.html#unpack_slice/1\"><code>Msgpax.unpack_slice/1</code></a>.</li>\n<li>Support for &quot;Binary&quot; and &quot;Extension&quot; MessagePack types via <a href=\"http://hexdocs.pm/msgpax/Msgpax.Bin.html\"><code>Msgpax.Bin</code></a> and <a href=\"http://hexdocs.pm/msgpax/Msgpax.Ext.html\"><code>Msgpax.Ext</code></a>, respectively.</li>\n<li>Protocol-based packing through the <a href=\"http://hexdocs.pm/msgpax/Msgpax.Packer.html\"><code>Msgpax.Packer</code></a> protocol, that can be derived for user-defined structs.</li>\n<li>A Plug parser (<a href=\"http://hexdocs.pm/msgpax/Msgpax.PlugParser.html\"><code>Msgpax.PlugParser</code></a>) to parse requests with MessagePack-encoded bodies.</li>\n<li>Support for MessagePack data fragment manipulation.</li>\n</ul>\n<p>A detailed table that shows the relationship between Elixir types and MessagePack types can be found in the <a href=\"https://hexdocs.pm/msgpax/Msgpax.html\">documentation for the <code>Msgpax</code> module</a>.</p>\n<h6>Installation</h6>\n<p>Add <code>:msgpax</code> as a dependency in your <code>mix.exs</code> file:</p>\n<pre><code class=\"language-elixir\">def deps do\n  [{:msgpax, &quot;~&gt; 2.0&quot;}]\nend\n</code></pre>\n<p>Then, run <code>mix deps.get</code> in your shell to fetch the new dependency.</p>\n<h6>License</h6>\n<p>Msgpax is released under <a href=\"LICENSE\">the ISC license</a>.</p>\n",
    "msgpack_repo_id": "lexmag-msgpax",
    "msgpack_repo_homepage": "https://hexdocs.pm/msgpax",
    "full_name": "lexmag/msgpax",
    "owner": "lexmag",
    "html_url": "https://github.com/lexmag/msgpax"
  },
  {
    "msgpack_lang": "Lua",
    "msgpack_quickstart_html": "<h5>lua-MessagePack : a pure Lua implementation (spec v5)</h5>\n<p><a href=\"https://travis-ci.org/fperrad/lua-MessagePack\"><img src=\"https://travis-ci.org/fperrad/lua-MessagePack.png\" alt=\"Build Status\"></a></p>\n<h6>Introduction</h6>\n<p><a href=\"http://msgpack.org/\">MessagePack</a> is an efficient binary serialization format.</p>\n<p>It lets you exchange data among multiple languages like JSON but it's faster and smaller.</p>\n<p>It's a pure Lua implementation, without dependency.</p>\n<p>And it's really fast with <a href=\"http://luajit.org\">LuaJIT</a>.</p>\n<h6>Links</h6>\n<p>The homepage is at <a href=\"http://fperrad.github.io/lua-MessagePack/\">http://fperrad.github.io/lua-MessagePack/</a>,\nand the sources are hosted at <a href=\"http://github.com/fperrad/lua-MessagePack/\">http://github.com/fperrad/lua-MessagePack/</a>.</p>\n<h6>Copyright and License</h6>\n<p>Copyright (c) 2012-2013 Francois Perrad</p>\n<p>This library is licensed under the terms of the MIT/X11 license, like Lua itself.</p>\n",
    "msgpack_repo_id": "markstinson-lua-MessagePack",
    "msgpack_repo_homepage": "http://fperrad.github.io/lua-MessagePack/",
    "full_name": "markstinson/lua-MessagePack",
    "owner": "markstinson",
    "html_url": "https://github.com/markstinson/lua-MessagePack"
  },
  {
    "msgpack_lang": "JavaScript/NodeJS",
    "msgpack_quickstart_html": "<h5>msgpackr</h5>\n<p><a href=\"https://www.npmjs.org/package/msgpackr\"><img src=\"https://img.shields.io/npm/v/msgpackr.svg?style=flat-square\" alt=\"npm version\"></a>\n<a href=\"https://www.npmjs.org/package/msgpackr\"><img src=\"https://img.shields.io/npm/dw/msgpackr\" alt=\"npm version\"></a>\n<a href=\"benchmark.md\"><img src=\"https://img.shields.io/badge/encode-1.5GB%2Fs-yellow\" alt=\"encode\"></a>\n<a href=\"benchmark.md\"><img src=\"https://img.shields.io/badge/decode-2GB%2Fs-yellow\" alt=\"decode\"></a>\n<a href=\"README.md\"><img src=\"https://img.shields.io/npm/types/msgpackr\" alt=\"types\"></a>\n<a href=\"README.md\"><img src=\"https://img.shields.io/badge/module-ESM%2FCJS-blue\" alt=\"module\"></a>\n<a href=\"LICENSE\"><img src=\"https://img.shields.io/badge/license-MIT-brightgreen\" alt=\"license\"></a></p>\n<img align=\"right\" src=\"./assets/performance.png\" width=\"380\"/>\n<p>The msgpackr package is an extremely fast MessagePack NodeJS/JavaScript implementation. Currently, it is significantly faster than any other known implementations, faster than Avro (for JS), and generally faster than native V8 JSON.stringify/parse, on NodeJS. It also includes an optional record extension (the <code>r</code> in msgpackr), for defining record structures that makes MessagePack even faster and more compact, often over twice as fast as even native JSON functions, several times faster than other JS implementations, and 15-50% more compact. See the performance section for more details. Structured cloning (with support for cyclical references) is also supported through optional extensions.</p>\n<h6>Basic Usage</h6>\n<p>Install with:</p>\n<pre><code>npm i msgpackr\n</code></pre>\n<p>And <code>import</code> or <code>require</code> it for basic standard serialization/encoding (<code>pack</code>) and deserialization/decoding (<code>unpack</code>) functions:</p>\n<pre><code class=\"language-js\">import { unpack, pack } from 'msgpackr';\nlet serializedAsBuffer = pack(value);\nlet data = unpack(serializedAsBuffer);\n</code></pre>\n<p>This <code>pack</code> function will generate standard MessagePack without any extensions that should be compatible with any standard MessagePack parser/decoder. It will serialize JavaScript objects as MessagePack <code>map</code>s by default. The <code>unpack</code> function will deserialize MessagePack <code>map</code>s as an <code>Object</code> with the properties from the map.</p>\n<h6>Node Usage</h6>\n<p>The msgpackr package runs on any modern JS platform, but is optimized for NodeJS usage (and will use a node addon for performance boost as an optional dependency).</p>\n<h7>Streams</h7>\n<p>We can use the including streaming functionality (which further improves performance). The <code>PackrStream</code> is a NodeJS transform stream that can be used to serialize objects to a binary stream (writing to network/socket, IPC, etc.), and the <code>UnpackrStream</code> can be used to deserialize objects from a binary sream (reading from network/socket, etc.):</p>\n<pre><code class=\"language-js\">import { PackrStream } from 'msgpackr';\nlet stream = new PackrStream();\nstream.write(myData);\n\n</code></pre>\n<p>Or for a full example of sending and receiving data on a stream:</p>\n<pre><code class=\"language-js\">import { PackrStream, UnpackrStream } from 'msgpackr';\nlet sendingStream = new PackrStream();\nlet receivingStream = new UnpackrStream();\n// we are just piping to our own stream, but normally you would send and\n// receive over some type of inter-process or network connection.\nsendingStream.pipe(receivingStream);\nsendingStream.write(myData);\nreceivingStream.on('data', (data) =&gt; {\n\t// received data\n});\n</code></pre>\n<p>The <code>PackrStream</code> and <code>UnpackrStream</code> instances  will have also the record structure extension enabled by default (see below).</p>\n<h6>Deno and Bun Usage</h6>\n<p>Msgpackr modules are standard ESM modules and can be loaded directly from the <a href=\"https://deno.land/x/msgpackr\">deno.land registry for msgpackr</a> for use in Deno or using the NPM module loader with <code>import { unpack } from 'npm:msgpackr'</code>. The standard pack/encode and unpack/decode functionality is available on Deno, like other platforms. msgpackr can be used like any other package on Bun.</p>\n<h6>Browser Usage</h6>\n<p>Msgpackr works as standalone JavaScript as well, and runs on modern browsers. It includes a bundled script, at <code>dist/index.js</code> for ease of direct loading:</p>\n<pre><code class=\"language-html\">&lt;script src=&quot;node_modules/msgpackr/dist/index.js&quot;&gt;&lt;/script&gt;\n</code></pre>\n<p>This is UMD based, and will register as a module if possible, or create a <code>msgpackr</code> global with all the exported functions.</p>\n<p>For module-based development, it is recommended that you directly import the module of interest, to minimize dependencies that get pulled into your application:</p>\n<pre><code class=\"language-js\">import { unpack } from 'msgpackr/unpack' // if you only need to unpack\n</code></pre>\n<p>The package also includes a minified bundle in index.min.js.\nAdditionally, the package includes a version that excludes dynamic code evaluation called index-no-eval.js, for situations where Content Security Policy (CSP) forbids eval/Function in code. The dynamic evaluation provides important performance optimizations (for records), so is not recommended unless required by CSP policy.</p>\n<h6>Structured Cloning</h6>\n<p>You can also use msgpackr for <a href=\"https://html.spec.whatwg.org/multipage/structured-data.html\">structured cloning</a>. By enabling the <code>structuredClone</code> option, you can include references to other objects or cyclic references, and object identity will be preserved. Structured cloning also enables preserving certain typed objects like <code>Error</code>, <code>Set</code>, <code>RegExp</code> and TypedArray instances. For example:</p>\n<pre><code class=\"language-js\">let obj = {\n\tset: new Set(['a', 'b']),\n\tregular: /a\\spattern/\n};\nobj.self = obj;\nlet packr = new Packr({ structuredClone: true });\nlet serialized = packr.pack(obj);\nlet copy = packr.unpack(serialized);\ncopy.self === copy // true\ncopy.set.has('a') // true\n\n</code></pre>\n<p>This option is disabled by default because it uses extensions and reference checking degrades performance (by about 25-30%). (Note this implementation doesn't serialize every class/type specified in the HTML specification since not all of them make sense for storing across platforms.)</p>\n<h7>Alternate Terminology</h7>\n<p>If you prefer to use encoder/decode terminology, msgpackr exports aliases, so <code>decode</code> is equivalent to <code>unpack</code>, <code>encode</code> is <code>pack</code>, <code>Encoder</code> is <code>Packr</code>, <code>Decoder</code> is <code>Unpackr</code>, and <code>EncoderStream</code> and <code>DecoderStream</code> can be used as well.</p>\n<h6>Record / Object Structures</h6>\n<p>There is a critical difference between maps (or dictionaries) that hold an arbitrary set of keys and values (JavaScript <code>Map</code> is designed for these), and records or object structures that have a well-defined set of fields. Typical JS objects/records may have many instances re(use) the same structure. By using the record extension, this distinction is preserved in MessagePack and the encoding can reuse structures and not only provides better type preservation, but yield much more compact encodings and increase decoding performance by 2-3x. Msgpackr automatically generates record definitions that are reused and referenced by objects with the same structure. There are a number of ways to use this to our advantage. For large object structures with repeating nested objects with similar structures, simply serializing with the record extension can yield significant benefits. To use the record structures extension, we create a new <code>Packr</code> instance. By default a new <code>Packr</code> instance will have the record extension enabled:</p>\n<pre><code class=\"language-js\">import { Packr } from 'msgpackr';\nlet packr = new Packr();\npackr.pack(bigDataWithLotsOfObjects);\n\n</code></pre>\n<p>Another way to further leverage the benefits of the msgpackr record structures is to use streams that naturally allow for data to reuse based on previous record structures. The stream classes have the record structure extension enabled by default and provide excellent out-of-the-box performance.</p>\n<p>When creating a new <code>Packr</code>, <code>Unpackr</code>, <code>PackrStream</code>, or <code>UnpackrStream</code> instance, we can enable or disable the record structure extension with the <code>useRecords</code> property. When this is <code>false</code>, the record structure extension will be disabled (standard/compatibility mode), and all objects will revert to being serialized using MessageMap <code>map</code>s, and all <code>map</code>s will be deserialized to JS <code>Object</code>s as properties (like the standalone <code>pack</code> and <code>unpack</code> functions).</p>\n<p>Streaming with record structures works by encoding a structure the first time it is seen in a stream and referencing the structure in later messages that are sent across that stream. When an encoder can expect a decoder to understand previous structure references, this can be configured using the <code>sequential: true</code> flag, which is auto-enabled by streams, but can also be used with Packr instances.</p>\n<h7>Shared Record Structures</h7>\n<p>Another useful way of using msgpackr, and the record extension, is for storing data in a databases, files, or other storage systems. If a number of objects with common data structures are being stored, a shared structure can be used to greatly improve data storage and deserialization efficiency. In the simplest form, provide a <code>structures</code> array, which is updated if any new object structure is encountered:</p>\n<pre><code class=\"language-js\">import { Packr } from 'msgpackr';\nlet packr = new Packr({\n\tstructures: [... structures that were last generated ...]\n});\n</code></pre>\n<p>If you are working with persisted data, you will need to persist the <code>structures</code> data when it is updated. Msgpackr provides an API for loading and saving the <code>structures</code> on demand (which is robust and can be used in multiple-process situations where other processes may be updating this same <code>structures</code> array), we just need to provide a way to store the generated shared structure so it is available to deserialize stored data in the future:</p>\n<pre><code class=\"language-js\">import { Packr } from 'msgpackr';\nlet packr = new Packr({\n\tgetStructures() {\n\t\t// storing our data in file (but we could also store in a db or key-value store)\n\t\treturn unpack(readFileSync('my-shared-structures.mp')) || [];\n\t},\n\tsaveStructures(structures) {\n\t\twriteFileSync('my-shared-structures.mp', pack(structures));\n\t}\n});\n</code></pre>\n<p>Msgpackr will automatically add and saves structures as it encounters any new object structures (up to a limit of 32, by default). It will always add structures in an incremental/compatible way: Any object encoded with an earlier structure can be decoded with a later version (as long as it is persisted).</p>\n<h8>Shared Structures Options</h8>\n<p>By default there is a limit of 32 shared structures. This default is designed to record common shared structures, but also be resilient against sharing too many structures if there are many objects with dynamic properties that are likely to be repeated. This also allows for slightly more efficient one byte encoding. However, if your application has more structures that are commonly repeated, you can increase this limit by setting <code>maxSharedStructures</code> to a higher value. The maximum supported shared structures is 8160.</p>\n<p>You can also provide a <code>shouldShareStructure</code> function in the options if you want to specifically indicate which structures should be shared. This is called during the encoding process with the array of keys for a structure that is being considered for addition to the shared structure. For example, you might want:</p>\n<pre><code>\tmaxSharedStructures: 100,\n\tshouldShareStructure(keys) {\n\t\treturn !(keys[0] &gt; 1) // don't share structures that consist of numbers as keys\n\t}\n</code></pre>\n<h7>Reading Multiple Values</h7>\n<p>If you have a buffer with multiple values sequentially encoded, you can choose to parse and read multiple values. This can be done using the <code>unpackMultiple</code> function/method, which can return an array of all the values it can sequentially parse within the provided buffer. For example:</p>\n<pre><code class=\"language-js\">let data = new Uint8Array([1, 2, 3]) // encodings of values 1, 2, and 3\nlet values = unpackMultiple(data) // [1, 2, 3]\n</code></pre>\n<p>Alternately, you can provide a callback function that is called as the parsing occurs with each value, and can optionally terminate the parsing by returning <code>false</code>:</p>\n<pre><code class=\"language-js\">let data = new Uint8Array([1, 2, 3]) // encodings of values 1, 2, and 3\nunpackMultiple(data, (value) =&gt; {\n\t// called for each value\n\t// return false if you wish to end the parsing\n})\n</code></pre>\n<p>If you need to know the start and end offsets of the unpacked values, these are\nprovided as optional parameters in the callback:</p>\n<pre><code class=\"language-js\">let data = new Uint8Array([1, 2, 3]) // encodings of values 1, 2, and 3\nunpackMultiple(data, (value,start,end) =&gt; {\n\t// called for each value\n\t// `start` is the data buffer offset where the value was read from\n\t// `end` is `start` plus the byte length of the encoded value\n\t// return false if you wish to end the parsing\n})\n</code></pre>\n<h6>Options</h6>\n<p>The following options properties can be provided to the Packr or Unpackr constructor:</p>\n<ul>\n<li><code>useRecords</code> - Setting this to <code>false</code> disables the record extension and stores JavaScript objects as MessagePack maps, and unpacks maps as JavaScript <code>Object</code>s, which ensures compatibilty with other decoders. Setting this to a function will use records for objects where <code>useRecords(object)</code> returns <code>true</code>.</li>\n<li><code>structures</code> - Provides the array of structures that is to be used for record extension, if you want the structures saved and used again. This array will be modified in place with new record structures that are serialized (if less than 32 structures are in the array).</li>\n<li><code>moreTypes</code> - Enable serialization of additional built-in types/classes including typed arrays, <code>Set</code>s, <code>Map</code>s, and <code>Error</code>s.</li>\n<li><code>structuredClone</code> - This enables the structured cloning extensions that will encode object/cyclic references. <code>moreTypes</code> is enabled by default when this is enabled.</li>\n<li><code>mapsAsObjects</code> - If <code>true</code>, this will decode MessagePack maps and JS <code>Object</code>s with the map entries decoded to object properties. If <code>false</code>, maps are decoded as JavaScript <code>Map</code>s. This is disabled by default if <code>useRecords</code> is enabled (which allows <code>Map</code>s to be preserved), and is enabled by default if <code>useRecords</code> is disabled.</li>\n<li><code>useFloat32</code> - This will enable msgpackr to encode non-integer numbers as <code>float32</code>. See next section for possible values.</li>\n<li><code>variableMapSize</code> - This will use varying map size definition (fixmap, map16, map32) based on the number of keys when encoding objects, which yields slightly more compact encodings (for small objects), but is typically 5-10% slower during encoding. This is necessary if you need to use objects with more than 65535 keys. This is only relevant when record extension is disabled.</li>\n<li><code>bundleStrings</code> - If <code>true</code> this uses a custom extension that bundles strings together, so that they can be decoded more quickly on browsers and Deno that do not have access to the NodeJS addon. This a custom extension, so both encoder and decoder need to support this. This can yield significant decoding performance increases on browsers (30%-50%).</li>\n<li><code>copyBuffers</code> - When decoding a MessagePack with binary data (Buffers are encoded as binary data), copy the buffer rather than providing a slice/view of the buffer. If you want your input data to be collected or modified while the decoded embedded buffer continues to live on, you can use this option (there is extra overhead to copying).</li>\n<li><code>useTimestamp32</code> - Encode JS <code>Date</code>s in 32-bit format when possible by dropping the milliseconds. This is a more efficient encoding of dates. You can also cause dates to use 32-bit format by manually setting the milliseconds to zero (<code>date.setMilliseconds(0)</code>).</li>\n<li><code>sequential</code> - Encode structures in serialized data, and reference previously encoded structures with expectation that decoder will read the encoded structures in the same order as encoded, with <code>unpackMultiple</code>.</li>\n<li><code>largeBigIntToFloat</code> - If a bigint needs to be encoded that is larger than will fit in 64-bit integers, it will be encoded as a float-64 (otherwise will throw a RangeError).</li>\n<li><code>largeBigIntToString</code> - If a bigint needs to be encoded that is larger than will fit in 64-bit integers, it will be encoded as a string (otherwise will throw a RangeError).</li>\n<li><code>useBigIntExtension</code> - If a bigint needs to be encoded that is larger than will fit in 64-bit integers, it will be encoded using a custom extension that supports up to about 1000-bits of integer precision.</li>\n<li><code>encodeUndefinedAsNil</code> - Encodes a value of <code>undefined</code> as a MessagePack <code>nil</code>, the same as a <code>null</code>.</li>\n<li><code>int64AsType</code> - This will decode uint64 and int64 numbers as the specified type. The type can be <code>bigint</code> (default), <code>number</code>,  <code>string</code>, or <code>auto</code> (where range [-2^53...2^53] is represented by number and everything else by a bigint).</li>\n<li><code>skipValues</code> - This can be an array of property values that will indicate properties that should be skipped when serializing objects. For example, to mimic <code>JSON.stringify</code>'s behavior of skipping properties with a value of <code>undefined</code>, you can provide <code>skipValues: [undefined]</code>. Note, that this will only apply to serializing objects as standard MessagePack maps, not to records. Also, the array is checked by calling the <code>include</code> method, so you can provide an object with an <code>includes</code> if you want a custom function to skip values.</li>\n<li><code>onInvalidDate</code> - This can be provided as function that will be called when an invalid date is provided. The function can throw an error, or return a value that will be encoded in place of the invalid date. If not provided, an invalid date will be encoded as an invalid timestamp (which decodes with msgpackr back to an invalid date).</li>\n<li><code>writeFunction</code> - This can be provided as function that will be called when a function is encountered. The function can throw an error, or return a value that will be encoded in place of the function. If not provided, a function will be encoded as undefined (similar to <code>JSON.stringify</code>).</li>\n<li><code>mapAsEmptyObject</code> - Encodes JS <code>Map</code>s as empty objects (for back-compat with older libraries).</li>\n<li><code>setAsEmptyObject</code> - Encodes JS <code>Set</code>s as empty objects (for back-compat with older libraries).</li>\n<li><code>allowArraysInMapKeys</code> - Allows arrays to be used as keys in Maps, as long as all elements are strings, numbers, booleans, or bigints. When enabled, such arrays are flattened and converted to a string representation.</li>\n</ul>\n<h7>32-bit Float Options</h7>\n<p>By default all non-integer numbers are serialized as 64-bit float (double). This is fast, and ensures maximum precision. However, often real-world data doesn't not need 64-bits of precision, and using 32-bit encoding can be much more space efficient. There are several options that provide more efficient encodings. Using the decimal rounding options for encoding and decoding provides lossless storage of common decimal representations like 7.99, in more efficient 32-bit format (rather than 64-bit). The <code>useFloat32</code> property has several possible options, available from the module as constants:</p>\n<pre><code class=\"language-js\">import { FLOAT32_OPTIONS } from 'msgpackr';\nconst { ALWAYS, DECIMAL_ROUND, DECIMAL_FIT } = FLOAT32_OPTIONS;\n</code></pre>\n<ul>\n<li><code>ALWAYS</code> (1) - Always will encode non-integers (absolute less than 2147483648) as 32-bit float.</li>\n<li><code>DECIMAL_ROUND</code> (3) - Always will encode non-integers as 32-bit float, and when decoding 32-bit float, round to the significant decimal digits (usually 7, but 6 or 8 digits for some ranges).</li>\n<li><code>DECIMAL_FIT</code> (4) - Only encode non-integers as 32-bit float if all significant digits (usually up to 7) can be unambiguously encoded as a 32-bit float, and decode/unpack with decimal rounding (same as above). This will ensure round-trip encoding/decoding without loss in precision and uses 32-bit when possible.</li>\n</ul>\n<p>Note, that the performance is decreased with decimal rounding by about 20-25%, although if only 5% of your values are floating point, that will only have about a 1% impact overall.</p>\n<p>In addition, msgpackr exports a <code>roundFloat32(number)</code> function that can be used to round floating point numbers to the maximum significant decimal digits that can be stored in 32-bit float, just as DECIMAL_ROUND does when decoding. This can be useful for determining how a number will be decoded prior to encoding it.</p>\n<h6>Performance</h6>\n<h7>Native Acceleration</h7>\n<p>Msgpackr employs an optional native node-addon to accelerate the parsing of strings. This should be automatically installed and utilized on NodeJS. However, you can verify this by checking the <code>isNativeAccelerationEnabled</code> property that is exported from msgpackr. If this is <code>false</code>, the <code>msgpackr-extract</code> package may not have been properly installed, and you may want to verify that it is installed correctly:</p>\n<pre><code class=\"language-js\">import { isNativeAccelerationEnabled } from 'msgpackr'\nif (!isNativeAccelerationEnabled)\n\tconsole.warn('Native acceleration not enabled, verify that install finished properly')\n</code></pre>\n<h7>Benchmarks</h7>\n<p>Msgpackr is fast. Really fast. Here is comparison with the next fastest JS projects using the benchmark tool from <code>msgpack-lite</code> (and the sample data is from some clinical research data we use that has a good mix of different value types and structures). It also includes comparison to V8 native JSON functionality, and JavaScript Avro (<code>avsc</code>, a very optimized Avro implementation):</p>\n<table>\n<thead>\n<tr>\n<th>operation</th>\n<th style=\"text-align:right\">op</th>\n<th style=\"text-align:right\">ms</th>\n<th style=\"text-align:right\">op/s</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>buf = Buffer(JSON.stringify(obj));</td>\n<td style=\"text-align:right\">81600</td>\n<td style=\"text-align:right\">5002</td>\n<td style=\"text-align:right\">16313</td>\n</tr>\n<tr>\n<td>obj = JSON.parse(buf);</td>\n<td style=\"text-align:right\">90700</td>\n<td style=\"text-align:right\">5004</td>\n<td style=\"text-align:right\">18125</td>\n</tr>\n<tr>\n<td>require(&quot;msgpackr&quot;).pack(obj);</td>\n<td style=\"text-align:right\">169700</td>\n<td style=\"text-align:right\">5000</td>\n<td style=\"text-align:right\">33940</td>\n</tr>\n<tr>\n<td>require(&quot;msgpackr&quot;).unpack(buf);</td>\n<td style=\"text-align:right\">109700</td>\n<td style=\"text-align:right\">5003</td>\n<td style=\"text-align:right\">21926</td>\n</tr>\n<tr>\n<td>msgpackr w/ shared structures: packr.pack(obj);</td>\n<td style=\"text-align:right\">190400</td>\n<td style=\"text-align:right\">5001</td>\n<td style=\"text-align:right\">38072</td>\n</tr>\n<tr>\n<td>msgpackr w/ shared structures: packr.unpack(buf);</td>\n<td style=\"text-align:right\">422900</td>\n<td style=\"text-align:right\">5000</td>\n<td style=\"text-align:right\">84580</td>\n</tr>\n<tr>\n<td>buf = require(&quot;msgpack-lite&quot;).encode(obj);</td>\n<td style=\"text-align:right\">31300</td>\n<td style=\"text-align:right\">5005</td>\n<td style=\"text-align:right\">6253</td>\n</tr>\n<tr>\n<td>obj = require(&quot;msgpack-lite&quot;).decode(buf);</td>\n<td style=\"text-align:right\">15700</td>\n<td style=\"text-align:right\">5007</td>\n<td style=\"text-align:right\">3135</td>\n</tr>\n<tr>\n<td>buf = require(&quot;@msgpack/msgpack&quot;).encode(obj);</td>\n<td style=\"text-align:right\">103100</td>\n<td style=\"text-align:right\">5003</td>\n<td style=\"text-align:right\">20607</td>\n</tr>\n<tr>\n<td>obj = require(&quot;@msgpack/msgpack&quot;).decode(buf);</td>\n<td style=\"text-align:right\">59100</td>\n<td style=\"text-align:right\">5004</td>\n<td style=\"text-align:right\">11810</td>\n</tr>\n<tr>\n<td>buf = require(&quot;notepack&quot;).encode(obj);</td>\n<td style=\"text-align:right\">65500</td>\n<td style=\"text-align:right\">5007</td>\n<td style=\"text-align:right\">13081</td>\n</tr>\n<tr>\n<td>obj = require(&quot;notepack&quot;).decode(buf);</td>\n<td style=\"text-align:right\">33400</td>\n<td style=\"text-align:right\">5009</td>\n<td style=\"text-align:right\">6667</td>\n</tr>\n<tr>\n<td>obj = require(&quot;msgpack-unpack&quot;).decode(buf);</td>\n<td style=\"text-align:right\">6900</td>\n<td style=\"text-align:right\">5036</td>\n<td style=\"text-align:right\">1370</td>\n</tr>\n<tr>\n<td>require(&quot;avsc&quot;)...make schema/type...type.toBuffer(obj);</td>\n<td style=\"text-align:right\">89300</td>\n<td style=\"text-align:right\">5005</td>\n<td style=\"text-align:right\">17842</td>\n</tr>\n<tr>\n<td>require(&quot;avsc&quot;)...make schema/type...type.fromBuffer(obj);</td>\n<td style=\"text-align:right\">108400</td>\n<td style=\"text-align:right\">5001</td>\n<td style=\"text-align:right\">21675</td>\n</tr>\n</tbody>\n</table>\n<p>All benchmarks were performed on Node 15 / V8 8.6 (Windows i7-4770 3.4Ghz).\n(<code>avsc</code> is schema-based and more comparable in style to msgpackr with shared structures).</p>\n<p>Here is a benchmark of streaming data (again borrowed from <code>msgpack-lite</code>'s benchmarking), where msgpackr is able to take advantage of the structured record extension and really demonstrate its performance capabilities:</p>\n<table>\n<thead>\n<tr>\n<th>operation (1000000 x 2)</th>\n<th style=\"text-align:right\">op</th>\n<th style=\"text-align:right\">ms</th>\n<th style=\"text-align:right\">op/s</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>new PackrStream().write(obj);</td>\n<td style=\"text-align:right\">1000000</td>\n<td style=\"text-align:right\">372</td>\n<td style=\"text-align:right\">2688172</td>\n</tr>\n<tr>\n<td>new UnpackrStream().write(buf);</td>\n<td style=\"text-align:right\">1000000</td>\n<td style=\"text-align:right\">247</td>\n<td style=\"text-align:right\">4048582</td>\n</tr>\n<tr>\n<td>stream.write(msgpack.encode(obj));</td>\n<td style=\"text-align:right\">1000000</td>\n<td style=\"text-align:right\">2898</td>\n<td style=\"text-align:right\">345065</td>\n</tr>\n<tr>\n<td>stream.write(msgpack.decode(buf));</td>\n<td style=\"text-align:right\">1000000</td>\n<td style=\"text-align:right\">1969</td>\n<td style=\"text-align:right\">507872</td>\n</tr>\n<tr>\n<td>stream.write(notepack.encode(obj));</td>\n<td style=\"text-align:right\">1000000</td>\n<td style=\"text-align:right\">901</td>\n<td style=\"text-align:right\">1109877</td>\n</tr>\n<tr>\n<td>stream.write(notepack.decode(buf));</td>\n<td style=\"text-align:right\">1000000</td>\n<td style=\"text-align:right\">1012</td>\n<td style=\"text-align:right\">988142</td>\n</tr>\n<tr>\n<td>msgpack.Encoder().on(&quot;data&quot;,ondata).encode(obj);</td>\n<td style=\"text-align:right\">1000000</td>\n<td style=\"text-align:right\">1763</td>\n<td style=\"text-align:right\">567214</td>\n</tr>\n<tr>\n<td>msgpack.createDecodeStream().write(buf);</td>\n<td style=\"text-align:right\">1000000</td>\n<td style=\"text-align:right\">2222</td>\n<td style=\"text-align:right\">450045</td>\n</tr>\n<tr>\n<td>msgpack.createEncodeStream().write(obj);</td>\n<td style=\"text-align:right\">1000000</td>\n<td style=\"text-align:right\">1577</td>\n<td style=\"text-align:right\">634115</td>\n</tr>\n<tr>\n<td>msgpack.Decoder().on(&quot;data&quot;,ondata).decode(buf);</td>\n<td style=\"text-align:right\">1000000</td>\n<td style=\"text-align:right\">2246</td>\n<td style=\"text-align:right\">445235</td>\n</tr>\n</tbody>\n</table>\n<p>See the <a href=\"benchmark.md\">benchmark.md</a> for more benchmarks and information about benchmarking.</p>\n<h6>Custom Extensions</h6>\n<p>You can add your own custom extensions, which can be used to encode specific types/classes in certain ways. This is done by using the <code>addExtension</code> function, and specifying the class, extension <code>type</code> code (should be a number from 1-100, reserving negatives for MessagePack, 101-127 for msgpackr), and your <code>pack</code> and <code>unpack</code> functions (or just the one you need).</p>\n<pre><code class=\"language-js\">import { addExtension, Packr } from 'msgpackr';\n\nclass MyCustomClass {...}\n\nlet extPackr = new Packr();\naddExtension({\n\tClass: MyCustomClass,\n\ttype: 11, // register your own extension code (a type code from 1-100)\n\tpack(instance) {\n\t\t// define how your custom class should be encoded\n\t\treturn Buffer.from([instance.myData]); // return a buffer\n\t},\n\tunpack(buffer) {\n\t\t// define how your custom class should be decoded\n\t\tlet instance = new MyCustomClass();\n\t\tinstance.myData = buffer[0];\n\t\treturn instance; // decoded value from buffer\n\t}\n});\n</code></pre>\n<p>If you want to use msgpackr to encode and decode the data within your extensions, you can use the <code>read</code> and <code>write</code> functions and read and write data/objects that will be encoded and decoded by msgpackr, which can be easier and faster than creating and receiving separate buffers:</p>\n<pre><code class=\"language-js\">import { addExtension, Packr } from 'msgpackr';\n\nclass MyCustomClass {...}\n\nlet extPackr = new Packr();\naddExtension({\n\tClass: MyCustomClass,\n\ttype: 11, // register your own extension code (a type code from 1-100)\n\twrite(instance) {\n\t\t// define how your custom class should be encoded\n\t\treturn instance.myData; // return some data to be encoded\n\t}\n\tread(data) {\n\t\t// define how your custom class should be decoded,\n\t\t// data will already be unpacked/decoded\n\t\tlet instance = new MyCustomClass();\n\t\tinstance.myData = data;\n\t\treturn instance; // return decoded value\n\t}\n});\n</code></pre>\n<p>Note that you can just return the same object from <code>write</code>, and in this case msgpackr will encode it using the default object/array encoding:</p>\n<pre><code class=\"language-js\">addExtension({\n\tClass: MyCustomClass,\n\ttype: 12,\n\tread: function(data) {\n\t\tObject.setPrototypeOf(data, MyCustomClass.prototype)\n\t\treturn data\n\t},\n\twrite: function(data) {\n\t\treturn data\n\t}\n})\n</code></pre>\n<p>You can also create an extension with <code>Class</code> and <code>write</code> methods, but no <code>type</code> (or <code>read</code>), if you just want to customize how a class is serialized without using MessagePack extension encoding.</p>\n<h7>Additional Performance Optimizations</h7>\n<p>Msgpackr is already fast, but here are some tips for making it faster:</p>\n<h8>Buffer Reuse</h8>\n<p>Msgpackr is designed to work well with reusable buffers. Allocating new buffers can be relatively expensive, so if you have Node addons, it can be much faster to reuse buffers and use memcpy to copy data into existing buffers. Then msgpackr <code>unpack</code> can be executed on the same buffer, with new data, and optionally take a second paramter indicating the effective size of the available data in the buffer.</p>\n<h8>Arena Allocation (<code>useBuffer()</code>)</h8>\n<p>During the serialization process, data is written to buffers. Again, allocating new buffers is a relatively expensive process, and the <code>useBuffer</code> method can help allow reuse of buffers that will further improve performance. With <code>useBuffer</code> method, you can provide a buffer, serialize data into it, and when it is known that you are done using that buffer, you can call <code>useBuffer</code> again to reuse it. The use of <code>useBuffer</code> is never required, buffers will still be handled and cleaned up through GC if not used, it just provides a small performance boost.</p>\n<h6>Record Structure Extension Definition</h6>\n<p>The record struction extension uses extension id 0x72 (&quot;r&quot;) to declare the use of this functionality. The extension &quot;data&quot; byte (or bytes) identifies the byte or bytes used to identify the start of a record in the subsequent MessagePack block or stream. The identifier byte (or the first byte in a sequence) must be from 0x40 - 0x7f (and therefore replaces one byte representations of positive integers 64 - 127, which can alternately be represented with int or uint types). The extension declaration must be immediately follow by an MessagePack array that defines the field names of the record structure.</p>\n<p>Once a record identifier and record field names have been defined, the parser/decoder should proceed to read the next value. Any subsequent use of the record identifier as a value in the block or stream should parsed as a record instance, and the next n values, where is n is the number of fields (as defined in the array of field names), should be read as the values of the fields. For example, here we have defined a structure with fields &quot;foo&quot; and &quot;bar&quot;, with the record identifier 0x40, and then read a record instance that defines the field values of 4 and 2, respectively:</p>\n<pre><code>+--------+--------+--------+~~~~~~~~~~~~~~~~~~~~~~~~~+--------+--------+\n|  0xd4  |  0x72  |  0x40  | array: [ &quot;foo&quot;, &quot;bar&quot; ] |  0x04  |  0x02  |\n+--------+--------+--------+~~~~~~~~~~~~~~~~~~~~~~~~~+--------+--------+\n</code></pre>\n<p>Which should generate an object that would correspond to JSON:</p>\n<pre><code class=\"language-js\">{ &quot;foo&quot;: 4, &quot;bar&quot;: 2}\n</code></pre>\n<h6>Additional value types</h6>\n<p>msgpackr supports <code>undefined</code> (using fixext1 + type: 0 + data: 0 to match other JS implementations), <code>NaN</code>, <code>Infinity</code>, and <code>-Infinity</code> (using standard IEEE 754 representations with doubles/floats).</p>\n<h7>Dates</h7>\n<p>msgpackr saves all JavaScript <code>Date</code>s using the standard MessagePack date extension (type -1), using the smallest of 32-bit, 64-bit or 96-bit format needed to store the date without data loss (or using 32-bit if useTimestamp32 options is specified).</p>\n<h7>Structured Cloning</h7>\n<p>With structured cloning enabled, msgpackr will also use extensions to store Set, Map, Error, RegExp, ArrayBufferView objects and preserve their types.</p>\n<h6>Alternate Encoding/Package</h6>\n<p>The high-performance serialization and deserialization algorithms in the msgpackr package are also available in the <a href=\"https://github.com/kriszyp/cbor-x\">cbor-x</a> for the CBOR format, with the same API and design. A quick summary of the pros and cons of using MessagePack vs CBOR are:</p>\n<ul>\n<li>MessagePack has wider adoption, and, at least with this implementation is slightly more efficient (by roughly 1%).</li>\n<li>CBOR has an <a href=\"https://tools.ietf.org/html/rfc7049\">official IETF standardization track</a>, and the record extensions is conceptually/philosophically a better fit for CBOR tags.</li>\n</ul>\n<h6>License</h6>\n<p>MIT</p>\n<h7>Browser Consideration</h7>\n<p>MessagePack can be a great choice for high-performance data delivery to browsers, as reasonable data size is possible without compression. And msgpackr works very well in modern browsers. However, it is worth noting that if you want highly compact data, brotli or gzip are most effective in compressing, and MessagePack's character frequency tends to defeat Huffman encoding used by these standard compression algorithms, resulting in less compact data than compressed JSON.</p>\n<h7>Credits</h7>\n<p>Various projects have been inspirations for this, and code has been borrowed from https://github.com/msgpack/msgpack-javascript and https://github.com/mtth/avsc.</p>\n",
    "msgpack_repo_id": "kriszyp-msgpackr",
    "msgpack_repo_homepage": "https://github.com/kriszyp/msgpackr",
    "full_name": "kriszyp/msgpackr",
    "owner": "kriszyp",
    "html_url": "https://github.com/kriszyp/msgpackr"
  },
  {
    "msgpack_lang": "Scala",
    "msgpack_quickstart_html": "<h5>MessagePack for Scala</h5>\n<p><a href=\"https://travis-ci.org/msgpack/msgpack-scala\"><img src=\"https://travis-ci.org/msgpack/msgpack-scala.svg?branch=master\" alt=\"Build Status\"></a></p>\n<ul>\n<li>Message Pack specification: https://github.com/msgpack/msgpack/blob/master/spec.md</li>\n</ul>\n<h6>Quick Start</h6>\n<p><a href=\"https://maven-badges.herokuapp.com/maven-central/org.msgpack/msgpack-scala_2.12/\"><img src=\"https://maven-badges.herokuapp.com/maven-central/org.msgpack/msgpack-scala_2.12/badge.svg\" alt=\"Maven Central\"></a></p>\n<pre><code>libraryDependencies += &quot;org.msgpack&quot; %% &quot;msgpack-scala&quot; % &quot;(version)&quot;\n</code></pre>\n<p>General usage is the same with msgpack-java. See this <a href=\"https://github.com/msgpack/msgpack-java/blob/develop/msgpack-core/src/test/java/org/msgpack/core/example/MessagePackExample.java\">example code (Java)</a>.</p>\n<h6>For MessagePack Developers</h6>\n<h7>Basic sbt commands</h7>\n<p>Enter the sbt console:</p>\n<pre><code>$ ./sbt\n</code></pre>\n<p>Here is a list of sbt commands for daily development:</p>\n<pre><code>&gt; ~compile                                 # Compile source codes\n&gt; ~test:compile                            # Compile both source and test codes\n&gt; ~test                                    # Run tests upon source code change\n&gt; ~test-only *MessagePackTest              # Run tests in the specified class\n&gt; ~test-only *MessagePackTest -- -n prim   # Run the test tagged as &quot;prim&quot;\n&gt; project msgpack-scala                    # Focus on a specific project\n&gt; package                                  # Create a jar file in the target folder of each project\n&gt; scalafmt                                 # Reformat source codes\n&gt; ; coverage; test; coverageReport; coverageAggregate;  # Code coverage\n</code></pre>\n<h7>Publishing</h7>\n<pre><code>&gt; publishLocal            # Install to local .ivy2 repository\n&gt; publish                 # Publishing a snapshot version to the Sonatype repository\n\n&gt; release                 # Run the release procedure (set a new version, run tests, upload artifacts, then deploy to Sonatype)\n</code></pre>\n<p>For publishing to Maven central, msgpack-scala uses <a href=\"https://github.com/xerial/sbt-sonatype\">sbt-sonatype</a> plugin. Set Sonatype account information (user name and password) in the global sbt settings. To protect your password, never include this file in your project.</p>\n<p><em><strong>$HOME/.sbt/(sbt-version)/sonatype.sbt</strong></em></p>\n<pre><code>credentials += Credentials(&quot;Sonatype Nexus Repository Manager&quot;,\n        &quot;oss.sonatype.org&quot;,\n        &quot;(Sonatype user name)&quot;,\n        &quot;(Sonatype password)&quot;)\n</code></pre>\n",
    "msgpack_repo_id": "msgpack-msgpack-scala",
    "msgpack_repo_homepage": "https://github.com/msgpack/msgpack-scala",
    "full_name": "msgpack/msgpack-scala",
    "owner": "msgpack",
    "html_url": "https://github.com/msgpack/msgpack-scala"
  },
  {
    "msgpack_lang": "C++20",
    "msgpack_quickstart_html": "<h5><img src=\"https://img.shields.io/badge/c++-%2300599C.svg?style=for-the-badge&amp;logo=c%2B%2B&amp;logoColor=white\" alt=\"C++\"> reflect-cpp</h5>\n<p><a href=\"https://opensource.org/licenses/MIT\"><img src=\"https://img.shields.io/badge/License-MIT-yellow.svg\" alt=\"License: MIT\"></a>\n<a href=\"https://github.com/getml/reflect-cpp/graphs/commit-activity\"><img src=\"https://img.shields.io/badge/Maintained%3F-yes-green.svg\" alt=\"Maintenance\"></a>\n<a href=\"https://shields.io/\"><img src=\"https://img.shields.io/badge/C++-20-blue.svg\" alt=\"Generic badge\"></a>\n<a href=\"https://shields.io/\"><img src=\"https://img.shields.io/badge/gcc-11+-blue.svg\" alt=\"Generic badge\"></a>\n<a href=\"https://shields.io/\"><img src=\"https://img.shields.io/badge/clang-14+-blue.svg\" alt=\"Generic badge\"></a>\n<a href=\"https://shields.io/\"><img src=\"https://img.shields.io/badge/MSVC-17+-blue.svg\" alt=\"Generic badge\"></a>\n<a href=\"https://conan.io/center/recipes/reflect-cpp\"><img src=\"https://img.shields.io/conan/v/reflect-cpp\" alt=\"Conan Center\"></a></p>\n<p><strong>📖 Documentation</strong>: https://rfl.getml.com</p>\n<p><img src=\"banner1.png\" alt=\"image\"></p>\n<p><strong>reflect-cpp</strong> is a C++-20 library for <strong>fast serialization, deserialization and validation</strong> using reflection, similar to <a href=\"https://github.com/pydantic/pydantic\">pydantic</a> in Python, <a href=\"https://github.com/serde-rs\">serde</a> in Rust, <a href=\"https://github.com/golang/go/tree/master/src/encoding\">encoding</a> in Go or <a href=\"https://github.com/haskell/aeson/tree/master\">aeson</a> in Haskell.</p>\n<p>Moreover, reflect-cpp is the basis for <a href=\"https://github.com/getml/sqlgen\">sqlgen</a>, a <strong>modern, type-safe ORM and SQL query generator</strong> for C++20, inspired by Python's SQLAlchemy/SQLModel and Rust's Diesel. It provides a fluent, composable interface for database operations with compile-time type checking and SQL injection protection.</p>\n<p>reflect-cpp and sqlgen fill important gaps in C++ development. They reduce boilerplate code and increase code safety. Together, they enable reliable and efficient ETL pipelines.</p>\n<h7>Design principles for reflect-cpp include:</h7>\n<ul>\n<li>Close integration with <a href=\"https://github.com/getml/reflect-cpp?tab=readme-ov-file#support-for-containers\">containers</a> from the C++ standard library</li>\n<li>Close adherence to C++ idioms</li>\n<li>Out-of-the-box support for <a href=\"https://rfl.getml.com/supported_formats/json\">JSON</a></li>\n<li>Simple <a href=\"https://rfl.getml.com/install\">installation</a></li>\n<li>Simple extendability to <a href=\"https://rfl.getml.com/supported_formats/supporting_your_own_format\">other serialization formats</a></li>\n<li>Simple extendability to <a href=\"https://rfl.getml.com/concepts/custom_classes\">custom classes</a></li>\n<li>Being one of the fastest serialization libraries in existence, as demonstrated by our <a href=\"https://rfl.getml.com/benchmarks\">benchmarks</a></li>\n</ul>\n<br>\n<h6>Table of Contents</h6>\n<h7>On this page</h7>\n<ul>\n<li><a href=\"#serialization-formats\">Serialization formats</a></li>\n<li><a href=\"#feature-overview\">Feature Overview</a>\n<ul>\n<li><a href=\"#simple-example\">Simple Example</a></li>\n<li><a href=\"#more-comprehensive-example\">More Comprehensive Example</a></li>\n<li><a href=\"#tabular-data\">Tabular data</a></li>\n<li><a href=\"#error-messages\">Error messages</a></li>\n<li><a href=\"#json-schema\">JSON schema</a></li>\n<li><a href=\"#enums\">Enums</a></li>\n<li><a href=\"#algebraic-data-types\">Algebraic data types</a></li>\n<li><a href=\"#extra-fields\">Extra fields</a></li>\n<li><a href=\"#reflective-programming\">Reflective programming</a></li>\n<li><a href=\"#support-for-containers\">Standard Library Integration</a></li>\n</ul>\n</li>\n<li><a href=\"#the-team-behind-reflect-cpp\">The team behind reflect-cpp</a></li>\n<li><a href=\"#license\">License</a></li>\n</ul>\n<h7>More in our <a href=\"https://rfl.getml.com\">documentation</a>:</h7>\n<ul>\n<li><a href=\"https://rfl.getml.com/install/#option-2-compilation-using-cmake\">Installation ↗</a></li>\n<li><a href=\"https://rfl.getml.com/benchmarks\">Benchmarks ↗</a></li>\n<li><a href=\"https://rfl.getml.com/contributing\">How to contribute ↗</a></li>\n<li><a href=\"https://rfl.getml.com/contributing/#compiling-and-running-the-tests\">Compiling and running the tests ↗</a></li>\n</ul>\n<h6>Serialization formats</h6>\n<p>reflect-cpp provides a unified reflection-based interface across different serialization formats. It is deliberately designed in a very modular way, using <a href=\"https://en.cppreference.com/w/cpp/language/constraints\">concepts</a>, to make it as easy as possible to interface various C or C++ libraries related to serialization. Refer to the <a href=\"https://rfl.getml.com/supported_formats/bson/\">documentation</a> for details.</p>\n<p>The following table lists the serialization formats currently supported by reflect-cpp and the underlying libraries used:</p>\n<table>\n<thead>\n<tr>\n<th>Format</th>\n<th>Library</th>\n<th>Version</th>\n<th>License</th>\n<th>Remarks</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>JSON</td>\n<td><a href=\"https://github.com/ibireme/yyjson\">yyjson</a></td>\n<td>&gt;= 0.8.0</td>\n<td>MIT</td>\n<td>out-of-the-box support, included in this repository</td>\n</tr>\n<tr>\n<td>Avro</td>\n<td><a href=\"https://avro.apache.org/docs/1.11.1/api/c/\">avro-c</a></td>\n<td>&gt;= 1.11.3</td>\n<td>Apache 2.0</td>\n<td>Schemaful binary format</td>\n</tr>\n<tr>\n<td>BSON</td>\n<td><a href=\"https://github.com/mongodb/mongo-c-driver\">libbson</a></td>\n<td>&gt;= 1.25.1</td>\n<td>Apache 2.0</td>\n<td>JSON-like binary format</td>\n</tr>\n<tr>\n<td>Cap'n Proto</td>\n<td><a href=\"https://capnproto.org\">capnproto</a></td>\n<td>&gt;= 1.0.2</td>\n<td>MIT</td>\n<td>Schemaful binary format</td>\n</tr>\n<tr>\n<td>CBOR</td>\n<td><a href=\"https://github.com/danielaparker/jsoncons\">jsoncons</a></td>\n<td>&gt;= 0.176.0</td>\n<td>BSL 1.0</td>\n<td>JSON-like binary format</td>\n</tr>\n<tr>\n<td>CSV</td>\n<td><a href=\"https://arrow.apache.org/\">Apache Arrow</a></td>\n<td>&gt;= 21.0.0</td>\n<td>Apache 2.0</td>\n<td>Tabular textual format</td>\n</tr>\n<tr>\n<td>flexbuffers</td>\n<td><a href=\"https://github.com/google/flatbuffers\">flatbuffers</a></td>\n<td>&gt;= 23.5.26</td>\n<td>Apache 2.0</td>\n<td>Schema-less version of flatbuffers, binary format</td>\n</tr>\n<tr>\n<td>msgpack</td>\n<td><a href=\"https://github.com/msgpack/msgpack-c\">msgpack-c</a></td>\n<td>&gt;= 6.0.0</td>\n<td>BSL 1.0</td>\n<td>JSON-like binary format</td>\n</tr>\n<tr>\n<td>parquet</td>\n<td><a href=\"https://arrow.apache.org/\">Apache Arrow</a></td>\n<td>&gt;= 21.0.0</td>\n<td>Apache 2.0</td>\n<td>Tabular binary format</td>\n</tr>\n<tr>\n<td>TOML</td>\n<td><a href=\"https://github.com/marzer/tomlplusplus\">toml++</a></td>\n<td>&gt;= 3.4.0</td>\n<td>MIT</td>\n<td>Textual format with an emphasis on readability</td>\n</tr>\n<tr>\n<td>UBJSON</td>\n<td><a href=\"https://github.com/danielaparker/jsoncons\">jsoncons</a></td>\n<td>&gt;= 0.176.0</td>\n<td>BSL 1.0</td>\n<td>JSON-like binary format</td>\n</tr>\n<tr>\n<td>XML</td>\n<td><a href=\"https://github.com/zeux/pugixml\">pugixml</a></td>\n<td>&gt;= 1.14</td>\n<td>MIT</td>\n<td>Textual format used in many legacy projects</td>\n</tr>\n<tr>\n<td>YAML</td>\n<td><a href=\"https://github.com/jbeder/yaml-cpp\">yaml-cpp</a></td>\n<td>&gt;= 0.8.0</td>\n<td>MIT</td>\n<td>Textual format with an emphasis on readability</td>\n</tr>\n</tbody>\n</table>\n<p>Support for more serialization formats is in development. Refer to the <a href=\"https://github.com/getml/reflect-cpp/issues\">issues</a> for details.</p>\n<p>Please also refer to the <em>conanfile.py</em> or <em>vcpkg.json</em> in this repository.</p>\n<h6>Feature Overview</h6>\n<h7>Simple Example</h7>\n<pre><code class=\"language-cpp\">#include &lt;rfl/json.hpp&gt;\n#include &lt;rfl.hpp&gt;\n\nstruct Person {\n  std::string first_name;\n  std::string last_name;\n  int age;\n};\n\nconst auto homer =\n    Person{.first_name = &quot;Homer&quot;,\n           .last_name = &quot;Simpson&quot;,\n           .age = 45};\n\n// We can now write into and read from a JSON string.\nconst std::string json_string = rfl::json::write(homer);\nauto homer2 = rfl::json::read&lt;Person&gt;(json_string).value();\n</code></pre>\n<p>The resulting JSON string looks like this:</p>\n<pre><code class=\"language-json\">{&quot;first_name&quot;:&quot;Homer&quot;,&quot;last_name&quot;:&quot;Simpson&quot;,&quot;age&quot;:45}\n</code></pre>\n<p>You can transform the field names from <code>snake_case</code> to <code>camelCase</code> like this:</p>\n<pre><code class=\"language-cpp\">const std::string json_string = \n  rfl::json::write&lt;rfl::SnakeCaseToCamelCase&gt;(homer);\nauto homer2 = \n  rfl::json::read&lt;Person, rfl::SnakeCaseToCamelCase&gt;(json_string).value();\n</code></pre>\n<p>The resulting JSON string looks like this:</p>\n<pre><code class=\"language-json\">{&quot;firstName&quot;:&quot;Homer&quot;,&quot;lastName&quot;:&quot;Simpson&quot;,&quot;age&quot;:45}\n</code></pre>\n<p>Or you can use another format, such as YAML.</p>\n<pre><code class=\"language-cpp\">#include &lt;rfl/yaml.hpp&gt;\n\n// ... (same as above)\n\nconst std::string yaml_string = rfl::yaml::write(homer);\nauto homer2 = rfl::yaml::read&lt;Person&gt;(yaml_string).value();\n</code></pre>\n<p>The resulting YAML string looks like this:</p>\n<pre><code class=\"language-yaml\">first_name: Homer\nlast_name: Simpson\nage: 45\n</code></pre>\n<p>This will work for just about any example in the entire documentation\nand any of the following formats, except where explicitly noted otherwise:</p>\n<pre><code class=\"language-cpp\">rfl::avro::write(homer);\nrfl::bson::write(homer);\nrfl::capnproto::write(homer);\nrfl::cbor::write(homer);\nrfl::flexbuf::write(homer);\nrfl::msgpack::write(homer);\nrfl::toml::write(homer);\nrfl::ubjson::write(homer);\nrfl::xml::write(homer);\n\nrfl::avro::read&lt;Person&gt;(avro_bytes);\nrfl::bson::read&lt;Person&gt;(bson_bytes);\nrfl::capnproto::read&lt;Person&gt;(capnproto_bytes);\nrfl::cbor::read&lt;Person&gt;(cbor_bytes);\nrfl::flexbuf::read&lt;Person&gt;(flexbuf_bytes);\nrfl::msgpack::read&lt;Person&gt;(msgpack_bytes);\nrfl::toml::read&lt;Person&gt;(toml_string);\nrfl::ubjson::read&lt;Person&gt;(ubjson_bytes);\nrfl::xml::read&lt;Person&gt;(xml_string);\n</code></pre>\n<h7>More Comprehensive Example</h7>\n<pre><code class=\"language-cpp\">#include &lt;iostream&gt;\n#include &lt;rfl/json.hpp&gt;\n#include &lt;rfl.hpp&gt;\n\n// Age must be a plausible number, between 0 and 130. This will\n// be validated automatically.\nusing Age = rfl::Validator&lt;int, rfl::Minimum&lt;0&gt;, rfl::Maximum&lt;130&gt;&gt;;\n\nstruct Person {\n  rfl::Rename&lt;&quot;firstName&quot;, std::string&gt; first_name;\n  rfl::Rename&lt;&quot;lastName&quot;, std::string&gt; last_name = &quot;Simpson&quot;;\n  std::string town = &quot;Springfield&quot;;\n  rfl::Timestamp&lt;&quot;%Y-%m-%d&quot;&gt; birthday;\n  Age age;\n  rfl::Email email;\n  std::vector&lt;Person&gt; children;\n};\n\nconst auto bart = Person{.first_name = &quot;Bart&quot;,\n                         .birthday = &quot;1987-04-19&quot;,\n                         .age = 10,\n                         .email = &quot;bart@simpson.com&quot;};\n\nconst auto lisa = Person{.first_name = &quot;Lisa&quot;,\n                         .birthday = &quot;1987-04-19&quot;,\n                         .age = 8,\n                         .email = &quot;lisa@simpson.com&quot;};\n\nconst auto maggie = Person{.first_name = &quot;Maggie&quot;,\n                           .birthday = &quot;1987-04-19&quot;,\n                           .age = 0,\n                           .email = &quot;maggie@simpson.com&quot;};\n\nconst auto homer =\n    Person{.first_name = &quot;Homer&quot;,\n           .birthday = &quot;1987-04-19&quot;,\n           .age = 45,\n           .email = &quot;homer@simpson.com&quot;,\n           .children = std::vector&lt;Person&gt;({bart, lisa, maggie})};\n\n// We can now transform this into a JSON string.\nconst std::string json_string = rfl::json::write(homer);\nstd::cout &lt;&lt; json_string &lt;&lt; std::endl;\n\n// We can also directly write into std::cout (or any other std::ostream).\nrfl::json::write(homer, std::cout) &lt;&lt; std::endl;\n</code></pre>\n<p>This results in the following JSON string:</p>\n<pre><code class=\"language-json\">{&quot;firstName&quot;:&quot;Homer&quot;,&quot;lastName&quot;:&quot;Simpson&quot;,&quot;town&quot;:&quot;Springfield&quot;,&quot;birthday&quot;:&quot;1987-04-19&quot;,&quot;age&quot;:45,&quot;email&quot;:&quot;homer@simpson.com&quot;,&quot;children&quot;:[{&quot;firstName&quot;:&quot;Bart&quot;,&quot;lastName&quot;:&quot;Simpson&quot;,&quot;town&quot;:&quot;Springfield&quot;,&quot;birthday&quot;:&quot;1987-04-19&quot;,&quot;age&quot;:10,&quot;email&quot;:&quot;bart@simpson.com&quot;,&quot;children&quot;:[]},{&quot;firstName&quot;:&quot;Lisa&quot;,&quot;lastName&quot;:&quot;Simpson&quot;,&quot;town&quot;:&quot;Springfield&quot;,&quot;birthday&quot;:&quot;1987-04-19&quot;,&quot;age&quot;:8,&quot;email&quot;:&quot;lisa@simpson.com&quot;,&quot;children&quot;:[]},{&quot;firstName&quot;:&quot;Maggie&quot;,&quot;lastName&quot;:&quot;Simpson&quot;,&quot;town&quot;:&quot;Springfield&quot;,&quot;birthday&quot;:&quot;1987-04-19&quot;,&quot;age&quot;:0,&quot;email&quot;:&quot;maggie@simpson.com&quot;,&quot;children&quot;:[]}]}\n</code></pre>\n<p>We can also create structs from the string:</p>\n<pre><code class=\"language-cpp\">auto homer2 = rfl::json::read&lt;Person&gt;(json_string).value();\n\n// Fields can be accessed like this:\nstd::cout &lt;&lt; &quot;Hello, my name is &quot; &lt;&lt; homer.first_name() &lt;&lt; &quot; &quot;\n          &lt;&lt; homer.last_name() &lt;&lt; &quot;.&quot; &lt;&lt; std::endl;\n\n// Since homer2 is mutable, we can also change the values like this:\nhomer2.first_name = &quot;Marge&quot;;\n\nstd::cout &lt;&lt; &quot;Hello, my name is &quot; &lt;&lt; homer2.first_name() &lt;&lt; &quot; &quot;\n          &lt;&lt; homer2.last_name() &lt;&lt; &quot;.&quot; &lt;&lt; std::endl;\n</code></pre>\n<h7>Tabular data</h7>\n<p>reflect-cpp also supports tabular data formats, like CSV or Parquet:</p>\n<pre><code class=\"language-cpp\">#include &lt;rfl/csv.hpp&gt;\n#include &lt;rfl/parquet.hpp&gt;\n\nstruct Person {\n    std::string first_name;\n    std::string last_name = &quot;Simpson&quot;;\n    std::string town = &quot;Springfield&quot;;\n    int age;\n    rfl::Email email;\n};\n\nconst auto people =\n  std::vector&lt;Person&gt;({Person{.first_name = &quot;Bart&quot;,\n                              .birthday = &quot;1987-04-19&quot;,\n                              .age = 10,\n                              .email = &quot;bart@simpson.com&quot;},\n                       Person{.first_name = &quot;Lisa&quot;,\n                              .birthday = &quot;1987-04-19&quot;,\n                              .age = 8,\n                              .email = &quot;lisa@simpson.com&quot;},\n                       Person{.first_name = &quot;Maggie&quot;,\n                              .birthday = &quot;1987-04-19&quot;,\n                              .age = 0,\n                              .email = &quot;maggie@simpson.com&quot;},\n                       Person{.first_name = &quot;Homer&quot;,\n                              .birthday = &quot;1987-04-19&quot;,\n                              .age = 45,\n                              .email = &quot;homer@simpson.com&quot;}});\n\nconst auto csv_string = rfl::csv::write(people);\nconst auto bytestring = rfl::parquet::write(people);\n</code></pre>\n<p>This will resulting CSV will look like this:</p>\n<pre><code>&quot;first_name&quot;,&quot;last_name&quot;,&quot;town&quot;,&quot;birthday&quot;,&quot;age&quot;,&quot;email&quot;\n&quot;Bart&quot;,&quot;Simpson&quot;,&quot;Springfield&quot;,1987-04-19,10,&quot;bart@simpson.com&quot;\n&quot;Lisa&quot;,&quot;Simpson&quot;,&quot;Springfield&quot;,1987-04-19,8,&quot;lisa@simpson.com&quot;\n&quot;Maggie&quot;,&quot;Simpson&quot;,&quot;Springfield&quot;,1987-04-19,0,&quot;maggie@simpson.com&quot;\n&quot;Homer&quot;,&quot;Simpson&quot;,&quot;Springfield&quot;,1987-04-19,45,&quot;homer@simpson.com&quot;\n</code></pre>\n<h7>Error messages</h7>\n<p>reflect-cpp returns clear and comprehensive error messages:</p>\n<pre><code class=\"language-cpp\">const std::string faulty_json_string =\n    R&quot;({&quot;firstName&quot;:&quot;Homer&quot;,&quot;lastName&quot;:12345,&quot;town&quot;:&quot;Springfield&quot;,&quot;birthday&quot;:&quot;04/19/1987&quot;,&quot;age&quot;:145,&quot;email&quot;:&quot;homer(at)simpson.com&quot;})&quot;;\nconst auto result = rfl::json::read&lt;Person&gt;(faulty_json_string);\n</code></pre>\n<p>Yields the following error message:</p>\n<pre><code>Found 5 errors:\n1) Failed to parse field 'lastName': Could not cast to string.\n2) Failed to parse field 'birthday': String '04/19/1987' did not match format '%Y-%m-%d'.\n3) Failed to parse field 'age': Value expected to be less than or equal to 130, but got 145.\n4) Failed to parse field 'email': String 'homer(at)simpson.com' did not match format 'Email': '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'.\n5) Field named 'children' not found.\n</code></pre>\n<h7>JSON schema</h7>\n<p>reflect-cpp also supports generating JSON schemata:</p>\n<pre><code class=\"language-cpp\">struct Person {\n  std::string first_name;\n  std::string last_name;\n  rfl::Description&lt;&quot;Must be a proper email in the form xxx@xxx.xxx.&quot;,\n                   rfl::Email&gt;\n      email;\n  rfl::Description&lt;\n      &quot;The person's children. Pass an empty array for no children.&quot;,\n      std::vector&lt;Person&gt;&gt;\n      children;\n  float salary;\n};\n\nconst std::string json_schema = rfl::json::to_schema&lt;Person&gt;();\n</code></pre>\n<p>The resulting JSON schema looks like this:</p>\n<pre><code class=\"language-json\">{&quot;$schema&quot;:&quot;https://json-schema.org/draft/2020-12/schema&quot;,&quot;$ref&quot;:&quot;#/definitions/Person&quot;,&quot;definitions&quot;:{&quot;Person&quot;:{&quot;type&quot;:&quot;object&quot;,&quot;properties&quot;:{&quot;children&quot;:{&quot;type&quot;:&quot;array&quot;,&quot;description&quot;:&quot;The person's children. Pass an empty array for no children.&quot;,&quot;items&quot;:{&quot;$ref&quot;:&quot;#/definitions/Person&quot;}},&quot;email&quot;:{&quot;type&quot;:&quot;string&quot;,&quot;description&quot;:&quot;Must be a proper email in the form xxx@xxx.xxx.&quot;,&quot;pattern&quot;:&quot;^[a-zA-Z0-9._%+\\\\-]+@[a-zA-Z0-9.\\\\-]+\\\\.[a-zA-Z]{2,}$&quot;},&quot;first_name&quot;:{&quot;type&quot;:&quot;string&quot;},&quot;last_name&quot;:{&quot;type&quot;:&quot;string&quot;},&quot;salary&quot;:{&quot;type&quot;:&quot;number&quot;}},&quot;required&quot;:[&quot;children&quot;,&quot;email&quot;,&quot;first_name&quot;,&quot;last_name&quot;,&quot;salary&quot;]}}}\n</code></pre>\n<p>Note that this is currently supported for JSON only, since most other formats do not support schemata in the first place.</p>\n<h7>Enums</h7>\n<p>reflect-cpp supports scoped enumerations:</p>\n<pre><code class=\"language-cpp\">enum class Shape { circle, square, rectangle };\n\nenum class Color { red = 256, green = 512, blue = 1024, yellow = 2048 };\n\nstruct Item {\n  float pos_x;\n  float pos_y;\n  Shape shape;\n  Color color;\n};\n\nconst auto item = Item{.pos_x = 2.0,  \n                       .pos_y = 3.0,\n                       .shape = Shape::square,\n                       .color = Color::red | Color::blue};\n\nrfl::json::write(item);\n</code></pre>\n<p>This results in the following JSON string:</p>\n<pre><code class=\"language-json\">{&quot;pos_x&quot;:2.0,&quot;pos_y&quot;:3.0,&quot;shape&quot;:&quot;square&quot;,&quot;color&quot;:&quot;red|blue&quot;}\n</code></pre>\n<p>You can also directly convert between enumerator values and strings with <code>rfl::enum_to_string()</code> and <code>rfl::string_to_enum()</code>, or\nobtain list of enumerator name and value pairs with <code>rfl::get_enumerators&lt;EnumType&gt;()</code> or <code>rfl::get_enumerator_array&lt;EnumType&gt;()</code>.</p>\n<h7>Algebraic data types</h7>\n<p>reflect-cpp supports Pydantic-style tagged unions, which allow you to form algebraic data types:</p>\n<pre><code class=\"language-cpp\">struct Circle {\n    double radius;\n};\n\nstruct Rectangle {\n    double height;\n    double width;\n};\n\nstruct Square {\n    double width;\n};\n\nusing Shapes = rfl::TaggedUnion&lt;&quot;shape&quot;, Circle, Square, Rectangle&gt;;\n\nconst Shapes r = Rectangle{.height = 10, .width = 5};\n\nconst auto json_string = rfl::json::write(r);\n</code></pre>\n<p>This results in the following JSON string:</p>\n<pre><code class=\"language-json\">{&quot;shape&quot;:&quot;Rectangle&quot;,&quot;height&quot;:10.0,&quot;width&quot;:5.0}\n</code></pre>\n<p>Other forms of tagging are supported as well. Refer to the <a href=\"https://rfl.getml.com/docs-readme\">documentation</a> for details.</p>\n<h7>Extra fields</h7>\n<p>If you don't know all of your fields at compile time, no problem. Just use <code>rfl::ExtraFields</code>:</p>\n<pre><code class=\"language-cpp\">struct Person {\n  std::string first_name;\n  std::string last_name = &quot;Simpson&quot;;\n  rfl::ExtraFields&lt;rfl::Generic&gt; extra_fields;\n};\n\nauto homer = Person{.first_name = &quot;Homer&quot;};\n\nhomer.extra_fields[&quot;age&quot;] = 45;\nhomer.extra_fields[&quot;email&quot;] = &quot;homer@simpson.com&quot;;\nhomer.extra_fields[&quot;town&quot;] = &quot;Springfield&quot;;\n</code></pre>\n<p>This results in the following JSON string:</p>\n<pre><code class=\"language-json\">{&quot;firstName&quot;:&quot;Homer&quot;,&quot;lastName&quot;:&quot;Simpson&quot;,&quot;age&quot;:45,&quot;email&quot;:&quot;homer@simpson.com&quot;,&quot;town&quot;:&quot;Springfield&quot;}\n</code></pre>\n<h7>Reflective programming</h7>\n<p>Beyond serialization and deserialization, reflect-cpp also supports reflective programming in general.</p>\n<p>For instance:</p>\n<pre><code class=\"language-cpp\">struct Person {\n  std::string first_name;\n  std::string last_name = &quot;Simpson&quot;;\n  std::string town = &quot;Springfield&quot;;\n  unsigned int age;\n  std::vector&lt;Person&gt; children;\n};\n\nfor (const auto&amp; f : rfl::fields&lt;Person&gt;()) {\n  std::cout &lt;&lt; &quot;name: &quot; &lt;&lt; f.name() &lt;&lt; &quot;, type: &quot; &lt;&lt; f.type() &lt;&lt; std::endl;\n}\n</code></pre>\n<p>You can also create a view and then access these fields using <code>std::get</code> or <code>rfl::get</code>, or iterate over the fields at compile-time:</p>\n<pre><code class=\"language-cpp\">auto lisa = Person{.first_name = &quot;Lisa&quot;, .last_name = &quot;Simpson&quot;, .age = 8};\n\nconst auto view = rfl::to_view(lisa);\n\n// view.values() is a std::tuple containing\n// pointers to the original fields.\n// This will modify the struct `lisa`:\n*std::get&lt;0&gt;(view.values()) = &quot;Maggie&quot;;\n\n// All of this is supported as well:\n*view.get&lt;1&gt;() = &quot;Simpson&quot;;\n*view.get&lt;&quot;age&quot;&gt;() = 0;\n*rfl::get&lt;0&gt;(view) = &quot;Maggie&quot;;\n*rfl::get&lt;&quot;first_name&quot;&gt;(view) = &quot;Maggie&quot;;\n\nview.apply([](const auto&amp; f) {\n  // f is an rfl::Field pointing to the original field.\n  std::cout &lt;&lt; f.name() &lt;&lt; &quot;: &quot; &lt;&lt; rfl::json::write(*f.value()) &lt;&lt; std::endl;\n});\n</code></pre>\n<p>It also possible to replace fields:</p>\n<pre><code class=\"language-cpp\">struct Person {\n  std::string first_name;\n  std::string last_name;\n  std::vector&lt;Person&gt; children;\n};\n\nconst auto lisa = Person{.first_name = &quot;Lisa&quot;, .last_name = &quot;Simpson&quot;};\n\n// Returns a deep copy of &quot;lisa&quot; with the first_name replaced.\nconst auto maggie = rfl::replace(\n    lisa, rfl::make_field&lt;&quot;first_name&quot;&gt;(std::string(&quot;Maggie&quot;)));\n</code></pre>\n<p>Or you can create structs from other structs:</p>\n<pre><code class=\"language-cpp\">struct A {\n  std::string f1;\n  std::string f2;\n};\n\nstruct B {\n  std::string f3;\n  std::string f4;\n};\n\nstruct C {\n  std::string f1;\n  std::string f2;\n  std::string f4;\n};\n\nconst auto a = A{.f1 = &quot;Hello&quot;, .f2 = &quot;World&quot;};\n\nconst auto b = B{.f3 = &quot;Hello&quot;, .f4 = &quot;World&quot;};\n\n// f1 and f2 are taken from a, f4 is taken from b, f3 is ignored.\nconst auto c = rfl::as&lt;C&gt;(a, b);\n</code></pre>\n<p>You can also replace fields in structs using fields from other structs:</p>\n<pre><code class=\"language-cpp\">const auto a = A{.f1 = &quot;Hello&quot;, .f2 = &quot;World&quot;};\n\nconst auto c = C{.f1 = &quot;C++&quot;, .f2 = &quot;is&quot;, .f4 = &quot;great&quot;};\n\n// The fields f1 and f2 are replaced with the fields f1 and f2 in a.\nconst auto c2 = rfl::replace(c, a);\n</code></pre>\n<h7>Support for containers</h7>\n<h8>C++ standard library</h8>\n<p>reflect-cpp supports the following containers from the C++ standard library:</p>\n<ul>\n<li><code>std::array</code></li>\n<li><code>std::deque</code></li>\n<li><code>std::chrono::duration</code></li>\n<li><code>std::filesystem::path</code></li>\n<li><code>std::forward_list</code></li>\n<li><code>std::map</code></li>\n<li><code>std::multimap</code></li>\n<li><code>std::multiset</code></li>\n<li><code>std::list</code></li>\n<li><code>std::optional</code></li>\n<li><code>std::pair</code></li>\n<li><code>std::set</code></li>\n<li><code>std::shared_ptr</code></li>\n<li><code>std::span</code></li>\n<li><code>std::string</code></li>\n<li><code>std::string_view</code></li>\n<li><code>std::tuple</code></li>\n<li><code>std::unique_ptr</code></li>\n<li><code>std::unordered_map</code></li>\n<li><code>std::unordered_multimap</code></li>\n<li><code>std::unordered_multiset</code></li>\n<li><code>std::unordered_set</code></li>\n<li><code>std::variant</code></li>\n<li><code>std::vector</code></li>\n<li><code>std::wstring</code></li>\n</ul>\n<h8>Additional containers</h8>\n<p>In addition, it supports the following custom containers:</p>\n<ul>\n<li><code>rfl::Binary</code>: Used to express numbers in binary format.</li>\n<li><code>rfl::Box</code>: Similar to <code>std::unique_ptr</code>, but (almost) guaranteed to never be null.</li>\n<li><code>rfl::Bytestring</code>: An alias for <code>std::vector&lt;std::byte&gt;</code>. Supported by Avro, BSON, Cap'n Proto, CBOR, flexbuffers, msgpack and UBJSON.</li>\n<li><code>rfl::Generic</code>: A catch-all type that can represent (almost) anything.</li>\n<li><code>rfl::Hex</code>: Used to express numbers in hex format.</li>\n<li><code>rfl::Literal</code>: An explicitly enumerated string.</li>\n<li><code>rfl::NamedTuple</code>: Similar to <code>std::tuple</code>, but with named fields that can be retrieved via their name at compile time.</li>\n<li><code>rfl::Object</code>: A map-like type representing a object with field names that are unknown at compile time.</li>\n<li><code>rfl::Oct</code>: Used to express numbers in octal format.</li>\n<li><code>rfl::Ref</code>: Similar to <code>std::shared_ptr</code>, but (almost) guaranteed to never be null.</li>\n<li><code>rfl::Result</code>: Allows for exception-free programming.</li>\n<li><code>rfl::TaggedUnion</code>: Similar to <code>std::variant</code>, but with explicit tags that make parsing more efficient.</li>\n<li><code>rfl::Tuple</code>: An alternative to <code>std::tuple</code> that compiles considerably faster.</li>\n<li><code>rfl::Validator</code>: Allows for automatic input validation.</li>\n<li><code>rfl::Variant</code>: An alternative to <code>std::variant</code> that compiles considerably faster.</li>\n</ul>\n<h8>Custom classes</h8>\n<p>Finally, it is very easy to extend full support to your own classes, refer to the <a href=\"https://rfl.getml.com/docs-readme\">documentation</a> for details.</p>\n<h6>Installation</h6>\n<p>The following compilers are supported:</p>\n<ul>\n<li>GCC 11.4 or higher</li>\n<li>Clang 14.0 or higher</li>\n<li>MSVC 17.8 (19.38) or higher</li>\n</ul>\n<h7>Using vcpkg</h7>\n<p>https://vcpkg.io/en/package/reflectcpp</p>\n<h7>Using Conan</h7>\n<p>https://conan.io/center/recipes/reflect-cpp</p>\n<h7>Compilation using cmake</h7>\n<p>This will compile reflect-cpp with JSON support only. You can then include reflect-cpp in your project and link to the binary.</p>\n<pre><code class=\"language-bash\">cmake -S . -B build -DCMAKE_CXX_STANDARD=20 -DCMAKE_BUILD_TYPE=Release\ncmake --build build -j 4  # gcc, clang\ncmake --build build --config Release -j 4  # MSVC\n</code></pre>\n<p>To install all supported serialization formats, first install vcpkg:</p>\n<pre><code class=\"language-bash\">git submodule update --init\n./vcpkg/bootstrap-vcpkg.sh # Linux, macOS\n./vcpkg/bootstrap-vcpkg.bat # Windows\n# You may be prompted to install additional dependencies.\n</code></pre>\n<p>Then, compile the library:</p>\n<pre><code class=\"language-bash\">cmake -S . -B build -DCMAKE_CXX_STANDARD=20 -DCMAKE_BUILD_TYPE=Release -DREFLECTCPP_ALL_FORMATS=ON\ncmake --build build -j 4 # gcc, clang\ncmake --build build --config Release -j 4 # MSVC\n</code></pre>\n<p>For other installation methods, refer to the <a href=\"https://rfl.getml.com/docs-readme\">documentation</a>.</p>\n<h6>The team behind reflect-cpp</h6>\n<p>reflect-cpp has been developed by <a href=\"https://getml.com\">getML (Code17 GmbH)</a>, a company specializing in software engineering and machine learning for enterprise applications. reflect-cpp is currently maintained by Patrick Urbanke and Manuel Bellersen, with major contributions coming from the community.</p>\n<h7>Related projects</h7>\n<p>reflect-cpp was originally developed for <a href=\"https://github.com/getml/getml-community\">getml-community</a>, the fastest open-source tool for feature engineering on relational data and time series. If you are interested in Data Science and/or Machine Learning, please check it out.</p>\n<h7>Professional C++ Support</h7>\n<p>For comprehensive C++ support beyond the scope of GitHub discussions, we’re here to help! Reach out at <a href=\"mailto:support%40getml.com?subject=C++%20support%20request\">support@getml.com</a> to discuss any technical challenges or project requirements. We’re excited to support your work as independent software consultants.</p>\n<h6>License</h6>\n<p>reflect-cpp is released under the MIT License. Refer to the LICENSE file for details.</p>\n<p>reflect-cpp includes <a href=\"https://github.com/ibireme/yyjson\">YYJSON</a>, the fastest JSON library currently in existence. YYJSON is written by YaoYuan and also released under the MIT License.</p>\n<p>reflect-cpp includes <a href=\"https://github.com/hanickadot/compile-time-regular-expressions\">compile-time-regular-expressions</a>. CTRE is written by Hana Dusíková and released under the Apache-2.0 License with LLVM exceptions.</p>\n<p>reflect-cpp includes <a href=\"https://github.com/ZXShady/enchantum/tree/main\">enchantum</a>. enchantum is written by ZXShady and also released under the MIT License.</p>\n",
    "msgpack_repo_id": "getml-reflect-cpp",
    "msgpack_repo_homepage": "https://rfl.getml.com",
    "full_name": "getml/reflect-cpp",
    "owner": "getml",
    "html_url": "https://github.com/getml/reflect-cpp"
  },
  {
    "msgpack_lang": "Qt",
    "msgpack_quickstart_html": "<h5>MessagePack for Qt</h5>\n<p>Full documentation is here <a href=\"http://msgpack.marsworks.ru/\">mp.marsw.ru</a></p>\n<h6>Installation</h6>\n<p>Clone repository:</p>\n<pre><code class=\"language-bash\">git clone https://github.com/romixlab/qmsgpack.git\ncd qmsgpack\nmkdir build\ncd build\ncmake ..\nmake install\n</code></pre>\n<h6>Sample usage</h6>\n<p>Packing</p>\n<pre><code class=\"language-cpp\">QVariantList list;\nlist &lt;&lt; 1 &lt;&lt; 2 &lt;&lt; 3;\nQByteArray array = MsgPack::pack(list);\n</code></pre>\n<p>Unpacking:</p>\n<pre><code class=\"language-cpp\">QVariantList unpacked = MsgPack::unpack(array).toList();\n</code></pre>\n<p>Streaming API:</p>\n<pre><code class=\"language-cpp\">// packing\nMsgPackStream stream(&amp;ba, QIODevice::WriteOnly);\nstream &lt;&lt; 1 &lt;&lt; 2.3 &lt;&lt; &quot;some string&quot;;\n\n// unpacking\nMsgPackStream stream(ba);\nint a;\ndouble b;\nQSting s;\nstream &gt;&gt; a &gt;&gt; b &gt;&gt; s;\n</code></pre>\n<h6>Qt types and User types</h6>\n<p>There is packers and unpackers for QColor, QTime, QDate, QDateTime, QPoint, QSize, QRect. Also you can create your own packer/unpacker methods for Qt or your own types. See <a href=\"http://msgpack.marsworks.ru/\">docs</a> for details.</p>\n",
    "msgpack_repo_id": "romixlab-qmsgpack",
    "msgpack_repo_homepage": "https://github.com/romixlab/qmsgpack",
    "full_name": "romixlab/qmsgpack",
    "owner": "romixlab",
    "html_url": "https://github.com/romixlab/qmsgpack"
  },
  {
    "msgpack_lang": "JavaScript",
    "msgpack_quickstart_html": "<h5>msgpack.js</h5>\n<p>This is a <a href=\"https://msgpack.org\">MessagePack</a> serializer and deserializer written in JavaScript for web browsers (including IE 11) and Node.js.</p>\n<p>It is compact but still fully-featured. This library supports the complete <a href=\"https://github.com/msgpack/msgpack/blob/master/spec.md\">MessagePack specification</a> released on 2017-08-09, including date/time values. No other extension types are implemented in this library, it’s only the standard types which is perfectly fine for interoperability with MessagePack codecs in other programming languages.</p>\n<p>I’m using the <a href=\"https://github.com/neuecc/MessagePack-CSharp/\">MessagePack-CSharp</a> library on the server side in my .NET applications.</p>\n<p><a href=\"https://www.npmjs.com/package/@ygoe/msgpack\"><img src=\"https://img.shields.io/npm/v/@ygoe/msgpack.svg\" alt=\"NPM\"></a></p>\n<h6>MessagePack</h6>\n<p>MessagePack is an efficient binary serialisation format. It lets you exchange data among multiple languages like JSON. But it’s faster and smaller. Small integers are encoded into a single byte, and typical short strings require only one extra byte in addition to the strings themselves.</p>\n<h6>Size</h6>\n<p>This library is very lightweight. The source code has around <strong>560 lines</strong> (incl. browser/Node detection), the minified file has 7.0 kB and can be GZip-compressed to <strong>2.7 kB</strong>.</p>\n<h6>Performance</h6>\n<p>The file msgpack-tests.html contains some tests and a benchmark function that compares this library with <a href=\"https://github.com/kawanet/msgpack-lite\">msgpack-lite</a>. Here are the results, in milliseconds (lower is better). All tests done on an Intel Core i7-3770 and Windows 10.</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Function</th>\n<th style=\"text-align:right\">Chrome 72</th>\n<th style=\"text-align:right\"></th>\n<th style=\"text-align:right\">Firefox 65</th>\n<th style=\"text-align:right\"></th>\n<th style=\"text-align:right\">Edge 16</th>\n<th style=\"text-align:right\"></th>\n<th style=\"text-align:right\">IE 11</th>\n<th style=\"text-align:right\"> </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>msgpack.js serialize</strong></td>\n<td style=\"text-align:right\">702 ms</td>\n<td style=\"text-align:right\">+6%</td>\n<td style=\"text-align:right\">1232 ms</td>\n<td style=\"text-align:right\">−42%</td>\n<td style=\"text-align:right\">2483 ms</td>\n<td style=\"text-align:right\">+41%</td>\n<td style=\"text-align:right\">2493 ms</td>\n<td style=\"text-align:right\">−3%</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">msgpack-lite encode</td>\n<td style=\"text-align:right\">663 ms</td>\n<td style=\"text-align:right\"></td>\n<td style=\"text-align:right\">2124 ms</td>\n<td style=\"text-align:right\"></td>\n<td style=\"text-align:right\">1762 ms</td>\n<td style=\"text-align:right\"></td>\n<td style=\"text-align:right\">2578 ms</td>\n<td style=\"text-align:right\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>msgpack.js deserialize</strong></td>\n<td style=\"text-align:right\">652 ms</td>\n<td style=\"text-align:right\">+13%</td>\n<td style=\"text-align:right\">869 ms</td>\n<td style=\"text-align:right\">+5%</td>\n<td style=\"text-align:right\">821 ms</td>\n<td style=\"text-align:right\">−48%</td>\n<td style=\"text-align:right\">651 ms</td>\n<td style=\"text-align:right\">−68%</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">msgpack-lite decode</td>\n<td style=\"text-align:right\">577 ms</td>\n<td style=\"text-align:right\"></td>\n<td style=\"text-align:right\">827 ms</td>\n<td style=\"text-align:right\"></td>\n<td style=\"text-align:right\">1587 ms</td>\n<td style=\"text-align:right\"></td>\n<td style=\"text-align:right\">2021 ms</td>\n<td style=\"text-align:right\"></td>\n</tr>\n</tbody>\n</table>\n<p>The numbers show that this library is comparable with msgpack-lite. In Chrome it’s only 10% slower. But serializing in Firefox and deserializing in Microsoft browsers is twice as fast.</p>\n<h6>Usage</h6>\n<h7>Browser</h7>\n<p>In browsers, a global <code>msgpack</code> object is created that contains the functions <code>serialize</code> and <code>deserialize</code>. The first can be called with any data and returns the serialized bytes. The second works in reverse, taking the serialized bytes and returning the runtime value.</p>\n<p>Include the JavaScript file into your HTML document like this:</p>\n<pre><code class=\"language-html\">&lt;script src=&quot;msgpack.min.js&quot;&gt;&lt;/script&gt;\n</code></pre>\n<p>You can use the library functions after loading the script.</p>\n<p>If there should be a naming conflict with another library you want to load, you can change the global object name from <code>msgpack</code> to something else by setting <code>msgpackJsName</code> before loading the script file:</p>\n<pre><code class=\"language-html\">&lt;script&gt;\n    msgpackJsName = &quot;msgpackJs&quot;;\n&lt;/script&gt;\n&lt;script src=&quot;msgpack.min.js&quot;&gt;&lt;/script&gt;\n</code></pre>\n<h7>Node.js</h7>\n<p>In Node.js, these functions are exported in the object you get from the <code>require</code> function.</p>\n<pre><code class=\"language-js\">var msgpack = require(&quot;@ygoe/msgpack&quot;);\n</code></pre>\n<h7>Example</h7>\n<p>Here’s a simple example:</p>\n<pre><code class=\"language-js\">// Define some data\nvar sourceData = {\n    number: 123,\n    number2: -0.129,\n    text: &quot;Abc with Üñıçôðé and ユニコード&quot;,\n    flag: true,\n    list: [ 1, 2, 3 ],\n    obj: { a: 1, b: &quot;2&quot;, c: false, d: { a: 0, b: -1 } },\n    time: Date.now()\n};\n\n// Serialize to byte array\nvar bytes = msgpack.serialize(sourceData);\n\n// Deserialize again\nvar deserializedData = msgpack.deserialize(bytes);\n</code></pre>\n<h7>Compatibility</h7>\n<p>You can also use the functions <code>encode</code> and <code>decode</code> which are aliases to <code>serialize</code> and <code>deserialize</code>. This makes it easier to replace other libraries that use these function names with msgpack.js.</p>\n<p>New projects should use the preferred (and more precisely named) <code>serialize</code> and <code>deserialize</code> functions though.</p>\n<h6>License</h6>\n<p><a href=\"https://github.com/ygoe/msgpack.js/blob/master/LICENSE\">MIT license</a></p>\n",
    "msgpack_repo_id": "ygoe-msgpack.js",
    "msgpack_repo_homepage": "https://github.com/ygoe/msgpack.js",
    "full_name": "ygoe/msgpack.js",
    "owner": "ygoe",
    "html_url": "https://github.com/ygoe/msgpack.js"
  },
  {
    "msgpack_lang": "Crystal",
    "msgpack_quickstart_html": "<h5>MessagePack</h5>\n<p><a href=\"https://github.com/crystal-community/msgpack-crystal/actions/workflows/ci.yml?query=branch%3Amaster+event%3Apush\"><img src=\"https://github.com/crystal-community/msgpack-crystal/actions/workflows/ci.yml/badge.svg\" alt=\"Build Status\"></a></p>\n<p>MessagePack implementation in Crystal.</p>\n<h6>Installation</h6>\n<p>Add this to your application's <code>shard.yml</code>:</p>\n<pre><code class=\"language-yaml\">dependencies:\n  msgpack:\n    github: crystal-community/msgpack-crystal\n</code></pre>\n<h6>Usage</h6>\n<pre><code class=\"language-crystal\">require &quot;msgpack&quot;\n\nclass Location\n  include MessagePack::Serializable\n\n  property lat : Float64\n  property lng : Float64\nend\n\nclass House\n  include MessagePack::Serializable\n\n  property address : String\n  property location : Location?\nend\n\nhouse = House.from_msgpack({address: &quot;Road12&quot;, location: {lat: 12.3, lng: 34.5}}.to_msgpack)\np house\n# =&gt; &lt;House:0x1b06de0 @address=&quot;Road12&quot;, @location=#&lt;Location:0x1b06dc0 @lat=12.3, @lng=34.5&gt;&gt;\n\np house.to_msgpack\n# =&gt; Bytes[130, 167, 97, 100, 100, 114, 101, 115, 115, 166, 82, 111, 97, 100, ...\n\nhouse.address = &quot;Something&quot;\nhouse = House.from_msgpack(house.to_msgpack)\np house\n# =&gt; #&lt;House:0x13f0d80 @address=&quot;Something&quot;, @location=#&lt;Location:0x13f0d60 @lat=12.3, @lng=34.5&gt;&gt;\n\nhouse = House.from_msgpack({&quot;address&quot; =&gt; &quot;Crystal Road 1234&quot;}.to_msgpack)\np house\n# =&gt; &lt;House:0x1b06d80 @address=&quot;Crystal Road 1234&quot;, @location=nil&gt;\n</code></pre>\n<h6>More Examples</h6>\n<p><a href=\"https://github.com/benoist/msgpack-crystal/tree/master/examples\">examples</a></p>\n<h6>Msgpack-RPC</h6>\n<p><a href=\"https://github.com/kostya/simple_rpc\">implemented by simple_rpc shard</a></p>\n<h6>Copyright</h6>\n<p>Copyright 2015 Benoist Claassen</p>\n<p><em>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); you may not use this file except in compliance with the License You may obtain a copy of the License at</em></p>\n<p><a href=\"http://www.apache.org/licenses/LICENSE-2.0\">http://www.apache.org/licenses/LICENSE-2.0</a></p>\n<p><em>Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.</em></p>\n",
    "msgpack_repo_id": "crystal-community-msgpack-crystal",
    "msgpack_repo_homepage": "https://github.com/crystal-community/msgpack-crystal",
    "full_name": "crystal-community/msgpack-crystal",
    "owner": "crystal-community",
    "html_url": "https://github.com/crystal-community/msgpack-crystal"
  },
  {
    "msgpack_lang": "Haxe",
    "msgpack_quickstart_html": "<p><a href=\"license.txt\"><img src=\"https://img.shields.io/badge/license-MIT-blue.svg?style=flat\" alt=\"MIT License\"></a> <a href=\"http://lib.haxe.org/p/msgpack-haxe\"><img src=\"https://img.shields.io/github/release/aaulia/msgpack-haxe.svg?style=flat&amp;label=haxelib\" alt=\"Haxelib Version\"></a></p>\n<h5>msgpack-haxe</h5>\n<p>MessagePack (http://msgpack.org) serialization library for Haxe</p>\n<h6>How to install:</h6>\n<p>Simply use <code>haxelib git</code> to use this github repo or <code>haxelib install msgpack-haxe</code> to use the one in the haxelib repository.</p>\n<h6>Supported Type:</h6>\n<ul>\n<li>Null</li>\n<li>Bool</li>\n<li>Int</li>\n<li>Float</li>\n<li>Object</li>\n<li>Bytes</li>\n<li>String</li>\n<li>Array</li>\n<li>IntMap/StringMap</li>\n</ul>\n<h6>Example code:</h6>\n<pre><code class=\"language-haxe\">package;\nimport org.msgpack.MsgPack;\n\nclass Example {\n    public static function main() {\n        var i = { a: 1, b: 2, c: &quot;Hello World!&quot; };\n        var m = MsgPack.encode(i);\n        var o = MsgPack.decode(m);\n\n        trace(i);\n        trace(m.toHex());\n        trace(o);\n    }\n}\n</code></pre>\n",
    "msgpack_repo_id": "aaulia-msgpack-haxe",
    "msgpack_repo_homepage": "https://github.com/aaulia/msgpack-haxe",
    "full_name": "aaulia/msgpack-haxe",
    "owner": "aaulia",
    "html_url": "https://github.com/aaulia/msgpack-haxe"
  },
  {
    "msgpack_lang": "C++11",
    "msgpack_quickstart_html": "<p><a href=\"https://github.com/ar90n/msgpack11/actions/workflows/ci.yml\"><img src=\"https://img.shields.io/github/actions/workflow/status/ar90n/msgpack11/ci.yml\" alt=\"Build\"></a>\n<a href=\"https://github.com/ar90n/msgpack11/issues\"><img src=\"https://img.shields.io/github/issues/ar90n/msgpack11.svg?style=flat\" alt=\"Issues\"></a>\n<a href=\"https://github.com/ar90n/msgpack11/blob/master/LICENSE.txt\"><img src=\"https://img.shields.io/github/license/ar90n/msgpack11.svg?style=flat\" alt=\"MIT\"></a></p>\n<h5>What is msgpack11 ?</h5>\n<p>msgpack11 is a tiny MsgPack library for C++11, providing MsgPack parsing and serialization.<br>\nThis library is inspired by <a href=\"https://github.com/dropbox/json11\">json11</a>.<br>\nThe API of msgpack11 is designed to be similar with json11.</p>\n<h5>Installation</h5>\n<ul>\n<li>\n<p>Using CMake</p>\n<pre><code>  git clone git@github.com:ar90n/msgpack11.git\n  mkdir build\n  cd build\n  cmake ../msgpack11\n  make &amp;&amp; make install\n</code></pre>\n</li>\n<li>\n<p>Using Buck</p>\n<pre><code>  git clone git@github.com:ar90n/msgpack11.git\n  cd msgpack11\n  buck build :msgpack11\n</code></pre>\n</li>\n</ul>\n<h5>Example</h5>\n<pre><code>MsgPack my_msgpack = MsgPack::object {\n    { &quot;key1&quot;, &quot;value1&quot; },\n    { &quot;key2&quot;, false },\n    { &quot;key3&quot;, MsgPack::array { 1, 2, 3 } },\n};\n\n//access to elements\nstd::cout &lt;&lt; my_msgpack[&quot;key1&quot;].string_value();\n\n//serialize\nstd::string msgpack_bytes = my_msgpack.dump();\n\n//deserialize\nstd::string err;\nMsgPack des_msgpack = MsgPack::parse(msgpack_bytes, err);\n</code></pre>\n<p>There are more specific examples in example.cpp.\nPlease see it.</p>\n<h5>Benchmark</h5>\n<p>Derived from <a href=\"https://github.com/ludocode/schemaless-benchmarks\">schemaless-benchmarks</a></p>\n<table>\n<thead>\n<tr>\n<th>Library</th>\n<th>Binary size</th>\n<th>time[ms] @ Smallest</th>\n<th>time[ms] @ Small</th>\n<th>time[ms] @ Medium</th>\n<th>time[ms] @ Large</th>\n<th>time[ms] @ Largest</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>msgpack-c-pack(v2.1.4)</td>\n<td>6649</td>\n<td>0.55</td>\n<td>2.38</td>\n<td>43.22</td>\n<td>711.75</td>\n<td>8748.20</td>\n</tr>\n<tr>\n<td>msgpack-c-unpack(v2.1.4)</td>\n<td>21804</td>\n<td>1.34</td>\n<td>6.00</td>\n<td>83.09</td>\n<td>714.64</td>\n<td>11192.32</td>\n</tr>\n<tr>\n<td>msgpack11-pack(v0.0.9)</td>\n<td>99844</td>\n<td>20.80</td>\n<td>130.04</td>\n<td>1063.24</td>\n<td>10466.65</td>\n<td>136640.99</td>\n</tr>\n<tr>\n<td>msgpack11-unpack(v0.0.9)</td>\n<td>99460</td>\n<td>13.31</td>\n<td>92.54</td>\n<td>786.73</td>\n<td>7345.43</td>\n<td>99119.56</td>\n</tr>\n</tbody>\n</table>\n<p>CPU : 2.6 GHz Intel Core i7<br>\nMemory : 16 GB 2133 MHz LPDDR3<br>\nGit revision : 6f6b4302b68b3c88312eb24367418b7fce81298c</p>\n<h5>Feature</h5>\n<ul>\n<li>Support serialization and deserialization.</li>\n</ul>\n<h5>Acknowledgement</h5>\n<ul>\n<li><a href=\"https://github.com/dropbox/json11\">json11</a></li>\n<li><a href=\"https://github.com/msgpack/msgpack-c\">msgpack-c</a></li>\n<li><a href=\"https://github.com/ludocode/schemaless-benchmarks\">schemaless-benchmarks</a></li>\n</ul>\n<h5>License</h5>\n<p>This software is released under the MIT License, see LICENSE.txt.</p>\n",
    "msgpack_repo_id": "ar90n-msgpack11",
    "msgpack_repo_homepage": "https://github.com/ar90n/msgpack11",
    "full_name": "ar90n/msgpack11",
    "owner": "ar90n",
    "html_url": "https://github.com/ar90n/msgpack11"
  },
  {
    "msgpack_lang": "Nim",
    "msgpack_quickstart_html": null,
    "msgpack_repo_id": "jangko-msgpack4nim",
    "msgpack_repo_homepage": "https://github.com/jangko/msgpack4nim",
    "full_name": "jangko/msgpack4nim",
    "owner": "jangko",
    "html_url": "https://github.com/jangko/msgpack4nim"
  },
  {
    "msgpack_lang": "Pascal",
    "msgpack_quickstart_html": "<h5>Msgpack for Delphi</h5>\n<p>It's like JSON but small and fast.</p>\n<pre><code>unit Owner: D10.Mofen, qdac.swish\ncontact:\n       qq:185511468, \n    email:185511468@qq.com\nwelcome to report bug\n</code></pre>\n<h6>Works with</h6>\n<ul>\n<li>Delphi 7 (tested)</li>\n<li>Delphi 2007 (tested)</li>\n<li>XE5, XE6, XE7, FMX (tested)</li>\n</ul>\n<h6>changes:</h6>\n<ul>\n<li>\n<p>first release\n2014-08-15 13:05:13</p>\n</li>\n<li>\n<p>add array support\n2014-08-19 12:18:47</p>\n</li>\n<li>\n<p>add andriod support\n2014-09-08 00:45:27</p>\n</li>\n</ul>\n<ul>\n<li>fixed int32, int64 parse bug&lt; integer, int64 parse zero&gt;\n2014-11-09 22:35:27</li>\n</ul>\n<ul>\n<li>add EncodeToFile/DecodeFromFile\n2014-11-13 12:30:58</li>\n</ul>\n<ul>\n<li>\n<p>fix  asVariant = null (thanks for cyw(26890954))\n2014-11-14 09:05:52</p>\n</li>\n<li>\n<p>fix AsInteger = -1 bug (thanks for cyw(26890954))\n2014-11-14 12:15:52</p>\n</li>\n<li>\n<p>fix AsInteger = -127 bug\ncheck int64/integer/cardinal/word/shortint/smallint/byte assign, encode,decode, read\n2014-11-14 12:30:38</p>\n</li>\n<li>\n<p>fix AsFloat = 2.507182 bug\nthanks fo [珠海]-芒果  1939331207\n2014-11-21 12:37:04</p>\n</li>\n<li>\n<p>add AddArrayChild func\n2015-03-25 17:47:28</p>\n</li>\n<li>\n<p>add remove/removeFromParent/Delete function\n2015-08-29 22:37:48</p>\n</li>\n</ul>\n<h7>Code Example</h7>\n<pre><code class=\"language-Pascal\">\nvar\n  lvMsg, lvMsg2:TSimpleMsgPack;\n  lvBytes:TBytes;\n  s:string;\nbegin\n  lvMsg := TSimpleMsgPack.Create;\n  lvMsg.S['key.obj'] := '汉字,ascii';\n  if dlgOpen.Execute then\n  begin\n    lvMsg.S['key.image.name'] := ExtractFileName(dlgOpen.FileName);\n    \n    // file binary data\n    lvMsg.ForcePathObject('key.image.data').LoadBinaryFromFile(dlgOpen.FileName);\n  end;\n  \n  //\n  lvBytes := lvMsg.EncodeToBytes;\n\n  lvMsg2 := TSimpleMsgPack.Create;\n  lvMsg2.DecodeFromBytes(lvBytes);\n  //\n  Memo1.Lines.Add(lvMsg2.S['key.obj']);\n  if lvMsg2.S['key.image.name'] &lt;&gt; '' then\n  begin\n    s := ExtractFilePath(ParamStr(0)) + lvMsg2.S['key.image.name'];\n    Memo1.Lines.Add('file saved');\n    Memo1.Lines.Add(s);\n    lvMsg2.ForcePathObject('key.image.data').SaveBinaryToFile(s);    \n  end;\n  \n</code></pre>\n",
    "msgpack_repo_id": "ymofen-msgpack-delphi",
    "msgpack_repo_homepage": "https://github.com/ymofen/msgpack-delphi",
    "full_name": "ymofen/msgpack-delphi",
    "owner": "ymofen",
    "html_url": "https://github.com/ymofen/msgpack-delphi"
  },
  {
    "msgpack_lang": "Python",
    "msgpack_quickstart_html": "<h5>ormsgpack</h5>\n<p><img src=\"https://img.shields.io/pypi/v/ormsgpack\" alt=\"PyPI\">\n<img src=\"https://img.shields.io/pypi/dm/ormsgpack\" alt=\"PyPI - Downloads\"></p>\n<p>ormsgpack is a fast msgpack serialization library for Python derived\nfrom <a href=\"https://github.com/ijl/orjson\">orjson</a>, with native support for\nvarious Python types.</p>\n<p>ormsgpack supports the following Python implementations:</p>\n<ul>\n<li>CPython 3.9, 3.10, 3.11, 3.12 and 3.13</li>\n<li>PyPy 3.11</li>\n<li>GraalPy 3.11</li>\n</ul>\n<p>Releases follow semantic versioning and serializing a new object type\nwithout an opt-in flag is considered a breaking change.</p>\n<p>ormsgpack is licensed under both the Apache 2.0 and MIT licenses. The\nrepository and issue tracker is\n<a href=\"https://github.com/aviramha/ormsgpack\">github.com/aviramha/ormsgpack</a>, and patches may be\nsubmitted there. There is a\n<a href=\"https://github.com/aviramha/ormsgpack/blob/master/CHANGELOG.md\">CHANGELOG</a>\navailable in the repository.</p>\n<ol>\n<li><a href=\"#usage\">Usage</a>\n<ol>\n<li><a href=\"#install\">Install</a></li>\n<li><a href=\"#quickstart\">Quickstart</a></li>\n<li><a href=\"#serialize\">Serialize</a>\n<ol>\n<li><a href=\"#default\">default</a></li>\n<li><a href=\"#option\">option</a></li>\n</ol>\n</li>\n<li><a href=\"#deserialize\">Deserialize</a></li>\n</ol>\n</li>\n<li><a href=\"#types\">Types</a>\n<ul>\n<li><a href=\"#none\">none</a></li>\n<li><a href=\"#bool\">bool</a></li>\n<li><a href=\"#int\">int</a></li>\n<li><a href=\"#float\">float</a></li>\n<li><a href=\"#str\">str</a></li>\n<li><a href=\"#bytes\">bytes</a></li>\n<li><a href=\"#list\">list</a></li>\n<li><a href=\"#tuple\">tuple</a></li>\n<li><a href=\"#dict\">dict</a></li>\n<li><a href=\"#dataclass\">dataclass</a></li>\n<li><a href=\"#date\">date</a></li>\n<li><a href=\"#time\">time</a></li>\n<li><a href=\"#datetime\">datetime</a></li>\n<li><a href=\"#enum\">enum</a></li>\n<li><a href=\"#uuid\">uuid</a></li>\n<li><a href=\"#numpy\">numpy</a></li>\n<li><a href=\"#pydantic\">pydantic</a></li>\n</ul>\n</li>\n<li><a href=\"#latency\">Latency</a></li>\n<li><a href=\"#questions\">Questions</a></li>\n<li><a href=\"#packaging\">Packaging</a></li>\n<li><a href=\"#license\">License</a></li>\n</ol>\n<h6>Usage</h6>\n<h7>Install</h7>\n<p>To install a wheel from PyPI:</p>\n<pre><code class=\"language-sh\">pip install --upgrade &quot;pip&gt;=20.3&quot; # manylinux_x_y, universal2 wheel support\npip install --upgrade ormsgpack\n</code></pre>\n<p>To build a wheel, see <a href=\"#packaging\">packaging</a>.</p>\n<h7>Quickstart</h7>\n<p>This is an example of serializing, with options specified, and deserializing:</p>\n<pre><code class=\"language-python\">&gt;&gt;&gt; import ormsgpack, datetime, numpy\n&gt;&gt;&gt; data = {\n...     &quot;type&quot;: &quot;job&quot;,\n...     &quot;created_at&quot;: datetime.datetime(1970, 1, 1),\n...     &quot;status&quot;: &quot;🆗&quot;,\n...     &quot;payload&quot;: numpy.array([[1, 2], [3, 4]]),\n... }\n&gt;&gt;&gt; ormsgpack.packb(data, option=ormsgpack.OPT_NAIVE_UTC | ormsgpack.OPT_SERIALIZE_NUMPY)\nb'\\x84\\xa4type\\xa3job\\xaacreated_at\\xb91970-01-01T00:00:00+00:00\\xa6status\\xa4\\xf0\\x9f\\x86\\x97\\xa7payload\\x92\\x92\\x01\\x02\\x92\\x03\\x04'\n&gt;&gt;&gt; ormsgpack.unpackb(_)\n{'type': 'job', 'created_at': '1970-01-01T00:00:00+00:00', 'status': '🆗', 'payload': [[1, 2], [3, 4]]}\n</code></pre>\n<h7>Serialize</h7>\n<pre><code class=\"language-python\">def packb(\n    __obj: Any,\n    default: Optional[Callable[[Any], Any]] = ...,\n    option: Optional[int] = ...,\n) -&gt; bytes: ...\n</code></pre>\n<p><code>packb()</code> serializes Python objects to msgpack.\nIt natively serializes various Python <a href=\"#Types\">types</a> and supports\narbitrary types through the <a href=\"#default\">default</a> argument.\nThe output is a <code>bytes</code> object.</p>\n<p>The global interpreter lock (GIL) is held for the duration of the call.</p>\n<p>It raises <code>MsgpackEncodeError</code> on an unsupported type. This exception\ndescribes the invalid object with the error message <code>Type is not msgpack serializable: ...</code>.</p>\n<p>It raises <code>MsgpackEncodeError</code> if a <code>str</code> contains invalid UTF-8.</p>\n<p>It raises <code>MsgpackEncodeError</code> if a <code>dict</code> has a key of a type other than <code>str</code> or <code>bytes</code>,\nunless <a href=\"#OPT_NON_STR_KEYS\"><code>OPT_NON_STR_KEYS</code></a> is specified.</p>\n<p>It raises <code>MsgpackEncodeError</code> if the output of <code>default</code> recurses to handling by\n<code>default</code> more than 254 levels deep.</p>\n<p>It raises <code>MsgpackEncodeError</code> on circular references.</p>\n<p>It raises <code>MsgpackEncodeError</code>  if a <code>tzinfo</code> on a datetime object is\nunsupported.</p>\n<p><code>MsgpackEncodeError</code> is a subclass of <code>TypeError</code>.</p>\n<h8>default</h8>\n<p>To serialize a subclass or arbitrary types, specify <code>default</code> as a\ncallable that returns a supported type. <code>default</code> may be a function,\nlambda, or callable class instance. To specify that a type was not\nhandled by <code>default</code>, raise an exception such as <code>TypeError</code>.</p>\n<pre><code class=\"language-python\">&gt;&gt;&gt; import ormsgpack, decimal\n&gt;&gt;&gt; def default(obj):\n...     if isinstance(obj, decimal.Decimal):\n...         return str(obj)\n...     raise TypeError\n...\n&gt;&gt;&gt; ormsgpack.packb(decimal.Decimal(&quot;0.0842389659712649442845&quot;))\nTypeError: Type is not msgpack serializable: decimal.Decimal\n&gt;&gt;&gt; ormsgpack.packb(decimal.Decimal(&quot;0.0842389659712649442845&quot;), default=default)\nb'\\xb80.0842389659712649442845'\n&gt;&gt;&gt; ormsgpack.packb({1, 2}, default=default)\nTypeError: Type is not msgpack serializable: set\n</code></pre>\n<p>The <code>default</code> callable may return an object that itself\nmust be handled by <code>default</code> up to 254 times before an exception\nis raised.</p>\n<p>It is important that <code>default</code> raise an exception if a type cannot be handled.\nPython otherwise implicitly returns <code>None</code>, which appears to the caller\nlike a legitimate value and is serialized:</p>\n<pre><code class=\"language-python\">&gt;&gt;&gt; import ormsgpack, decimal\n&gt;&gt;&gt; def default(obj):\n...     if isinstance(obj, decimal.Decimal):\n...         return str(obj)\n...\n&gt;&gt;&gt; ormsgpack.packb({&quot;set&quot;:{1, 2}}, default=default)\nb'\\x81\\xa3set\\xc0'\n&gt;&gt;&gt; ormsgpack.unpackb(_)\n{'set': None}\n</code></pre>\n<p>To serialize a type as a MessagePack extension type, return an\n<code>ormsgpack.Ext</code> object. The instantiation arguments are an integer in\nthe range <code>[0, 127]</code> and a <code>bytes</code> object, defining the type and\nvalue, respectively.</p>\n<pre><code class=\"language-python\">&gt;&gt;&gt; import ormsgpack, decimal\n&gt;&gt;&gt; def default(obj):\n...     if isinstance(obj, decimal.Decimal):\n...         return ormsgpack.Ext(0, str(obj).encode())\n...     raise TypeError\n...\n&gt;&gt;&gt; ormsgpack.packb(decimal.Decimal(&quot;0.0842389659712649442845&quot;), default=default)\nb'\\xc7\\x18\\x000.0842389659712649442845'\n</code></pre>\n<p><code>default</code> can also be used to serialize some supported types to a custom\nformat by enabling the corresponding passthrough options.</p>\n<h8>option</h8>\n<p>To modify how data is serialized, specify <code>option</code>. Each <code>option</code> is an integer\nconstant in <code>ormsgpack</code>. To specify multiple options, mask them together, e.g.,\n<code>option=ormsgpack.OPT_NON_STR_KEYS | ormsgpack.OPT_NAIVE_UTC</code>.</p>\n<h5><code>OPT_DATETIME_AS_TIMESTAMP_EXT</code></h5>\n<p>Serialize aware <code>datetime.datetime</code> instances as timestamp extension objects.</p>\n<h5><code>OPT_NAIVE_UTC</code></h5>\n<p>Serialize naive <code>datetime.datetime</code> objects and <code>numpy.datetime64</code>\nobjects as UTC. This has no effect on aware <code>datetime.datetime</code>\nobjects.</p>\n<pre><code class=\"language-python\">&gt;&gt;&gt; import ormsgpack, datetime\n&gt;&gt;&gt; ormsgpack.packb(\n...     datetime.datetime(1970, 1, 1, 0, 0, 0),\n... )\nb'\\xb31970-01-01T00:00:00'\n&gt;&gt;&gt; ormsgpack.unpackb(_)\n'1970-01-01T00:00:00'\n&gt;&gt;&gt; ormsgpack.packb(\n...     datetime.datetime(1970, 1, 1, 0, 0, 0),\n...     option=ormsgpack.OPT_NAIVE_UTC,\n... )\nb'\\xb91970-01-01T00:00:00+00:00'\n&gt;&gt;&gt; ormsgpack.unpackb(_)\n'1970-01-01T00:00:00+00:00'\n</code></pre>\n<h5><code>OPT_NON_STR_KEYS</code></h5>\n<p>Serialize <code>dict</code> keys of type other than <code>str</code>. This allows <code>dict</code> keys\nto be one of <code>str</code>, <code>int</code>, <code>float</code>, <code>bool</code>, <code>None</code>, <code>datetime.datetime</code>,\n<code>datetime.date</code>, <code>datetime.time</code>, <code>enum.Enum</code>, and <code>uuid.UUID</code>.\nAll options other than the passthrough ones are supported.\n<code>dict</code> keys of unsupported types are not handled using <code>default</code> and\nresult in <code>MsgpackEncodeError</code> being raised.</p>\n<pre><code class=\"language-python\">&gt;&gt;&gt; import ormsgpack, datetime, uuid\n&gt;&gt;&gt; ormsgpack.packb(\n...     {uuid.UUID(&quot;7202d115-7ff3-4c81-a7c1-2a1f067b1ece&quot;): [1, 2, 3]},\n...     option=ormsgpack.OPT_NON_STR_KEYS,\n... )\nb'\\x81\\xd9$7202d115-7ff3-4c81-a7c1-2a1f067b1ece\\x93\\x01\\x02\\x03'\n&gt;&gt;&gt; ormsgpack.unpackb(_)\n{'7202d115-7ff3-4c81-a7c1-2a1f067b1ece': [1, 2, 3]}\n&gt;&gt;&gt; ormsgpack.packb(\n...     {datetime.datetime(1970, 1, 1, 0, 0, 0): [1, 2, 3]},\n...     option=ormsgpack.OPT_NON_STR_KEYS | ormsgpack.OPT_NAIVE_UTC,\n... )\nb'\\x81\\xb91970-01-01T00:00:00+00:00\\x93\\x01\\x02\\x03'\n&gt;&gt;&gt; ormsgpack.unpackb(_)\n{'1970-01-01T00:00:00+00:00': [1, 2, 3]}\n</code></pre>\n<p>Be aware that, when using this option, a serialized map may contain\nelements with the same key, as different <code>dict</code> keys may be serialized\nto the same object. In such a case, a msgpack deserializer will\npresumably keep only one element for any given key. For example,</p>\n<pre><code class=\"language-python\">&gt;&gt;&gt; import ormsgpack, datetime\n&gt;&gt;&gt; ormsgpack.packb(\n...     {&quot;1970-01-01T00:00:00&quot;: True, datetime.datetime(1970, 1, 1, 0, 0, 0): False},\n...     option=ormsgpack.OPT_NON_STR_KEYS,\n... )\nb'\\x82\\xb31970-01-01T00:00:00\\xc3\\xb31970-01-01T00:00:00\\xc2'\n&gt;&gt;&gt; ormsgpack.unpackb(_)\n{'1970-01-01T00:00:00': False}\n</code></pre>\n<p>This option is not compatible with <code>ormsgpack.OPT_SORT_KEYS</code>.</p>\n<h5><code>OPT_OMIT_MICROSECONDS</code></h5>\n<p>Do not serialize the microsecond component of <code>datetime.datetime</code>,\n<code>datetime.time</code> and <code>numpy.datetime64</code> instances.</p>\n<pre><code class=\"language-python\">&gt;&gt;&gt; import ormsgpack, datetime\n&gt;&gt;&gt; ormsgpack.packb(\n...     datetime.datetime(1970, 1, 1, 0, 0, 0, 1),\n... )\nb'\\xba1970-01-01T00:00:00.000001'\n&gt;&gt;&gt; ormsgpack.unpackb(_)\n'1970-01-01T00:00:00.000001'\n&gt;&gt;&gt; ormsgpack.packb(\n...     datetime.datetime(1970, 1, 1, 0, 0, 0, 1),\n...     option=ormsgpack.OPT_OMIT_MICROSECONDS,\n... )\nb'\\xb31970-01-01T00:00:00'\n&gt;&gt;&gt; ormsgpack.unpackb(_)\n'1970-01-01T00:00:00'\n</code></pre>\n<h5><code>OPT_PASSTHROUGH_BIG_INT</code></h5>\n<p>Enable passthrough of <code>int</code> instances smaller than -9223372036854775807 or\nlarger than 18446744073709551615 to <code>default</code>.</p>\n<pre><code class=\"language-python\">&gt;&gt;&gt; import ormsgpack\n&gt;&gt;&gt; ormsgpack.packb(\n...     2**65,\n... )\nTypeError: Integer exceeds 64-bit range\n&gt;&gt;&gt; ormsgpack.packb(\n...     2**65,\n...     option=ormsgpack.OPT_PASSTHROUGH_BIG_INT,\n...     default=lambda _: {&quot;type&quot;: &quot;bigint&quot;, &quot;value&quot;: str(_) }\n... )\nb'\\x82\\xa4type\\xa6bigint\\xa5value\\xb436893488147419103232'\n&gt;&gt;&gt; ormsgpack.unpackb(_)\n{'type': 'bigint', 'value': '36893488147419103232'}\n</code></pre>\n<h5><code>OPT_PASSTHROUGH_DATACLASS</code></h5>\n<p>Enable passthrough of dataclasses to <code>default</code>.</p>\n<pre><code class=\"language-python\">&gt;&gt;&gt; import ormsgpack, dataclasses\n&gt;&gt;&gt; @dataclasses.dataclass\n... class User:\n...     id: str\n...     name: str\n...     password: str\n...\n&gt;&gt;&gt; def default(obj):\n...     if isinstance(obj, User):\n...         return {&quot;id&quot;: obj.id, &quot;name&quot;: obj.name}\n...     raise TypeError\n...\n&gt;&gt;&gt; ormsgpack.packb(User(&quot;3b1&quot;, &quot;asd&quot;, &quot;zxc&quot;))\nb'\\x83\\xa2id\\xa33b1\\xa4name\\xa3asd\\xa8password\\xa3zxc'\n&gt;&gt;&gt; ormsgpack.packb(User(&quot;3b1&quot;, &quot;asd&quot;, &quot;zxc&quot;), option=ormsgpack.OPT_PASSTHROUGH_DATACLASS)\nTypeError: Type is not msgpack serializable: User\n&gt;&gt;&gt; ormsgpack.packb(\n...     User(&quot;3b1&quot;, &quot;asd&quot;, &quot;zxc&quot;),\n...     option=ormsgpack.OPT_PASSTHROUGH_DATACLASS,\n...     default=default,\n... )\nb'\\x82\\xa2id\\xa33b1\\xa4name\\xa3asd'\n</code></pre>\n<h5><code>OPT_PASSTHROUGH_DATETIME</code></h5>\n<p>Enable passthrough of <code>datetime.datetime</code>, <code>datetime.date</code>, and\n<code>datetime.time</code> instances to <code>default</code>.</p>\n<pre><code class=\"language-python\">&gt;&gt;&gt; import ormsgpack, datetime\n&gt;&gt;&gt; def default(obj):\n...     if isinstance(obj, datetime.datetime):\n...         return obj.strftime(&quot;%a, %d %b %Y %H:%M:%S GMT&quot;)\n...     raise TypeError\n...\n&gt;&gt;&gt; ormsgpack.packb({&quot;created_at&quot;: datetime.datetime(1970, 1, 1)})\nb'\\x81\\xaacreated_at\\xb31970-01-01T00:00:00'\n&gt;&gt;&gt; ormsgpack.packb({&quot;created_at&quot;: datetime.datetime(1970, 1, 1)}, option=ormsgpack.OPT_PASSTHROUGH_DATETIME)\nTypeError: Type is not msgpack serializable: datetime.datetime\n&gt;&gt;&gt; ormsgpack.packb(\n...     {&quot;created_at&quot;: datetime.datetime(1970, 1, 1)},\n...     option=ormsgpack.OPT_PASSTHROUGH_DATETIME,\n...     default=default,\n... )\nb'\\x81\\xaacreated_at\\xbdThu, 01 Jan 1970 00:00:00 GMT'\n</code></pre>\n<h5><code>OPT_PASSTHROUGH_ENUM</code></h5>\n<p>Enable passthrough of enum members to <code>default</code>.</p>\n<h5><code>OPT_PASSTHROUGH_SUBCLASS</code></h5>\n<p>Enable passthrough of subclasses of <code>str</code>, <code>int</code>, <code>dict</code> and <code>list</code> to\n<code>default</code>.</p>\n<pre><code class=\"language-python\">&gt;&gt;&gt; import ormsgpack\n&gt;&gt;&gt; class Secret(str):\n...     pass\n...\n&gt;&gt;&gt; def default(obj):\n...     if isinstance(obj, Secret):\n...         return &quot;******&quot;\n...     raise TypeError\n...\n&gt;&gt;&gt; ormsgpack.packb(Secret(&quot;zxc&quot;))\nb'\\xa3zxc'\n&gt;&gt;&gt; ormsgpack.packb(Secret(&quot;zxc&quot;), option=ormsgpack.OPT_PASSTHROUGH_SUBCLASS)\nTypeError: Type is not msgpack serializable: Secret\n&gt;&gt;&gt; ormsgpack.packb(Secret(&quot;zxc&quot;), option=ormsgpack.OPT_PASSTHROUGH_SUBCLASS, default=default)\nb'\\xa6******'\n</code></pre>\n<h5><code>OPT_PASSTHROUGH_TUPLE</code></h5>\n<p>Enable passthrough of <code>tuple</code> instances to <code>default</code>.</p>\n<pre><code class=\"language-python\">&gt;&gt;&gt; import ormsgpack\n&gt;&gt;&gt; ormsgpack.packb(\n...     (9193, &quot;test&quot;, 42),\n... )\nb'\\x93\\xcd#\\xe9\\xa4test*'\n&gt;&gt;&gt; ormsgpack.unpackb(_)\n[9193, 'test', 42]\n&gt;&gt;&gt; ormsgpack.packb(\n...     (9193, &quot;test&quot;, 42),\n...     option=ormsgpack.OPT_PASSTHROUGH_TUPLE,\n...     default=lambda _: {&quot;type&quot;: &quot;tuple&quot;, &quot;value&quot;: list(_)}\n... )\nb'\\x82\\xa4type\\xa5tuple\\xa5value\\x93\\xcd#\\xe9\\xa4test*'\n&gt;&gt;&gt; ormsgpack.unpackb(_)\n{'type': 'tuple', 'value': [9193, 'test', 42]}\n</code></pre>\n<h5><code>OPT_PASSTHROUGH_UUID</code></h5>\n<p>Enable passthrough of <code>uuid.UUID</code> instances to <code>default</code>.</p>\n<h5><code>OPT_SERIALIZE_NUMPY</code></h5>\n<p>Serialize instances of numpy types.</p>\n<h5><code>OPT_SERIALIZE_PYDANTIC</code></h5>\n<p>Serialize <code>pydantic.BaseModel</code> instances.</p>\n<h5><code>OPT_SORT_KEYS</code></h5>\n<p>Serialize <code>dict</code> keys and pydantic model fields in sorted order. The default\nis to serialize in an unspecified order.</p>\n<p>This can be used to ensure the order is deterministic for hashing or tests.\nIt has a substantial performance penalty and is not recommended in general.</p>\n<pre><code class=\"language-python\">&gt;&gt;&gt; import ormsgpack\n&gt;&gt;&gt; ormsgpack.packb({&quot;b&quot;: 1, &quot;c&quot;: 2, &quot;a&quot;: 3})\nb'\\x83\\xa1b\\x01\\xa1c\\x02\\xa1a\\x03'\n&gt;&gt;&gt; ormsgpack.packb({&quot;b&quot;: 1, &quot;c&quot;: 2, &quot;a&quot;: 3}, option=ormsgpack.OPT_SORT_KEYS)\nb'\\x83\\xa1a\\x03\\xa1b\\x01\\xa1c\\x02'\n</code></pre>\n<p>The sorting is not collation/locale-aware:</p>\n<pre><code class=\"language-python\">&gt;&gt;&gt; import ormsgpack\n&gt;&gt;&gt; ormsgpack.packb({&quot;a&quot;: 1, &quot;ä&quot;: 2, &quot;A&quot;: 3}, option=ormsgpack.OPT_SORT_KEYS)\nb'\\x83\\xa1A\\x03\\xa1a\\x01\\xa2\\xc3\\xa4\\x02'\n</code></pre>\n<p><code>dataclass</code> also serialize as maps but this has no effect on them.</p>\n<h5><code>OPT_UTC_Z</code></h5>\n<p>Serialize a UTC timezone on <code>datetime.datetime</code> and <code>numpy.datetime64</code> instances\nas <code>Z</code> instead of <code>+00:00</code>.</p>\n<pre><code class=\"language-python\">&gt;&gt;&gt; import ormsgpack, datetime\n&gt;&gt;&gt; ormsgpack.packb(\n...     datetime.datetime(1970, 1, 1, 0, 0, 0, tzinfo=datetime.timezone.utc),\n... )\nb'\\xb91970-01-01T00:00:00+00:00'\n&gt;&gt;&gt; ormsgpack.packb(\n...     datetime.datetime(1970, 1, 1, 0, 0, 0, tzinfo=datetime.timezone.utc),\n...     option=ormsgpack.OPT_UTC_Z\n... )\nb'\\xb41970-01-01T00:00:00Z'\n</code></pre>\n<h7>Deserialize</h7>\n<pre><code class=\"language-python\">def unpackb(\n    __obj: Union[bytes, bytearray, memoryview],\n    /,\n    ext_hook: Optional[Callable[[int, bytes], Any]] = ...,\n    option: Optional[int] = ...,\n) -&gt; Any: ...\n</code></pre>\n<p><code>unpackb()</code> deserializes msgpack to Python objects. It deserializes to <code>dict</code>,\n<code>list</code>, <code>int</code>, <code>float</code>, <code>str</code>, <code>bool</code>, <code>bytes</code> and <code>None</code> objects.</p>\n<p><code>bytes</code>, <code>bytearray</code>, <code>memoryview</code> input are accepted.</p>\n<p>ormsgpack maintains a cache of map keys for the duration of the process. This\ncauses a net reduction in memory usage by avoiding duplicate strings. The\nkeys must be at most 64 bytes to be cached and 512 entries are stored.</p>\n<p>The global interpreter lock (GIL) is held for the duration of the call.</p>\n<p>It raises <code>MsgpackDecodeError</code> if given an invalid type or invalid\nmsgpack.</p>\n<p><code>MsgpackDecodeError</code> is a subclass of <code>ValueError</code>.</p>\n<h8>ext_hook</h8>\n<p>To deserialize extension types, specify the optional <code>ext_hook</code>\nargument. The value should be a callable and is invoked with the\nextension type and value as arguments.</p>\n<pre><code class=\"language-python\">&gt;&gt;&gt; import ormsgpack, decimal\n&gt;&gt;&gt; def ext_hook(tag, data):\n...     if tag == 0:\n...         return decimal.Decimal(data.decode())\n...     raise TypeError\n...\n&gt;&gt;&gt; ormsgpack.packb(\n...     ormsgpack.Ext(0, str(decimal.Decimal(&quot;0.0842389659712649442845&quot;)).encode())\n... )\nb'\\xc7\\x18\\x000.0842389659712649442845'\n&gt;&gt;&gt; ormsgpack.unpackb(_, ext_hook=ext_hook)\nDecimal('0.0842389659712649442845'\n</code></pre>\n<h8>option</h8>\n<h5><code>OPT_DATETIME_AS_TIMESTAMP_EXT</code></h5>\n<p>Deserialize timestamp extension objects to UTC <code>datetime.datetime</code> instances.</p>\n<h5><code>OPT_NON_STR_KEYS</code></h5>\n<p>Deserialize map keys of type other than string.\nBe aware that this option is considered unsafe and disabled by default in msgpack due to possibility of HashDoS.</p>\n<h6>Types</h6>\n<h7>none</h7>\n<p>The <code>None</code> object is serialized as nil.</p>\n<h7>bool</h7>\n<p><code>bool</code> instances are serialized as booleans.</p>\n<h7>int</h7>\n<p>Instances of <code>int</code> and of subclasses of <code>int</code> are serialized as\nintegers. The minimum and maximum representable values are\n-9223372036854775807 and 18446744073709551615, respectively.</p>\n<h7>float</h7>\n<p><code>float</code> instances are serialized as IEEE 754 double precision floating point numbers.</p>\n<h7>str</h7>\n<p>Instances of <code>str</code> and of subclasses of <code>str</code> are serialized as strings.</p>\n<h7>bytes</h7>\n<p><code>bytes</code>, <code>bytearray</code> and <code>memoryview</code> instances are serialized as binary objects.</p>\n<h7>list</h7>\n<p>Instances of <code>list</code> and of subclasses of <code>list</code> are serialized as arrays.</p>\n<h7>tuple</h7>\n<p><code>tuple</code> instances are serialized as arrays.</p>\n<h7>dict</h7>\n<p>Instances of <code>dict</code> and of subclasses of <code>dict</code> are serialized as maps.</p>\n<h7>dataclass</h7>\n<p>Dataclasses are serialized as maps. The fields are serialized in the\norder they are defined in the class. All variants of dataclasses are\nsupported, including dataclasses with <code>__slots__</code>, frozen dataclasses\nand dataclasses with descriptor-typed fields.</p>\n<pre><code class=\"language-python\">&gt;&gt;&gt; import dataclasses, ormsgpack, typing\n&gt;&gt;&gt; @dataclasses.dataclass\n... class Member:\n...     id: int\n...     active: bool = dataclasses.field(default=False)\n...\n&gt;&gt;&gt; @dataclasses.dataclass\n... class Object:\n...     id: int\n...     name: str\n...     members: typing.List[Member]\n...\n&gt;&gt;&gt; ormsgpack.packb(Object(1, &quot;a&quot;, [Member(1, True), Member(2)]))\nb'\\x83\\xa2id\\x01\\xa4name\\xa1a\\xa7members\\x92\\x82\\xa2id\\x01\\xa6active\\xc3\\x82\\xa2id\\x02\\xa6active\\xc2'\n</code></pre>\n<h7>date</h7>\n<p><code>datetime.date</code> instances are serialized as <a href=\"https://tools.ietf.org/html/rfc3339\">RFC 3339</a> strings.</p>\n<pre><code class=\"language-python\">&gt;&gt;&gt; import ormsgpack, datetime\n&gt;&gt;&gt; ormsgpack.packb(datetime.date(1900, 1, 2))\nb'\\xaa1900-01-02'\n&gt;&gt;&gt; ormsgpack.unpackb(_)\n'1900-01-02'\n</code></pre>\n<h7>time</h7>\n<p>Naive <code>datetime.time</code> instances are serialized as <a href=\"https://tools.ietf.org/html/rfc3339\">RFC 3339</a> strings.\nAware <code>datetime.time</code> instances are not supported.</p>\n<pre><code class=\"language-python\">&gt;&gt;&gt; import ormsgpack, datetime\n&gt;&gt;&gt; ormsgpack.packb(datetime.time(12, 0, 15, 290))\nb'\\xaf12:00:15.000290'\n&gt;&gt;&gt; ormsgpack.unpackb(_)\n'12:00:15.000290'\n</code></pre>\n<h7>datetime</h7>\n<p>Naive <code>datetime.datetime</code> instances are serialized as <a href=\"https://tools.ietf.org/html/rfc3339\">RFC 3339</a> strings.\nAware <code>datetime.datetime</code> instances are serialized as <a href=\"https://tools.ietf.org/html/rfc3339\">RFC 3339</a> strings\nor alternatively as MessagePack timestamp extension objects, by using the\n<a href=\"#OPT_DATETIME_AS_TIMESTAMP_EXT\"><code>OPT_DATETIME_AS_TIMESTAMP_EXT</code></a> option.</p>\n<pre><code class=\"language-python\">&gt;&gt;&gt; import ormsgpack, datetime, zoneinfo\n&gt;&gt;&gt; ormsgpack.packb(\n...     datetime.datetime(2018, 12, 1, 2, 3, 4, 9, tzinfo=zoneinfo.ZoneInfo('Australia/Adelaide'))\n... )\nb'\\xd9 2018-12-01T02:03:04.000009+10:30'\n&gt;&gt;&gt; ormsgpack.unpackb(_)\n'2018-12-01T02:03:04.000009+10:30'\n&gt;&gt;&gt; ormsgpack.packb(\n...     datetime.datetime.fromtimestamp(4123518902).replace(tzinfo=datetime.timezone.utc)\n... )\nb'\\xb92100-09-02T00:55:02+00:00'\n&gt;&gt;&gt; ormsgpack.unpackb(_)\n'2100-09-02T00:55:02+00:00'\n&gt;&gt;&gt; ormsgpack.packb(\n...     datetime.datetime.fromtimestamp(4123518902)\n... )\nb'\\xb32100-09-02T00:55:02'\n&gt;&gt;&gt; ormsgpack.unpackb(_)\n'2100-09-02T00:55:02'\n</code></pre>\n<p>Errors with <code>tzinfo</code> result in <code>MsgpackEncodeError</code> being raised.</p>\n<p>The serialization can be customized using the\n<a href=\"#OPT_NAIVE_UTC\"><code>OPT_NAIVE_UTC</code></a>,\n<a href=\"#OPT_OMIT_MICROSECONDS\"><code>OPT_OMIT_MICROSECONDS</code></a>, and\n<a href=\"#OPT_UTC_Z\"><code>OPT_UTC_Z</code></a> options.</p>\n<h7>enum</h7>\n<p>Enum members are serialized as their values. Options apply to their\nvalues. All subclasses of <code>enum.EnumType</code> are supported.</p>\n<pre><code class=\"language-python\">&gt;&gt;&gt; import enum, datetime, ormsgpack\n&gt;&gt;&gt; class DatetimeEnum(enum.Enum):\n...     EPOCH = datetime.datetime(1970, 1, 1, 0, 0, 0)\n...\n&gt;&gt;&gt; ormsgpack.packb(DatetimeEnum.EPOCH)\nb'\\xb31970-01-01T00:00:00'\n&gt;&gt;&gt; ormsgpack.unpackb(_)\n'1970-01-01T00:00:00'\n&gt;&gt;&gt; ormsgpack.packb(DatetimeEnum.EPOCH, option=ormsgpack.OPT_NAIVE_UTC)\nb'\\xb91970-01-01T00:00:00+00:00'\n&gt;&gt;&gt; ormsgpack.unpackb(_)\n'1970-01-01T00:00:00+00:00'\n</code></pre>\n<p>Enum members whose value is not a supported type can be serialized using\n<code>default</code>:</p>\n<pre><code class=\"language-python\">&gt;&gt;&gt; import enum, ormsgpack\n&gt;&gt;&gt; class Custom:\n...     def __init__(self, val):\n...         self.val = val\n...\n&gt;&gt;&gt; def default(obj):\n...     if isinstance(obj, Custom):\n...         return obj.val\n...     raise TypeError\n...\n&gt;&gt;&gt; class CustomEnum(enum.Enum):\n...     ONE = Custom(1)\n...\n&gt;&gt;&gt; ormsgpack.packb(CustomEnum.ONE, default=default)\nb'\\x01'\n&gt;&gt;&gt; ormsgpack.unpackb(_)\n1\n</code></pre>\n<h7>uuid</h7>\n<p><code>uuid.UUID</code> instances are serialized as <a href=\"https://tools.ietf.org/html/rfc4122\">RFC 4122</a> strings.</p>\n<pre><code class=\"language-python\">&gt;&gt;&gt; import ormsgpack, uuid\n&gt;&gt;&gt; ormsgpack.packb(uuid.UUID('f81d4fae-7dec-11d0-a765-00a0c91e6bf6'))\nb'\\xd9$f81d4fae-7dec-11d0-a765-00a0c91e6bf6'\n&gt;&gt;&gt; ormsgpack.unpackb(_)\n'f81d4fae-7dec-11d0-a765-00a0c91e6bf6'\n&gt;&gt;&gt; ormsgpack.packb(uuid.uuid5(uuid.NAMESPACE_DNS, &quot;python.org&quot;))\nb'\\xd9$886313e1-3b8a-5372-9b90-0c9aee199e5d'\n&gt;&gt;&gt; ormsgpack.unpackb(_)\n'886313e1-3b8a-5372-9b90-0c9aee199e5d\n</code></pre>\n<h7>numpy</h7>\n<p><code>numpy.bool</code>, <code>numpy.float16</code>, <code>numpy.float32</code>, <code>numpy.float64</code>,\n<code>numpy.int8</code>, <code>numpy.int16</code>, <code>numpy.int32</code>, <code>numpy.int64</code>, <code>numpy.intp</code>,\n<code>numpy.uint8</code>, <code>numpy.uint16</code>, <code>numpy.uint32</code>, <code>numpy.uint64</code>, <code>numpy.uintp</code>\ninstances are serialized as the corresponding builtin types.</p>\n<p><code>numpy.datetime64</code> instances are serialized as <a href=\"https://tools.ietf.org/html/rfc3339\">RFC 3339</a> strings.\nThe serialization can be customized using the\n<a href=\"#OPT_NAIVE_UTC\"><code>OPT_NAIVE_UTC</code></a>,\n<a href=\"#OPT_OMIT_MICROSECONDS\"><code>OPT_OMIT_MICROSECONDS</code></a>, and\n<a href=\"#OPT_UTC_Z\"><code>OPT_UTC_Z</code></a> options.</p>\n<p><code>numpy.ndarray</code> instances are serialized as arrays. The array must be\na C-contiguous array (<code>C_CONTIGUOUS</code>) and of a supported data type.\nUnsupported arrays can be serialized using <a href=\"#default\">default</a>, by\nconverting the array to a list with the <code>numpy.ndarray.tolist</code> method.</p>\n<p>The serialization of numpy types is disabled by default and can be\nenabled by using the <a href=\"#OPT_SERIALIZE_NUMPY\"><code>OPT_SERIALIZE_NUMPY</code></a> option.</p>\n<pre><code class=\"language-python\">&gt;&gt;&gt; import ormsgpack, numpy\n&gt;&gt;&gt; ormsgpack.packb(\n...     numpy.array([[1, 2, 3], [4, 5, 6]]),\n...     option=ormsgpack.OPT_SERIALIZE_NUMPY,\n... )\nb'\\x92\\x93\\x01\\x02\\x03\\x93\\x04\\x05\\x06'\n&gt;&gt;&gt; ormsgpack.unpackb(_)\n[[1, 2, 3], [4, 5, 6]]\n</code></pre>\n<h7>Pydantic</h7>\n<p><code>pydantic.BaseModel</code> instances are serialized as maps, with\n<a href=\"https://docs.pydantic.dev/2.10/concepts/serialization/#serializing-with-duck-typing\">duck-typing</a>.\nThis is equivalent to serializing\n<code>model.model_dump(serialize_as_any=True)</code> with Pydantic V2 or\n<code>model.dict()</code>with Pydantic V1.</p>\n<p>The serialization of pydantic models is disabled by default and can be\nenabled by using the <a href=\"#OPT_SERIALIZE_PYDANTIC\"><code>OPT_SERIALIZE_PYDANTIC</code></a> option.</p>\n<h6>Latency</h6>\n<h7>Graphs</h7>\n<p><img src=\"doc/twitter_packb.svg\" alt=\"alt text\" title=\"twitter.json serialization\">\n<img src=\"doc/twitter_unpackb.svg\" alt=\"alt text\" title=\"twitter.json deserialization\">\n<img src=\"doc/github_packb.svg\" alt=\"alt text\" title=\"github.json serialization\">\n<img src=\"doc/github_unpackb.svg\" alt=\"alt text\" title=\"github.json deserialization\">\n<img src=\"doc/citm_catalog_packb.svg\" alt=\"alt text\" title=\"citm_catalog.json serialization\">\n<img src=\"doc/citm_catalog_unpackb.svg\" alt=\"alt text\" title=\"citm_catalog.json deserialization\">\n<img src=\"doc/canada_packb.svg\" alt=\"alt text\" title=\"canada.json serialization\">\n<img src=\"doc/canada_unpackb.svg\" alt=\"alt text\" title=\"canada.json deserialization\">\n<img src=\"doc/dataclass.svg\" alt=\"alt text\" title=\"dataclass\">\n<img src=\"doc/numpy_float64.svg\" alt=\"alt text\" title=\"numpy\">\n<img src=\"doc/numpy_int32.svg\" alt=\"alt text\" title=\"numpy int32\">\n<img src=\"doc/numpy_int8.svg\" alt=\"alt text\" title=\"numpy int8\">\n<img src=\"doc/numpy_npbool.svg\" alt=\"alt text\" title=\"numpy npbool\">\n<img src=\"doc/numpy_uint8.svg\" alt=\"alt text\" title=\"numpy uint8\">\n<img src=\"doc/pydantic.svg\" alt=\"alt text\" title=\"pydantic\"></p>\n<h7>Data</h7>\n<pre><code>----------------------------------------------------------------------------- benchmark 'canada packb': 2 tests ------------------------------------------------------------------------------\nName (time in ms)                   Min                Max              Mean            StdDev            Median               IQR            Outliers       OPS            Rounds  Iterations\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\ntest_ormsgpack_packb[canada]     3.5302 (1.0)       3.8939 (1.0)      3.7319 (1.0)      0.0563 (1.0)      3.7395 (1.0)      0.0484 (1.0)         56;22  267.9571 (1.0)         241           1\ntest_msgpack_packb[canada]       8.8642 (2.51)     14.0432 (3.61)     9.3660 (2.51)     0.5649 (10.03)    9.2983 (2.49)     0.0982 (2.03)         3;11  106.7691 (0.40)        106           1\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n\n------------------------------------------------------------------------------- benchmark 'canada unpackb': 2 tests --------------------------------------------------------------------------------\nName (time in ms)                      Min                Max               Mean             StdDev             Median                IQR            Outliers      OPS            Rounds  Iterations\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\ntest_msgpack_unpackb[canada]       10.1176 (1.0)      62.0466 (1.18)     33.4806 (1.0)      18.8279 (1.0)      46.6582 (1.0)      38.5921 (1.02)         30;0  29.8680 (1.0)          67           1\ntest_ormsgpack_unpackb[canada]     11.3992 (1.13)     52.6587 (1.0)      34.1842 (1.02)     18.9461 (1.01)     47.6456 (1.02)     37.8024 (1.0)           8;0  29.2533 (0.98)         20           1\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n\n----------------------------------------------------------------------------- benchmark 'citm_catalog packb': 2 tests -----------------------------------------------------------------------------\nName (time in ms)                         Min               Max              Mean            StdDev            Median               IQR            Outliers       OPS            Rounds  Iterations\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\ntest_ormsgpack_packb[citm_catalog]     1.8024 (1.0)      2.1259 (1.0)      1.9487 (1.0)      0.0346 (1.0)      1.9525 (1.0)      0.0219 (1.0)         79;60  513.1650 (1.0)         454           1\ntest_msgpack_packb[citm_catalog]       3.4195 (1.90)     3.8128 (1.79)     3.6928 (1.90)     0.0535 (1.55)     3.7009 (1.90)     0.0250 (1.14)        47;49  270.7958 (0.53)        257           1\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n\n------------------------------------------------------------------------------ benchmark 'citm_catalog unpackb': 2 tests ------------------------------------------------------------------------------\nName (time in ms)                           Min                Max               Mean             StdDev            Median               IQR            Outliers      OPS            Rounds  Iterations\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\ntest_ormsgpack_unpackb[citm_catalog]     5.6986 (1.0)      46.1843 (1.0)      14.2491 (1.0)      15.9791 (1.0)      6.1051 (1.0)      0.3074 (1.0)           5;5  70.1798 (1.0)          23           1\ntest_msgpack_unpackb[citm_catalog]       7.2600 (1.27)     56.6642 (1.23)     16.4095 (1.15)     16.3257 (1.02)     7.7364 (1.27)     0.4944 (1.61)        28;29  60.9404 (0.87)        125           1\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n\n----------------------------------------------------------------------------------- benchmark 'github packb': 2 tests -----------------------------------------------------------------------------------\nName (time in us)                     Min                 Max                Mean            StdDev              Median               IQR            Outliers  OPS (Kops/s)            Rounds  Iterations\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\ntest_ormsgpack_packb[github]      73.0000 (1.0)      215.9000 (1.0)       80.4826 (1.0)      4.8889 (1.0)       80.3000 (1.0)      1.1000 (1.83)     866;1118       12.4250 (1.0)        6196           1\ntest_msgpack_packb[github]       103.8000 (1.42)     220.8000 (1.02)     112.8049 (1.40)     4.9686 (1.02)     113.0000 (1.41)     0.6000 (1.0)     1306;1560        8.8649 (0.71)       7028           1\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n\n----------------------------------------------------------------------------------- benchmark 'github unpackb': 2 tests -----------------------------------------------------------------------------------\nName (time in us)                       Min                 Max                Mean            StdDev              Median               IQR            Outliers  OPS (Kops/s)            Rounds  Iterations\n-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\ntest_ormsgpack_unpackb[github]     201.3000 (1.0)      318.5000 (1.0)      219.0861 (1.0)      6.7340 (1.0)      219.1000 (1.0)      1.2000 (1.0)       483;721        4.5644 (1.0)        3488           1\ntest_msgpack_unpackb[github]       289.8000 (1.44)     436.0000 (1.37)     314.9631 (1.44)     9.4130 (1.40)     315.1000 (1.44)     2.3000 (1.92)      341;557        3.1750 (0.70)       2477           1\n-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n--------------------------------------------------------------------------------------- benchmark 'twitter packb': 2 tests ---------------------------------------------------------------------------------------\nName (time in us)                        Min                   Max                  Mean             StdDev                Median                IQR            Outliers         OPS            Rounds  Iterations\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\ntest_ormsgpack_packb[twitter]       820.7000 (1.0)      2,945.2000 (2.03)       889.3791 (1.0)      78.4139 (2.43)       884.2000 (1.0)      12.5250 (1.0)          4;76  1,124.3799 (1.0)         809           1\ntest_msgpack_packb[twitter]       1,209.3000 (1.47)     1,451.2000 (1.0)      1,301.3615 (1.46)     32.2147 (1.0)      1,306.7000 (1.48)     14.1000 (1.13)      118;138    768.4260 (0.68)        592           1\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n\n------------------------------------------------------------------------------ benchmark 'twitter unpackb': 2 tests -----------------------------------------------------------------------------\nName (time in ms)                      Min                Max              Mean            StdDev            Median               IQR            Outliers       OPS            Rounds  Iterations\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\ntest_ormsgpack_unpackb[twitter]     2.7097 (1.0)      41.1530 (1.0)      3.2721 (1.0)      3.5860 (1.03)     2.8868 (1.0)      0.0614 (1.32)         4;38  305.6098 (1.0)         314           1\ntest_msgpack_unpackb[twitter]       3.8079 (1.41)     42.0617 (1.02)     4.4459 (1.36)     3.4893 (1.0)      4.1097 (1.42)     0.0465 (1.0)          2;54  224.9267 (0.74)        228           1\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n\n--------------------------------------------------------------------------------- benchmark 'dataclass': 2 tests --------------------------------------------------------------------------------\nName (time in ms)                 Min                 Max                Mean            StdDev              Median               IQR            Outliers       OPS            Rounds  Iterations\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\ntest_dataclass_ormsgpack       3.4248 (1.0)        7.7949 (1.0)        3.6266 (1.0)      0.3293 (1.0)        3.5815 (1.0)      0.0310 (1.0)          4;34  275.7434 (1.0)         240           1\ntest_dataclass_msgpack       140.2774 (40.96)    143.6087 (18.42)    141.3847 (38.99)    1.0038 (3.05)     141.1823 (39.42)    0.7304 (23.60)         2;1    7.0729 (0.03)          8           1\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n\n---------------------------------------------------------------------------------- benchmark 'numpy float64': 2 tests ---------------------------------------------------------------------------------\nName (time in ms)                      Min                 Max                Mean             StdDev              Median                IQR            Outliers      OPS            Rounds  Iterations\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\ntest_numpy_ormsgpack[float64]      77.9625 (1.0)       85.2507 (1.0)       79.0326 (1.0)       1.9043 (1.0)       78.5505 (1.0)       0.7408 (1.0)           1;1  12.6530 (1.0)          13           1\ntest_numpy_msgpack[float64]       511.5176 (6.56)     606.9395 (7.12)     559.0017 (7.07)     44.0661 (23.14)    572.5499 (7.29)     81.2972 (109.75)        3;0   1.7889 (0.14)          5           1\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n\n------------------------------------------------------------------------------------- benchmark 'numpy int32': 2 tests -------------------------------------------------------------------------------------\nName (time in ms)                      Min                   Max                  Mean             StdDev                Median                IQR            Outliers     OPS            Rounds  Iterations\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\ntest_numpy_ormsgpack[int32]       197.8751 (1.0)        210.3111 (1.0)        201.1033 (1.0)       5.1886 (1.0)        198.8518 (1.0)       3.8297 (1.0)           1;1  4.9726 (1.0)           5           1\ntest_numpy_msgpack[int32]       1,363.8515 (6.89)     1,505.4747 (7.16)     1,428.2127 (7.10)     53.4176 (10.30)    1,425.3516 (7.17)     72.8064 (19.01)         2;0  0.7002 (0.14)          5           1\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n\n-------------------------------------------------------------------------------- benchmark 'numpy int8': 2 tests ---------------------------------------------------------------------------------\nName (time in ms)                   Min                 Max                Mean            StdDev              Median                IQR            Outliers     OPS            Rounds  Iterations\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\ntest_numpy_ormsgpack[int8]     107.8013 (1.0)      113.7336 (1.0)      109.0364 (1.0)      1.7805 (1.0)      108.3574 (1.0)       0.4066 (1.0)           1;2  9.1712 (1.0)          10           1\ntest_numpy_msgpack[int8]       685.4149 (6.36)     703.2958 (6.18)     693.2396 (6.36)     7.9572 (4.47)     691.5435 (6.38)     14.4142 (35.45)         1;0  1.4425 (0.16)          5           1\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n\n------------------------------------------------------------------------------------- benchmark 'numpy npbool': 2 tests --------------------------------------------------------------------------------------\nName (time in ms)                       Min                   Max                  Mean             StdDev                Median                IQR            Outliers      OPS            Rounds  Iterations\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\ntest_numpy_ormsgpack[npbool]        87.9005 (1.0)         89.5460 (1.0)         88.7928 (1.0)       0.5098 (1.0)         88.8508 (1.0)       0.6609 (1.0)           4;0  11.2622 (1.0)          12           1\ntest_numpy_msgpack[npbool]       1,095.0599 (12.46)    1,176.3442 (13.14)    1,120.5916 (12.62)    32.9993 (64.73)    1,110.4216 (12.50)    38.4189 (58.13)         1;0   0.8924 (0.08)          5           1\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n\n--------------------------------------------------------------------------------- benchmark 'numpy uint8': 2 tests ---------------------------------------------------------------------------------\nName (time in ms)                    Min                 Max                Mean             StdDev              Median                IQR            Outliers     OPS            Rounds  Iterations\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\ntest_numpy_ormsgpack[uint8]     133.1743 (1.0)      134.7246 (1.0)      134.2793 (1.0)       0.4946 (1.0)      134.3120 (1.0)       0.4492 (1.0)           1;1  7.4472 (1.0)           8           1\ntest_numpy_msgpack[uint8]       727.1393 (5.46)     824.8247 (6.12)     775.7032 (5.78)     34.9887 (70.73)    775.9595 (5.78)     36.2824 (80.78)         2;0  1.2892 (0.17)          5           1\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n\n-------------------------------------------------------------------------------- benchmark 'pydantic': 2 tests ---------------------------------------------------------------------------------\nName (time in ms)                Min                 Max                Mean            StdDev              Median               IQR            Outliers       OPS            Rounds  Iterations\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\ntest_pydantic_ormsgpack       4.3918 (1.0)       12.6521 (1.0)        4.8550 (1.0)      1.1455 (3.98)       4.6101 (1.0)      0.0662 (1.0)         11;24  205.9727 (1.0)         204           1\ntest_pydantic_msgpack       124.5500 (28.36)    125.5427 (9.92)     125.0582 (25.76)    0.2877 (1.0)      125.0855 (27.13)    0.2543 (3.84)          2;0    7.9963 (0.04)          8           1\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n</code></pre>\n<h7>Reproducing</h7>\n<p>The above was measured using Python 3.7.9 on Azure Linux VM (x86_64) with ormsgpack 0.2.1 and msgpack 1.0.2.</p>\n<p>The latency results can be reproduced using <code>uv run pytest benchmarks/bench_*</code>.</p>\n<h6>Questions</h6>\n<h7>Why can't I install it from PyPI?</h7>\n<p>Probably <code>pip</code> needs to be upgraded to version 20.3 or later to support\nthe latest manylinux_x_y or universal2 wheel formats.</p>\n<h7>Will it deserialize to dataclasses, UUIDs, decimals, etc or support object_hook?</h7>\n<p>No. This requires a schema specifying what types are expected and how to\nhandle errors etc. This is addressed by data validation libraries a\nlevel above this.</p>\n<h6>Packaging</h6>\n<p>To package ormsgpack requires <a href=\"https://www.rust-lang.org/\">Rust</a> 1.81\nor newer and the <a href=\"https://github.com/PyO3/maturin\">maturin</a> build\ntool. The recommended build command is:</p>\n<pre><code class=\"language-sh\">maturin build --release\n</code></pre>\n<p>ormsgpack is tested on Linux/amd64, Linux/aarch64, Linux/armv7, macOS/aarch64 and Windows/amd64.</p>\n<p>There are no runtime dependencies other than libc.</p>\n<h6>License</h6>\n<p>orjson was written by ijl &lt;<a href=\"mailto:ijl@mailbox.org\">ijl@mailbox.org</a>&gt;, copyright 2018 - 2021, licensed\nunder both the Apache 2 and MIT licenses.</p>\n<p>ormsgpack was forked from orjson by Aviram Hassan and is now maintained by Emanuele Giaquinta (@exg), licensed\nsame as orjson.</p>\n",
    "msgpack_repo_id": "aviramha-ormsgpack",
    "msgpack_repo_homepage": "https://github.com/aviramha/ormsgpack",
    "full_name": "aviramha/ormsgpack",
    "owner": "aviramha",
    "html_url": "https://github.com/aviramha/ormsgpack"
  },
  {
    "msgpack_lang": "Perl",
    "msgpack_quickstart_html": "<p><a href=\"https://travis-ci.org/msgpack/msgpack-perl\"><img src=\"https://travis-ci.org/msgpack/msgpack-perl.svg?branch=master\" alt=\"Build Status\"></a></p>\n<h5>NAME</h5>\n<p>Data::MessagePack - MessagePack serializing/deserializing</p>\n<h5>SYNOPSIS</h5>\n<pre><code>use Data::MessagePack;\n\nmy $mp = Data::MessagePack-&gt;new();\n$mp-&gt;canonical-&gt;utf8-&gt;prefer_integer if $needed;\n\nmy $packed   = $mp-&gt;pack($dat);\nmy $unpacked = $mp-&gt;unpack($dat);\n</code></pre>\n<h5>DESCRIPTION</h5>\n<p>This module converts Perl data structures to MessagePack and vice versa.</p>\n<h5>ABOUT MESSAGEPACK FORMAT</h5>\n<p>MessagePack is a binary-based efficient object serialization format.\nIt enables to exchange structured objects between many languages like\nJSON.  But unlike JSON, it is very fast and small.</p>\n<h6>ADVANTAGES</h6>\n<ul>\n<li>\n<p>PORTABLE</p>\n<p>The MessagePack format does not depend on language nor byte order.</p>\n</li>\n<li>\n<p>SMALL IN SIZE</p>\n<pre><code>  say length(JSON::XS::encode_json({a=&gt;1, b=&gt;2}));   # =&gt; 13\n  say length(Storable::nfreeze({a=&gt;1, b=&gt;2}));       # =&gt; 21\n  say length(Data::MessagePack-&gt;pack({a=&gt;1, b=&gt;2})); # =&gt; 7\n</code></pre>\n<p>The MessagePack format saves memory than JSON and Storable format.</p>\n</li>\n<li>\n<p>STREAMING DESERIALIZER</p>\n<p>MessagePack supports streaming deserializer. It is useful for\nnetworking such as RPC.  See <a href=\"https://metacpan.org/pod/Data%3A%3AMessagePack%3A%3AUnpacker\">Data::MessagePack::Unpacker</a> for\ndetails.</p>\n</li>\n</ul>\n<p>If you want to get more information about the MessagePack format,\nplease visit to <a href=\"http://msgpack.org/\">http://msgpack.org/</a>.</p>\n<h5>METHODS</h5>\n<ul>\n<li>\n<p><code>my $packed = Data::MessagePack-&gt;pack($data[, $max_depth]);</code></p>\n<p>Pack the $data to messagepack format string.</p>\n<p>This method throws an exception when the perl structure is nested more\nthan $max_depth levels(default: 512) in order to detect circular\nreferences.</p>\n<p>Data::MessagePack-&gt;pack() throws an exception when encountering a\nblessed perl object, because MessagePack is a language-independent\nformat.</p>\n</li>\n<li>\n<p><code>my $unpacked = Data::MessagePack-&gt;unpack($msgpackstr);</code></p>\n<p>unpack the $msgpackstr to a MessagePack format string.</p>\n</li>\n<li>\n<p><code>my $mp = Data::MesssagePack-&gt;new()</code></p>\n<p>Creates a new MessagePack instance.</p>\n</li>\n<li>\n<p><code>$mp = $mp-&gt;prefer_integer([ $enable ])</code></p>\n</li>\n<li>\n<p><code>$enabled = $mp-&gt;get_prefer_integer()</code></p>\n<p>If <em>$enable</em> is true (or missing), then the <code>pack</code> method tries a\nstring as an integer if the string looks like an integer.</p>\n</li>\n<li>\n<p><code>$mp = $mp-&gt;canonical([ $enable ])</code></p>\n</li>\n<li>\n<p><code>$enabled = $mp-&gt;get_canonical()</code></p>\n<p>If <em>$enable</em> is true (or missing), then the <code>pack</code> method will output\npacked data by sorting their keys. This is adding a comparatively high\noverhead.</p>\n</li>\n<li>\n<p><code>$mp = $mp-&gt;utf8([ $enable ])</code></p>\n</li>\n<li>\n<p><code>$enabled = $mp-&gt;get_utf8()</code></p>\n<p>If <em>$enable</em> is true (or missing), then the <code>pack</code> method will\napply <code>utf8::encode()</code> to all the string values.</p>\n<p>In other words, this property tell <code>$mp</code> to deal with <strong>text strings</strong>.\nSee <a href=\"https://metacpan.org/pod/perlunifaq\">perlunifaq</a> for the meaning of <strong>text string</strong>.</p>\n</li>\n<li>\n<p><code>$packed = $mp-&gt;pack($data)</code></p>\n</li>\n<li>\n<p><code>$packed = $mp-&gt;encode($data)</code></p>\n<p>Same as <code>Data::MessagePack-&gt;pack()</code>, but properties are respected.</p>\n</li>\n<li>\n<p><code>$data = $mp-&gt;unpack($data)</code></p>\n</li>\n<li>\n<p><code>$data = $mp-&gt;decode($data)</code></p>\n<p>Same as <code>Data::MessagePack-&gt;unpack()</code>, but properties are respected.</p>\n</li>\n</ul>\n<h5>Configuration Variables (DEPRECATED)</h5>\n<ul>\n<li>\n<p>$Data::MessagePack::PreferInteger</p>\n<p>Packs a string as an integer, when it looks like an integer.</p>\n<p>This variable is <strong>deprecated</strong>.\nUse <code>$msgpack-&gt;prefer_integer</code> property instead.</p>\n</li>\n</ul>\n<h5>SPEED</h5>\n<p>This is a result of <code>benchmark/serialize.pl</code> and <code>benchmark/deserialize.pl</code>\non my SC440(Linux 2.6.32-23-server #37-Ubuntu SMP).\n(You should benchmark them with <strong>your</strong> data if the speed matters, of course.)</p>\n<pre><code>-- serialize\nJSON::XS: 2.3\nData::MessagePack: 0.24\nStorable: 2.21\nBenchmark: running json, mp, storable for at least 1 CPU seconds...\n      json:  1 wallclock secs ( 1.00 usr +  0.01 sys =  1.01 CPU) @ 141939.60/s (n=143359)\n        mp:  1 wallclock secs ( 1.06 usr +  0.00 sys =  1.06 CPU) @ 355500.94/s (n=376831)\n  storable:  1 wallclock secs ( 1.12 usr +  0.00 sys =  1.12 CPU) @ 38399.11/s (n=43007)\n             Rate storable     json       mp\nstorable  38399/s       --     -73%     -89%\njson     141940/s     270%       --     -60%\nmp       355501/s     826%     150%       --\n\n-- deserialize\nJSON::XS: 2.3\nData::MessagePack: 0.24\nStorable: 2.21\nBenchmark: running json, mp, storable for at least 1 CPU seconds...\n      json:  0 wallclock secs ( 1.05 usr +  0.00 sys =  1.05 CPU) @ 179442.86/s (n=188415)\n        mp:  0 wallclock secs ( 1.01 usr +  0.00 sys =  1.01 CPU) @ 212909.90/s (n=215039)\n  storable:  2 wallclock secs ( 1.14 usr +  0.00 sys =  1.14 CPU) @ 114974.56/s (n=131071)\n             Rate storable     json       mp\nstorable 114975/s       --     -36%     -46%\njson     179443/s      56%       --     -16%\nmp       212910/s      85%      19%       --\n</code></pre>\n<h5>CAVEAT</h5>\n<h6>Unpacking 64 bit integers</h6>\n<p>This module can unpack 64 bit integers even if your perl does not support them\n(i.e. where <code>perl -V:ivsize</code> is 4), but you cannot calculate these values\nunless you use <code>Math::BigInt</code>.</p>\n<h5>TODO</h5>\n<ul>\n<li>\n<p>Error handling</p>\n<p>MessagePack cannot deal with complex scalars such as object references,\nfilehandles, and code references. We should report the errors more kindly.</p>\n</li>\n<li>\n<p>Streaming deserializer</p>\n<p>The current implementation of the streaming deserializer does not have internal\nbuffers while some other bindings (such as Ruby binding) does. This limitation\nwill astonish those who try to unpack byte streams with an arbitrary buffer size\n(e.g. <code>while(read($socket, $buffer, $arbitrary_buffer_size)) { ... }</code>).\nWe should implement the internal buffer for the unpacker.</p>\n</li>\n</ul>\n<h5>FAQ</h5>\n<ul>\n<li>\n<p>Why does Data::MessagePack have pure perl implementations?</p>\n<p>msgpack C library uses C99 feature, VC++6 does not support C99. So pure perl version is needed for VC++ users.</p>\n</li>\n</ul>\n<h5>AUTHORS</h5>\n<p>Tokuhiro Matsuno</p>\n<p>Makamaka Hannyaharamitu</p>\n<p>gfx</p>\n<h5>THANKS TO</h5>\n<p>Jun Kuriyama</p>\n<p>Dan Kogai</p>\n<p>FURUHASHI Sadayuki</p>\n<p>hanekomu</p>\n<p>Kazuho Oku</p>\n<p>syohex</p>\n<h5>LICENSE</h5>\n<p>This library is free software; you can redistribute it and/or modify\nit under the same terms as Perl itself.</p>\n<h5>SEE ALSO</h5>\n<p><a href=\"http://msgpack.org/\">http://msgpack.org/</a> is the official web site for the  MessagePack format.</p>\n<p><a href=\"https://metacpan.org/pod/Data%3A%3AMessagePack%3A%3AUnpacker\">Data::MessagePack::Unpacker</a></p>\n<p><a href=\"https://metacpan.org/pod/AnyEvent%3A%3AMPRPC\">AnyEvent::MPRPC</a></p>\n",
    "msgpack_repo_id": "msgpack-msgpack-perl",
    "msgpack_repo_homepage": "https://github.com/msgpack/msgpack-perl",
    "full_name": "msgpack/msgpack-perl",
    "owner": "msgpack",
    "html_url": "https://github.com/msgpack/msgpack-perl"
  },
  {
    "msgpack_lang": "PHP",
    "msgpack_quickstart_html": "<h5>msgpack.php</h5>\n<p><a href=\"https://github.com/rybakit/msgpack.php/actions?query=workflow%3AQA\"><img src=\"https://github.com/rybakit/msgpack.php/workflows/QA/badge.svg\" alt=\"Quality Assurance\"></a>\n<a href=\"https://scrutinizer-ci.com/g/rybakit/msgpack.php/?branch=master\"><img src=\"https://scrutinizer-ci.com/g/rybakit/msgpack.php/badges/coverage.png?b=master\" alt=\"Code Coverage\"></a>\n<a href=\"https://github.com/ziadoz/awesome-php#data-structure-and-storage\"><img src=\"https://awesome.re/mentioned-badge.svg\" alt=\"Mentioned in Awesome PHP\"></a></p>\n<p>A pure PHP implementation of the <a href=\"https://msgpack.org/\">MessagePack</a> serialization format.</p>\n<h6>Features</h6>\n<ul>\n<li>Fully compliant with the latest <a href=\"https://github.com/msgpack/msgpack/blob/master/spec.md\">MessagePack specification</a></li>\n<li>Supports <a href=\"#unpacking\">streaming unpacking</a></li>\n<li>Supports <a href=\"#unpacking-options\">unsigned 64-bit integers handling</a></li>\n<li>Supports <a href=\"#custom-types\">object serialization</a></li>\n<li><a href=\"https://github.com/rybakit/msgpack.php/actions?query=workflow%3AQA\">Fully tested</a></li>\n<li><a href=\"#performance\">Relatively fast</a></li>\n</ul>\n<h6>Table of contents</h6>\n<ul>\n<li><a href=\"#installation\">Installation</a></li>\n<li><a href=\"#usage\">Usage</a>\n<ul>\n<li><a href=\"#packing\">Packing</a>\n<ul>\n<li><a href=\"#packing-options\">Packing options</a></li>\n</ul>\n</li>\n<li><a href=\"#unpacking\">Unpacking</a>\n<ul>\n<li><a href=\"#unpacking-options\">Unpacking options</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#custom-types\">Custom types</a>\n<ul>\n<li><a href=\"#type-objects\">Type objects</a></li>\n<li><a href=\"#type-transformers\">Type transformers</a></li>\n<li><a href=\"#extensions\">Extensions</a>\n<ul>\n<li><a href=\"#timestamp\">Timestamp</a></li>\n<li><a href=\"#application-specific-extensions\">Application-specific extensions</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#exceptions\">Exceptions</a></li>\n<li><a href=\"#tests\">Tests</a>\n<ul>\n<li><a href=\"#fuzzing\">Fuzzing</a></li>\n<li><a href=\"#performance\">Performance</a></li>\n</ul>\n</li>\n<li><a href=\"#license\">License</a></li>\n</ul>\n<h6>Installation</h6>\n<p>The recommended way to install the library is through <a href=\"http://getcomposer.org\">Composer</a>:</p>\n<pre><code class=\"language-sh\">composer require rybakit/msgpack\n</code></pre>\n<h6>Usage</h6>\n<h7>Packing</h7>\n<p>To pack values you can either use an instance of a <code>Packer</code>:</p>\n<pre><code class=\"language-php\">$packer = new Packer();\n$packed = $packer-&gt;pack($value);\n</code></pre>\n<p>or call a static method on the <code>MessagePack</code> class:</p>\n<pre><code class=\"language-php\">$packed = MessagePack::pack($value);\n</code></pre>\n<p>In the examples above, the method <code>pack</code> automatically packs a value depending on its type. However, not all PHP types\ncan be uniquely translated to MessagePack types. For example, the MessagePack format defines <code>map</code> and <code>array</code> types,\nwhich are represented by a single <code>array</code> type in PHP. By default, the packer will pack a PHP array as a MessagePack\narray if it has sequential numeric keys, starting from <code>0</code> and as a MessagePack map otherwise:</p>\n<pre><code class=\"language-php\">$mpArr1 = $packer-&gt;pack([1, 2]);               // MP array [1, 2]\n$mpArr2 = $packer-&gt;pack([0 =&gt; 1, 1 =&gt; 2]);     // MP array [1, 2]\n$mpMap1 = $packer-&gt;pack([0 =&gt; 1, 2 =&gt; 3]);     // MP map {0: 1, 2: 3}\n$mpMap2 = $packer-&gt;pack([1 =&gt; 2, 2 =&gt; 3]);     // MP map {1: 2, 2: 3}\n$mpMap3 = $packer-&gt;pack(['a' =&gt; 1, 'b' =&gt; 2]); // MP map {a: 1, b: 2}\n</code></pre>\n<p>However, sometimes you need to pack a sequential array as a MessagePack map.\nTo do this, use the <code>packMap</code> method:</p>\n<pre><code class=\"language-php\">$mpMap = $packer-&gt;packMap([1, 2]); // {0: 1, 1: 2}\n</code></pre>\n<p>Here is a list of type-specific packing methods:</p>\n<pre><code class=\"language-php\">$packer-&gt;packNil();           // MP nil\n$packer-&gt;packBool(true);      // MP bool\n$packer-&gt;packInt(42);         // MP int\n$packer-&gt;packFloat(M_PI);     // MP float (32 or 64)\n$packer-&gt;packFloat32(M_PI);   // MP float 32\n$packer-&gt;packFloat64(M_PI);   // MP float 64\n$packer-&gt;packStr('foo');      // MP str\n$packer-&gt;packBin(&quot;\\x80&quot;);     // MP bin\n$packer-&gt;packArray([1, 2]);   // MP array\n$packer-&gt;packMap(['a' =&gt; 1]); // MP map\n$packer-&gt;packExt(1, &quot;\\xaa&quot;);  // MP ext\n</code></pre>\n<blockquote>\n<p><em>Check the <a href=\"#custom-types\">&quot;Custom types&quot;</a> section below on how to pack custom types.</em></p>\n</blockquote>\n<h8>Packing options</h8>\n<p>The <code>Packer</code> object supports a number of bitmask-based options for fine-tuning\nthe packing process (defaults are in bold):</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong><code>FORCE_STR</code></strong></td>\n<td>Forces PHP strings to be packed as MessagePack UTF-8 strings</td>\n</tr>\n<tr>\n<td><code>FORCE_BIN</code></td>\n<td>Forces PHP strings to be packed as MessagePack binary data</td>\n</tr>\n<tr>\n<td><code>DETECT_STR_BIN</code></td>\n<td>Detects MessagePack str/bin type automatically</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>FORCE_ARR</code></td>\n<td>Forces PHP arrays to be packed as MessagePack arrays</td>\n</tr>\n<tr>\n<td><code>FORCE_MAP</code></td>\n<td>Forces PHP arrays to be packed as MessagePack maps</td>\n</tr>\n<tr>\n<td><strong><code>DETECT_ARR_MAP</code></strong></td>\n<td>Detects MessagePack array/map type automatically</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>FORCE_FLOAT32</code></td>\n<td>Forces PHP floats to be packed as 32-bits MessagePack floats</td>\n</tr>\n<tr>\n<td><strong><code>FORCE_FLOAT64</code></strong></td>\n<td>Forces PHP floats to be packed as 64-bits MessagePack floats</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p><em>The type detection mode (<code>DETECT_STR_BIN</code>/<code>DETECT_ARR_MAP</code>) adds some overhead\nwhich can be noticed when you pack large (16- and 32-bit) arrays or strings.\nHowever, if you know the value type in advance (for example, you only work with\nUTF-8 strings or/and associative arrays), you can eliminate this overhead by\nforcing the packer to use the appropriate type, which will save it from running\nthe auto-detection routine. Another option is to explicitly specify the value\ntype. The library provides 2 auxiliary classes for this, <code>Map</code> and <code>Bin</code>.\nCheck the <a href=\"#custom-types\">&quot;Custom types&quot;</a> section below for details.</em></p>\n</blockquote>\n<p>Examples:</p>\n<pre><code class=\"language-php\">// detect str/bin type and pack PHP 64-bit floats (doubles) to MP 32-bit floats\n$packer = new Packer(PackOptions::DETECT_STR_BIN | PackOptions::FORCE_FLOAT32);\n\n// these will throw MessagePack\\Exception\\InvalidOptionException\n$packer = new Packer(PackOptions::FORCE_STR | PackOptions::FORCE_BIN);\n$packer = new Packer(PackOptions::FORCE_FLOAT32 | PackOptions::FORCE_FLOAT64);\n</code></pre>\n<h7>Unpacking</h7>\n<p>To unpack data you can either use an instance of a <code>BufferUnpacker</code>:</p>\n<pre><code class=\"language-php\">$unpacker = new BufferUnpacker();\n\n$unpacker-&gt;reset($packed);\n$value = $unpacker-&gt;unpack();\n</code></pre>\n<p>or call a static method on the <code>MessagePack</code> class:</p>\n<pre><code class=\"language-php\">$value = MessagePack::unpack($packed);\n</code></pre>\n<p>If the packed data is received in chunks (e.g. when reading from a stream), use the <code>tryUnpack</code> method, which attempts\nto unpack data and returns an array of unpacked messages (if any) instead of throwing an <code>InsufficientDataException</code>:</p>\n<pre><code class=\"language-php\">while ($chunk = ...) {\n    $unpacker-&gt;append($chunk);\n    if ($messages = $unpacker-&gt;tryUnpack()) {\n        return $messages;\n    }\n}\n</code></pre>\n<p>If you want to unpack from a specific position in a buffer, use <code>seek</code>:</p>\n<pre><code class=\"language-php\">$unpacker-&gt;seek(42); // set position equal to 42 bytes\n$unpacker-&gt;seek(-8); // set position to 8 bytes before the end of the buffer\n</code></pre>\n<p>To skip bytes from the current position, use <code>skip</code>:</p>\n<pre><code class=\"language-php\">$unpacker-&gt;skip(10); // set position to 10 bytes ahead of the current position\n</code></pre>\n<p>To get the number of remaining (unread) bytes in the buffer:</p>\n<pre><code class=\"language-php\">$unreadBytesCount = $unpacker-&gt;getRemainingCount();\n</code></pre>\n<p>To check whether the buffer has unread data:</p>\n<pre><code class=\"language-php\">$hasUnreadBytes = $unpacker-&gt;hasRemaining();\n</code></pre>\n<p>If needed, you can remove already read data from the buffer by calling:</p>\n<pre><code class=\"language-php\">$releasedBytesCount = $unpacker-&gt;release();\n</code></pre>\n<p>With the <code>read</code> method you can read raw (packed) data:</p>\n<pre><code class=\"language-php\">$packedData = $unpacker-&gt;read(2); // read 2 bytes\n</code></pre>\n<p>Besides the above methods <code>BufferUnpacker</code> provides type-specific unpacking methods, namely:</p>\n<pre><code class=\"language-php\">$unpacker-&gt;unpackNil();   // PHP null\n$unpacker-&gt;unpackBool();  // PHP bool\n$unpacker-&gt;unpackInt();   // PHP int\n$unpacker-&gt;unpackFloat(); // PHP float\n$unpacker-&gt;unpackStr();   // PHP UTF-8 string\n$unpacker-&gt;unpackBin();   // PHP binary string\n$unpacker-&gt;unpackArray(); // PHP sequential array\n$unpacker-&gt;unpackMap();   // PHP associative array\n$unpacker-&gt;unpackExt();   // PHP MessagePack\\Type\\Ext object\n</code></pre>\n<h8>Unpacking options</h8>\n<p>The <code>BufferUnpacker</code> object supports a number of bitmask-based options for fine-tuning\nthe unpacking process (defaults are in bold):</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong><code>BIGINT_AS_STR</code></strong></td>\n<td>Converts overflowed integers to strings <sup>[1]</sup></td>\n</tr>\n<tr>\n<td><code>BIGINT_AS_GMP</code></td>\n<td>Converts overflowed integers to <code>GMP</code> objects <sup>[2]</sup></td>\n</tr>\n<tr>\n<td><code>BIGINT_AS_DEC</code></td>\n<td>Converts overflowed integers to <code>Decimal\\Decimal</code> objects <sup>[3]</sup></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p><em>1. The binary MessagePack format has unsigned 64-bit as its largest integer\ndata type, but PHP does not support such integers, which means that\nan overflow can occur during unpacking.</em></p>\n<p><em>2. Make sure the <a href=\"http://php.net/manual/en/book.gmp.php\">GMP</a> extension\nis enabled.</em></p>\n<p><em>3. Make sure the <a href=\"http://php-decimal.io/\">Decimal</a> extension is enabled.</em></p>\n</blockquote>\n<p>Examples:</p>\n<pre><code class=\"language-php\">$packedUint64 = &quot;\\xcf&quot;.&quot;\\xff\\xff\\xff\\xff&quot;.&quot;\\xff\\xff\\xff\\xff&quot;;\n\n$unpacker = new BufferUnpacker($packedUint64);\nvar_dump($unpacker-&gt;unpack()); // string(20) &quot;18446744073709551615&quot;\n\n$unpacker = new BufferUnpacker($packedUint64, UnpackOptions::BIGINT_AS_GMP);\nvar_dump($unpacker-&gt;unpack()); // object(GMP) {...}\n\n$unpacker = new BufferUnpacker($packedUint64, UnpackOptions::BIGINT_AS_DEC);\nvar_dump($unpacker-&gt;unpack()); // object(Decimal\\Decimal) {...}\n</code></pre>\n<h7>Custom types</h7>\n<p>In addition to the <a href=\"https://github.com/msgpack/msgpack/blob/master/spec.md#type-system\">basic types</a>, the library\nprovides functionality to serialize and deserialize arbitrary types. This can be done in several ways, depending\non your use case. Let's take a look at them.</p>\n<h8>Type objects</h8>\n<p>If you need to <em>serialize</em> an instance of one of your classes into one of the basic MessagePack types, the best way\nto do this is to implement the <a href=\"src/CanBePacked.php\">CanBePacked</a> interface in the class. A good example of such\na class is the <code>Map</code> type class that comes with the library. This type is useful when you want to explicitly specify\nthat a given PHP array should be packed as a MessagePack map without triggering an automatic type detection routine:</p>\n<pre><code class=\"language-php\">$packer = new Packer();\n\n$packedMap = $packer-&gt;pack(new Map([1, 2, 3]));\n$packedArray = $packer-&gt;pack([1, 2, 3]);\n</code></pre>\n<blockquote>\n<p><em>More type examples can be found in the <a href=\"src/Type\">src/Type</a> directory.</em></p>\n</blockquote>\n<h8>Type transformers</h8>\n<p>As with type objects, type transformers are only responsible for <em>serializing</em> values. They should be\nused when you need to serialize a value that does not implement the <a href=\"src/CanBePacked.php\">CanBePacked</a>\ninterface. Examples of such values could be instances of built-in or third-party classes that you don't\nown, or non-objects such as resources.</p>\n<p>A transformer class must implement the <a href=\"src/CanPack.php\">CanPack</a> interface. To use a transformer,\nit must first be registered in the packer. Here is an example of how to serialize PHP streams into\nthe MessagePack <code>bin</code> format type using one of the supplied transformers, <code>StreamTransformer</code>:</p>\n<pre><code class=\"language-php\">$packer = new Packer(null, [new StreamTransformer()]);\n\n$packedBin = $packer-&gt;pack(fopen('/path/to/file', 'r+'));\n</code></pre>\n<blockquote>\n<p><em>More type transformer examples can be found in the <a href=\"src/TypeTransformer\">src/TypeTransformer</a> directory.</em></p>\n</blockquote>\n<h8>Extensions</h8>\n<p>In contrast to the cases described above, extensions are intended to handle\n<a href=\"https://github.com/msgpack/msgpack/blob/master/spec.md#extension-types\">extension types</a>\nand are responsible for both <em>serialization</em> and <em>deserialization</em> of values (types).</p>\n<p>An extension class must implement the <a href=\"src/Extension.php\">Extension</a> interface. To use an extension,\nit must first be registered in the packer and the unpacker.</p>\n<p>The MessagePack specification divides extension types into two groups: <em>predefined</em> and <em>application-specific</em>.\nCurrently, there is only one predefined type in the specification, Timestamp.</p>\n<h5>Timestamp</h5>\n<p>The Timestamp extension type is a <a href=\"https://github.com/msgpack/msgpack/blob/master/spec.md#timestamp-extension-type\">predefined</a>\ntype. Support for this type in the library is done through the <code>TimestampExtension</code> class. This class is responsible\nfor handling <code>Timestamp</code> objects, which represent the number of seconds and optional adjustment in nanoseconds:</p>\n<pre><code class=\"language-php\">$timestampExtension = new TimestampExtension();\n\n$packer = new Packer();\n$packer = $packer-&gt;extendWith($timestampExtension);\n\n$unpacker = new BufferUnpacker();\n$unpacker = $unpacker-&gt;extendWith($timestampExtension);\n\n$packedTimestamp = $packer-&gt;pack(Timestamp::now());\n$timestamp = $unpacker-&gt;reset($packedTimestamp)-&gt;unpack();\n\n$seconds = $timestamp-&gt;getSeconds();\n$nanoseconds = $timestamp-&gt;getNanoseconds();\n</code></pre>\n<p>When using the <code>MessagePack</code> class, the Timestamp extension is already registered:</p>\n<pre><code class=\"language-php\">$packedTimestamp = MessagePack::pack(Timestamp::now());\n$timestamp = MessagePack::unpack($packedTimestamp);\n</code></pre>\n<h5>Application-specific extensions</h5>\n<p>In addition, the format can be extended with your own types. For example, to make the built-in PHP <code>DateTime</code> objects\nfirst-class citizens in your code, you can create a corresponding extension, as shown in the <a href=\"examples/MessagePack/DateTimeExtension.php\">example</a>.\nPlease note, that custom extensions have to be registered with a unique extension ID (an integer from <code>0</code> to <code>127</code>).</p>\n<blockquote>\n<p><em>More extension examples can be found in the <a href=\"examples/MessagePack\">examples/MessagePack</a> directory.</em></p>\n</blockquote>\n<blockquote>\n<p><em>To learn more about how extension types can be useful, check out this\n<a href=\"https://dev.to/tarantool/advanced-messagepack-capabilities-4735\">article</a>.</em></p>\n</blockquote>\n<h6>Exceptions</h6>\n<p>If an error occurs during packing/unpacking, a <code>PackingFailedException</code> or an <code>UnpackingFailedException</code>\nwill be thrown, respectively. In addition, an <code>InsufficientDataException</code> can be thrown during unpacking.</p>\n<p>An <code>InvalidOptionException</code> will be thrown in case an invalid option (or a combination of mutually\nexclusive options) is used.</p>\n<h6>Tests</h6>\n<p>Run tests as follows:</p>\n<pre><code class=\"language-sh\">vendor/bin/phpunit\n</code></pre>\n<p>Also, if you already have Docker installed, you can run the tests in a docker container. First, create a container:</p>\n<pre><code class=\"language-sh\">./dockerfile.sh | docker build -t msgpack -\n</code></pre>\n<p>The command above will create a container named <code>msgpack</code> with PHP 8.4 runtime. You may change the default runtime\nby defining the <code>PHP_IMAGE</code> environment variable:</p>\n<pre><code class=\"language-sh\">PHP_IMAGE='php:8.3-cli' ./dockerfile.sh | docker build -t msgpack -\n</code></pre>\n<blockquote>\n<p><em>See a list of various images <a href=\"https://hub.docker.com/_/php\">here</a>.</em></p>\n</blockquote>\n<p>Then run the unit tests:</p>\n<pre><code class=\"language-sh\">docker run --rm -v $PWD:/msgpack -w /msgpack msgpack\n</code></pre>\n<h8>Fuzzing</h8>\n<p>To ensure that the unpacking works correctly with malformed/semi-malformed data, you can use a testing technique\ncalled <a href=\"https://en.wikipedia.org/wiki/Fuzzing\">Fuzzing</a>. The library ships with a help file (target)\nfor <a href=\"https://github.com/nikic/PHP-Fuzzer\">PHP-Fuzzer</a> and can be used as follows:</p>\n<pre><code class=\"language-sh\">php-fuzzer fuzz tests/fuzz_buffer_unpacker.php\n</code></pre>\n<h8>Performance</h8>\n<p>To check performance, run:</p>\n<pre><code class=\"language-sh\">php -n -dzend_extension=opcache.so \\\n-dpcre.jit=1 -dopcache.enable=1 -dopcache.enable_cli=1 \\\ntests/bench.php\n</code></pre>\n<details>\n<summary><strong>Example output</strong></summary>\n<pre><code>Filter: MessagePack\\Tests\\Perf\\Filter\\ListFilter\nRounds: 3\nIterations: 100000\n\n=============================================\nTest/Target            Packer  BufferUnpacker\n---------------------------------------------\nnil .................. 0.0030 ........ 0.0139\nfalse ................ 0.0037 ........ 0.0144\ntrue ................. 0.0040 ........ 0.0137\n7-bit uint #1 ........ 0.0052 ........ 0.0120\n7-bit uint #2 ........ 0.0059 ........ 0.0114\n7-bit uint #3 ........ 0.0061 ........ 0.0119\n5-bit sint #1 ........ 0.0067 ........ 0.0126\n5-bit sint #2 ........ 0.0064 ........ 0.0132\n5-bit sint #3 ........ 0.0066 ........ 0.0135\n8-bit uint #1 ........ 0.0078 ........ 0.0200\n8-bit uint #2 ........ 0.0077 ........ 0.0212\n8-bit uint #3 ........ 0.0086 ........ 0.0203\n16-bit uint #1 ....... 0.0111 ........ 0.0271\n16-bit uint #2 ....... 0.0115 ........ 0.0260\n16-bit uint #3 ....... 0.0103 ........ 0.0273\n32-bit uint #1 ....... 0.0116 ........ 0.0326\n32-bit uint #2 ....... 0.0118 ........ 0.0332\n32-bit uint #3 ....... 0.0127 ........ 0.0325\n64-bit uint #1 ....... 0.0140 ........ 0.0277\n64-bit uint #2 ....... 0.0134 ........ 0.0294\n64-bit uint #3 ....... 0.0134 ........ 0.0281\n8-bit int #1 ......... 0.0086 ........ 0.0241\n8-bit int #2 ......... 0.0089 ........ 0.0225\n8-bit int #3 ......... 0.0085 ........ 0.0229\n16-bit int #1 ........ 0.0118 ........ 0.0280\n16-bit int #2 ........ 0.0121 ........ 0.0270\n16-bit int #3 ........ 0.0109 ........ 0.0274\n32-bit int #1 ........ 0.0128 ........ 0.0346\n32-bit int #2 ........ 0.0118 ........ 0.0339\n32-bit int #3 ........ 0.0135 ........ 0.0368\n64-bit int #1 ........ 0.0138 ........ 0.0276\n64-bit int #2 ........ 0.0132 ........ 0.0286\n64-bit int #3 ........ 0.0137 ........ 0.0274\n64-bit int #4 ........ 0.0180 ........ 0.0285\n64-bit float #1 ...... 0.0134 ........ 0.0284\n64-bit float #2 ...... 0.0125 ........ 0.0275\n64-bit float #3 ...... 0.0126 ........ 0.0283\nfix string #1 ........ 0.0035 ........ 0.0133\nfix string #2 ........ 0.0094 ........ 0.0216\nfix string #3 ........ 0.0094 ........ 0.0222\nfix string #4 ........ 0.0091 ........ 0.0241\n8-bit string #1 ...... 0.0122 ........ 0.0301\n8-bit string #2 ...... 0.0118 ........ 0.0304\n8-bit string #3 ...... 0.0119 ........ 0.0315\n16-bit string #1 ..... 0.0150 ........ 0.0388\n16-bit string #2 ..... 0.1545 ........ 0.1665\n32-bit string ........ 0.1570 ........ 0.1756\nwide char string #1 .. 0.0091 ........ 0.0236\nwide char string #2 .. 0.0122 ........ 0.0313\n8-bit binary #1 ...... 0.0100 ........ 0.0302\n8-bit binary #2 ...... 0.0123 ........ 0.0324\n8-bit binary #3 ...... 0.0126 ........ 0.0327\n16-bit binary ........ 0.0168 ........ 0.0372\n32-bit binary ........ 0.1588 ........ 0.1754\nfix array #1 ......... 0.0042 ........ 0.0131\nfix array #2 ......... 0.0294 ........ 0.0367\nfix array #3 ......... 0.0412 ........ 0.0472\n16-bit array #1 ...... 0.1378 ........ 0.1596\n16-bit array #2 ........... S ............. S\n32-bit array .............. S ............. S\ncomplex array ........ 0.1865 ........ 0.2283\nfix map #1 ........... 0.0725 ........ 0.1048\nfix map #2 ........... 0.0319 ........ 0.0405\nfix map #3 ........... 0.0356 ........ 0.0665\nfix map #4 ........... 0.0465 ........ 0.0497\n16-bit map #1 ........ 0.2540 ........ 0.3028\n16-bit map #2 ............. S ............. S\n32-bit map ................ S ............. S\ncomplex map .......... 0.2372 ........ 0.2710\nfixext 1 ............. 0.0283 ........ 0.0358\nfixext 2 ............. 0.0291 ........ 0.0371\nfixext 4 ............. 0.0302 ........ 0.0355\nfixext 8 ............. 0.0288 ........ 0.0384\nfixext 16 ............ 0.0293 ........ 0.0359\n8-bit ext ............ 0.0302 ........ 0.0439\n16-bit ext ........... 0.0334 ........ 0.0499\n32-bit ext ........... 0.1845 ........ 0.1888\n32-bit timestamp #1 .. 0.0337 ........ 0.0547\n32-bit timestamp #2 .. 0.0335 ........ 0.0560\n64-bit timestamp #1 .. 0.0371 ........ 0.0575\n64-bit timestamp #2 .. 0.0374 ........ 0.0542\n64-bit timestamp #3 .. 0.0356 ........ 0.0533\n96-bit timestamp #1 .. 0.0362 ........ 0.0699\n96-bit timestamp #2 .. 0.0381 ........ 0.0701\n96-bit timestamp #3 .. 0.0367 ........ 0.0687\n=============================================\nTotal                  2.7618          4.0820\nSkipped                     4               4\nFailed                      0               0\nIgnored                     0               0\n</code></pre>\n</details>\n<p><em>With JIT:</em></p>\n<pre><code class=\"language-sh\">php -n -dzend_extension=opcache.so \\\n-dpcre.jit=1 -dopcache.jit_buffer_size=64M -dopcache.jit=tracing -dopcache.enable=1 -dopcache.enable_cli=1 \\\ntests/bench.php\n</code></pre>\n<details>\n<summary><strong>Example output</strong></summary>\n<pre><code>Filter: MessagePack\\Tests\\Perf\\Filter\\ListFilter\nRounds: 3\nIterations: 100000\n\n=============================================\nTest/Target            Packer  BufferUnpacker\n---------------------------------------------\nnil .................. 0.0005 ........ 0.0054\nfalse ................ 0.0004 ........ 0.0059\ntrue ................. 0.0004 ........ 0.0059\n7-bit uint #1 ........ 0.0010 ........ 0.0047\n7-bit uint #2 ........ 0.0010 ........ 0.0046\n7-bit uint #3 ........ 0.0010 ........ 0.0046\n5-bit sint #1 ........ 0.0025 ........ 0.0046\n5-bit sint #2 ........ 0.0023 ........ 0.0046\n5-bit sint #3 ........ 0.0024 ........ 0.0045\n8-bit uint #1 ........ 0.0043 ........ 0.0081\n8-bit uint #2 ........ 0.0043 ........ 0.0079\n8-bit uint #3 ........ 0.0041 ........ 0.0080\n16-bit uint #1 ....... 0.0064 ........ 0.0095\n16-bit uint #2 ....... 0.0064 ........ 0.0091\n16-bit uint #3 ....... 0.0064 ........ 0.0094\n32-bit uint #1 ....... 0.0085 ........ 0.0114\n32-bit uint #2 ....... 0.0077 ........ 0.0122\n32-bit uint #3 ....... 0.0077 ........ 0.0120\n64-bit uint #1 ....... 0.0085 ........ 0.0159\n64-bit uint #2 ....... 0.0086 ........ 0.0157\n64-bit uint #3 ....... 0.0086 ........ 0.0158\n8-bit int #1 ......... 0.0042 ........ 0.0080\n8-bit int #2 ......... 0.0042 ........ 0.0080\n8-bit int #3 ......... 0.0042 ........ 0.0081\n16-bit int #1 ........ 0.0065 ........ 0.0095\n16-bit int #2 ........ 0.0065 ........ 0.0090\n16-bit int #3 ........ 0.0056 ........ 0.0085\n32-bit int #1 ........ 0.0067 ........ 0.0107\n32-bit int #2 ........ 0.0066 ........ 0.0106\n32-bit int #3 ........ 0.0063 ........ 0.0104\n64-bit int #1 ........ 0.0072 ........ 0.0162\n64-bit int #2 ........ 0.0073 ........ 0.0174\n64-bit int #3 ........ 0.0072 ........ 0.0164\n64-bit int #4 ........ 0.0077 ........ 0.0161\n64-bit float #1 ...... 0.0053 ........ 0.0135\n64-bit float #2 ...... 0.0053 ........ 0.0135\n64-bit float #3 ...... 0.0052 ........ 0.0135\nfix string #1 ....... -0.0002 ........ 0.0044\nfix string #2 ........ 0.0035 ........ 0.0067\nfix string #3 ........ 0.0035 ........ 0.0077\nfix string #4 ........ 0.0033 ........ 0.0078\n8-bit string #1 ...... 0.0059 ........ 0.0110\n8-bit string #2 ...... 0.0063 ........ 0.0121\n8-bit string #3 ...... 0.0064 ........ 0.0124\n16-bit string #1 ..... 0.0099 ........ 0.0146\n16-bit string #2 ..... 0.1522 ........ 0.1474\n32-bit string ........ 0.1511 ........ 0.1483\nwide char string #1 .. 0.0039 ........ 0.0084\nwide char string #2 .. 0.0073 ........ 0.0123\n8-bit binary #1 ...... 0.0040 ........ 0.0112\n8-bit binary #2 ...... 0.0075 ........ 0.0123\n8-bit binary #3 ...... 0.0077 ........ 0.0129\n16-bit binary ........ 0.0096 ........ 0.0145\n32-bit binary ........ 0.1535 ........ 0.1479\nfix array #1 ......... 0.0008 ........ 0.0061\nfix array #2 ......... 0.0121 ........ 0.0165\nfix array #3 ......... 0.0193 ........ 0.0222\n16-bit array #1 ...... 0.0607 ........ 0.0479\n16-bit array #2 ........... S ............. S\n32-bit array .............. S ............. S\ncomplex array ........ 0.0749 ........ 0.0824\nfix map #1 ........... 0.0329 ........ 0.0431\nfix map #2 ........... 0.0161 ........ 0.0189\nfix map #3 ........... 0.0205 ........ 0.0262\nfix map #4 ........... 0.0252 ........ 0.0205\n16-bit map #1 ........ 0.1016 ........ 0.0927\n16-bit map #2 ............. S ............. S\n32-bit map ................ S ............. S\ncomplex map .......... 0.1096 ........ 0.1030\nfixext 1 ............. 0.0157 ........ 0.0161\nfixext 2 ............. 0.0175 ........ 0.0183\nfixext 4 ............. 0.0156 ........ 0.0185\nfixext 8 ............. 0.0163 ........ 0.0184\nfixext 16 ............ 0.0164 ........ 0.0182\n8-bit ext ............ 0.0158 ........ 0.0207\n16-bit ext ........... 0.0203 ........ 0.0219\n32-bit ext ........... 0.1614 ........ 0.1539\n32-bit timestamp #1 .. 0.0195 ........ 0.0249\n32-bit timestamp #2 .. 0.0188 ........ 0.0260\n64-bit timestamp #1 .. 0.0207 ........ 0.0281\n64-bit timestamp #2 .. 0.0212 ........ 0.0291\n64-bit timestamp #3 .. 0.0207 ........ 0.0295\n96-bit timestamp #1 .. 0.0222 ........ 0.0358\n96-bit timestamp #2 .. 0.0228 ........ 0.0353\n96-bit timestamp #3 .. 0.0210 ........ 0.0319\n=============================================\nTotal                  1.6432          1.9674\nSkipped                     4               4\nFailed                      0               0\nIgnored                     0               0\n</code></pre>\n</details>\n<p>You may change default benchmark settings by defining the following environment\nvariables:</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MP_BENCH_TARGETS</td>\n<td><code>pure_p,pure_u</code>, <em>see the <a href=\"tests/bench.php#L83\">list</a> of available targets</em></td>\n</tr>\n<tr>\n<td>MP_BENCH_ITERATIONS</td>\n<td><code>100_000</code></td>\n</tr>\n<tr>\n<td>MP_BENCH_DURATION</td>\n<td><em>not set</em></td>\n</tr>\n<tr>\n<td>MP_BENCH_ROUNDS</td>\n<td><code>3</code></td>\n</tr>\n<tr>\n<td>MP_BENCH_TESTS</td>\n<td><code>-@slow</code>, <em>see the <a href=\"tests/DataProvider.php\">list</a> of available tests</em></td>\n</tr>\n</tbody>\n</table>\n<p>For example:</p>\n<pre><code class=\"language-sh\">export MP_BENCH_TARGETS=pure_p\nexport MP_BENCH_ITERATIONS=1000000\nexport MP_BENCH_ROUNDS=5\n# a comma separated list of test names\nexport MP_BENCH_TESTS='complex array, complex map'\n# or a group name\n# export MP_BENCH_TESTS='-@slow' // @pecl_comp\n# or a regexp\n# export MP_BENCH_TESTS='/complex (array|map)/'\n</code></pre>\n<p>Another example, benchmarking both the library and the <a href=\"https://pecl.php.net/package/msgpack\">PECL extension</a>:</p>\n<pre><code class=\"language-sh\">MP_BENCH_TARGETS=pure_p,pure_u,pecl_p,pecl_u \\\nphp -n -dextension=msgpack.so -dzend_extension=opcache.so \\\n-dpcre.jit=1 -dopcache.enable=1 -dopcache.enable_cli=1 \\\ntests/bench.php\n</code></pre>\n<details>\n<summary><strong>Example output</strong></summary>\n<pre><code>Filter: MessagePack\\Tests\\Perf\\Filter\\ListFilter\nRounds: 3\nIterations: 100000\n\n===========================================================================\nTest/Target            Packer  BufferUnpacker  msgpack_pack  msgpack_unpack\n---------------------------------------------------------------------------\nnil .................. 0.0031 ........ 0.0141 ...... 0.0055 ........ 0.0064\nfalse ................ 0.0039 ........ 0.0154 ...... 0.0056 ........ 0.0053\ntrue ................. 0.0038 ........ 0.0139 ...... 0.0056 ........ 0.0044\n7-bit uint #1 ........ 0.0061 ........ 0.0110 ...... 0.0059 ........ 0.0046\n7-bit uint #2 ........ 0.0065 ........ 0.0119 ...... 0.0042 ........ 0.0029\n7-bit uint #3 ........ 0.0054 ........ 0.0117 ...... 0.0045 ........ 0.0025\n5-bit sint #1 ........ 0.0047 ........ 0.0103 ...... 0.0038 ........ 0.0022\n5-bit sint #2 ........ 0.0048 ........ 0.0117 ...... 0.0038 ........ 0.0022\n5-bit sint #3 ........ 0.0046 ........ 0.0102 ...... 0.0038 ........ 0.0023\n8-bit uint #1 ........ 0.0063 ........ 0.0174 ...... 0.0039 ........ 0.0031\n8-bit uint #2 ........ 0.0063 ........ 0.0167 ...... 0.0040 ........ 0.0029\n8-bit uint #3 ........ 0.0063 ........ 0.0168 ...... 0.0039 ........ 0.0030\n16-bit uint #1 ....... 0.0092 ........ 0.0222 ...... 0.0049 ........ 0.0030\n16-bit uint #2 ....... 0.0096 ........ 0.0227 ...... 0.0042 ........ 0.0046\n16-bit uint #3 ....... 0.0123 ........ 0.0274 ...... 0.0059 ........ 0.0051\n32-bit uint #1 ....... 0.0136 ........ 0.0331 ...... 0.0060 ........ 0.0048\n32-bit uint #2 ....... 0.0130 ........ 0.0336 ...... 0.0070 ........ 0.0048\n32-bit uint #3 ....... 0.0127 ........ 0.0329 ...... 0.0051 ........ 0.0048\n64-bit uint #1 ....... 0.0126 ........ 0.0268 ...... 0.0055 ........ 0.0049\n64-bit uint #2 ....... 0.0135 ........ 0.0281 ...... 0.0052 ........ 0.0046\n64-bit uint #3 ....... 0.0131 ........ 0.0274 ...... 0.0069 ........ 0.0044\n8-bit int #1 ......... 0.0077 ........ 0.0236 ...... 0.0058 ........ 0.0044\n8-bit int #2 ......... 0.0087 ........ 0.0244 ...... 0.0058 ........ 0.0048\n8-bit int #3 ......... 0.0084 ........ 0.0241 ...... 0.0055 ........ 0.0049\n16-bit int #1 ........ 0.0112 ........ 0.0271 ...... 0.0048 ........ 0.0045\n16-bit int #2 ........ 0.0124 ........ 0.0292 ...... 0.0057 ........ 0.0049\n16-bit int #3 ........ 0.0118 ........ 0.0270 ...... 0.0058 ........ 0.0050\n32-bit int #1 ........ 0.0137 ........ 0.0366 ...... 0.0058 ........ 0.0051\n32-bit int #2 ........ 0.0133 ........ 0.0366 ...... 0.0056 ........ 0.0049\n32-bit int #3 ........ 0.0129 ........ 0.0350 ...... 0.0052 ........ 0.0048\n64-bit int #1 ........ 0.0145 ........ 0.0254 ...... 0.0034 ........ 0.0025\n64-bit int #2 ........ 0.0097 ........ 0.0214 ...... 0.0034 ........ 0.0025\n64-bit int #3 ........ 0.0096 ........ 0.0287 ...... 0.0059 ........ 0.0050\n64-bit int #4 ........ 0.0143 ........ 0.0277 ...... 0.0059 ........ 0.0046\n64-bit float #1 ...... 0.0134 ........ 0.0281 ...... 0.0057 ........ 0.0052\n64-bit float #2 ...... 0.0141 ........ 0.0281 ...... 0.0057 ........ 0.0050\n64-bit float #3 ...... 0.0144 ........ 0.0282 ...... 0.0057 ........ 0.0050\nfix string #1 ........ 0.0036 ........ 0.0143 ...... 0.0066 ........ 0.0053\nfix string #2 ........ 0.0107 ........ 0.0222 ...... 0.0065 ........ 0.0068\nfix string #3 ........ 0.0116 ........ 0.0245 ...... 0.0063 ........ 0.0069\nfix string #4 ........ 0.0105 ........ 0.0253 ...... 0.0083 ........ 0.0077\n8-bit string #1 ...... 0.0126 ........ 0.0318 ...... 0.0075 ........ 0.0088\n8-bit string #2 ...... 0.0121 ........ 0.0295 ...... 0.0076 ........ 0.0086\n8-bit string #3 ...... 0.0125 ........ 0.0293 ...... 0.0130 ........ 0.0093\n16-bit string #1 ..... 0.0159 ........ 0.0368 ...... 0.0117 ........ 0.0086\n16-bit string #2 ..... 0.1547 ........ 0.1686 ...... 0.1516 ........ 0.1373\n32-bit string ........ 0.1558 ........ 0.1729 ...... 0.1511 ........ 0.1396\nwide char string #1 .. 0.0098 ........ 0.0237 ...... 0.0066 ........ 0.0065\nwide char string #2 .. 0.0128 ........ 0.0291 ...... 0.0061 ........ 0.0082\n8-bit binary #1 ........... I ............. I ........... F ............. I\n8-bit binary #2 ........... I ............. I ........... F ............. I\n8-bit binary #3 ........... I ............. I ........... F ............. I\n16-bit binary ............. I ............. I ........... F ............. I\n32-bit binary ............. I ............. I ........... F ............. I\nfix array #1 ......... 0.0040 ........ 0.0129 ...... 0.0120 ........ 0.0058\nfix array #2 ......... 0.0279 ........ 0.0390 ...... 0.0143 ........ 0.0165\nfix array #3 ......... 0.0415 ........ 0.0463 ...... 0.0162 ........ 0.0187\n16-bit array #1 ...... 0.1349 ........ 0.1628 ...... 0.0334 ........ 0.0341\n16-bit array #2 ........... S ............. S ........... S ............. S\n32-bit array .............. S ............. S ........... S ............. S\ncomplex array ............. I ............. I ........... F ............. F\nfix map #1 ................ I ............. I ........... F ............. I\nfix map #2 ........... 0.0345 ........ 0.0391 ...... 0.0143 ........ 0.0168\nfix map #3 ................ I ............. I ........... F ............. I\nfix map #4 ........... 0.0459 ........ 0.0473 ...... 0.0151 ........ 0.0163\n16-bit map #1 ........ 0.2518 ........ 0.2962 ...... 0.0400 ........ 0.0490\n16-bit map #2 ............. S ............. S ........... S ............. S\n32-bit map ................ S ............. S ........... S ............. S\ncomplex map .......... 0.2380 ........ 0.2682 ...... 0.0545 ........ 0.0579\nfixext 1 .................. I ............. I ........... F ............. F\nfixext 2 .................. I ............. I ........... F ............. F\nfixext 4 .................. I ............. I ........... F ............. F\nfixext 8 .................. I ............. I ........... F ............. F\nfixext 16 ................. I ............. I ........... F ............. F\n8-bit ext ................. I ............. I ........... F ............. F\n16-bit ext ................ I ............. I ........... F ............. F\n32-bit ext ................ I ............. I ........... F ............. F\n32-bit timestamp #1 ....... I ............. I ........... F ............. F\n32-bit timestamp #2 ....... I ............. I ........... F ............. F\n64-bit timestamp #1 ....... I ............. I ........... F ............. F\n64-bit timestamp #2 ....... I ............. I ........... F ............. F\n64-bit timestamp #3 ....... I ............. I ........... F ............. F\n96-bit timestamp #1 ....... I ............. I ........... F ............. F\n96-bit timestamp #2 ....... I ............. I ........... F ............. F\n96-bit timestamp #3 ....... I ............. I ........... F ............. F\n===========================================================================\nTotal                  1.5625          2.3866        0.7735          0.7243\nSkipped                     4               4             4               4\nFailed                      0               0            24              17\nIgnored                    24              24             0               7\n</code></pre>\n</details>\n<p><em>With JIT:</em></p>\n<pre><code class=\"language-sh\">MP_BENCH_TARGETS=pure_p,pure_u,pecl_p,pecl_u \\\nphp -n -dextension=msgpack.so -dzend_extension=opcache.so \\\n-dpcre.jit=1 -dopcache.jit_buffer_size=64M -dopcache.jit=tracing -dopcache.enable=1 -dopcache.enable_cli=1 \\\ntests/bench.php\n</code></pre>\n<details>\n<summary><strong>Example output</strong></summary>\n<pre><code>Filter: MessagePack\\Tests\\Perf\\Filter\\ListFilter\nRounds: 3\nIterations: 100000\n\n===========================================================================\nTest/Target            Packer  BufferUnpacker  msgpack_pack  msgpack_unpack\n---------------------------------------------------------------------------\nnil .................. 0.0001 ........ 0.0052 ...... 0.0053 ........ 0.0042\nfalse ................ 0.0007 ........ 0.0060 ...... 0.0057 ........ 0.0043\ntrue ................. 0.0008 ........ 0.0060 ...... 0.0056 ........ 0.0041\n7-bit uint #1 ........ 0.0031 ........ 0.0046 ...... 0.0062 ........ 0.0041\n7-bit uint #2 ........ 0.0021 ........ 0.0043 ...... 0.0062 ........ 0.0041\n7-bit uint #3 ........ 0.0022 ........ 0.0044 ...... 0.0061 ........ 0.0040\n5-bit sint #1 ........ 0.0030 ........ 0.0048 ...... 0.0062 ........ 0.0040\n5-bit sint #2 ........ 0.0032 ........ 0.0046 ...... 0.0062 ........ 0.0040\n5-bit sint #3 ........ 0.0031 ........ 0.0046 ...... 0.0062 ........ 0.0040\n8-bit uint #1 ........ 0.0054 ........ 0.0079 ...... 0.0062 ........ 0.0050\n8-bit uint #2 ........ 0.0051 ........ 0.0079 ...... 0.0064 ........ 0.0044\n8-bit uint #3 ........ 0.0051 ........ 0.0082 ...... 0.0062 ........ 0.0044\n16-bit uint #1 ....... 0.0077 ........ 0.0094 ...... 0.0065 ........ 0.0045\n16-bit uint #2 ....... 0.0077 ........ 0.0094 ...... 0.0063 ........ 0.0045\n16-bit uint #3 ....... 0.0077 ........ 0.0095 ...... 0.0064 ........ 0.0047\n32-bit uint #1 ....... 0.0088 ........ 0.0119 ...... 0.0063 ........ 0.0043\n32-bit uint #2 ....... 0.0089 ........ 0.0117 ...... 0.0062 ........ 0.0039\n32-bit uint #3 ....... 0.0089 ........ 0.0118 ...... 0.0063 ........ 0.0044\n64-bit uint #1 ....... 0.0097 ........ 0.0155 ...... 0.0063 ........ 0.0045\n64-bit uint #2 ....... 0.0095 ........ 0.0153 ...... 0.0061 ........ 0.0045\n64-bit uint #3 ....... 0.0096 ........ 0.0156 ...... 0.0063 ........ 0.0047\n8-bit int #1 ......... 0.0053 ........ 0.0083 ...... 0.0062 ........ 0.0044\n8-bit int #2 ......... 0.0052 ........ 0.0080 ...... 0.0062 ........ 0.0044\n8-bit int #3 ......... 0.0052 ........ 0.0080 ...... 0.0062 ........ 0.0043\n16-bit int #1 ........ 0.0089 ........ 0.0097 ...... 0.0069 ........ 0.0046\n16-bit int #2 ........ 0.0075 ........ 0.0093 ...... 0.0063 ........ 0.0043\n16-bit int #3 ........ 0.0075 ........ 0.0094 ...... 0.0062 ........ 0.0046\n32-bit int #1 ........ 0.0086 ........ 0.0122 ...... 0.0063 ........ 0.0044\n32-bit int #2 ........ 0.0087 ........ 0.0120 ...... 0.0066 ........ 0.0046\n32-bit int #3 ........ 0.0086 ........ 0.0121 ...... 0.0060 ........ 0.0044\n64-bit int #1 ........ 0.0096 ........ 0.0149 ...... 0.0060 ........ 0.0045\n64-bit int #2 ........ 0.0096 ........ 0.0157 ...... 0.0062 ........ 0.0044\n64-bit int #3 ........ 0.0096 ........ 0.0160 ...... 0.0063 ........ 0.0046\n64-bit int #4 ........ 0.0097 ........ 0.0157 ...... 0.0061 ........ 0.0044\n64-bit float #1 ...... 0.0079 ........ 0.0153 ...... 0.0056 ........ 0.0044\n64-bit float #2 ...... 0.0079 ........ 0.0152 ...... 0.0057 ........ 0.0045\n64-bit float #3 ...... 0.0079 ........ 0.0155 ...... 0.0057 ........ 0.0044\nfix string #1 ........ 0.0010 ........ 0.0045 ...... 0.0071 ........ 0.0044\nfix string #2 ........ 0.0048 ........ 0.0075 ...... 0.0070 ........ 0.0060\nfix string #3 ........ 0.0048 ........ 0.0086 ...... 0.0068 ........ 0.0060\nfix string #4 ........ 0.0050 ........ 0.0088 ...... 0.0070 ........ 0.0059\n8-bit string #1 ...... 0.0081 ........ 0.0129 ...... 0.0069 ........ 0.0062\n8-bit string #2 ...... 0.0086 ........ 0.0128 ...... 0.0069 ........ 0.0065\n8-bit string #3 ...... 0.0086 ........ 0.0126 ...... 0.0115 ........ 0.0065\n16-bit string #1 ..... 0.0105 ........ 0.0137 ...... 0.0128 ........ 0.0068\n16-bit string #2 ..... 0.1510 ........ 0.1486 ...... 0.1526 ........ 0.1391\n32-bit string ........ 0.1517 ........ 0.1475 ...... 0.1504 ........ 0.1370\nwide char string #1 .. 0.0044 ........ 0.0085 ...... 0.0067 ........ 0.0057\nwide char string #2 .. 0.0081 ........ 0.0125 ...... 0.0069 ........ 0.0063\n8-bit binary #1 ........... I ............. I ........... F ............. I\n8-bit binary #2 ........... I ............. I ........... F ............. I\n8-bit binary #3 ........... I ............. I ........... F ............. I\n16-bit binary ............. I ............. I ........... F ............. I\n32-bit binary ............. I ............. I ........... F ............. I\nfix array #1 ......... 0.0014 ........ 0.0059 ...... 0.0132 ........ 0.0055\nfix array #2 ......... 0.0146 ........ 0.0156 ...... 0.0155 ........ 0.0148\nfix array #3 ......... 0.0211 ........ 0.0229 ...... 0.0179 ........ 0.0180\n16-bit array #1 ...... 0.0673 ........ 0.0498 ...... 0.0343 ........ 0.0388\n16-bit array #2 ........... S ............. S ........... S ............. S\n32-bit array .............. S ............. S ........... S ............. S\ncomplex array ............. I ............. I ........... F ............. F\nfix map #1 ................ I ............. I ........... F ............. I\nfix map #2 ........... 0.0148 ........ 0.0180 ...... 0.0156 ........ 0.0179\nfix map #3 ................ I ............. I ........... F ............. I\nfix map #4 ........... 0.0252 ........ 0.0201 ...... 0.0214 ........ 0.0167\n16-bit map #1 ........ 0.1027 ........ 0.0836 ...... 0.0388 ........ 0.0510\n16-bit map #2 ............. S ............. S ........... S ............. S\n32-bit map ................ S ............. S ........... S ............. S\ncomplex map .......... 0.1104 ........ 0.1010 ...... 0.0556 ........ 0.0602\nfixext 1 .................. I ............. I ........... F ............. F\nfixext 2 .................. I ............. I ........... F ............. F\nfixext 4 .................. I ............. I ........... F ............. F\nfixext 8 .................. I ............. I ........... F ............. F\nfixext 16 ................. I ............. I ........... F ............. F\n8-bit ext ................. I ............. I ........... F ............. F\n16-bit ext ................ I ............. I ........... F ............. F\n32-bit ext ................ I ............. I ........... F ............. F\n32-bit timestamp #1 ....... I ............. I ........... F ............. F\n32-bit timestamp #2 ....... I ............. I ........... F ............. F\n64-bit timestamp #1 ....... I ............. I ........... F ............. F\n64-bit timestamp #2 ....... I ............. I ........... F ............. F\n64-bit timestamp #3 ....... I ............. I ........... F ............. F\n96-bit timestamp #1 ....... I ............. I ........... F ............. F\n96-bit timestamp #2 ....... I ............. I ........... F ............. F\n96-bit timestamp #3 ....... I ............. I ........... F ............. F\n===========================================================================\nTotal                  0.9642          1.0909        0.8224          0.7213\nSkipped                     4               4             4               4\nFailed                      0               0            24              17\nIgnored                    24              24             0               7\n</code></pre>\n</details>\n<blockquote>\n<p><em>Note that the msgpack extension (v2.1.2) doesn't support <strong>ext</strong>, <strong>bin</strong> and UTF-8 <strong>str</strong> types.</em></p>\n</blockquote>\n<h6>License</h6>\n<p>The library is released under the MIT License. See the bundled <a href=\"LICENSE\">LICENSE</a> file for details.</p>\n",
    "msgpack_repo_id": "rybakit-msgpack.php",
    "msgpack_repo_homepage": "https://github.com/rybakit/msgpack.php",
    "full_name": "rybakit/msgpack.php",
    "owner": "rybakit",
    "html_url": "https://github.com/rybakit/msgpack.php"
  },
  {
    "msgpack_lang": "OCaml",
    "msgpack_quickstart_html": "<h5>MsgPack for OCaml</h5>\n<h6>BULID</h6>\n<pre><code class=\"language-bash\">$ make\n$ sudo make install\n</code></pre>\n<h6>EXAMPLE</h6>\n<h7>Serialize/Deserialize for Msgpack Object</h7>\n<pre><code class=\"language-ocaml\">(* serialize *)\nlet bytes = \n  Msgpack.Serialize.serialize_string (`FixArray [`PFixnum 1; `PFixnum 2; `PFixnum 3])\n\n(* deserialize *)\nlet obj =\n  Msgpack.Serialize.deserialize_string bytes\n</code></pre>\n<h7>Serialize/Deserialize for OCaml types (with meta_conv)</h7>\n<pre><code class=\"language-ocaml\">open Msgpack_conv\n\ntype t = {\n  int : int;\n  str : string;\n} with conv(msgpack)\n\n(* serialize *)\nlet bytes = \n  Msgpack.Serialize.serialize_string (msgpack_of_t { int = 42; str = &quot;ans&quot; })\n\n(* deserialize *)\nlet obj =\n  t_of_msgpack (Msgpack.Serialize.deserialize_string bytes)\n</code></pre>\n<p>See also, <code>examlpe/</code></p>\n<h6>DEVELOPMENT</h6>\n<p>Setup development enviroment with docker:</p>\n<pre><code class=\"language-sh\">$ docker-compose build\n$ docker-compose run app\n</code></pre>\n<h6>TEST</h6>\n<pre><code class=\"language-bash\">$ ocaml setup.ml -configure --enable-tests\n$ make test\n</code></pre>\n<h6>PROOF</h6>\n<p>If you want to use msgpack at OCaml, you need not do this section.\nThis section for user intrested in formal verification.</p>\n<p>You need Coq 8.4 and omake.</p>\n<pre><code class=\"language-bash\">$ cd proof\n$ make\n$ cp *.ml* ../lib/core\n</code></pre>\n",
    "msgpack_repo_id": "msgpack-msgpack-ocaml",
    "msgpack_repo_homepage": "https://github.com/msgpack/msgpack-ocaml",
    "full_name": "msgpack/msgpack-ocaml",
    "owner": "msgpack",
    "html_url": "https://github.com/msgpack/msgpack-ocaml"
  },
  {
    "msgpack_lang": "Elixir",
    "msgpack_quickstart_html": "<h5>MessagePack for Elixir</h5>\n<p><a href=\"https://travis-ci.org/mururu/msgpack-elixir\"><img src=\"https://travis-ci.org/mururu/msgpack-elixir.png?branch=master\" alt=\"Build Status\"></a></p>\n<h6>Installation</h6>\n<p>Add <code>:message_pack</code> as a dependency in your <code>mix.exs</code> file.</p>\n<pre><code class=\"language-elixir\">defp deps do\n  [{:message_pack, &quot;~&gt; 0.2.0&quot;}]\nend\n</code></pre>\n<h6>Usage</h6>\n<pre><code class=\"language-elixir\"># pack\nMessagePack.pack([1,2,3]) #=&gt; { :ok, &lt;&lt;147,1,2,3&gt;&gt; }\nMessagePack.pack!([1,2,3]) #=&gt; &lt;&lt;147,1,2,3&gt;&gt;\n\n# unpack\nMessagePack.unpack(&lt;&lt;147,1,2,3&gt;&gt;) #=&gt; { :ok, [1,2,3] }\nMessagePack.unpack!(&lt;&lt;147,1,2,3&gt;&gt;) #=&gt; [1,2,3]\n\n# unpack_once\nMessagePack.unpack_once(&lt;&lt;147,1,2,3,4&gt;&gt;) #=&gt; {:ok, {[1, 2, 3], &lt;&lt;4&gt;&gt;}}\nMessagePack.unpack_once!(&lt;&lt;147,1,2,3,4&gt;&gt;) #=&gt; {[1, 2, 3], &lt;&lt;4&gt;&gt;}\n</code></pre>\n<h6>Options</h6>\n<ul>\n<li><code>enable_string</code></li>\n</ul>\n<p>Support string type. This options is <code>false</code> by default.</p>\n<pre><code class=\"language-elixir\">iex(1)&gt; { :ok, bin } = MessagePack.pack(&lt;&lt;255&gt;&gt;)\n{:ok, &lt;&lt;161, 255&gt;&gt;}\niex(3)&gt; MessagePack.unpack(&lt;&lt;161, 255&gt;&gt;)\n{:ok, &lt;&lt;255&gt;&gt;}\niex(4)&gt; MessagePack.unpack(&lt;&lt;161, 255&gt;&gt;, enable_string: true)\n{:error, {:invalid_string, &lt;&lt;255&gt;&gt;}}\n</code></pre>\n<ul>\n<li><code>ext</code></li>\n</ul>\n<p>Support extention type.</p>\n<p>See <code>test/message_pack_ext_test.exs</code>.</p>\n<h6>License</h6>\n<p>MIT</p>\n",
    "msgpack_repo_id": "mururu-msgpack-elixir",
    "msgpack_repo_homepage": "https://github.com/mururu/msgpack-elixir",
    "full_name": "mururu/msgpack-elixir",
    "owner": "mururu",
    "html_url": "https://github.com/mururu/msgpack-elixir"
  },
  {
    "msgpack_lang": "Go",
    "msgpack_quickstart_html": "<h5>MessagePack for Golang</h5>\n<p><a href=\"https://pkg.go.dev/github.com/shamaton/msgpack\"><img src=\"https://pkg.go.dev/badge/github.com/shamaton/msgpack.svg\" alt=\"Go Reference\"></a>\n<img src=\"https://github.com/shamaton/msgpack/workflows/test/badge.svg\" alt=\"test\">\n<a href=\"https://goreportcard.com/report/github.com/shamaton/msgpack\"><img src=\"https://goreportcard.com/badge/github.com/shamaton/msgpack\" alt=\"Go Report Card\"></a>\n<a href=\"https://codecov.io/gh/shamaton/msgpack\"><img src=\"https://codecov.io/gh/shamaton/msgpack/branch/master/graph/badge.svg?token=9PD2JUK5V3\" alt=\"codecov\"></a>\n<a href=\"https://app.fossa.com/projects/git%2Bgithub.com%2Fshamaton%2Fmsgpack?ref=badge_shield\"><img src=\"https://app.fossa.com/api/projects/git%2Bgithub.com%2Fshamaton%2Fmsgpack.svg?type=shield\" alt=\"FOSSA Status\"></a></p>\n<h6>Features</h6>\n<ul>\n<li>Supported types : primitive / array / slice / struct / map / interface{} and time.Time</li>\n<li>Renaming fields via <code>msgpack:&quot;field_name&quot;</code></li>\n<li>Omitting fields via <code>msgpack:&quot;-&quot;</code></li>\n<li>Omitting empty fields via <code>msgpack:&quot;field_name,omitempty&quot;</code></li>\n<li>Supports extend encoder / decoder <a href=\"./msgpack_example_test.go\">(example)</a></li>\n<li>Can also Encoding / Decoding struct as array</li>\n</ul>\n<h6>Installation</h6>\n<p>Current version is <strong>msgpack/v2</strong>.</p>\n<pre><code class=\"language-sh\">go get -u github.com/shamaton/msgpack/v2\n</code></pre>\n<h6>Quick Start</h6>\n<pre><code class=\"language-go\">package main\n\nimport (\n  &quot;github.com/shamaton/msgpack/v2&quot;\n  &quot;net/http&quot;\n)\n\ntype Struct struct {\n\tString string\n}\n\n// simple\nfunc main() {\n\tv := Struct{String: &quot;msgpack&quot;}\n\n\td, err := msgpack.Marshal(v)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tr := Struct{}\n\tif err =  msgpack.Unmarshal(d, &amp;r); err != nil {\n\t\tpanic(err)\n\t}\n}\n\n// streaming\nfunc handle(w http.ResponseWriter, r *http.Request) {\n\tvar body Struct\n\tif err := msgpack.UnmarshalRead(r, &amp;body); err != nil {\n\t\tpanic(err)\n    }\n\tif err := msgpack.MarshalWrite(w, body); err != nil {\n\t\tpanic(err)\n    }\n}\n</code></pre>\n<h6>Benchmark</h6>\n<p>This result made from <a href=\"https://github.com/shamaton/msgpack_bench\">shamaton/msgpack_bench</a></p>\n<p><img src=\"https://github.com/user-attachments/assets/ed5bc4c5-a149-4083-98b8-ee6820c00eae\" alt=\"msgpack_bench\"></p>\n<h6>License</h6>\n<p>This library is under the MIT License.</p>\n",
    "msgpack_repo_id": "shamaton-msgpack",
    "msgpack_repo_homepage": "https://github.com/shamaton/msgpack",
    "full_name": "shamaton/msgpack",
    "owner": "shamaton",
    "html_url": "https://github.com/shamaton/msgpack"
  },
  {
    "msgpack_lang": "HHVM",
    "msgpack_quickstart_html": "<h5>msgpack-hhvm</h5>\n<p>Build Status: <a href=\"http://travis-ci.org/reeze/msgpack-hhvm\"><img src=\"https://secure.travis-ci.org/reeze/msgpack-hhvm.png\" alt=\"Build Status\"></a></p>\n<p>Msgpack for HHVM, It is a msgpack binding for HHVM</p>\n<h5>API</h5>\n<ul>\n<li>msgpack_pack(mixed $input) : string;\npack a input to msgpack, object and resource are not supported, array and other types supported,\nfalse on failure.</li>\n<li>msgpack_unpack(string $pac) : mixed;\nunpack a msgpack.</li>\n</ul>\n<h5>Installation</h5>\n<pre><code class=\"language-bash\">$ git clone https://github.com/reeze/msgpack-hhvm --depth=1\n$ cd msgpack-hhvm\n$ hphpize &amp;&amp; cmake . &amp;&amp; make\n$ cp msgpack.so /path/to/your/hhvm/ext/dir\n</code></pre>\n<p>If you don't have <code>hphpize</code> program, please intall package <code>hhvm-dev</code></p>\n<pre><code class=\"language-bash\">$ sudo apt-get install hhvm-dev\n</code></pre>\n<h5>Contribution and  Issues</h5>\n<p>Feel free to send Pull Requests for bug report at: <a href=\"http://github.com/reeze/msgpack-hhvm/issues\">http://github.com/reeze/msgpack-hhvm/issues</a></p>\n<h5>Authors</h5>\n<ul>\n<li>Reeze Xia <a href=\"mailto:reeze@php.net\">reeze@php.net</a></li>\n</ul>\n",
    "msgpack_repo_id": "reeze-msgpack-hhvm",
    "msgpack_repo_homepage": "https://github.com/reeze/msgpack-hhvm",
    "full_name": "reeze/msgpack-hhvm",
    "owner": "reeze",
    "html_url": "https://github.com/reeze/msgpack-hhvm"
  },
  {
    "msgpack_lang": "Swift",
    "msgpack_quickstart_html": "<h5>SwiftPack</h5>\n<p>SwiftPack is MessagePack packer and unpacker written almost entirely in Swift.</p>\n<h5>Issues</h5>\n<ul>\n<li>There are few Objective-C dependencies, mostly NSData. I hope to remove these dependencies as Swift matures.</li>\n<li>Maps currently only support String types for keys.</li>\n</ul>\n<h5>Copyright and License</h5>\n<p>Copyright (c) 2014 Brian Williams</p>\n<p>This software is licensed under the terms of the MIT license.</p>\n",
    "msgpack_repo_id": "briandw-SwiftPack",
    "msgpack_repo_homepage": "https://github.com/briandw/SwiftPack",
    "full_name": "briandw/SwiftPack",
    "owner": "briandw",
    "html_url": "https://github.com/briandw/SwiftPack"
  },
  {
    "msgpack_lang": "ActionScript3",
    "msgpack_quickstart_html": "<p><strong>MessagePack for Actionscript3 (Flash, Flex and AIR).</strong></p>\n<p>as3-msgpack was designed to work with the interfaces IDataInput and IDataOutput, thus the API might be easily connected with the native classes that handle binary data (such as ByteArray, Socket, FileStream and URLStream).<br>\nMoreover, as3-msgpack is capable of decoding data from binary streams.<br>\nGet started: http://loteixeira.github.io/lib/2013/08/19/as3-msgpack/</p>\n<p><strong>Basic usage (encoding/decoding):</strong></p>\n<pre><code class=\"language-actionscript\">// create messagepack object\nvar msgpack:MsgPack = new MsgPack();\n\n// encode an array\nvar bytes:ByteArray = msgpack.write([1, 2, 3, 4, 5]);\n\n// rewind the buffer\nbytes.position = 0;\n\n// print the decoded object\ntrace(msgpack.read(bytes));\n</code></pre>\n<p>For downloads, source code and further information, check the project repository: https://github.com/loteixeira/as3-msgpack.</p>\n",
    "msgpack_repo_id": "loteixeira-as3-msgpack",
    "msgpack_repo_homepage": "https://github.com/loteixeira/as3-msgpack",
    "full_name": "loteixeira/as3-msgpack",
    "owner": "loteixeira",
    "html_url": "https://github.com/loteixeira/as3-msgpack"
  },
  {
    "msgpack_lang": "UNIX Shell",
    "msgpack_quickstart_html": "<h6>Introduction</h6>\n<p><strong>msgpack-tools</strong> contains simple command-line utilities for converting from <a href=\"http://msgpack.org/\">MessagePack</a> to <a href=\"http://json.org/\">JSON</a> and vice-versa. They support options for lax parsing, lossy conversions, pretty-printing, and base64 encoding.</p>\n<ul>\n<li><code>msgpack2json</code> -- Convert MessagePack to JSON</li>\n<li><code>json2msgpack</code> -- Convert JSON to MessagePack</li>\n</ul>\n<p>They can be used for dumping MessagePack from a file or web API to a human-readable format, or for converting hand-written or generated JSON to MessagePack. The lax parsing mode supports comments and trailing commas in JSON, making it possible to hand-write your app or game data in JSON and convert it at build-time to MessagePack.</p>\n<h6>Build Status</h6>\n<!-- we use some deprecated HTML attributes here to get these stupid badges to line up properly -->\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Branch</th>\n<th style=\"text-align:center\"><a href=\"https://travis-ci.org/\">Travis-CI</a></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><em>master</em></td>\n<td style=\"text-align:center\"><a href=\"https://travis-ci.org/ludocode/msgpack-tools/branches\"><img src=\"https://travis-ci.org/ludocode/msgpack-tools.svg?branch=master\" alt=\"Build Status\" align=\"top\" vspace=\"4\"></a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><em>develop</em></td>\n<td style=\"text-align:center\"><a href=\"https://travis-ci.org/ludocode/msgpack-tools/branches\"><img src=\"https://travis-ci.org/ludocode/msgpack-tools.svg?branch=develop\" alt=\"Build Status\" align=\"top\" vspace=\"4\"></a></td>\n</tr>\n</tbody>\n</table>\n<h6>Examples</h6>\n<p>To view a MessagePack file in a human-readable format for debugging purposes:</p>\n<pre><code class=\"language-bash\">msgpack2json -di file.mp\n</code></pre>\n<p>To convert a hand-written JSON file to a MessagePack file, ignoring comments and trailing commas, and allowing embedded base64 with a <code>base64:</code> prefix:</p>\n<pre><code class=\"language-bash\">json2msgpack -bli file.json -o file.mp\n</code></pre>\n<p>To fetch MessagePack from a web API and view it in a human-readable format:</p>\n<pre><code class=\"language-bash\">curl 'http://example/api/url' | msgpack2json -d\n</code></pre>\n<p>To view the MessagePack-equivalent encoding of a JSON string:</p>\n<pre><code class=\"language-bash\">$ echo '{&quot;compact&quot;: true, &quot;schema&quot;: 0}' | json2msgpack | hexdump -C\n00000000  82 a7 63 6f 6d 70 61 63  74 c3 a6 73 63 68 65 6d  |..compact..schem|\n00000010  61 00                                             |a.|\n00000012\n</code></pre>\n<p>To test a <a href=\"https://github.com/msgpack-rpc/msgpack-rpc\">MessagePack-RPC</a> server via netcat:</p>\n<pre><code class=\"language-bash\">$ echo '[0,0,&quot;sum&quot;,[1,2]]' | json2msgpack | nc -q1 localhost 18800 | msgpack2json -d\n[\n    1,\n    0,\n    null,\n    3\n]\n</code></pre>\n<h6>Installation</h6>\n<ul>\n<li>\n<p><strong>Arch Linux</strong>: <a href=\"https://aur.archlinux.org/packages/msgpack-tools/\">msgpack-tools in the AUR</a>, e.g. <code>yaourt -S msgpack-tools</code></p>\n</li>\n<li>\n<p><strong>Mac OS X</strong> (<a href=\"http://brew.sh/\">Homebrew</a>): <code>brew install msgpack-tools</code></p>\n</li>\n<li>\n<p><strong>Debian (Ubuntu, etc.)</strong>: <code>.deb</code> package for x86_64 in the <a href=\"https://github.com/ludocode/msgpack-tools/releases/latest\">latest release</a>; install with <code>dpkg</code></p>\n</li>\n</ul>\n<p>For other platforms, msgpack-tools must be built from source. Download the msgpack-tools tarball from the <a href=\"https://github.com/ludocode/msgpack-tools/releases/latest\">latest release page</a> (not the &quot;source code&quot; archive generated by GitHub, but the actual release package.)</p>\n<p>msgpack-tools uses CMake. A <code>configure</code> wrapper is provided that calls CMake, so you can simply run the usual:</p>\n<pre><code>./configure &amp;&amp; make &amp;&amp; sudo make install\n</code></pre>\n<p>If you are building from the repository, you will need <a href=\"https://github.com/sunaku/md2man\">md2man</a> to generate the man pages.</p>\n<h6>Differences between MessagePack and JSON</h6>\n<p>MessagePack is intended to be very close to JSON in supported features, so they can usually be transparently converted from one to the other. There are some differences, however, which can complicate conversions.</p>\n<p>These are the differences in what objects are representable in each format:</p>\n<ul>\n<li>\n<p>JSON keys must be strings. MessagePack keys can be any type, including maps and arrays.</p>\n</li>\n<li>\n<p>JSON supports &quot;bignums&quot;, i.e. integers of any size. MessagePack integers must fit within a 64-bit signed or unsigned integer.</p>\n</li>\n<li>\n<p>JSON real numbers are specified in decimal scientific notation and can have arbitrary precision. MessagePack real numbers are in IEEE 754 standard 32-bit or 64-bit binary.</p>\n</li>\n<li>\n<p>MessagePack supports binary and extension type objects. JSON does not support binary data. Binary data is often encoded into a base64 string to be embedded into a JSON document.</p>\n</li>\n<li>\n<p>A JSON document can be encoded in UTF-8, UTF-16 or UTF-32, and the entire document must be in the same encoding. MessagePack strings are required to be UTF-8, although this is not enforced by many encoding/decoding libraries.</p>\n</li>\n</ul>\n<p>By default, <code>msgpack2json</code> and <code>json2msgpack</code> convert in strict mode. If an object in the source format is not representable in the destination format, the converter aborts with an error. A lax mode is available which performs a &quot;lossy&quot; conversion, and base64 conversion modes are available to support binary data in JSON.</p>\n",
    "msgpack_repo_id": "ludocode-msgpack-tools",
    "msgpack_repo_homepage": "https://github.com/ludocode/msgpack-tools",
    "full_name": "ludocode/msgpack-tools",
    "owner": "ludocode",
    "html_url": "https://github.com/ludocode/msgpack-tools"
  },
  {
    "msgpack_lang": "Clojure",
    "msgpack_quickstart_html": "<h5>clojure-msgpack</h5>\n<p>clojure-msgpack is a lightweight and simple library for converting\nbetween native Clojure data structures and MessagePack byte formats.\nclojure-msgpack only depends on Clojure itself; it has no third-party\ndependencies.</p>\n<h6>Installation</h6>\n<p><a href=\"https://clojars.org/clojure-msgpack\"><img src=\"http://clojars.org/clojure-msgpack/latest-version.svg\" alt=\"Clojars Project\"></a>\n<a href=\"https://travis-ci.org/edma2/clojure-msgpack\"><img src=\"https://travis-ci.org/edma2/clojure-msgpack.svg?branch=master\" alt=\"Build Status\"></a></p>\n<h6>Usage</h6>\n<h7>Basic</h7>\n<ul>\n<li><code>pack</code>: Serialize object as a sequence of java.lang.Bytes.</li>\n<li><code>unpack</code> Deserialize bytes as a Clojure object.</li>\n</ul>\n<pre><code class=\"language-clojure\">(require '[msgpack.core :as msg])\n(require 'msgpack.clojure-extensions)\n\n(msg/pack {:compact true :schema 0})\n; =&gt; #&lt;byte[] [B@60280b2e&gt;\n\n(msg/unpack (msg/pack {:compact true :schema 0}))\n; =&gt; {:schema 0, :compact true}\n</code></pre>\n<h7>Streaming</h7>\n<p><code>clojure-msgpack</code> provides a streaming API for situations where it is more\nconvenient or efficient to work with byte streams instead of fixed byte arrays\n(e.g. size of object is not known ahead of time).</p>\n<p>The streaming counterpart to <code>msgpack.core/pack</code> is <code>msgpack.core/pack-stream</code>\nwhich returns nil and accepts either\n<a href=\"http://docs.oracle.com/javase/7/docs/api/java/io/OutputStream.html\">java.io.OutputStream</a>\nor\n<a href=\"http://docs.oracle.com/javase/7/docs/api/java/io/DataOutput.html\">java.io.DataOutput</a>\nas an additional argument.</p>\n<p><code>msgpack.core/unpack</code> is in &quot;streaming mode&quot; when the argument is of type\n<a href=\"http://docs.oracle.com/javase/7/docs/api/java/io/DataInput.html\">java.io.DataInput</a>\nor\n<a href=\"http://docs.oracle.com/javase/7/docs/api/java/io/InputStream.html\">java.io.InputStream</a>.</p>\n<pre><code class=\"language-clojure\">(use 'clojure.java.io)\n\n(with-open [s (output-stream &quot;test.dat&quot;)]\n  (msg/pack-stream {:compact true :schema 0} s))\n\n(with-open [s (input-stream &quot;test.dat&quot;)] (msg/unpack s))\n; =&gt; {:schema 0, :compact true}\n</code></pre>\n<h7>Core types</h7>\n<table>\n<thead>\n<tr>\n<th>Clojure</th>\n<th>MessagePack</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>nil</td>\n<td>Nil</td>\n</tr>\n<tr>\n<td>java.lang.Boolean</td>\n<td>Boolean</td>\n</tr>\n<tr>\n<td>java.lang.Byte</td>\n<td>Integer</td>\n</tr>\n<tr>\n<td>java.lang.Short</td>\n<td>Integer</td>\n</tr>\n<tr>\n<td>java.lang.Integer</td>\n<td>Integer</td>\n</tr>\n<tr>\n<td>java.lang.Long</td>\n<td>Integer</td>\n</tr>\n<tr>\n<td>java.lang.BigInteger</td>\n<td>Integer</td>\n</tr>\n<tr>\n<td>clojure.lang.BigInt</td>\n<td>Integer</td>\n</tr>\n<tr>\n<td>java.lang.Float</td>\n<td>Float</td>\n</tr>\n<tr>\n<td>java.lang.Double</td>\n<td>Float</td>\n</tr>\n<tr>\n<td>java.math.BigDecimal</td>\n<td>Float</td>\n</tr>\n<tr>\n<td>java.lang.String</td>\n<td>String</td>\n</tr>\n<tr>\n<td>clojure.lang.Sequential</td>\n<td>Array</td>\n</tr>\n<tr>\n<td>clojure.lang.IPersistentMap</td>\n<td>Map</td>\n</tr>\n<tr>\n<td>msgpack.core.Ext</td>\n<td>Extended</td>\n</tr>\n</tbody>\n</table>\n<p>Serializing a value of unrecognized type will fail with <code>IllegalArgumentException</code>.  See <a href=\"#application-types\">Application types</a> if you want to register your own types.</p>\n<h7>Clojure types</h7>\n<p>Some native Clojure types don't have an obvious MessagePack counterpart. We can\nserialize them as Extended types. To enable automatic conversion of these\ntypes, load the <code>clojure-extensions</code> library.</p>\n<table>\n<thead>\n<tr>\n<th>Clojure</th>\n<th>MessagePack</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>clojure.lang.Keyword</td>\n<td>Extended (type = 3)</td>\n</tr>\n<tr>\n<td>clojure.lang.Symbol</td>\n<td>Extended (type = 4)</td>\n</tr>\n<tr>\n<td>java.lang.Character</td>\n<td>Extended (type = 5)</td>\n</tr>\n<tr>\n<td>clojure.lang.Ratio</td>\n<td>Extended (type = 6)</td>\n</tr>\n<tr>\n<td>clojure.lang.IPersistentSet</td>\n<td>Extended (type = 7)</td>\n</tr>\n</tbody>\n</table>\n<p>With <code>msgpack.clojure-extensions</code>:</p>\n<pre><code class=\"language-clojure\">(require 'msgpack.clojure-extensions)\n(msg/pack :hello)\n; =&gt; #&lt;byte[] [B@a8c55bf&gt;\n</code></pre>\n<p>Without <code>msgpack.clojure-extensions</code>:</p>\n<pre><code class=\"language-clojure\">(msg/pack :hello)\n; =&gt; IllegalArgumentException No implementation of method: :pack-stream of\n; protocol: #'msgpack.core/Packable found for class: clojure.lang.Keyword\n; clojure.core/-cache-protocol-fn (core _deftype.clj:544)\n</code></pre>\n<h7><a name=\"application-types\">Application types</a></h7>\n<p>You can also define your own Extended types with <code>extend-msgpack</code>.</p>\n<pre><code class=\"language-clojure\">(require '[msgpack.macros :refer [extend-msgpack]])\n\n(defrecord Person [name])\n\n(extend-msgpack\n  Person\n  100\n  [p] (.getBytes (:name p))\n  [bytes] (-&gt;Person (String. bytes)))\n\n(msg/unpack (msg/pack [(-&gt;Person &quot;bob&quot;) 5 &quot;test&quot;]))\n; =&gt; (#user.Person{:name &quot;bob&quot;} 5 &quot;test&quot;)\n</code></pre>\n<h7>Options</h7>\n<p>All pack and unpack functions take an optional map of options:</p>\n<ul>\n<li>\n<p><code>:compatibility-mode</code>\nSerialize/deserialize strings and bytes using the raw-type defined here:\nhttps://github.com/msgpack/msgpack/blob/master/spec-old.md</p>\n<p>Note: No error is thrown if an unpacked value is reserved under the old spec\nbut defined under the new spec. We always deserialize something if we can\nregardless of <code>compatibility-mode</code>.</p>\n</li>\n</ul>\n<pre><code class=\"language-clojure\">(msg/pack (byte-array (byte 9)) {:compatibility-mode true})\n</code></pre>\n<h6>License</h6>\n<p>clojure-msgpack is MIT licensed. See the included LICENSE file for more details.</p>\n",
    "msgpack_repo_id": "edma2-clojure-msgpack",
    "msgpack_repo_homepage": "https://github.com/edma2/clojure-msgpack",
    "full_name": "edma2/clojure-msgpack",
    "owner": "edma2",
    "html_url": "https://github.com/edma2/clojure-msgpack"
  },
  {
    "msgpack_lang": "kotlinx.serialization",
    "msgpack_quickstart_html": "<h5>kotlinx-serialization-msgpack</h5>\n<p><a href=\"https://github.com/esensar/kotlinx-serialization-msgpack/actions\"><img src=\"https://github.com/esensar/kotlinx-serialization-msgpack/workflows/Tests/badge.svg\" alt=\"Tests\"></a>\n<a href=\"https://javadoc.io/doc/com.ensarsarajcic.kotlinx/serialization-msgpack\"><img src=\"https://javadoc.io/badge2/com.ensarsarajcic.kotlinx/serialization-msgpack/javadoc.svg\" alt=\"javadoc\"></a>\n<a href=\"https://maven-badges.herokuapp.com/maven-central/com.ensarsarajcic.kotlinx/serialization-msgpack\"><img src=\"https://maven-badges.herokuapp.com/maven-central/com.ensarsarajcic.kotlinx/serialization-msgpack/badge.svg\" alt=\"Maven Central\"></a>\n<a href=\"https://s01.oss.sonatype.org/content/repositories/snapshots/com/ensarsarajcic/kotlinx/serialization-msgpack/\"><img src=\"https://img.shields.io/nexus/s/com.ensarsarajcic.kotlinx/serialization-msgpack?server=https%3A%2F%2Fs01.oss.sonatype.org\" alt=\"Sonatype Nexus (Snapshots)\"></a></p>\n<p><strong>Project is under active development! Important features may be missing and bugs are present!</strong></p>\n<p>Check out <a href=\"https://github.com/esensar/kotlinx-serialization-msgpack/milestones\">milestones</a> for progress.</p>\n<h6>About</h6>\n<p>This library provides <a href=\"https://github.com/Kotlin/kotlinx.serialization\">MsgPack</a> support for <a href=\"https://github.com/Kotlin/kotlinx.serialization\">kotlinx.serialization</a>. It supports all of kotlin targets (JVM, JS, Native).</p>\n<h6>Integration</h6>\n<h7>Maven central</h7>\n<p><strong>Gradle:</strong></p>\n<pre><code class=\"language-kotlin\">implementation(&quot;com.ensarsarajcic.kotlinx:serialization-msgpack:${kotlinxSerializationMsgPackVersion}&quot;)\n</code></pre>\n<p>To also use timestamp support with <a href=\"https://github.com/Kotlin/kotlinx-datetime\">kotlinx-datetime</a>, use <code>serialization-msgpack-timestamp-extension</code>:</p>\n<pre><code class=\"language-kotlin\">implementation(&quot;com.ensarsarajcic.kotlinx:serialization-msgpack-timestamp-extension:${kotlinxSerializationMsgPackVersion}&quot;)\n</code></pre>\n<p><strong>NOTE</strong>:\nTimestamp support is available in core library as well, the additional library just adds a specific serializer that can be used with <a href=\"https://github.com/Kotlin/kotlinx-datetime\">kotlinx-datetime</a> types. These are <code>MsgPackTimestamp32DatetimeSerializer</code>, <code>MsgPackTimestamp64DatetimeSerializer</code> and <code>MsgPackTimestamp96DatetimeSerializer</code>.</p>\n<p>For experimental kotlin unsigned types support, use <code>serialization-msgpack-unsigned-support</code>:</p>\n<pre><code class=\"language-kotlin\">implementation(&quot;com.ensarsarajcic.kotlinx:serialization-msgpack-unsigned-support:${kotlinxSerializationMsgPackVersion}&quot;)\n</code></pre>\n<h7>Snapshot builds</h7>\n<p><strong>Gradle:</strong></p>\n<pre><code class=\"language-kotlin\">repositories {\n    maven {\n        url = uri(&quot;https://oss.sonatype.org/content/repositories/snapshots&quot;)\n    }\n}\nimplementation(&quot;com.ensarsarajcic.kotlinx:serialization-msgpack:${kotlinxSerializationMsgPackSnapshotVersion}&quot;)\n</code></pre>\n<p>To also use timestamp support with <a href=\"https://github.com/Kotlin/kotlinx-datetime\">kotlinx-datetime</a>, use <code>serialization-msgpack-timestamp-extension</code>:</p>\n<pre><code class=\"language-kotlin\">implementation(&quot;com.ensarsarajcic.kotlinx:serialization-msgpack-timestamp-extension:${kotlinxSerializationMsgPackSnapshotVersion}&quot;)\n</code></pre>\n<p>For experimental kotlin unsigned types support, use <code>serialization-msgpack-unsigned-support</code>:</p>\n<pre><code class=\"language-kotlin\">implementation(&quot;com.ensarsarajcic.kotlinx:serialization-msgpack-unsigned-support:${kotlinxSerializationMsgPackSnapshotVersion}&quot;)\n</code></pre>\n<h6>Usage</h6>\n<p>Library should be used in same way as any other kotlinx.serialization library. Created models are annotated with <code>@Serializable</code> annotation and their <code>serializer()</code> can be passed to <code>MsgPack</code>.</p>\n<p><strong>Example:</strong></p>\n<pre><code class=\"language-kotlin\">@Serializable\ndata class SampleClass(\n    val testString: String,\n    val testInt: Int,\n    val testBoolean: Boolean\n)\n\nfun encode() {\n    println(\n        MsgPack.encodeToByteArray(\n            SampleClass.serializer(),\n            SampleClass(&quot;def&quot;, 123, true)\n        ).joinToString(separator = &quot;&quot;) { it.toInt().and(0xff).toString(16).padStart(2, '0') }\n    ) // Outputs: 83aa74657374537472696e67a3646566a774657374496e747bab74657374426f6f6c65616ec3\n}\n\nfun decode() {\n    println(\n        MsgPack.decodeFromByteArray(\n            SampleClass.serializer(),\n            &quot;83aa74657374537472696e67a3646566a774657374496e747bab74657374426f6f6c65616ec3&quot;.let { bytesString -&gt;\n                ByteArray(bytesString.length / 2) { bytesString.substring(it * 2, it * 2 + 2).toInt(16).toByte() }\n            }\n        )\n    ) // Outputs: SampleClass(testString=def, testInt=123, testBoolean=true)\n}\n</code></pre>\n<h6>Contributing</h6>\n<p>Check out <a href=\"CONTRIBUTING.md\">contributing guidelines</a>.</p>\n<h6>License</h6>\n<p><a href=\"LICENSE\">MIT</a></p>\n",
    "msgpack_repo_id": "esensar-kotlinx-serialization-msgpack",
    "msgpack_repo_homepage": "https://www.ensarsarajcic.com/kotlinx-serialization-msgpack/",
    "full_name": "esensar/kotlinx-serialization-msgpack",
    "owner": "esensar",
    "html_url": "https://github.com/esensar/kotlinx-serialization-msgpack"
  },
  {
    "msgpack_lang": "Lua",
    "msgpack_quickstart_html": "<h5>MessagePack for Lua 5.3 / 5.4</h5>\n<h6>Overview</h6>\n<p>This is a pure Lua implementation for encoding/decoding MessagePack (https://msgpack.org).</p>\n<p>Please report any bugs you encounter!</p>\n<p>Features:</p>\n<ul>\n<li>written in pure Lua 5.3 / 5.4 (using <code>string.pack()</code> / <code>string.unpack()</code>)</li>\n<li>can distinguish between integer / float / double numbers</li>\n<li>can distinguish between UTF-8 strings and binary data</li>\n<li>public domain license (http://unlicense.org)</li>\n<li>pretty fast decoding</li>\n</ul>\n<p>What's missing:</p>\n<ul>\n<li>extendend types <code>fixent</code></li>\n</ul>\n<p>Example code:</p>\n<pre><code class=\"language-lua\">local msgpack = require('msgpack')\n\nlocal value = msgpack.decode(binary_msgpack_data) -- decode to Lua value\n\nlocal binary_data = msgpack.encode(lua_value) -- encode Lua value to MessagePack\n</code></pre>\n<h6>API</h6>\n<h7>msgpack.encode_one(value)</h7>\n<p>Encodes the given Lua value to a binary MessagePack representation. It will return the binary string on succes or <code>nil</code> plus an error message if it fails.</p>\n<p>The encoder will encode Lua strings as MessagePack strings when they are properly UTF-8 encoded otherwise they will become MessagePack binary objects.</p>\n<p>There is also a check if a Lua number can be lossless encoded as a 32-bit float.</p>\n<blockquote>\n<p><strong>NOTE:</strong> Empty Lua tables will be encoded as empty arrays!</p>\n</blockquote>\n<h7>msgpack.encode(...)</h7>\n<p>Encodes all given values to a binary MessagePack representation. It will return the binary string or <code>nil</code> plus an error message if it fails.</p>\n<pre><code class=\"language-lua\">local binary = msgpack.encode('Hello', 1024, true, { 2, 3, 4 })\n</code></pre>\n<h7>msgpack.decode_one(binary_data[, position])</h7>\n<p>Decode the given MessagePack binary string to a corresponding Lua value. It will return the decoded Lua value and the position for next byte in stream\nor <code>nil</code> plus an error message if decoding went wrong. You can use the returned position to decode multiple MessagePack values in a stream.</p>\n<p>The optional position argument is used to start the decoding at a specific position inside the the binary_data string.</p>\n<blockquote>\n<p><strong>NOTE:</strong> Extended types are not supported. Decoding will fail!</p>\n</blockquote>\n<blockquote>\n<p><strong>NOTE:</strong> Binary data will be decoded as Lua strings</p>\n</blockquote>\n<blockquote>\n<p><strong>NOTE:</strong> Arrays will be decoded as Lua tables starting with index 1 (like Lua uses tables as arrays)</p>\n</blockquote>\n<blockquote>\n<p><strong>NOTE:</strong> Values which are <code>nil</code> will cause the key, value pair to disappear in a Lua table (that's how it works in Lua)</p>\n</blockquote>\n<h7>msgpack.decode(binary_data[, position])</h7>\n<p>Decode the given MessagePack binary string to one or more Lua values. It will return all decoded Lua values or <code>nil</code> plus an error message if decoding failed.</p>\n<pre><code class=\"language-lua\">local a, b, c = msgpack.decode(binary)\n</code></pre>\n<h6>License</h6>\n<pre><code>This is free and unencumbered software released into the public domain.\n\nAnyone is free to copy, modify, publish, use, compile, sell, or\ndistribute this software, either in source code form or as a compiled\nbinary, for any purpose, commercial or non-commercial, and by any\nmeans.\n\nIn jurisdictions that recognize copyright laws, the author or authors\nof this software dedicate any and all copyright interest in the\nsoftware to the public domain. We make this dedication for the benefit\nof the public at large and to the detriment of our heirs and\nsuccessors. We intend this dedication to be an overt act of\nrelinquishment in perpetuity of all present and future rights to this\nsoftware under copyright law.\n\nTHE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\nFor more information, please refer to &lt;http://unlicense.org/&gt;\n</code></pre>\n",
    "msgpack_repo_id": "kieselsteini-msgpack",
    "msgpack_repo_homepage": "https://github.com/kieselsteini/msgpack",
    "full_name": "kieselsteini/msgpack",
    "owner": "kieselsteini",
    "html_url": "https://github.com/kieselsteini/msgpack"
  },
  {
    "msgpack_lang": "Swift",
    "msgpack_quickstart_html": "<h5>MessagePacker</h5>\n<p><a href=\"https://travis-ci.org/hirotakan/MessagePacker\"><img src=\"https://travis-ci.org/hirotakan/MessagePacker.svg?branch=master\" alt=\"Build Status\"></a>\n<img src=\"https://img.shields.io/badge/Swift-5.0-orange.svg\" alt=\"Swift 5.0\">\n<a href=\"http://doge.mit-license.org\"><img src=\"https://img.shields.io/:license-mit-blue.svg\" alt=\"License\"></a>\n<a href=\"https://github.com/Carthage/Carthage\"><img src=\"https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat\" alt=\"Carthage compatible\"></a>\n<a href=\"http://cocoadocs.org/docsets/MessagePacker\"><img src=\"https://img.shields.io/cocoapods/v/MessagePacker.svg\" alt=\"Cocoapods\"></a>\n<a href=\"https://github.com/apple/swift-package-manager\"><img src=\"https://img.shields.io/badge/SwiftPM-compatible-brightgreen.svg\" alt=\"SwiftPM\"></a>\n<img src=\"https://img.shields.io/badge/platforms-iOS%20%7C%20macOS%20%7C%20tvOS%20%7C%20watchOS-lightgrey.svg\" alt=\"Platforms\"></p>\n<p><strong>MessagePacker</strong> is a <a href=\"http://msgpack.org/\">MessagePack</a> encoder &amp; decoder for Swift and supports <a href=\"https://developer.apple.com/documentation/swift/codable\">Codable</a>.</p>\n<ul>\n<li>Message Pack specification: https://github.com/msgpack/msgpack/blob/master/spec.md</li>\n</ul>\n<h6>Usage</h6>\n<pre><code class=\"language-swift\">import MessagePacker\n\nstruct Coordinate: Codable {\n    var latitude: Double\n    var longitude: Double\n}\n\nstruct Landmark: Codable {\n    var name: String\n    var foundingYear: Int\n    var location: Coordinate\n}\n\nlet input = Landmark(\n    name: &quot;Mojave Desert&quot;,\n    foundingYear: 0,\n    location: Coordinate(\n        latitude: 35.0110079,\n        longitude: -115.4821313\n    )\n)\n\nlet data = try! MessagePackEncoder().encode(input)\nlet landmark = try! MessagePackDecoder().decode(Landmark.self, from: data)\n\nprint([UInt8](data))\nprint(landmark)\n\n// [131, 164, 110, 97, 109, 101, 173, 77, 111, 106,\n//  97, 118, 101, 32, 68, 101, 115, 101, 114, 116,\n//  172, 102, 111, 117, 110, 100, 105, 110, 103, 89,\n//  101, 97, 114, 0, 168, 108, 111, 99, 97, 116,\n//  105, 111, 110, 130, 168, 108, 97, 116, 105, 116,\n//  117, 100, 101, 203, 64, 65, 129, 104, 180, 245,\n//  63, 179, 169, 108, 111, 110, 103, 105, 116, 117,\n//  100, 101, 203, 192, 92, 222, 219, 61, 61, 120, 49]\n\n// Landmark(\n//     name: &quot;Mojave Desert&quot;,\n//     foundingYear: 0,\n//     location: MessagePackerTests.Coordinate(\n//         latitude: 35.0110079,\n//         longitude: -115.4821313\n//     )\n// )\n\n</code></pre>\n<h6>Installation</h6>\n<h7>Carthage</h7>\n<p>Add the following to your Cartfile:</p>\n<pre><code class=\"language-terminal\">github &quot;hirotakan/MessagePacker&quot;\n</code></pre>\n<h7>CocoaPods</h7>\n<p>Add the following to your Podfile:</p>\n<pre><code class=\"language-terminal\">pod 'MessagePacker'\n</code></pre>\n<h7>SwiftPM</h7>\n<p>Add MessagePacker as a dependency:</p>\n<pre><code class=\"language-swift\">import PackageDescription\n\nlet package = Package(\n    name: &quot;YourApp&quot;,\n    dependencies: [\n        .Package(url: &quot;https://github.com/hirotakan/MessagePacker.git&quot;, majorVersion: 0),\n    ]\n)\n</code></pre>\n<h6>Requirements</h6>\n<ul>\n<li>Swift 5.0 or later</li>\n<li>iOS 8.0 or later</li>\n<li>macOS 10.10 or later</li>\n<li>tvOS 9.0 or later</li>\n<li>watchOS 2.0 or later</li>\n</ul>\n<h6>License</h6>\n<p>MessagePacker is released under the MIT license. See <a href=\"https://github.com/hirotakan/MessagePacker/blob/master/LICENSE\">LICENSE</a> for details.</p>\n",
    "msgpack_repo_id": "hirotakan-MessagePacker",
    "msgpack_repo_homepage": "https://github.com/hirotakan/MessagePacker",
    "full_name": "hirotakan/MessagePacker",
    "owner": "hirotakan",
    "html_url": "https://github.com/hirotakan/MessagePacker"
  },
  {
    "msgpack_lang": "C / Objective-C / Swift",
    "msgpack_quickstart_html": "<h5>CWPack</h5>\n<p>CWPack is a lightweight and yet complete implementation of the\n<a href=\"http://msgpack.org\">MessagePack</a> serialization format\n<a href=\"https://github.com/msgpack/msgpack/blob/master/spec.md\">version 5</a>.\nIt also supports the Timestamp extension type.</p>\n<h6>Excellent Performance</h6>\n<p>Together with <a href=\"https://github.com/ludocode/mpack\">MPack</a>, CWPack is the fastest open-source messagepack implementation. Both totally outperform\n<a href=\"https://github.com/camgunz/cmp\">CMP</a> and <a href=\"https://github.com/msgpack/msgpack-c\">msgpack-c</a></p>\n<h6>Design</h6>\n<p>CWPack does no memory allocations and no file handling in its basic setup. All that is done outside of CWPack. Example extensions are included.</p>\n<p>CWPack is working against memory buffers. User defined handlers are called when buffers are filled up (packing) or needs refill (unpack).</p>\n<p>Containers (arrays, maps) are read/written in parts, first the item containing the size and then the contained items one by one. Exception to this is the <code>cw_skip_items</code> function which skip whole containers.</p>\n<h6>Example</h6>\n<p>Pack and unpack example from the MessagePack home page:</p>\n<pre><code class=\"language-c\">void example (void)\n{\n    cw_pack_context pc;\n    char buffer[20];\n    cw_pack_context_init (&amp;pc, buffer, 20, 0);\n\n    cw_pack_map_size (&amp;pc, 2);\n    cw_pack_str (&amp;pc, &quot;compact&quot;, 7);\n    cw_pack_boolean (&amp;pc, true);\n    cw_pack_str (&amp;pc, &quot;schema&quot;, 6);\n    cw_pack_unsigned (&amp;pc, 0);\n\n    if (pc.return_code != CWP_RC_OK)  ERROR;\n    int length = pc.current - pc.start;\n    if (length != 18) ERROR;\n\n    cw_unpack_context uc;\n    cw_unpack_context_init (&amp;uc, pc.start, length, 0);\n\n    if (cw_unpack_next_map_size(&amp;uc) != 2) ERROR;\n    if (cw_unpack_next_str_lengh(&amp;uc) != 7) ERROR;\n    if (strncmp(&quot;compact&quot;, uc.item.as.str.start, 7)) ERROR;\n    if (cw_unpack_next_boolean(&amp;uc) != true) ERROR;\n    if (cw_unpack_next_str_lengh(&amp;uc) != 6) ERROR;\n    if (strncmp(&quot;schema&quot;, uc.item.as.str.start, 6)) ERROR;\n    if (cw_unpack_next_signed32(&amp;uc) != 0) ERROR;\n\n    if (uc.return_code != CWP_RC_OK)  ERROR;\n    cw_unpack_next(&amp;uc);\n    if (uc.return_code != CWP_RC_END_OF_INPUT)  ERROR;\n}\n</code></pre>\n<p>In the examples folder there are more examples.</p>\n<h6>Backward compatibility</h6>\n<p>CWPack may be run in compatibility mode. It affects only packing; EXT &amp; TIMESTAMP is considered illegal, BIN are transformed to STR and generation of STR8 is supressed.</p>\n<h6>Error handling</h6>\n<p>When an error is detected in a context, the context is stopped and all future calls to that context are immediatly returned without any actions. Thus it is possible to make some calls and delay error checking until all calls are done.</p>\n<p>CWPack does not check for illegal values (e.g. in STR for illegal unicode characters).</p>\n<h6>Build</h6>\n<p>CWPack consists of a single src file and three header files. It is written in strict ansi C and the files are together ~ 1.4K lines. No separate build is neccesary, just include the files in your own build.</p>\n<p>CWPack has no dependencies to other libraries.</p>\n<h6>Test</h6>\n<p>Included in the test folder are a module test and a performance test and shell scripts to run them.</p>\n<h5>Objective-C</h5>\n<p>CWPack also contains an Objective-C interface. The MessagePack home page example would look like:</p>\n<pre><code class=\"language-C\">CWPackContext *pc = [CWPackContext newWithContext:my_cw_pack_context];\n[pc packObject:@{@&quot;compact&quot;:@YES, @&quot;schema&quot;:@0}];\n\nCWUnpackContext *uc = [CWUnpackContext newWithContext:my_cw_unpack_context];\nNSDictionary *dict = [uc unpackNextObject];\n</code></pre>\n<h5>Swift</h5>\n<p>CWPack also contains a Swift interface. The MessagePack home page example would pack like:</p>\n<pre><code>let packer = CWDataPacker()\npacker + DictionaryHeader(2) + &quot;compact&quot; + true + &quot;schema&quot; + 0\nlet data = packer.data\n\n\t```\n</code></pre>\n",
    "msgpack_repo_id": "clwi-CWPack",
    "msgpack_repo_homepage": "https://github.com/clwi/CWPack",
    "full_name": "clwi/CWPack",
    "owner": "clwi",
    "html_url": "https://github.com/clwi/CWPack"
  },
  {
    "msgpack_lang": "Matlab",
    "msgpack_quickstart_html": "<h5>A MessagePack implementation for Matlab and Octave</h5>\n<p>The code is written in pure Matlab, and has no dependencies beyond Matlab itself. And it works in recent versions of Octave, too.</p>\n<p>The files in this repository are taken from <a href=\"https://github.com/bastibe/transplant\">Transplant</a>.</p>\n<h6>Basic Usage:</h6>\n<pre><code class=\"language-matlab\">data = {'life, the universe, and everything', struct('the_answer', 42)};\nbytes = dumpmsgpack(data)\ndata = parsemsgpack(bytes)\n% returns: {'life, the universe, and everything', containers.Map('the_answer', 42)}\n</code></pre>\n<h6>Converting Matlab to MsgPack:</h6>\n<table>\n<thead>\n<tr>\n<th>Matlab</th>\n<th>MsgPack</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>string</td>\n<td>string</td>\n</tr>\n<tr>\n<td>scalar</td>\n<td>number</td>\n</tr>\n<tr>\n<td>logical</td>\n<td><code>true</code>/<code>false</code></td>\n</tr>\n<tr>\n<td>vector</td>\n<td>array of numbers</td>\n</tr>\n<tr>\n<td>uint8 vector</td>\n<td>bin</td>\n</tr>\n<tr>\n<td>matrix</td>\n<td>array of array of numbers</td>\n</tr>\n<tr>\n<td>empty matrix</td>\n<td>nil</td>\n</tr>\n<tr>\n<td>cell array</td>\n<td>array</td>\n</tr>\n<tr>\n<td>cell matrix</td>\n<td>array of arrays</td>\n</tr>\n<tr>\n<td>struct</td>\n<td>map</td>\n</tr>\n<tr>\n<td>containers.Map</td>\n<td>map</td>\n</tr>\n<tr>\n<td>struct array</td>\n<td>array of maps</td>\n</tr>\n<tr>\n<td>handles</td>\n<td>raise error</td>\n</tr>\n</tbody>\n</table>\n<p>There is no way of encoding exts</p>\n<h6>Converting MsgPack to Matlab</h6>\n<table>\n<thead>\n<tr>\n<th>MsgPack</th>\n<th>Matlab</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>string</td>\n<td>string</td>\n</tr>\n<tr>\n<td>number</td>\n<td>scalar</td>\n</tr>\n<tr>\n<td><code>true</code>/<code>false</code></td>\n<td>logical</td>\n</tr>\n<tr>\n<td>nil</td>\n<td>empty matrix</td>\n</tr>\n<tr>\n<td>array</td>\n<td>cell array</td>\n</tr>\n<tr>\n<td>map</td>\n<td>containers.Map</td>\n</tr>\n<tr>\n<td>bin</td>\n<td>uint8</td>\n</tr>\n<tr>\n<td>ext</td>\n<td>uint8</td>\n</tr>\n</tbody>\n</table>\n<p>Note that since <code>structs</code> don't support arbitrary field names, they can't be used for representing <code>maps</code>. We use <code>containers.Map</code> instead.</p>\n<h6>Tests</h6>\n<pre><code class=\"language-matlab\">runtests()\n</code></pre>\n<h6>License</h6>\n<p>MATLAB (R) is copyright of the Mathworks</p>\n<p>Copyright (c) 2014 Bastian Bechtold\nAll rights reserved.</p>\n<p>Redistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:</p>\n<ol>\n<li>\n<p>Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.</p>\n</li>\n<li>\n<p>Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the\ndistribution.</p>\n</li>\n<li>\n<p>Neither the name of the copyright holder nor the names of its\ncontributors may be used to endorse or promote products derived\nfrom this software without specific prior written permission.</p>\n</li>\n</ol>\n<p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n&quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nHOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>\n",
    "msgpack_repo_id": "bastibe-matlab-msgpack",
    "msgpack_repo_homepage": "https://github.com/bastibe/matlab-msgpack",
    "full_name": "bastibe/matlab-msgpack",
    "owner": "bastibe",
    "html_url": "https://github.com/bastibe/matlab-msgpack"
  },
  {
    "msgpack_lang": "Rails",
    "msgpack_quickstart_html": "<h5>MessagePack for Rails <a href=\"https://travis-ci.org/jingweno/msgpack_rails\"><img src=\"https://travis-ci.org/jingweno/msgpack_rails.png?branch=master\" alt=\"Build Status\"></a></h5>\n<p>The Rails way to serialize/deserialize objects with <a href=\"http://msgpack.org\">Message Pack</a>.\nIt implements the <a href=\"http://rubygems.org/gems/activesupport\">ActiveSupport</a> <a href=\"https://github.com/jingweno/msgpack_rails/blob/master/lib/msgpack_rails/activesupport/message_pack/encoding.rb\">encoder</a> &amp; <a href=\"https://github.com/jingweno/msgpack_rails/blob/master/lib/msgpack_rails/activesupport/message_pack/decoding.rb\">decoder</a> and the <a href=\"http://rubygems.org/gems/activemodel\">ActiveModel</a> <a href=\"https://github.com/jingweno/msgpack_rails/blob/master/lib/msgpack_rails/activemodel/serializers/message_pack.rb\">serializer</a> for Message Pack.</p>\n<h6>Installation</h6>\n<p>Add this line to your application's Gemfile:</p>\n<pre><code>gem 'msgpack_rails'\n</code></pre>\n<p>And then execute:</p>\n<pre><code>$ bundle\n</code></pre>\n<p>Or install it yourself as:</p>\n<pre><code>$ gem install msgpack_rails\n</code></pre>\n<h6>Usage</h6>\n<p><code>msgpack_rails</code> converts data type using <code>as_json</code> before feeding it into <a href=\"http://rubygems.org/gems/msgpack\">msgpack</a>.\nHere are a few examples:</p>\n<pre><code>$ ActiveSupport::MessagePack.encode(:a =&gt; :b)\n=&gt; &quot;\\x81\\xA1a\\xA1b&quot;\n\n$ ActiveSupport::MessagePack.encode(Time.now)\n=&gt; &quot;\\xB92013-09-11T10:40:39-07:00&quot;\n\n$ Time.now.as_msgpack\n=&gt; &quot;2013-09-11T10:48:13-07:00&quot;\n\n$ Time.now.to_msgpack\n=&gt; &quot;\\xB92013-09-11T10:40:39-07:00&quot;\n\n$ ActiveSupport::MessagePack.decode Time.now.to_msgpack\n=&gt; &quot;2013-09-11T11:23:07-07:00&quot;\n\n# After setting ActiveSupport.parse_msgpack_times to true\n$ ActiveSupport::MessagePack.decode Time.now.to_msgpack\n=&gt; Wed, 11 Sep 2013 11:25:18 -0700\n</code></pre>\n<p>You can also use it as part of <code>ActiveModel</code>, similar to <code>to_json</code>:</p>\n<pre><code class=\"language-ruby\">class Contact\n  include ActiveModel::Serializers::MessagePack\n\n  ...\nend\n\n@contact = Contact.new\n@contact.name = 'Owen Ou'\n@contact.age = 28\n@contact.created_at = Time.utc(2006, 8, 1)\n@contact.awesome = true\n@contact.preferences = { 'shows' =&gt; 'anime' }\n\n@contact.to_msgpack                # =&gt; msgpack output\n@contact.to_msgpack(:root =&gt; true) # =&gt; include root in msgpack output\n</code></pre>\n<h6>Contributing</h6>\n<ol>\n<li>Fork it</li>\n<li>Create your feature branch (<code>git checkout -b my-new-feature</code>)</li>\n<li>Commit your changes (<code>git commit -am 'Add some feature'</code>)</li>\n<li>Push to the branch (<code>git push origin my-new-feature</code>)</li>\n<li>Create new Pull Request</li>\n</ol>\n",
    "msgpack_repo_id": "owenthereal-msgpack_rails",
    "msgpack_repo_homepage": "https://github.com/jingweno/msgpack_rails",
    "full_name": "owenthereal/msgpack_rails",
    "owner": "owenthereal",
    "html_url": "https://github.com/owenthereal/msgpack_rails"
  },
  {
    "msgpack_lang": "Julia",
    "msgpack_quickstart_html": "<h5>MsgPack.jl</h5>\n<p>MsgPack.jl is a MessagePack implementation in pure Julia, inspired by <a href=\"https://github.com/quinnj/JSON3.jl\">JSON3.jl</a>. This package supports:</p>\n<ul>\n<li>(de)serialization of Julia values to/from MessagePack (see <code>pack</code> and <code>unpack</code>)</li>\n<li>overloadable pre-(de)serialization transformations (see <code>from_msgpack</code> and <code>to_msgpack</code>)</li>\n<li>automatic type construction/destruction (see <code>msgpack_type</code>, <code>construct</code>, and <code>StructType</code>)</li>\n<li>some basic immutable &quot;views&quot; over MsgPack-formatted byte buffers (see <code>ArrayView</code> and <code>MapView</code>).</li>\n<li>native <code>Serialization.serialize</code> support via MessagePack Extensions (see <code>Extension</code>, <code>extserialize</code>, and <code>extdeserialize</code>)</li>\n</ul>\n<h6><code>pack</code>/<code>unpack</code></h6>\n<p>Use <code>pack</code> to serialize Julia values to MessagePack bytes, and <code>unpack</code> to deserialize MessagePack bytes to Julia values:</p>\n<pre><code class=\"language-julia\">julia&gt; bytes = pack([&quot;hello&quot;, Dict(:this =&gt; 1, ['i', 's'] =&gt; 3.14, &quot;messagepack!&quot; =&gt; nothing)])\n42-element Array{UInt8,1}:\n 0x92\n 0xa5\n 0x68\n ⋮\n\njulia&gt; unpack(bytes)\n 2-element Array{Any,1}:\n  &quot;hello&quot;\n  Dict{Any,Any}(&quot;messagepack!&quot; =&gt; nothing,&quot;this&quot; =&gt; 0x01,Any[&quot;i&quot;, &quot;s&quot;] =&gt; 3.14)\n</code></pre>\n<p><code>pack</code> and <code>unpack</code> also accept IO streams as arguments:</p>\n<pre><code class=\"language-julia\">julia&gt; io = IOBuffer();\n\njulia&gt; pack(io, &quot;see it really does take an IO stream&quot;);\n\njulia&gt; unpack(seekstart(io))\n&quot;see it really does take an IO stream&quot;\n</code></pre>\n<h6>Translating between Julia and MessagePack types</h6>\n<p>By default, MsgPack defines (de)serialization between the following Julia and MessagePack types:</p>\n<table>\n<thead>\n<tr>\n<th>MessagePack Type</th>\n<th><code>AbstractMsgPackType</code> Subtype</th>\n<th>Julia Types</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Integer</td>\n<td><code>IntegerType</code></td>\n<td><code>UInt8</code>, <code>UInt16</code>, <code>UInt32</code>, <code>UInt64</code>, <code>Int8</code>, <code>Int16</code>, <code>Int32</code>, <code>Int64</code></td>\n</tr>\n<tr>\n<td>Nil</td>\n<td><code>NilType</code></td>\n<td><code>Nothing</code>, <code>Missing</code></td>\n</tr>\n<tr>\n<td>Boolean</td>\n<td><code>BooleanType</code></td>\n<td><code>Bool</code></td>\n</tr>\n<tr>\n<td>Float</td>\n<td><code>FloatType</code></td>\n<td><code>Float32</code>, <code>Float64</code></td>\n</tr>\n<tr>\n<td>String</td>\n<td><code>StringType</code></td>\n<td><code>AbstractString</code>, <code>Char</code>, <code>Symbol</code></td>\n</tr>\n<tr>\n<td>Array</td>\n<td><code>ArrayType</code></td>\n<td><code>AbstractArray</code>, <code>AbstractSet</code>, <code>Tuple</code></td>\n</tr>\n<tr>\n<td>Map</td>\n<td><code>MapType</code></td>\n<td><code>AbstractDict</code>, <code>NamedTuple</code></td>\n</tr>\n<tr>\n<td>Binary</td>\n<td><code>BinaryType</code></td>\n<td>(no defaults)</td>\n</tr>\n<tr>\n<td>Extension</td>\n<td><code>ExtensionType</code></td>\n<td>(no defaults)</td>\n</tr>\n</tbody>\n</table>\n<p>To support additional Julia types, we can define that type's &quot;translation&quot; to its corresponding <code>AbstractMsgPackType</code> via the following methods:</p>\n<pre><code class=\"language-julia\">julia&gt; using MsgPack, UUIDs\n\n# declare `UUID`'s correspondence to the MessagePack String type\njulia&gt; MsgPack.msgpack_type(::Type{UUID}) = MsgPack.StringType()\n\n# convert UUIDs to a MessagePack String-compatible representation for serialization\njulia&gt; MsgPack.to_msgpack(::MsgPack.StringType, uuid::UUID) = string(uuid)\n\n# convert values deserialized as MessagePack Strings to UUIDs\njulia&gt; MsgPack.from_msgpack(::Type{UUID}, uuid::AbstractString) = UUID(uuid)\n\njulia&gt; unpack(pack(uuid4()))\n&quot;df416048-e513-41c5-aa49-32623d5d7e1f&quot;\n\njulia&gt; unpack(pack(uuid4()), UUID)\nUUID(&quot;4812d96f-bc7b-434b-ac54-1985a1263882&quot;)\n</code></pre>\n<p>Note that each subtype of <code>AbstractMsgPackType</code> makes its own assumptions about the return values of <code>to_msgpack</code> and <code>from_msgpack</code>; these assumptions are documented in the subtype's docstring. For additional details, see the docstrings for <code>AbstractMsgPackType</code>, <code>msgpack_type</code>, <code>to_msgpack</code>, and <code>from_msgpack</code>.</p>\n<h6>Automatic <code>struct</code> (de)serialization</h6>\n<p>MsgPack provides an interface that facilitates automatic, performant (de)serialization of MessagePack Maps to/from Julia <code>struct</code>s. Like <a href=\"https://github.com/quinnj/JSON3.jl\">JSON3.jl</a>, MsgPack's interface supports two different possibilities: a slower approach that doesn't depend on field ordering during deserialization, and a faster approach that does:</p>\n<pre><code class=\"language-julia\">julia&gt; using MsgPack\n\njulia&gt; struct MyMessage\n           a::Int\n           b::String\n           c::Bool\n       end\n\njulia&gt; MsgPack.msgpack_type(::Type{MyMessage}) = MsgPack.StructType()\n\njulia&gt; messages = [MyMessage(rand(Int), join(rand('a':'z', 10)), rand(Bool)) for _ in 1:3]\n3-element Array{MyMessage,1}:\n MyMessage(4625239811981161650, &quot;whosayfsvb&quot;, true)\n MyMessage(4988660392033153177, &quot;mazsmrsawu&quot;, false)\n MyMessage(7955638288702558596, &quot;gueytzhjvy&quot;, true)\n\njulia&gt; bytes = pack(messages);\n\n# slower, but does not assume struct field ordering\njulia&gt; unpack(bytes, Vector{MyMessage})\n3-element Array{MyMessage,1}:\n MyMessage(4625239811981161650, &quot;whosayfsvb&quot;, true)\n MyMessage(4988660392033153177, &quot;mazsmrsawu&quot;, false)\n MyMessage(7955638288702558596, &quot;gueytzhjvy&quot;, true)\n\n# faster, but assumes incoming struct fields are ordered\njulia&gt; unpack(bytes, Vector{MyMessage}; strict=(MyMessage,))\n 3-element Array{MyMessage,1}:\n  MyMessage(4625239811981161650, &quot;whosayfsvb&quot;, true)\n  MyMessage(4988660392033153177, &quot;mazsmrsawu&quot;, false)\n  MyMessage(7955638288702558596, &quot;gueytzhjvy&quot;, true)\n</code></pre>\n<p><strong>Do not use <code>strict=(T,)</code> unless you can ensure that all MessagePack Maps corresponding to <code>T</code> maintain the exact key-value pairs corresponding to <code>T</code>'s fields in the exact same order as specified by <code>T</code>'s Julia definition.</strong> This property generally cannot be assumed unless you, yourself, were the original serializer of the message.</p>\n<p>For additional details, see the docstrings for <code>StructType</code>, <code>unpack</code>, and <code>construct</code>.</p>\n<h6>Immutable, lazy Julia views over MessagePack bytes</h6>\n<p>Often, one will want to delay full deserialization of a MessagePack collection, and instead only deserialize elements upon access. To facilitate this approach, MsgPack provides the <code>ArrayView</code> and <code>MapView</code> types. Reusing the toy <code>MyMessage</code> from the earlier example:</p>\n<pre><code class=\"language-julia\">julia&gt; using BenchmarkTools\n\njulia&gt; bytes = pack([MyMessage(rand(Int), join(rand('a':'z', 10)), rand(Bool)) for _ in 1:10_000_000]);\n\n# deserialize the whole thing in one go\njulia&gt; @time x = unpack(bytes, Vector{MyMessage});\n  3.547294 seconds (20.00 M allocations: 686.646 MiB, 13.42% gc time)\n\n# scan bytes to tag object positions, but don't fully deserialize\njulia&gt; @time v = unpack(bytes, MsgPack.ArrayView{MyMessage});\n  0.462374 seconds (14 allocations: 76.295 MiB)\n\n# has normal `Vector` access performance, since it's a normal `Vector`\njulia&gt; @btime $x[1]\n  1.824 ns (0 allocations: 0 bytes)\nMyMessage(-5988715016767300083, &quot;anrcvpbqge&quot;, true)\n\n# access time is much slower, since element is deserialized upon access\njulia&gt; @btime $v[1]\n  274.990 ns (4 allocations: 176 bytes)\nMyMessage(-5988715016767300083, &quot;anrcvpbqge&quot;, true)\n</code></pre>\n<p>For additional details, see the docstrings for <code>ArrayView</code> and <code>MapView</code>.</p>\n<h6>Should I use JSON or MessagePack?</h6>\n<p>Use JSON by default (with the lovely JSON3 package!), and only switch to MessagePack if you actually measure a significant performance benefit from doing so. In my experience, the main potential advantage of MessagePack is improved (de)serialization performance for certain kinds of structures. If you merely seek to reduce message size, MessagePack has little advantage over JSON, as general-purpose compression seems to achieve similar sizes when applied to either format.</p>\n",
    "msgpack_repo_id": "JuliaIO-MsgPack.jl",
    "msgpack_repo_homepage": "https://github.com/JuliaIO/MsgPack.jl",
    "full_name": "JuliaIO/MsgPack.jl",
    "owner": "JuliaIO",
    "html_url": "https://github.com/JuliaIO/MsgPack.jl"
  },
  {
    "msgpack_lang": "Python",
    "msgpack_quickstart_html": "<h5>u-msgpack-python <a href=\"https://app.travis-ci.com/github/vsergeev/u-msgpack-python\"><img src=\"https://app.travis-ci.com/vsergeev/u-msgpack-python.svg?branch=master\" alt=\"Build Status\"></a> <a href=\"https://github.com/vsergeev/u-msgpack-python\"><img src=\"https://img.shields.io/github/release/vsergeev/u-msgpack-python.svg?maxAge=7200\" alt=\"GitHub release\"></a> <a href=\"https://github.com/vsergeev/u-msgpack-python/blob/master/LICENSE\"><img src=\"https://img.shields.io/badge/license-MIT-blue.svg\" alt=\"License\"></a></h5>\n<p>u-msgpack-python is a lightweight <a href=\"http://msgpack.org/\">MessagePack</a> serializer and deserializer module written in pure Python, compatible with Python 2 and 3, as well CPython and PyPy implementations of Python. u-msgpack-python is fully compliant with the latest <a href=\"https://github.com/msgpack/msgpack/blob/master/spec.md\">MessagePack specification</a>.</p>\n<p>u-msgpack-python is currently distributed as a package on PyPI: https://pypi.python.org/pypi/u-msgpack-python and as a single file module.</p>\n<h6>Installation</h6>\n<p>With pip:</p>\n<pre><code class=\"language-text\">$ pip install u-msgpack-python\n</code></pre>\n<p>With easy_install:</p>\n<pre><code class=\"language-text\">$ easy_install u-msgpack-python\n</code></pre>\n<p>or simply drop <code>umsgpack.py</code> into your project!</p>\n<pre><code class=\"language-text\">$ wget https://raw.github.com/vsergeev/u-msgpack-python/master/umsgpack/__init__.py -O umsgpack.py\n</code></pre>\n<h6>Examples</h6>\n<p>Basic Example:</p>\n<pre><code class=\"language-python\">&gt;&gt;&gt; import umsgpack\n&gt;&gt;&gt; umsgpack.packb({u&quot;compact&quot;: True, u&quot;schema&quot;: 0})\nb'\\x82\\xa7compact\\xc3\\xa6schema\\x00'\n&gt;&gt;&gt; umsgpack.unpackb(_)\n{u'compact': True, u'schema': 0}\n&gt;&gt;&gt; \n</code></pre>\n<p>A more complicated example:</p>\n<pre><code class=\"language-python\">&gt;&gt;&gt; umsgpack.packb(\n...     [1, True, False, 0xffffffff, {u&quot;foo&quot;: b&quot;\\x80\\x01\\x02&quot;,\n...      u&quot;bar&quot;: [1,2,3, {u&quot;a&quot;: [1,2,3,{}]}]}, -1, 2.12345] )\nb'\\x97\\x01\\xc3\\xc2\\xce\\xff\\xff\\xff\\xff\\x82\\xa3foo\\xc4\\x03\\x80\\x01\\\n\\x02\\xa3bar\\x94\\x01\\x02\\x03\\x81\\xa1a\\x94\\x01\\x02\\x03\\x80\\xff\\xcb\\\n@\\x00\\xfc\\xd3Z\\x85\\x87\\x94'\n&gt;&gt;&gt; umsgpack.unpackb(_)\n[1, True, False, 4294967295, {u'foo': b'\\x80\\x01\\x02', \\\n u'bar': [1, 2, 3, {u'a': [1, 2, 3, {}]}]}, -1, 2.12345]\n&gt;&gt;&gt; \n</code></pre>\n<p>Streaming serialization with file-like objects:</p>\n<pre><code class=\"language-python\">&gt;&gt;&gt; f = open('test.bin', 'wb')\n&gt;&gt;&gt; umsgpack.pack({u&quot;compact&quot;: True, u&quot;schema&quot;: 0}, f)\n&gt;&gt;&gt; umsgpack.pack([1,2,3], f)\n&gt;&gt;&gt; f.close()\n&gt;&gt;&gt; \n&gt;&gt;&gt; f = open('test.bin', 'rb')\n&gt;&gt;&gt; umsgpack.unpack(f)\n{u'compact': True, u'schema': 0}\n&gt;&gt;&gt; umsgpack.unpack(f)\n[1, 2, 3]\n&gt;&gt;&gt; f.close()\n&gt;&gt;&gt; \n</code></pre>\n<p>Serializing and deserializing a raw Ext type:</p>\n<pre><code class=\"language-python\">&gt;&gt;&gt; # Create an Ext object with type 5 and data b&quot;\\x01\\x02\\x03&quot;\n... foo = umsgpack.Ext(5, b&quot;\\x01\\x02\\x03&quot;)\n&gt;&gt;&gt; umsgpack.packb({u&quot;stuff&quot;: foo, u&quot;awesome&quot;: True})\nb'\\x82\\xa5stuff\\xc7\\x03\\x05\\x01\\x02\\x03\\xa7awesome\\xc3'\n&gt;&gt;&gt; \n&gt;&gt;&gt; bar = umsgpack.unpackb(_)\n&gt;&gt;&gt; print(bar['stuff'])\nExt Object (Type: 5, Data: 0x01 0x02 0x03)\n&gt;&gt;&gt; bar['stuff'].type\n5\n&gt;&gt;&gt; bar['stuff'].data\nb'\\x01\\x02\\x03'\n&gt;&gt;&gt; \n</code></pre>\n<p>Serializing and deserializing application-defined types with <code>ext_serializable()</code>:</p>\n<pre><code class=\"language-python\">&gt;&gt;&gt; @umsgpack.ext_serializable(0x50)\n... class Point(collections.namedtuple('Point', ['x', 'y'])):\n...     def packb(self):\n...         return struct.pack(&quot;&gt;ii&quot;, self.x, self.y)\n...     @staticmethod\n...     def unpackb(data):\n...         return Point(*struct.unpack(&quot;&gt;ii&quot;, data))\n... \n&gt;&gt;&gt; umsgpack.packb(Point(1, 2))\nb'\\xd7P\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x02'\n&gt;&gt;&gt; umsgpack.unpackb(_)\nPoint(x=1, y=2)\n&gt;&gt;&gt; \n</code></pre>\n<p>Serializing and deserializing application-defined types with Ext handlers:</p>\n<pre><code class=\"language-python\">&gt;&gt;&gt; umsgpack.packb([complex(1,2), decimal.Decimal(&quot;0.31&quot;)],\n...  ext_handlers = {\n...   complex: lambda obj:\n...     umsgpack.Ext(0x30, struct.pack(&quot;ff&quot;, obj.real, obj.imag)),\n...   decimal.Decimal: lambda obj:\n...     umsgpack.Ext(0x40, str(obj).encode()),\n... })\nb'\\x92\\xd70\\x00\\x00\\x80?\\x00\\x00\\x00@\\xd6@0.31'\n&gt;&gt;&gt; umsgpack.unpackb(_,\n...  ext_handlers = {\n...   0x30: lambda ext:\n...     complex(*struct.unpack(&quot;ff&quot;, ext.data)),\n...   0x40: lambda ext:\n...     decimal.Decimal(ext.data.decode()),\n... })\n[(1+2j), Decimal('0.31')]\n&gt;&gt;&gt; \n</code></pre>\n<p>Python standard library style names <code>dump</code>, <code>dumps</code>, <code>load</code>, <code>loads</code> are also\navailable:</p>\n<pre><code class=\"language-python\">&gt;&gt;&gt; umsgpack.dumps({u&quot;compact&quot;: True, u&quot;schema&quot;: 0})\nb'\\x82\\xa7compact\\xc3\\xa6schema\\x00'\n&gt;&gt;&gt; umsgpack.loads(_)\n{u'compact': True, u'schema': 0}\n&gt;&gt;&gt; \n&gt;&gt;&gt; f = open('test.bin', 'wb')\n&gt;&gt;&gt; umsgpack.dump({u&quot;compact&quot;: True, u&quot;schema&quot;: 0}, f)\n&gt;&gt;&gt; f.close()\n&gt;&gt;&gt; \n&gt;&gt;&gt; f = open('test.bin', 'rb')\n&gt;&gt;&gt; umsgpack.load(f)\n{u'compact': True, u'schema': 0}\n&gt;&gt;&gt; \n</code></pre>\n<h6>More Information</h6>\n<p>See the <a href=\"https://github.com/vsergeev/u-msgpack-python\">project page</a> for more information on options, exceptions, behavior, and testing.</p>\n<h6>License</h6>\n<p>u-msgpack-python is MIT licensed. See the included <code>LICENSE</code> file for more details.</p>\n",
    "msgpack_repo_id": "vsergeev-u-msgpack-python",
    "msgpack_repo_homepage": "https://github.com/vsergeev/u-msgpack-python",
    "full_name": "vsergeev/u-msgpack-python",
    "owner": "vsergeev",
    "html_url": "https://github.com/vsergeev/u-msgpack-python"
  },
  {
    "msgpack_lang": "Kotlin",
    "msgpack_quickstart_html": "<h5>MoshiPack</h5>\n<p><a href=\"https://circleci.com/gh/davethomas11/MoshiPack/tree/master\"><img src=\"https://circleci.com/gh/davethomas11/MoshiPack/tree/master.svg?style=svg\" alt=\"CircleCI\"></a></p>\n<h7>Gradle</h7>\n<pre><code>implementation com.daveanthonythomas.moshipack:moshipack:1.0.1\n</code></pre>\n<p>Optional Retrofit support:</p>\n<pre><code>implementation com.daveanthonythomas.moshipack:moshipack-retrofit:1.0.1\n</code></pre>\n<h6>About</h6>\n<p>This is a Kotilin implementation of MessagePack serialization and deserialization built ontop of Moshi to take advantage of Moshi's type adapters and utilizes okio for reading and writing MessagePack bytes.</p>\n<p>The library is intended to be consumed in a Kotlin project, and is not intended for Java use.</p>\n<p>Inspired by Kaushik Gopal's <a href=\"https://twitter.com/kaushikgopal/status/961426258818039808\">tweet</a></p>\n<p>See <a href=\"https://github.com/square/moshi\">Moshi</a> for adapter usage and reference.</p>\n<h7>Convert an object to <a href=\"https://msgpack.org\">MessagePack</a> format</h7>\n<pre><code class=\"language-kotlin\">data class MessagePackWebsitePlug(var compact: Boolean = true, var schema: Int = 0)\n\nval moshiPack = MoshiPack()\nval packed: BufferedSource = moshiPack.pack(MessagePackWebsitePlug())\n\nprintln(packed.readByteString().hex())\n</code></pre>\n<p>This prints the MessagePack bytes as a hex string <strong>82a7636f6d70616374c3a6736368656d6100</strong></p>\n<ul>\n<li><strong>82</strong> - Map with two entries</li>\n<li><strong>a7</strong> - String of seven bytes</li>\n<li><strong>63 6f 6d 70 61 63 74</strong> - UTF8 String &quot;compact&quot;</li>\n<li><strong>c3</strong> - Boolean value true</li>\n<li><strong>a6</strong> - String of size bytes</li>\n<li><strong>73 63 68 65 6d 61</strong> - UTF8 String &quot;schema&quot;</li>\n<li><strong>00</strong> - Integer value 0</li>\n</ul>\n<h7>Convert binary MessagePack back to an Object</h7>\n<pre><code class=\"language-kotlin\">val bytes = ByteString.decodeHex(&quot;82a7636f6d70616374c3a6736368656d6100&quot;).toByteArray()\n\nval moshiPack = MoshiPack()\nval plug: MessagePackWebsitePlug = moshiPack.unpack(bytes)\n</code></pre>\n<h7>Static API</h7>\n<p>If you prefer to not instantiate a <code>MoshiPack</code> instance you can access the API in a static fashion as well. Note this will create a new <code>Moshi</code> instance every time you make an API call. You may want to use the API this way if you aren't providing <code>MoshiPack</code> by some form of dependency injection and you do not have any specific builder parameters for <code>Moshi</code></p>\n<hr>\n<h6>Format Support</h6>\n<p>See <a href=\"https://github.com/msgpack/msgpack/blob/master/spec.md\">MessagePack format spec</a> for further reference.</p>\n<table>\n  <tr><th>format name</th><th>first byte (in binary)</th><th>first byte (in hex)</th><th>Supported</th></tr>\n  <tr><td>positive fixint</td><td>0xxxxxxx</td><td>0x00 - 0x7f</td><td>Yes</font></td></tr>\n  <tr><td>fixmap</td><td>1000xxxx</td><td>0x80 - 0x8f</td><td>Yes</td></tr>\n  <tr><td>fixarray</td><td>1001xxxx</td><td>0x90 - 0x9f</td><td>Yes</td></tr>\n  <tr><td>fixstr</td><td>101xxxxx</td><td>0xa0 - 0xbf</td><td>Yes</td></tr>\n  <tr><td>nil</td><td>11000000</td><td>0xc0</td><td>Yes</td></tr>\n  <tr><td>(never used)</td><td>11000001</td><td>0xc1</td><td>Yes</td></tr>\n  <tr><td>false</td><td>11000010</td><td>0xc2</td><td>Yes</td></tr>\n  <tr><td>true</td><td>11000011</td><td>0xc3</td><td>Yes</td></tr>\n  <tr><td>bin 8</td><td>11000100</td><td>0xc4</td><td>No</td></tr>\n  <tr><td>bin 16</td><td>11000101</td><td>0xc5</td><td>No</td></tr>\n  <tr><td>bin 32</td><td>11000110</td><td>0xc6</td><td>No</td></tr>\n  <tr><td>ext 8</td><td>11000111</td><td>0xc7</td><td>No</td></tr>\n  <tr><td>ext 16</td><td>11001000</td><td>0xc8</td><td>No</td></tr>\n  <tr><td>ext 32</td><td>11001001</td><td>0xc9</td><td>No</td></tr>\n  <tr><td>float 32</td><td>11001010</td><td>0xca</td><td>Yes</td></tr>\n  <tr><td>float 64</td><td>11001011</td><td>0xcb</td><td>Yes</td></tr>\n  <tr><td>uint 8</td><td>11001100</td><td>0xcc</td><td>Yes</td></tr>\n  <tr><td>uint 16</td><td>11001101</td><td>0xcd</td><td>Yes</td></tr>\n  <tr><td>uint 32</td><td>11001110</td><td>0xce</td><td>Yes</td></tr>\n  <tr><td>uint 64</td><td>11001111</td><td>0xcf</td><td>Yes</td></tr>\n  <tr><td>int 8</td><td>11010000</td><td>0xd0</td><td>Yes</td></tr>\n  <tr><td>int 16</td><td>11010001</td><td>0xd1</td><td>Yes</td></tr>\n  <tr><td>int 32</td><td>11010010</td><td>0xd2</td><td>Yes</td></tr>\n  <tr><td>int 64</td><td>11010011</td><td>0xd3</td><td>Yes</td></tr>\n  <tr><td>fixext 1</td><td>11010100</td><td>0xd4</td><td>No</td></tr>\n  <tr><td>fixext 2</td><td>11010101</td><td>0xd5</td><td>No</td></tr>\n  <tr><td>fixext 4</td><td>11010110</td><td>0xd6</td><td>No</td></tr>\n  <tr><td>fixext 8</td><td>11010111</td><td>0xd7</td><td>No</td></tr>\n  <tr><td>fixext 16</td><td>11011000</td><td>0xd8</td><td>No</td></tr>\n  <tr><td>str 8</td><td>11011001</td><td>0xd9</td><td>Yes</td></tr>\n  <tr><td>str 16</td><td>11011010</td><td>0xda</td><td>Yes</td></tr>\n  <tr><td>str 32</td><td>11011011</td><td>0xdb</td><td>Yes</td></tr>\n  <tr><td>array 16</td><td>11011100</td><td>0xdc</td><td>Yes</td></tr>\n  <tr><td>array 32</td><td>11011101</td><td>0xdd</td><td>Yes</td></tr>\n  <tr><td>map 16</td><td>11011110</td><td>0xde</td><td>Yes</td></tr>\n  <tr><td>map 32</td><td>11011111</td><td>0xdf</td><td>Yes</td></tr>\n  <tr><td>negative fixint</td><td>111xxxxx</td><td>0xe0 - 0xff</td><td>Yes</td></tr>\n</table>\n<hr>\n<h6>API</h6>\n<h7>pack</h7>\n<p>Serializes an object into MessagePack. <strong>Returns:</strong> <code>okio.BufferedSource</code></p>\n<p>Instance version:</p>\n<pre><code class=\"language-kotlin\">MoshiPack().pack(anyObject)\n</code></pre>\n<p>Static version:</p>\n<pre><code class=\"language-kotlin\">MoshiPack.pack(anyObject)\n</code></pre>\n<h7>packToByeArray</h7>\n<p>If you prefer to get a <code>ByteArray</code> instead of a <code>BufferedSource</code> you can use this method.</p>\n<p>Instance version only</p>\n<pre><code class=\"language-kotlin\">MoshiPack().packToByteArray(anObject)\n</code></pre>\n<p>Static can be done</p>\n<pre><code class=\"language-kotlin\">MoshiPack.pack(anObject).readByteArray()\n</code></pre>\n<h7>unpack</h7>\n<p>Deserializes MessagePack bytes into an Object. <strong>Returns:</strong> <code>T: Any</code>\nWorks with <code>ByteArray</code> and <code>okio.BufferedSource</code></p>\n<p>Instance version:</p>\n<pre><code class=\"language-kotlin\">// T must be valid type so Moshi knows what to deserialize to\nval unpacked: T = MoshiPack().unpack(byteArray)\n</code></pre>\n<p>Static version:</p>\n<pre><code class=\"language-kotlin\">val unpacked: T = MoshiPack.upack(byteArray)\n</code></pre>\n<p>Instance version:</p>\n<pre><code class=\"language-kotlin\">val unpacked: T = MoshiPack().unpack(bufferedSource)\n</code></pre>\n<p>Static version:</p>\n<pre><code class=\"language-kotlin\">val unpacked: T = MoshiPack.upack(bufferedSource)\n</code></pre>\n<p>T can be an Object, a List, a Map, and can include generics. Unlike <code>Moshi</code> you do not need to specify a parameterized type to deserialize to a List with generics. <code>MoshiPack</code> can infer the paramterized type for you.</p>\n<p>The following examples are valid for <code>MoshiPack</code>:</p>\n<p>A typed List</p>\n<pre><code class=\"language-kotlin\">val listCars: List&lt;Car&gt; = MoshiPack.unpack(carMsgPkBytes)\n</code></pre>\n<p>A List of Any</p>\n<pre><code class=\"language-kotlin\">val listCars: List&lt;Any&gt; = MoshiPack.unpack(carMsgPkBytes)\n</code></pre>\n<p>An Object</p>\n<pre><code class=\"language-kotlin\">val car: Car = MoshiPack.unpack(carBytes)\n</code></pre>\n<p>A Map of Any, Any</p>\n<pre><code class=\"language-kotlin\">val car: Map&lt;Any, Any&gt; = MoshiPack.unpack(carBytes)\n</code></pre>\n<h7>msgpackToJson</h7>\n<p>Convert directly from MessagePack bytes to JSON. Use this method for the most effecient implementation as no objects are instantiated in the process. This uses the <code>FormatInterchange</code> class to match implementations of <code>JsonReader</code> and a <code>JsonWriter</code>. If you wanted to say support XML as a direct conversion to and from, you could implement Moshi's <code>JsonReader</code> and <code>JsonWriter</code> classes and use the <code>FormatInterchange</code> class to convert directly to other formats. <strong>Returns</strong> <code>String</code> containing a JSON representation of the MessagePack data</p>\n<p>Instance versions: (takes <code>ByteArray</code> or <code>BufferedSource</code>)</p>\n<pre><code class=\"language-kotlin\">MoshiPack().msgpackToJson(byteArray)\n</code></pre>\n<pre><code class=\"language-kotlin\">MoshiPack().msgpackToJson(bufferedSource)\n</code></pre>\n<p>Static versions: (takes <code>ByteArray</code> or <code>BufferedSource</code>)</p>\n<pre><code class=\"language-kotlin\">MoshiPack.msgpackToJson(byteArray)\n</code></pre>\n<pre><code class=\"language-kotlin\">MoshiPack.msgpackToJson(bufferedSource)\n</code></pre>\n<h7>jsonToMsgpack</h7>\n<p>Convert directly from JSON to MessagePack bytes. Use this method for the most effecient implementation as no objects are instantiated in the process. <strong>Returns</strong> <code>BufferedSource</code></p>\n<p>Instance versions: (takes <code>String</code> or <code>BufferedSource</code>)</p>\n<pre><code class=\"language-kotlin\">MoshiPack().jsonToMsgpack(jsonString)\n</code></pre>\n<pre><code class=\"language-kotlin\">MoshiPack().jsonToMsgpack(bufferedSource)\n</code></pre>\n<p>Static versions: (takes <code>String</code> or <code>BufferedSource</code>)</p>\n<pre><code class=\"language-kotlin\">MoshiPack.jsonToMsgpack(jsonString)\n</code></pre>\n<pre><code class=\"language-kotlin\">MoshiPack.jsonToMsgpack(bufferedSource)\n</code></pre>\n<h7>MoshiPack - constructor + Moshi builder</h7>\n<p>The <code>MoshiPack</code> constructor takes an optional <code>Moshi.Builder.() -&gt; Unit</code> lambda which is applied to the builder that is used to instantiate the <code>Moshi</code> instance it uses.</p>\n<p>Example adding custom adapter:</p>\n<pre><code class=\"language-kotlin\">val moshiPack = MoshiPack({\n  add(customAdapter)\n})\n</code></pre>\n<p><code>Moshi</code> is also a settable property which can be changed on a <code>MoshiPack</code> instance:</p>\n<pre><code class=\"language-kotlin\">val m = MoshiPack()\nm.moshi = Moshi.Builder().build()\n</code></pre>\n<p>The static version of the API also can be passed a lambda to applied to the <code>Moshi.Builder</code> used to instantiate <code>Moshi</code>:</p>\n<pre><code class=\"language-kotlin\">MoshiPack.pack(someBytes) { add(customAdapter) }\n</code></pre>\n<h7>Forcing integers to write as certain format</h7>\n<ul>\n<li>new in v1.0.1</li>\n</ul>\n<p>This will force all integers to be packed as the type given.\nBy default the smallest message pack type is used for integers.</p>\n<pre><code class=\"language-kotlin\">val moshiPack = MoshiPack().apply {\n    writerOptions.writeAllIntsAs = MsgpackIntByte.INT_64\n}\n</code></pre>\n<hr>\n<h6>Kotiln Support</h6>\n<p>Since this library is intended for Kotlin use, the <code>moshi-kotlin</code> artifact is included as a depedency. A <code>KotlinJsonAdapterFactory</code> is added by default to the instantiated <code>Moshi</code> that <code>MoshiPack</code> uses.\nThis adapter allows for the use of <code>Moshi</code>'s annotaions in Kotlin. To learn more about it see the <a href=\"https://github.com/square/moshi\"><code>Moshi</code></a> documentation.</p>\n<p>If you'd like to use <code>Moshi</code> with out a <code>KotlinJsonAdapterFactory</code> supply a <code>Moshi</code> instance for <code>MoshiPack</code>:</p>\n<pre><code class=\"language-kotlin\">MoshiPack(moshi = Moshi.Builder().build)\n</code></pre>\n<h6>ProGuard</h6>\n<p>From <code>Moshi</code>'s README.md;\nIf you are using ProGuard you might need to add the following options:</p>\n<pre><code>-dontwarn okio.**\n-dontwarn javax.annotation.**\n-keepclasseswithmembers class * {\n    @com.squareup.moshi.* &lt;methods&gt;;\n}\n-keep @com.squareup.moshi.JsonQualifier interface *\n-keepclassmembers class kotlin.Metadata {\n    public &lt;methods&gt;;\n}\n</code></pre>\n<h6>Retrofit</h6>\n<p>An example of using the retorfit adapter can be found here:\nhttps://github.com/davethomas11/MoshiPack_AndroidAppExample</p>\n",
    "msgpack_repo_id": "davethomas11-MoshiPack",
    "msgpack_repo_homepage": "https://github.com/davethomas11/MoshiPack",
    "full_name": "davethomas11/MoshiPack",
    "owner": "davethomas11",
    "html_url": "https://github.com/davethomas11/MoshiPack"
  },
  {
    "msgpack_lang": "mruby",
    "msgpack_quickstart_html": "<h5>mruby-msgpack   <a href=\"https://travis-ci.org/suzukaze/mruby-msgpack\"><img src=\"https://travis-ci.org/suzukaze/mruby-msgpack.png?branch=master\" alt=\"Build Status\"></a></h5>\n<h6>Welcome to MessagePack for mruby</h6>\n<p>MessagePack for mruby is MessagePack implimented in mruby language.</p>\n<pre><code class=\"language-ruby\">msg = [1, 2, 3].to_msgpack  #=&gt; &quot;\\x93\\x01\\x02\\x03&quot;\nMessagePack.unpack(msg)     #=&gt; [1, 2, 3]\n</code></pre>\n<p>This is early vesion. Please check the methods that work in test folder.</p>\n<h6>Platform</h6>\n<p>I test MessagePack for mruby in mac OSX 10.8.4. In the future it will work in Windows and Linux OS.</p>\n<h6>Getting Started</h6>\n<ol>\n<li>\n<p>Download MessagePack for mruby at the command prompt:</p>\n<pre><code> git clone https://github.com/suzukaze/mruby-msgpack.git\n</code></pre>\n</li>\n<li>\n<p>Add config.gem line to <code>build_config.rb</code></p>\n</li>\n</ol>\n<pre><code class=\"language-ruby\">MRuby::Build.new do |conf|\n\n  # ...(snip)...\n  conf.gem :git =&gt; 'https://github.com/suzukaze/mruby-msgpack.git'\nend\n</code></pre>\n<ol start=\"3\">\n<li>\n<p>Test at the command prompt:</p>\n<pre><code> rake test\n</code></pre>\n</li>\n<li>\n<p>Build at the command prompt:</p>\n<pre><code> rake\n</code></pre>\n</li>\n</ol>\n<h6>msgpack-ruby commit</h6>\n<p>mruby-msgpack is based on <a href=\"https://github.com/msgpack/msgpack-ruby\">msgpack-ruby</a>(<code>a7c2dc34ef69c9132167e38009baa8420c460c9b</code>)</p>\n<h6>Contributing</h6>\n<p>I encourage you to contribute to MessagePack for mruby!</p>\n<h6>License</h6>\n<p>Author : Jun Hiroe</p>\n<p>Copyrigh : Copyright (c) 2013 Jun Hiroe</p>\n<p>License : MIT License</p>\n",
    "msgpack_repo_id": "suzukaze-mruby-msgpack",
    "msgpack_repo_homepage": "MessagePack for mruby",
    "full_name": "suzukaze/mruby-msgpack",
    "owner": "suzukaze",
    "html_url": "https://github.com/suzukaze/mruby-msgpack"
  },
  {
    "msgpack_lang": "PostgreSQL",
    "msgpack_quickstart_html": "<h5>msgpack-postgres <a href=\"https://travis-ci.org/patriksimek/msgpack-postgres\"><img src=\"https://img.shields.io/travis/patriksimek/msgpack-postgres/master.svg?style=flat-square&amp;label=unit\" alt=\"Travis CI\"></a></h5>\n<p>MessagePack implementation for PostgreSQL written in PL/pgSQL.</p>\n<h6>Installation</h6>\n<p>Execute <code>src/encode.sql</code> or/and <code>src/decode.sql</code> on your database server.</p>\n<h6>Quick Example</h6>\n<pre><code class=\"language-sql\">select msgpack_encode('{&quot;hello&quot;: &quot;world&quot;}'::jsonb);\n-- returns 0x81a568656c6c6fa5776f726c64\n\nselect msgpack_decode(decode('81a568656c6c6fa5776f726c64', 'hex'));\n-- returns '{&quot;hello&quot;: &quot;world&quot;}'\n</code></pre>\n<h6>Documentation</h6>\n<p><code>msgpack_encode(jsonb)</code></p>\n<p>Encodes <code>jsonb</code> object into <code>bytea</code> string.</p>\n<p><code>msgpack_decode(bytea)</code></p>\n<p>Decodes <code>jsonb</code> object from <code>bytea</code> string.</p>\n<h6>Sponsors</h6>\n<p>Development is sponsored by <a href=\"https://www.integromat.com/en/integrations/postgres\">Integromat</a>.</p>\n<h6>License</h6>\n<p>Copyright (c) 2017 Patrik Simek</p>\n<p>The MIT License</p>\n<p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &quot;Software&quot;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p>\n<p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p>\n<p>THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>\n",
    "msgpack_repo_id": "patriksimek-msgpack-postgres",
    "msgpack_repo_homepage": "https://github.com/patriksimek/msgpack-postgres",
    "full_name": "patriksimek/msgpack-postgres",
    "owner": "patriksimek",
    "html_url": "https://github.com/patriksimek/msgpack-postgres"
  },
  {
    "msgpack_lang": "C#",
    "msgpack_quickstart_html": "<h5>SimpleMsgPack.Net</h5>\n<p>MessagePack implementation for C# / msgpack.org[C#]</p>\n<p>Binary files distributed via the NuGet package <a href=\"http://www.nuget.org/packages/SimpleMsgPack/\">SimpleMsgPack</a>.</p>\n<p>It's like JSON but small and fast.</p>\n<pre><code>unit Owner: D10.Mofen\ncontact:\n       qq:185511468, \n    email:ymofen@diocp.org\n\thomepage:www.diocp.org\nif you find any bug, please contact me!\n</code></pre>\n<h6>Works with</h6>\n<p>.NET Framework 4.x</p>\n<h7>Code Example</h7>\n<pre><code class=\"language-C#\">\n    MsgPack msgpack = new MsgPack();\n    msgpack.ForcePathObject(&quot;p.name&quot;).AsString = &quot;张三&quot;;\n    msgpack.ForcePathObject(&quot;p.age&quot;).AsInteger = 25;\n    msgpack.ForcePathObject(&quot;p.datas&quot;).AsArray.Add(90);\n    msgpack.ForcePathObject(&quot;p.datas&quot;).AsArray.Add(80);\n    msgpack.ForcePathObject(&quot;p.datas&quot;).AsArray.Add(&quot;李四&quot;);\n    msgpack.ForcePathObject(&quot;p.datas&quot;).AsArray.Add(3.1415926);\n\n    // pack file\n    msgpack.ForcePathObject(&quot;p.filedata&quot;).LoadFileAsBytes(&quot;C:\\\\a.png&quot;);\n\n    // pack msgPack binary\n    byte[] packData = msgpack.Encode2Bytes();\n\n    MsgPack unpack_msgpack = new MsgPack();\n\t\n    // unpack msgpack\n    unpack_msgpack.DecodeFromBytes(packData);\n\n    System.Console.WriteLine(&quot;name:{0}, age:{1}&quot;,\n          unpack_msgpack.ForcePathObject(&quot;p.name&quot;).AsString,\n          unpack_msgpack.ForcePathObject(&quot;p.age&quot;).AsInteger);\n\n    Console.WriteLine(&quot;==================================&quot;);\n    System.Console.WriteLine(&quot;use index property, Length{0}:{1}&quot;,\n          unpack_msgpack.ForcePathObject(&quot;p.datas&quot;).AsArray.Length,\n          unpack_msgpack.ForcePathObject(&quot;p.datas&quot;).AsArray[0].AsString\n          );\n\n    Console.WriteLine(&quot;==================================&quot;);\n    Console.WriteLine(&quot;use foreach statement:&quot;);\n    foreach (MsgPack item in unpack_msgpack.ForcePathObject(&quot;p.datas&quot;))\n    {\n        Console.WriteLine(item.AsString);\n    }\n\n    // unpack filedata \n    unpack_msgpack.ForcePathObject(&quot;p.filedata&quot;).SaveBytesToFile(&quot;C:\\\\b.png&quot;);\n    Console.Read();\n</code></pre>\n",
    "msgpack_repo_id": "ymofen-SimpleMsgPack.Net",
    "msgpack_repo_homepage": "https://github.com/ymofen/SimpleMsgPack.Net",
    "full_name": "ymofen/SimpleMsgPack.Net",
    "owner": "ymofen",
    "html_url": "https://github.com/ymofen/SimpleMsgPack.Net"
  },
  {
    "msgpack_lang": "C++11",
    "msgpack_quickstart_html": "<h5>GoodForm</h5>\n<p>Form validation library. Includes MsgPack and JSON serializer/deserializer.</p>\n<h6>Building</h6>\n<p>GoodForm uses std::any, which requires c++17. When c++17 is not available, boost::any is expected and will be installed automatically when using <a href=\"http://cget.readthedocs.io/en/latest/src/intro.html#installing-cget\">cget</a>.</p>\n<pre><code class=\"language-bash\">cd goodform\ncget install -f ./requirements.txt                      # Install dependencies locally.\nmkdir build &amp;&amp; cd build                                 # Create out of source build directory.\ncmake -DCMAKE_TOOLCHAIN_FILE=../cget/cget/cget.cmake .. # Configure project with dependency paths.\nmake\n</code></pre>\n<h6>MsgPack Usage</h6>\n<pre><code class=\"language-c++\">std::stringstream ss;\ngoodform::any var, var2;\nvar = goodform::object\n  {\n    {&quot;compact&quot;, true},\n    {&quot;schema&quot;, 0}\n  };\n\ngoodform::msgpack::serialize(var, ss);\ngoodform::msgpack::deserialize(ss, var2);\n\ngoodform::form form(var2);\n\nstruct\n{\n  bool compact;\n  std::int32_t schema;\n} mpack;\n\nmpack.compact = form.at(&quot;compact&quot;).boolean().val();\nmpack.schema = form.at(&quot;schema&quot;).int32().val();\n\nif (form.is_good())\n{\n  std::cout &lt;&lt; &quot;{ \\&quot;compact\\&quot;: &quot; &lt;&lt; std::boolalpha &lt;&lt; mpack.compact &lt;&lt; &quot;, \\&quot;schema\\&quot;: &quot; &lt;&lt; mpack.schema &lt;&lt; &quot; }&quot; &lt;&lt; std::endl;\n}\n</code></pre>\n<h6>JSON Usage</h6>\n<pre><code class=\"language-c++\">goodform::any var;\nstd::stringstream ss;\nss &lt;&lt; &quot;{&quot; &lt;&lt; std::endl\n  &lt;&lt; &quot;\\&quot;first_name\\&quot;:\\&quot;John\\&quot;, // This is a comment&quot; &lt;&lt; std::endl\n  &lt;&lt; &quot;\\&quot;last_name\\&quot;:\\&quot;Smith\\&quot;, &quot; &lt;&lt; std::endl\n  &lt;&lt; &quot;\\&quot;age\\&quot;: 23,&quot; &lt;&lt; std::endl\n  &lt;&lt; &quot;\\&quot;gpa\\&quot;: 4.0,&quot; &lt;&lt; std::endl\n  &lt;&lt; &quot;\\&quot;email\\&quot;:\\&quot;john.smith@example.com\\&quot;,&quot; &lt;&lt; std::endl\n  &lt;&lt; &quot;\\&quot;password_hash\\&quot;:\\&quot;5f4dcc3b5aa765d61d8327deb882cf99\\&quot;,&quot; &lt;&lt; std::endl\n  &lt;&lt; &quot;\\&quot;interests\\&quot;: [\\&quot;sailing\\&quot;,\\&quot;swimming\\&quot;,\\&quot;yoga\\&quot;]&quot; &lt;&lt; std::endl\n  &lt;&lt; &quot;}&quot; &lt;&lt; std::endl;\n\ngoodform::json::deserialize(ss, var);\n\ngoodform::form form(var);\n\nstruct\n{\n  std::string first_name;\n  std::string last_name;\n  std::uint8_t age;\n  float gpa;\n  std::string email;\n  std::string password_hash;\n  bool subscribe_to_email_marketing;\n  std::list&lt;std::string&gt; interests;\n} form_data;\n\n\nform_data.first_name = form.at(&quot;first_name&quot;).string().match(std::regex(&quot;^[a-zA-Z ]{1,64}$&quot;)).val();\nform_data.last_name = form.at(&quot;last_name&quot;).string().match(std::regex(&quot;^[a-zA-Z ]{1,64}$&quot;)).val();\nform_data.age = form.at(&quot;age&quot;).uint8().val();\nform_data.gpa = form.at(&quot;gpa&quot;).float32().gte(0).lte(4.0).val();\nform_data.email = form.at(&quot;email&quot;).string().match(std::regex(&quot;^.{3,256}$&quot;)).val();\nform_data.password_hash = form.at(&quot;password_hash&quot;).string().match(std::regex(&quot;^[a-fA-F0-9]{32}$&quot;)).val();\nform_data.subscribe_to_email_marketing = form.at(&quot;subscribe_to_email_marketing&quot;, true).boolean().val(); // Optional field defaults to true.\n\nform.at(&quot;interests&quot;).array().for_each([&amp;form_data](goodform::sub_form&amp; sf, std::size_t i)\n{\n  form_data.interests.push_back(sf.string().val());\n});\n\nif (form.is_good())\n{\n  // Use validated form_data.\n}\nelse\n{\n  // Handle error.\n}\n</code></pre>\n",
    "msgpack_repo_id": "jonathonl-goodform",
    "msgpack_repo_homepage": "https://github.com/jonathonl/goodform",
    "full_name": "jonathonl/goodform",
    "owner": "jonathonl",
    "html_url": "https://github.com/jonathonl/goodform"
  },
  {
    "msgpack_lang": "C#",
    "msgpack_quickstart_html": "<h5>MPack</h5>\n<p>This library is a lightweight implementation of the <a href=\"http://msgpack.org/\">MessagePack</a> binary serialization format. MessagePack is a 1-to-1 binary representation of JSON, and the official specification can be found here: <a href=\"https://github.com/msgpack/msgpack/blob/master/spec.md\">https://github.com/msgpack...</a>.</p>\n<h6>Implementation Notes</h6>\n<ul>\n<li>This library is designed to be super light weight.</li>\n<li>Its easiest to understand how this library works if you think in terms of json. The type <code>MDict</code> represents a dictionary, and the type <code>MArray</code> represents an array.</li>\n<li>Create MPack values with the static method <code>MToken.From(object);</code>. You can pass any simple type (such as string, integer, etc), or any Array composed of a simple type. MPack also has implicit conversions from most of the basic types built in.</li>\n<li>Transform an MPack object back into a CLR type with the static method <code>MToken.To&lt;T&gt;();</code> or <code>MToken.To(type);</code>. MPack also has <strong>explicit</strong> converions going back to most basic types, you can do <code>string str = (string)mpack;</code> for instance.</li>\n<li>MPack now supports native asynchrounous reading and cancellation tokens. It will <em>not</em> block a thread to wait on a stream.</li>\n</ul>\n<h6>NuGet</h6>\n<p>MPack is available as a <a href=\"https://www.nuget.org/packages/MPack\">NuGet package</a>!</p>\n<pre><code>PM&gt; Install-Package MPack\n</code></pre>\n<h6>Usage</h6>\n<hr>\n<p>Create a object model that can be represented as MsgPack. Here we are creating a dictionary, but really it can be anything:</p>\n<pre><code class=\"language-csharp\">using MPack;\n\nvar dictionary = new MDict\n{\n    {\n        &quot;array1&quot;, MToken.From(new[]\n        {\n            &quot;array1_value1&quot;,  // implicitly converted string\n            MToken.From(&quot;array1_value2&quot;),\n        })\n    },\n    {&quot;bool1&quot;, MToken.From(true)}, //boolean\n    {&quot;double1&quot;, MToken.From(50.5)}, //single-precision float\n    {&quot;double2&quot;, MToken.From(15.2)},\n    {&quot;int1&quot;, 50505}, // implicitly converted integer\n    {&quot;int2&quot;, MToken.From(50)} // integer\n};\n</code></pre>\n<p>Serialize the data to a byte array or to a stream to be saved, transmitted, etc:</p>\n<pre><code class=\"language-csharp\">byte[] encodedBytes = dictionary.EncodeToBytes();\n// -- or --\ndictionary.EncodeToStream(stream);\n</code></pre>\n<p>Parse the binary data back into a MPack object model (you can also cast back to an MPackMap or MPackArray after reading if you want dictionary/array methods):</p>\n<pre><code class=\"language-csharp\">var reconstructed = MToken.ParseFromBytes(encodedBytes);\n// -- or --\nvar reconstructed = MToken.ParseFromStream(stream);\n</code></pre>\n<p>Turn MPack objects back into types that we understand with the generic <code>To&lt;&gt;()</code> method. Since we know the types of everything here we can just call <code>To&lt;bool&gt;()</code> to reconstruct our bool, but if you don't know you can access the instance enum <code>MToken.ValueType</code> to know what kind of value it is:</p>\n<pre><code class=\"language-csharp\">bool bool1 = reconstructed[&quot;bool1&quot;].To&lt;bool&gt;();\nvar array1 = reconstructed[&quot;array1&quot;] as MArray;\nvar array1_value1 = array1[0];\ndouble double1 = reconstructed[&quot;double1&quot;].To&lt;double&gt;();\n//etc...\n</code></pre>\n<h6>Complex Types</h6>\n<p>Beyond converting basic/primitive types, there is a very basic object serializer built in.</p>\n<p>If your object has the <code>[DataContract]</code> attribute, all properties/fields with the <code>[DataMember]</code> attribute will be serialized.</p>\n<pre><code class=\"language-csharp\">[DataContract]\nclass MyObject\n{\n    [DataMember]\n    public string Name { get; set; }\n\n    [DataMember]\n    public int Age { get; set; }\n\n    // following will NOT be serialized, because missing [DataMember] attribute\n    public List&lt;string&gt; Friends { get; set; } \n}\n\n// ...\nvar token = MToken.From(new MyObject { Name = &quot;John&quot;, Age = 25 });\nvar bytes = token.EncodeToBytes();\nvar reconstructed = MToken.ParseFromBytes(bytes);\nvar reconstructedObj = reconstructed.To&lt;MyObject&gt;();\n</code></pre>\n<p>If your object does not have the <code>[DataContract]</code> attribute, all public properties will be serialized,\nand you can use the <code>[IgnoreDataMember]</code> attribute to exclude properties from serialization.</p>\n<pre><code class=\"language-csharp\">class MyObject\n{\n    public string Name { get; set; }\n\n    public int Age { get; set; }\n\n    [IgnoreDataMember] // will not be serialized\n    public List&lt;string&gt; Friends { get; set; }\n}\n</code></pre>\n<h6>Disclaimer</h6>\n<p>This is a very basic/simple implementation of the MessagePack format.\nThis library is not optimized for performance, and the object serialization is very basic. It is not recommended for use in high-performance,\nhigh-throughput scenarios, or for serializing complex object models. For those scenarios, consider using a more robust library such as\n<a href=\"https://github.com/MessagePack-CSharp/MessagePack-CSharp\">MessagePack-CSharp</a>.</p>\n",
    "msgpack_repo_id": "caesay-MPack",
    "msgpack_repo_homepage": "https://github.com/caesay/MPack",
    "full_name": "caesay/MPack",
    "owner": "caesay",
    "html_url": "https://github.com/caesay/MPack"
  },
  {
    "msgpack_lang": "F#",
    "msgpack_quickstart_html": "<h5>MessagePack.FSharpExtensions</h5>\n<p><a href=\"https://www.nuget.org/packages/MessagePack.FSharpExtensions/\"><img src=\"http://img.shields.io/nuget/v/MessagePack.FSharpExtensions.svg?style=flat\" alt=\"NuGet Status\"></a></p>\n<p>MessagePack.FSharpExtensions is a <a href=\"https://github.com/neuecc/MessagePack-CSharp\">MessagePack-CSharp</a> extension library for F#.</p>\n<h6>Usage</h6>\n<pre><code class=\"language-fsharp\">open System\nopen System.Buffers\nopen MessagePack\nopen MessagePack.Resolvers\nopen MessagePack.FSharp\n\n[&lt;MessagePackObject&gt;]\ntype UnionSample =\n  | Foo of XYZ : int\n  | Bar of OPQ : string list\n\nlet convertAsMemory&lt;'T&gt; options (value: 'T) =\n  let memory = ReadOnlyMemory(MessagePackSerializer.Serialize(value, options))\n  MessagePackSerializer.Deserialize&lt;'T&gt;(memory, options)\n\nlet convertAsSequence&lt;'T&gt; options (value: 'T) =\n  let sequence = ReadOnlySequence(MessagePackSerializer.Serialize(value, options))\n  MessagePackSerializer.Deserialize&lt;'T&gt;(&amp; sequence, options)\n\nlet dump = function\n| Foo x -&gt;\n  printfn &quot;%d&quot; x\n| Bar xs -&gt;\n  printfn &quot;%A&quot; xs\n\nlet resolver =\n  Resolvers.CompositeResolver.Create(\n    FSharpResolver.Instance,\n    StandardResolver.Instance\n)\n\nlet options = MessagePackSerializerOptions.Standard.WithResolver(resolver)\n\nFoo 999\n|&gt; convertAsMemory options\n|&gt; dump\n\nBar [&quot;example&quot;]\n|&gt; convertAsSequence options\n|&gt; dump\n</code></pre>\n<h6>Supported types</h6>\n<ul>\n<li>option</li>\n<li>voption</li>\n<li>list</li>\n<li>map</li>\n<li>set</li>\n<li>Discriminated Union</li>\n<li>Struct Discriminated Union</li>\n</ul>\n<p>Records, Struct Records and Anonymous Records are serialized and deserialized using <code>DynamicObjectResolver</code> in <code>MessagePack-CSharp</code>.</p>\n",
    "msgpack_repo_id": "pocketberserker-MessagePack.FSharpExtensions",
    "msgpack_repo_homepage": "https://github.com/pocketberserker/MessagePack.FSharpExtensions",
    "full_name": "pocketberserker/MessagePack.FSharpExtensions",
    "owner": "pocketberserker",
    "html_url": "https://github.com/pocketberserker/MessagePack.FSharpExtensions"
  },
  {
    "msgpack_lang": "VL",
    "msgpack_quickstart_html": "<h5>VL.Serialization.MessagePack</h5>\n<p>MessagePack and Json serialization and deserialization for VL.</p>\n<ul>\n<li>Ships with <a href=\"https://visualprogramming.net\">vvvv</a></li>\n<li>In the helpbrowser search for &quot;messagepack&quot; to see examples</li>\n</ul>\n<p>Find the implementation in <a href=\"VL.Serialization.MessagePack\">VL.Serialization.MessagePack</a>.<br>\nBased on the <a href=\"https://www.nuget.org/packages/MessagePack\">MessagePack</a> NuGet.</p>\n",
    "msgpack_repo_id": "vvvv-VL.StandardLibs",
    "msgpack_repo_homepage": "https://vvvv.org",
    "full_name": "vvvv/VL.StandardLibs",
    "owner": "vvvv",
    "html_url": "https://github.com/vvvv/VL.StandardLibs"
  },
  {
    "msgpack_lang": "C#",
    "msgpack_quickstart_html": "<h5>LsMsgPack</h5>\n<p>MsgPack debugging and validation tool also usable as Fiddler plugin</p>\n<p>More info about this application (and screenshots) can be found at:\nhttp://www.infotopie.nl/open-source/msgpack-explorer</p>\n<p><a href=\"https://github.com/mlsomers/LsMsgPack/actions/workflows/dotnet.yml\"><img src=\"https://github.com/mlsomers/LsMsgPack/actions/workflows/dotnet.yml/badge.svg\" alt=\".NET\"></a></p>\n<h6>Library Usage Example</h6>\n<p>Although the original was optimised for debugging and analysing, some compiler directives have been added to exclude keeping track of all offsets and other overhead needed for debugging. It has been expanded to support serialization and deserialization of .Net classes (using the properties) similar to other xml and json serializers.</p>\n<p>Add LsMsgPackL.dll as a reference.</p>\n<pre><code class=\"language-csharp\">public class MyClass\n{\n    public string Name { get; set; }\n    public int Quantity { get; set; }\n    public List&lt;object&gt; Anything { get; set; }\n}\n\npublic void Test()\n{\n    MyClass message = new MyClass()\n    {\n        Name = &quot;Test message&quot;,\n        Quantity = 100,\n        Anything = new List&lt;object&gt;(new object[] { &quot;first&quot;, 2, false, null, 4.2d, &quot;last&quot; })\n    };\n    \n    // Serialize\n    byte[] buffer = MsgPackSerializer.Serialize(message);\n    \n    // Deserialize\n    MyClass returnMsg = MsgPackSerializer.Deserialize&lt;MyClass&gt;(buffer);\n}\n</code></pre>\n<h6>Compatibility with other implementations</h6>\n<p>Serializing classes by creating name-value dictionaries of their properties is not an official standard, and to my surprise I found than a majority of MsgPack implementations do not, instead they simply string up a list of values. This is indeed efficient and will work well for the first version, however migrating to a new version may pose some compatibility challenges when introducing new properties over time.</p>\n<p>For this reason I have submitted a <a href=\"https://github.com/msgpack/msgpack/pull/334/commits/c6a4935b9e0e38818cc1ef878db72621143bfcd7\">pull request</a> to the official MsgPack specification, including a more standardized choice of solutions and in addition a standard way to support polymorphic class-hierarchies.</p>\n<p>While using dictionaries diminishes the small size of a MsgPack message, it does help bring up the compatibility level with other serializers (XML / JSON) so that it can be used as a drop-in replacement. I hope to deal with part of the problem later by adding a schema, but let’s first just bring it up to speed with other serializers for now.</p>\n<h6>Polymorphic class-hierarchy support</h6>\n<p>One of my frustrations with other serializers is that they do not handle class-hierarchies very well. For example, the <code>System.Xml.Serialization</code> classes had a solution where you could add <code>XmlInclude</code> attributes to a base class or alternatively add <code>XmlArrayItem</code> attributes to a property holding a list of derived classes. In this case one would have to add an attribute for each and every possible derived type (and not forget when adding new types). Other serializers had other solutions but almost always needed extra coding. I decided to go an extra mile and add basic support for class hierarchies out of the box.</p>\n<p>So if you have an interface IPet with classes Cat, Dog and Fish that implement IPet. You can have a class containing an array (or other collection) of pets and have it serialize and deserialize correctly without adding any extra code.</p>\n<p>There are limits and edge cases to this rule though. For example:</p>\n<pre><code class=\"language-csharp\">public IEnumerable&lt;object&gt; Pets { get; set; } = new HashSet&lt;IPet&gt; { new Cat(), new Dog() };\n</code></pre>\n<p>May require you to call <code>MsgPackSerializer.CacheAssemblyTypes(typeof(IPet));</code> once somewhere before trying to deserialize it. If the property is changed to <code>IEnumerable&lt;IPet&gt;</code> instead of <code>IEnumerable&lt;object&gt;</code> it will work without preregistering because the deserializer will know how to find the assembly where IPet is defined. Pre-caching may also be required when not all derived IPet implementations are in the same assembly as the IPet interface. There are multiple tier caches; the fastest is the “used names” cache where only previously used types are cached for fast lookup the next time the type is encountered. A 2nd tier has names of all types in cached assemblies. Not all assemblies will be cached by default (waste of memory) but you can opt into caching all loaded assemblies by using an included <code>WildGooseChaseResolver</code> which will scan all loaded assemblies when looking for a type (and cache the searched assemblies until it finds the wanted type).</p>\n<h6>Fiddler Integration</h6>\n<p>In order to use this tool as a Fiddler plugin, copy the following files to the Fiddler Inspectors directory (usually C:\\Program Files\\Fiddler2\\Inspectors):</p>\n<ul>\n<li>MsgPackExplorer.exe</li>\n<li>LsMsgPackFiddlerInspector.dll</li>\n<li>LsMsgPack.dll</li>\n</ul>\n<p>Restart fiddler and you should see a MsgPack option in the Inspectors list.</p>\n<h6>Source documentation</h6>\n<h7>Modules</h7>\n<h8>LsMsgPack.dll</h8>\n<p>This module contains the &quot;parser&quot; and generator of MsgPack Packages. It breaks down the binary file into a hirarchical structure, keeping track of offsets and errors. And it can also be used to generate MsgPack files.</p>\n<h8>MsgPackExplorer.exe</h8>\n<p>The main winforms executable, containing a MsgPackExplorer UserControl (so it can easily be integrated into other tools such as Fiddler).</p>\n<h8>LsMsgPackFiddlerInspector.dll</h8>\n<p>A tiny wrapper enabling the use of MsgPack Explorer as a Fiddler Inspector.</p>\n<h8>LsMsgPackUnitTests.dll</h8>\n<p>Some unit tests on the core LsMsgPack.dll. No full coverage yet, but at least it's a start.</p>\n<h8>LsMsgPackNetStandard.dll &amp; LsMsgPackNetStandardUnitTests.dll</h8>\n<p>A light version of the serializer. The parsing and generating methods are almost identical to the LsMsgPack lib, but with allot of overhead removed that comes with keeping track of offsets, original types and other debugging info. I'm planning to use this version in my projects that use the MsgPack format.</p>\n<h7>Architecture</h7>\n<h8>Object-model</h8>\n<p><img src=\"https://github.com/mlsomers/LsMsgPack/blob/master/Hierarchy.png\" alt=\"Hierarchy\"></p>\n<p>Each class can serialize/deserialize the associated MsgPack type. Types that have a variable length inherit from MsgPackVarLen.</p>\n<h8>Worker classes (or services)</h8>\n<p><img src=\"https://github.com/mlsomers/LsMsgPack/blob/master/Services.png\" alt=\"Hierarchy\"></p>\n<p>The MsgPackSerializer and MsgPackSettings are the ones that end-users are supposed to use (entry points).</p>\n",
    "msgpack_repo_id": "mlsomers-LsMsgPack",
    "msgpack_repo_homepage": "http://www.infotopie.nl/open-source/msgpack-explorer",
    "full_name": "mlsomers/LsMsgPack",
    "owner": "mlsomers",
    "html_url": "https://github.com/mlsomers/LsMsgPack"
  },
  {
    "msgpack_lang": "zig",
    "msgpack_quickstart_html": "<h5>zig-msgpack</h5>\n<p><a href=\"https://github.com/zigcc/zig-msgpack/actions/workflows/ci.yml\"><img src=\"https://github.com/zigcc/zig-msgpack/actions/workflows/ci.yml/badge.svg\" alt=\"CI\"></a></p>\n<p>A MessagePack implementation for the Zig programming language. This library provides a simple and efficient way to serialize and deserialize data using the MessagePack format.</p>\n<p>An article introducing it: <a href=\"https://blog.nvimer.org/2025/05/03/zig-msgpack/\">Zig Msgpack</a></p>\n<h6>Features</h6>\n<ul>\n<li><strong>Full MessagePack Support:</strong> Implements all MessagePack types including the timestamp extension.</li>\n<li><strong>Timestamp Support:</strong> Complete implementation of MessagePack timestamp extension type (-1) with support for all three formats (32-bit, 64-bit, and 96-bit).</li>\n<li><strong>Efficient:</strong> Designed for high performance with minimal memory overhead.</li>\n<li><strong>Type-Safe:</strong> Leverages Zig's type system to ensure safety during serialization and deserialization.</li>\n<li><strong>Simple API:</strong> Offers a straightforward and easy-to-use API for encoding and decoding.</li>\n</ul>\n<h6>Installation</h6>\n<h7>Version Compatibility</h7>\n<table>\n<thead>\n<tr>\n<th>Zig Version</th>\n<th>Library Version</th>\n<th>Status</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0.13 and older</td>\n<td>0.0.6</td>\n<td>Legacy support</td>\n</tr>\n<tr>\n<td>0.14.0</td>\n<td>Current</td>\n<td>✅ Fully supported</td>\n</tr>\n<tr>\n<td>0.15.x</td>\n<td>Current</td>\n<td>✅ Fully supported</td>\n</tr>\n<tr>\n<td>0.16.0-dev (nightly)</td>\n<td>Current</td>\n<td>✅ Fully supported</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p><strong>Note:</strong> For Zig 0.13 and older versions, please use version <code>0.0.6</code> of this library.</p>\n</blockquote>\n<p>For Zig <code>0.14.0</code>, <code>0.15.x</code>, and <code>0.16.0-dev</code>, follow these steps:</p>\n<ol>\n<li>\n<p><strong>Add as a dependency:</strong>\nAdd the library to your <code>build.zig.zon</code> file. You can fetch a specific commit or branch.</p>\n<pre><code class=\"language-sh\">zig fetch --save https://github.com/zigcc/zig-msgpack/archive/{COMMIT_OR_BRANCH}.tar.gz\n</code></pre>\n</li>\n<li>\n<p><strong>Configure your <code>build.zig</code>:</strong>\nAdd the <code>zig-msgpack</code> module to your executable.</p>\n<pre><code class=\"language-zig\">const std = @import(&quot;std&quot;);\n\npub fn build(b: *std.Build) void {\n    const target = b.standardTargetOptions(.{});\n    const optimize = b.standardOptimizeOption(.{});\n\n    const exe = b.addExecutable(.{\n        .name = &quot;my-app&quot;,\n        .root_source_file = .{ .path = &quot;src/main.zig&quot; },\n        .target = target,\n        .optimize = optimize,\n    });\n\n    const msgpack_dep = b.dependency(&quot;zig_msgpack&quot;, .{\n        .target = target,\n        .optimize = optimize,\n    });\n\n    exe.root_module.addImport(&quot;msgpack&quot;, msgpack_dep.module(&quot;msgpack&quot;));\n\n    b.installArtifact(exe);\n}\n</code></pre>\n</li>\n</ol>\n<h6>Usage</h6>\n<h7>Basic Usage</h7>\n<pre><code class=\"language-zig\">const std = @import(&quot;std&quot;);\nconst msgpack = @import(&quot;msgpack&quot;);\n\npub fn main() !void {\n    const allocator = std.heap.page_allocator;\n    var buffer: [1024]u8 = undefined;\n    var stream = std.io.fixedBufferStream(&amp;buffer);\n\n    var packer = msgpack.Pack(\n        *std.io.FixedBufferStream([]u8), *std.io.FixedBufferStream([]u8),\n        std.io.FixedBufferStream([]u8).WriteError, std.io.FixedBufferStream([]u8).ReadError,\n        std.io.FixedBufferStream([]u8).write, std.io.FixedBufferStream([]u8).read,\n    ).init(&amp;stream, &amp;stream);\n\n    // Create and encode data\n    var map = msgpack.Payload.mapPayload(allocator);\n    defer map.free(allocator);\n    try map.mapPut(&quot;name&quot;, try msgpack.Payload.strToPayload(&quot;Alice&quot;, allocator));\n    try map.mapPut(&quot;age&quot;, msgpack.Payload.uintToPayload(30));\n    try packer.write(map);\n\n    // Decode\n    stream.pos = 0;\n    const decoded = try packer.read(allocator);\n    defer decoded.free(allocator);\n    \n    const name = (try decoded.mapGet(&quot;name&quot;)).?.str.value();\n    const age = (try decoded.mapGet(&quot;age&quot;)).?.uint;\n    std.debug.print(&quot;Name: {s}, Age: {d}\\n&quot;, .{ name, age });\n}\n</code></pre>\n<h7>Data Types</h7>\n<pre><code class=\"language-zig\">// Basic types\nconst nil_val = msgpack.Payload.nilToPayload();\nconst bool_val = msgpack.Payload.boolToPayload(true);\nconst int_val = msgpack.Payload.intToPayload(-42);\nconst uint_val = msgpack.Payload.uintToPayload(42);\nconst float_val = msgpack.Payload.floatToPayload(3.14);\n\n// String and binary\nconst str_val = try msgpack.Payload.strToPayload(&quot;hello&quot;, allocator);\nconst bin_val = try msgpack.Payload.binToPayload(&amp;[_]u8{1, 2, 3}, allocator);\n\n// Array\nvar arr = try msgpack.Payload.arrPayload(2, allocator);\ntry arr.setArrElement(0, msgpack.Payload.intToPayload(1));\ntry arr.setArrElement(1, msgpack.Payload.intToPayload(2));\n\n// Extension type\nconst ext_val = try msgpack.Payload.extToPayload(5, &amp;[_]u8{0xaa, 0xbb}, allocator);\n</code></pre>\n<h7>Timestamp Usage</h7>\n<pre><code class=\"language-zig\">// Create timestamps\nconst ts1 = msgpack.Payload.timestampFromSeconds(1234567890);\nconst ts2 = msgpack.Payload.timestampToPayload(1234567890, 123456789);\n\n// Write and read timestamp\ntry packer.write(ts2);\nstream.pos = 0;\nconst decoded_ts = try packer.read(allocator);\ndefer decoded_ts.free(allocator);\n\nstd.debug.print(&quot;Timestamp: {}s + {}ns\\n&quot;, \n    .{ decoded_ts.timestamp.seconds, decoded_ts.timestamp.nanoseconds });\nstd.debug.print(&quot;As float: {d}\\n&quot;, .{ decoded_ts.timestamp.toFloat() });\n</code></pre>\n<h7>Error Handling</h7>\n<pre><code class=\"language-zig\">// Type conversion with error handling\nconst int_payload = msgpack.Payload.intToPayload(-42);\nconst uint_result = int_payload.getUint() catch |err| switch (err) {\n    msgpack.MsGPackError.INVALID_TYPE =&gt; {\n        std.debug.print(&quot;Cannot convert negative to unsigned\\n&quot;);\n        return;\n    },\n    else =&gt; return err,\n};\n</code></pre>\n<h6>API Overview</h6>\n<ul>\n<li><strong><code>msgpack.Pack</code></strong>: The main struct for packing and unpacking MessagePack data. It is initialized with read and write contexts.</li>\n<li><strong><code>msgpack.Payload</code></strong>: A union that represents any MessagePack type. It provides methods for creating and interacting with different data types (e.g., <code>mapPayload</code>, <code>strToPayload</code>, <code>mapGet</code>).</li>\n</ul>\n<h6>Implementation Notes</h6>\n<h7>Zig 0.16 Compatibility</h7>\n<p>Starting from Zig 0.16, the standard library underwent significant changes to the I/O subsystem. The <code>std.io.FixedBufferStream</code> was removed as part of a broader redesign. This library includes a compatibility layer (<code>src/compat.zig</code>) that:</p>\n<ul>\n<li>Provides a <code>BufferStream</code> implementation for Zig 0.16+ that mimics the behavior of the old <code>FixedBufferStream</code></li>\n<li>Uses conditional compilation to maintain backward compatibility with Zig 0.14 and 0.15</li>\n<li>Ensures all existing functionality works seamlessly across different Zig versions</li>\n</ul>\n<p>This means you can use the same API regardless of your Zig version, and the library will handle the differences internally.</p>\n<h6>Testing</h6>\n<p>To run the unit tests for this library, use the following command:</p>\n<pre><code class=\"language-sh\">zig build test\n</code></pre>\n<h6>Contributing</h6>\n<p>Contributions are welcome! Please feel free to open an issue or submit a pull request.</p>\n<h6>Related Projects</h6>\n<ul>\n<li><a href=\"https://git.mzte.de/LordMZTE/getty-msgpack\">getty-msgpack</a></li>\n<li><a href=\"https://github.com/jinzhongjia/znvim\">znvim</a></li>\n</ul>\n<h6>License</h6>\n<p>This project is licensed under the MIT License. See the <a href=\"LICENSE\">LICENSE</a> file for details.</p>\n",
    "msgpack_repo_id": "zigcc-zig-msgpack",
    "msgpack_repo_homepage": "https://ziglang.cc/zig-msgpack/",
    "full_name": "zigcc/zig-msgpack",
    "owner": "zigcc",
    "html_url": "https://github.com/zigcc/zig-msgpack"
  },
  {
    "msgpack_lang": "F#",
    "msgpack_quickstart_html": "<h5>MessagePack for F#</h5>\n<p>.. image:: https://ci.appveyor.com/api/projects/status/qghqrl7nwq96aval\n:target: https://ci.appveyor.com/project/Gabkm/msgpack-fsharp\n:alt: Build status</p>\n<h6>What is this?</h6>\n<p>MessagePack is a fast and compact binary serialization library.</p>\n<p>MessagePack for F# is a MessagePack implementation of F#, by F#, for F#.</p>\n<h6>Usage</h6>\n<p>.. code-block:: fsharp</p>\n<p>open MsgPack</p>\n<p>[| 1uy; 2uy; 3uy |]\n|&gt; Array.map (Value.UInt8)\n|&gt; Value.Array\n|&gt; Packer.packOne\n//=&gt; val it : byte [] = [|147uy; 1uy; 2uy; 3uy|]</p>\n<p>Unpacker.unpack [|147uy; 1uy; 2uy; 3uy|]\n//=&gt; [|Value.Array [|Value.UInt8 1uy; Value.UInt8 2uy; Value.UInt8 3uy|]|]</p>\n<h6>Copyright</h6>\n<p><code>Copyright (c) 2014- Kazuhiro Matsushima</code></p>\n<h6>License</h6>\n<p>Distributed under the <code>Apache License, Version 2.0 &lt;http://www.apache.org/licenses/LICENSE-2.0&gt;</code>_ .</p>\n",
    "msgpack_repo_id": "Gab-km-msgpack-fsharp",
    "msgpack_repo_homepage": "https://github.com/Gab-km/msgpack-fsharp",
    "full_name": "Gab-km/msgpack-fsharp",
    "owner": "Gab-km",
    "html_url": "https://github.com/Gab-km/msgpack-fsharp"
  },
  {
    "msgpack_lang": "Smalltalk",
    "msgpack_quickstart_html": "<h5>msgpack-smalltalk</h5>\n<p><a href=\"https://github.com/msgpack/msgpack-smalltalk/actions/workflows/main.yml\"><img src=\"https://github.com/msgpack/msgpack-smalltalk/actions/workflows/main.yml/badge.svg\" alt=\"CI\"></a></p>\n<p>MessagePack serialization library for various Smalltalk dialects.</p>\n<ul>\n<li>Squeak</li>\n<li>Pharo</li>\n<li>VisualWorks</li>\n<li>VA Smalltalk</li>\n<li>Dolphin Smalltalk</li>\n<li>GNU Smalltalk (Beta)</li>\n<li><a href=\"https://github.com/mumez/Cuis-Smalltalk-MessagePack\">Cuis</a></li>\n</ul>\n<p>Sources are put as <a href=\"https://github.com/CampSmalltalk/Cypress/blob/master/README.md\">Cypress</a> for the neutral accesses from various Smalltalk dialects.</p>\n<h6>How to use</h6>\n<h7>Serialization</h7>\n<pre><code class=\"language-Smalltalk\">MpMessagePack pack: &lt;your object&gt;\n</code></pre>\n<p>or:</p>\n<pre><code class=\"language-Smalltalk\">&lt;your object&gt; messagePacked\n</code></pre>\n<h7>Deserialization</h7>\n<pre><code class=\"language-Smalltalk\">MpMessagePack unpack: msgpackBytes\n</code></pre>\n<p>or:</p>\n<pre><code class=\"language-Smalltalk\">Object fromMessagePack: msgBytes\n</code></pre>\n<h7>Samples</h7>\n<pre><code class=\"language-Smalltalk\">map := Dictionary new.\nmap at: 'someArray' asByteArray put: #(1 2.2 #[3 4 5]).\npacked := map messagePacked.\n(Object fromMessagePack: packed) inspect.\n</code></pre>\n<pre><code class=\"language-Smalltalk\">writeStream := WriteStream on: ByteArray new.\nencoder := MpEncoder on: writeStream.\nencoder nextPut: 1.\nencoder nextPut: #(2 3).\ndic := Dictionary new.\ndic at: 4 put: 5.\nencoder nextPut: dic.\nencoder nextPut: 'four' asByteArray.\nbytes := encoder contents.\nreadStream := ReadStream on: bytes.\ndecoder := MpDecoder on: readStream.\n[decoder atEnd] whileFalse: [\n        Transcript cr; show: decoder next printString\n]\n</code></pre>\n<h7>How to install</h7>\n<p>Please read <a href=\"https://github.com/msgpack/msgpack-smalltalk/blob/master/doc/HowToInstall.md\">HowToInstall.md</a>.</p>\n<h7>Loading the latest development version</h7>\n<h8>Squeak 4</h8>\n<pre><code class=\"language-Smalltalk\">Installer squeaksource\n    project: 'MessagePack';\n    install: 'ConfigurationOfMessagePack'. \n(Smalltalk at: #ConfigurationOfMessagePack) project development load\n</code></pre>\n<h8>Pharo &amp; Squeak 5+</h8>\n<pre><code class=\"language-Smalltalk\">Metacello new\n  baseline: 'MessagePack';\n  repository: 'github://msgpack/msgpack-smalltalk:develop/repository';\n  load.\n</code></pre>\n<p>You might need <code>MpTypeMapper initializeAll </code> on new encoder/decoder-related updates.</p>\n<h8>Limitation on Squeak 5+</h8>\n<p>Starting with Squeak 5 and 6, DateAndTime only supports microsecond precision. Because of this, nanosecond values are not properly decoded as DateAndTime.\nTwo unit tests (testPackUnpackTimestamp64, 96) fail on Squeak 5 and 6.</p>\n",
    "msgpack_repo_id": "msgpack-msgpack-smalltalk",
    "msgpack_repo_homepage": "https://github.com/msgpack/msgpack-smalltalk",
    "full_name": "msgpack/msgpack-smalltalk",
    "owner": "msgpack",
    "html_url": "https://github.com/msgpack/msgpack-smalltalk"
  },
  {
    "msgpack_lang": "C#",
    "msgpack_quickstart_html": "<p># Nerdbank.MessagePack</p>\n<p><em><strong>A modern, fast and NativeAOT-compatible MessagePack serialization library</strong></em></p>\n<p><a href=\"https://www.nuget.org/packages/Nerdbank.MessagePack\"><img src=\"https://img.shields.io/nuget/v/Nerdbank.MessagePack.svg\" alt=\"NuGet package\"></a>\n<a href=\"https://codecov.io/gh/AArnott/Nerdbank.MessagePack\"><img src=\"https://codecov.io/gh/AArnott/Nerdbank.MessagePack/graph/badge.svg?token=CLMWEX3M3W\" alt=\"codecov\"></a>\n<a href=\"https://github.com/AArnott/Nerdbank.MessagePack/actions/workflows/build.yml\"><img src=\"https://github.com/AArnott/Nerdbank.MessagePack/actions/workflows/build.yml/badge.svg\" alt=\"🏭 Build\"></a></p>\n<h6>Sponsorships</h6>\n<p><a href=\"https://github.com/sponsors/AArnott\">GitHub Sponsors</a>\n<a href=\"zcash:u1vv2ws6xhs72faugmlrasyeq298l05rrj6wfw8hr3r29y3czev5qt4ugp7kylz6suu04363ze92dfg8ftxf3237js0x9p5r82fgy47xkjnw75tqaevhfh0rnua72hurt22v3w3f7h8yt6mxaa0wpeeh9jcm359ww3rl6fj5ylqqv54uuwrs8q4gys9r3cxdm3yslsh3rt6p7wznzhky7\">Zcash</a></p>\n<h6>Features</h6>\n<ul>\n<li>Serializes in the compact and fast <a href=\"https://msgpack.org/\">MessagePack format</a>.</li>\n<li><a href=\"https://aarnott.github.io/Nerdbank.MessagePack/docs/performance.html\">Performance</a> is on par with the highly tuned and popular MessagePack-CSharp library.</li>\n<li>Automatically serialize any type annotated with the <a href=\"https://eiriktsarpalis.github.io/PolyType/api/PolyType.GenerateShapeAttribute.html\">PolyType <code>[GenerateShape]</code></a> attribute\nor non-annotated types by adding <a href=\"https://aarnott.github.io/Nerdbank.MessagePack/docs/type-shapes.html#witness-classes\">a 'witness' type</a> with a similar annotation.</li>\n<li>Fast <code>ref</code>-based serialization and deserialization minimizes copying of large structs.</li>\n<li>NativeAOT and trimming compatible.</li>\n<li>Serialize only properties that have non-default values (optionally).</li>\n<li>Keep memory pressure low by using async serialization directly to/from I/O like a network, IPC pipe or file.</li>\n<li><a href=\"https://aarnott.github.io/Nerdbank.MessagePack/docs/streaming-deserialization.html\">Streaming deserialization</a> for large or over-time sequences.</li>\n<li>Primitive msgpack reader and writer APIs for low-level scenarios.</li>\n<li>Author custom converters for advanced scenarios.</li>\n<li>Security mitigations for stack overflows.</li>\n<li>Optionally serialize your custom types as arrays of values instead of maps of names and value for more compact representation and even higher performance.</li>\n<li>Support for serializing instances of certain types derived from the declared type and deserializing them back to their original runtime types using <a href=\"https://aarnott.github.io/Nerdbank.MessagePack/docs/unions.html\">unions</a>.</li>\n<li>Optionally <a href=\"https://aarnott.github.io/Nerdbank.MessagePack/api/Nerdbank.MessagePack.MessagePackSerializer.html#Nerdbank_MessagePack_MessagePackSerializer_PreserveReferences\">preserve reference equality</a> across serialization/deserialization.</li>\n<li>Structural (i.e. deep, by-value) equality checking for arbitrary types, both with and without collision resistant hash functions.</li>\n</ul>\n<h6>Usage</h6>\n<p>Given a type annotated with <code>[GenerateShape]</code> like this:</p>\n<pre><code class=\"language-cs\">[GenerateShape]\npublic partial record ARecord(string AString, bool ABoolean, float AFloat, double ADouble);\n</code></pre>\n<p>You can serialize and deserialize it like this:</p>\n<pre><code class=\"language-cs\">// Construct a value.\nvar value = new ARecord(&quot;hello&quot;, true, 1.0f, 2.0);\n\n// Create a serializer instance.\nMessagePackSerializer serializer = new();\n\n// Serialize the value to the buffer.\nbyte[] msgpack = serializer.Serialize(value);\n\n// Deserialize it back.\nvar deserialized = serializer.Deserialize&lt;ARecord&gt;(msgpack);\n</code></pre>\n<p>Only the top-level types that you serialize need the attribute.\nAll types that they reference will automatically have their 'shape' source generated as well so the whole object graph can be serialized.</p>\n<h6><a name=\"perf\"></a>Performance</h6>\n<p>This library has superior startup performance compared to MessagePack-CSharp due to not relying on reflection and Ref.Emit.\nThroughput performance is on par with MessagePack-CSharp.</p>\n<p>When using AOT source generation from MessagePack-CSharp and objects serialized with maps (as opposed to arrays), MessagePack-CSharp is slightly faster at <em>de</em>serialization.\nWe may close this gap in the future by adding AOT source generation to <em>this</em> library as well.</p>\n<h6>Why another MessagePack library?</h6>\n<p><a href=\"https://github.com/MessagePack-CSharp/MessagePack-CSharp\">MessagePack-CSharp</a> is a great library, and in fact is chiefly maintained by the same author as <em>this</em> library.\nHere are some reasons a new library was created:</p>\n<ul>\n<li>MessagePack-CSharp has a long history and breaking changes are difficult to introduce.</li>\n<li>MessagePack-CSharp was not &quot;Native AOT&quot; compatible nor trim-friendly (although it has a long history of getting <em>mostly</em> there through various tricks).</li>\n<li>Nerdbank.MessagePack is based on <code>[GenerateShape]</code>, so it is <em>far</em> simpler than MessagePack-CSharp to author and maintain.</li>\n<li>Nerdbank.MessagePack has no mutable statics, with the functional unpredictability that can bring.</li>\n<li>Nerdbank.MessagePack can dynamically create converters with various options that may vary from other uses within the same process, providing more flexibility than MessagePack-CSharp's strict generic type static storage mechanism.</li>\n<li>Nerdbank.MessagePack is far simpler to use. One attribute at the base of an object graph is typically all you need. MessagePack-CSharp demands attributes on every single type and every single field or property (even members that will not be serialized).</li>\n<li>Nerdbank.MessagePack makes adding some long-sought for features from MessagePack-CSharp far easier to implement.</li>\n</ul>\n<p>See <a href=\"https://aarnott.github.io/Nerdbank.MessagePack/docs/features.html#feature-comparison\">a feature comparison table</a> that compares the two libraries.</p>\n<h6>Consuming CI builds</h6>\n<p>You can acquire CI build packages (with no assurance of quality) to get early access to the latest changes without waiting for the next release to nuget.org.</p>\n<p>There are two feeds you can use to acquire these packages:</p>\n<ul>\n<li><a href=\"https://github.com/AArnott?tab=packages&amp;repo_name=Nerdbank.MessagePack\">GitHub Packages</a> (requires GitHub authentication)</li>\n<li><a href=\"https://dev.azure.com/andrewarnott/OSS/_artifacts/feed/PublicCI\">Azure Artifacts</a> (no authentication required)</li>\n</ul>\n",
    "msgpack_repo_id": "AArnott-Nerdbank.MessagePack",
    "msgpack_repo_homepage": "https://aarnott.github.io/Nerdbank.MessagePack/",
    "full_name": "AArnott/Nerdbank.MessagePack",
    "owner": "AArnott",
    "html_url": "https://github.com/AArnott/Nerdbank.MessagePack"
  },
  {
    "msgpack_lang": "GDScript",
    "msgpack_quickstart_html": "<h5>godot-msgpack</h5>\n<p>A MessagePack serializer implemented in pure GDScript</p>\n<ul>\n<li>No dependency</li>\n<li>No native binding required</li>\n</ul>\n<h5>Installation</h5>\n<p>Copy the <code>msgpack.gd</code> at the root of the repository into your godot project</p>\n<h5>Usage</h5>\n<pre><code class=\"language-gdscript\">var Msgpack = preload(&quot;res://msgpack.gd&quot;)\n\nfunc _myfunc():\n    var data = {&quot;type&quot;: &quot;wizard&quot;, &quot;attack&quot;: 10, &quot;weapon&quot;: [&quot;dagger&quot;, &quot;staff&quot;]}\n\n    var res = Msgpack.encode(data)\n    print(res.result) # A PoolByteArray of the data encoded MessagePack\n\n    var res2 = Msgpack.decode(res.result)\n    print(res2.result) # Get back the original data\n</code></pre>\n<h6>class <code>Msgpack</code></h6>\n<h7><code>static Dictionary encode(Variant value)</code></h7>\n<p>Convert a value (number, string, array and dictionary) into their\ncounterparts in messagepack. Returns dictionary with three fields:\n<code>result</code> which is the packed data (a PoolByteArray); <code>error</code> which is the\nerror code; and <code>error_string</code> which is a human readable error message</p>\n<h7><code>static Dictionary decode(PoolByteArray bytes)</code></h7>\n<p>Convert a packed data (a PoolByteArray) back into a value, the reverse of the\nencode function. The return value is similar to the one in the encode\nmethod</p>\n<h5>Limitation</h5>\n<ul>\n<li>Only support null, boolean, integer, float, PoolByteArray, string, array and\ndictionary. No support for other data type like Vector2 and Vector3</li>\n<li>No support for the ext datatype in MessagePack</li>\n<li>Slow compare to the built-in binary serialization in godot</li>\n</ul>\n<h5>Testcases</h5>\n<pre><code>godot -s run_test.gd\n</code></pre>\n",
    "msgpack_repo_id": "xtpor-godot-msgpack",
    "msgpack_repo_homepage": "https://github.com/xtpor/godot-msgpack",
    "full_name": "xtpor/godot-msgpack",
    "owner": "xtpor",
    "html_url": "https://github.com/xtpor/godot-msgpack"
  },
  {
    "msgpack_lang": "Rust",
    "msgpack_quickstart_html": "<h5>MessagePacker - a no-std msgpack implementation</h5>\n<p><a href=\"https://crates.io/crates/msgpacker\"><img src=\"https://img.shields.io/crates/v/msgpacker?label=latest\" alt=\"crates.io\"></a>\n<a href=\"https://docs.rs/msgpacker/\"><img src=\"https://docs.rs/msgpacker/badge.svg\" alt=\"Documentation\"></a>\n<a href=\"\"><img src=\"https://img.shields.io/crates/l/msgpacker.svg\" alt=\"License\"></a></p>\n<p>The protocol specification can be found <a href=\"https://github.com/msgpack/msgpack/blob/master/spec.md\">here</a>.</p>\n<p>This crate targets simplicity and performance. No dependencies are used, just the standard Rust library.</p>\n<p>It will implement <code>Packable</code> and <code>Unpackable</code> for Rust atomic types. The traits can also be implemented manually.</p>\n<h6>Features</h6>\n<ul>\n<li>alloc: Implements the functionality for <code>Vec</code>, <code>String</code>, and unlocks custom extensions.</li>\n<li>derive: Enables <code>MsgPacker</code> derive convenience macro.</li>\n<li>strict: Will panic if there is a protocol violation of the size of a buffer; the maximum allowed size is <code>u32::MAX</code>.</li>\n<li>std: Will implement the <code>Packable</code> and <code>Unpackable</code> for <code>std</code> collections.</li>\n</ul>\n<h6>Example</h6>\n<pre><code class=\"language-rust\">use msgpacker::prelude::*;\nuse std::collections::HashMap;\n\n// boilerplate derives - those aren't required\n#[derive(Debug, PartialEq, Eq)]\n// this convenience derive macro will implement `Packable` and `Unpackable`\n#[derive(MsgPacker)]\npub struct City {\n    name: String,\n\n    // The traits are implemented for stdlib collections. If you have a custom map, you can use the\n    // directive `#[msgpacker(map)]` so the traits will be automatically implemented through the\n    // iterators of the map.\n    inhabitants_per_street: HashMap&lt;String, u64&gt;,\n\n    // This is also automatically implemented. The manual implementation is via `#[msgpacker(array)]`.\n    zones: Vec&lt;String&gt;,\n}\n\n// create an instance of a city.\nlet city = City {\n    name: &quot;Kuala Lumpur&quot;.to_string(),\n    inhabitants_per_street: HashMap::from([\n        (&quot;Street 1&quot;.to_string(), 10),\n        (&quot;Street 2&quot;.to_string(), 20),\n    ]),\n    zones: vec![&quot;Zone 1&quot;.to_string(), &quot;Zone 2&quot;.to_string()],\n};\n\n// serialize the city into bytes\nlet mut buf = Vec::new();\nlet n = city.pack(&amp;mut buf);\nprintln!(&quot;serialized {} bytes&quot;, n);\n\n// deserialize the city and assert correctness\nlet (n, deserialized) = City::unpack(&amp;buf).unwrap();\nprintln!(&quot;deserialized {} bytes&quot;, n);\nassert_eq!(city, deserialized);\n</code></pre>\n<h6>Benchmarks</h6>\n<p>Results obtained with <code>Intel(R) Core(TM) i9-9900X CPU @ 3.50GHz</code>.</p>\n<p>The simplicity of the implementation unlocks a performance more than ~10x better than <a href=\"https://crates.io/crates/rmp-serde\">rmp-serde</a>.</p>\n<h8>Pack 1.000 elements</h8>\n<p><img src=\"https://github.com/codx-dev/msgpacker/assets/8730839/ef69622d-0e2f-4bb1-b47c-6412d89fc19a\" alt=\"image\">\n<img src=\"https://github.com/codx-dev/msgpacker/assets/8730839/ce2de037-252a-4c90-b429-430d131ccf7e\" alt=\"image\"></p>\n<h8>Unpack 1.000 elements</h8>\n<p><img src=\"https://github.com/codx-dev/msgpacker/assets/8730839/5576f99d-6f37-4907-89db-5d666b13f9d5\" alt=\"image\">\n<img src=\"https://github.com/codx-dev/msgpacker/assets/8730839/234c31d2-f319-414b-9418-4103e97d0a9c\" alt=\"image\"></p>\n",
    "msgpack_repo_id": "codx-dev-msgpacker",
    "msgpack_repo_homepage": "https://msgpack.org/",
    "full_name": "codx-dev/msgpacker",
    "owner": "codx-dev",
    "html_url": "https://github.com/codx-dev/msgpacker"
  },
  {
    "msgpack_lang": "Delphi",
    "msgpack_quickstart_html": "<h7>QMsgPack-Messagepack for Delphi/C++ Builder</h7>\n<p>QMsgPack is a simple and powerful Delphi &amp; C++ Builder implementation for messagepack protocol.\nQMsgPack is a part of QDAC 3.0,Source code hosted in Sourceforge(http://sourceforge.net/p/qdac3).</p>\n<h7>Feathers</h7>\n<p>· Full types support,include messagepack extension type</p>\n<p>· Full open source,free for used in ANY PURPOSE</p>\n<p>· Quick and simple interface</p>\n<p>· RTTI support include</p>\n<h7>Install</h7>\n<p>QMsgPack is not a desgin time package.So just place QMsgPack files into search path and add to your project.</p>\n<h7>Support</h7>\n<p>· Topic in Website (http://www.qdac.cc/?cat=44) ,CHINESE only</p>\n<p>· Mail to author (chinawsb@sina.com)</p>\n<p>· Post in forum (http://tieba.baidu.com/f?kw=qdac)</p>\n<p>· QQ Group No：250530692 (http://jq.qq.com/?_wv=1027&amp;k=ZH6mZR)</p>\n<h7>Source check out</h7>\n<p>· HTTP (http://svn.code.sf.net/p/qdac3/code/)</p>\n<p>· SVN (svn://svn.code.sf.net/p/qdac3/code/)</p>\n<h7>Example</h7>\n<pre><code class=\"language-Pascal\">\nvar\n  lvMsg, lvMsg2:TQMsgPack;\n  lvBytes:TBytes;\n  s:string;\nbegin\n  lvMsg := TQMsgPack.Create;\n  lvMsg.ForcePath('key.obj').AsString := '汉字,ascii';\n    \n  //\n  lvBytes := lvMsg.Encode;\n\n  lvMsg2 := TQMsgPack.Create;\n  lvMsg2.Parse(lvBytes);\n  //\n  showMessage(lvMsg.ForcePath('key.obj').AsString);\n  ....\n  \n</code></pre>\n",
    "msgpack_repo_id": "chinawsb-qmsgpack-delphi",
    "msgpack_repo_homepage": "http://www.qdac.cc",
    "full_name": "chinawsb/qmsgpack-delphi",
    "owner": "chinawsb",
    "html_url": "https://github.com/chinawsb/qmsgpack-delphi"
  },
  {
    "msgpack_lang": "Swift",
    "msgpack_quickstart_html": "<h5>YSMessagePack- for swift 3</h5>\n<p>YSMessagePack is a messagePack packer/unpacker written in swift (swift 3 ready). It is designed to be easy to use. YSMessagePack include following features:</p>\n<ul>\n<li>Pack custom structs and classes / unpack objects by groups and apply handler to each group (easier to re-construct your struct$)</li>\n<li>Asynchronous unpacking</li>\n<li>Pack and unpack multiple message-packed data regardless of types with only one line of code</li>\n<li>Specify how many items to unpack</li>\n<li>Get remaining bytes that were not message-packed ; start packing from some index -- so you can mix messagepack with other protocol!!!</li>\n<li>Helper methods to cast NSData to desired types</li>\n<li>Operator +^ and +^= to join NSData</li>\n</ul>\n<h6>Version</h6>\n<p>1.6.2 (Dropped swift 2 support, swift 3 support only from now on)</p>\n<h6>Installation</h6>\n<ul>\n<li>Simply add files under <code>YSMessagePack/Classes</code> to your project,</li>\n<li>use cocoapod, add &quot;pod <code>'YSMessagePack', '~&gt; 1.6.2'</code> to your podfile</li>\n</ul>\n<h5>Usage</h5>\n<h7>Pack:</h7>\n<pre><code class=\"language-swift\">\nlet exampleInt: Int = 1\nlet exampleStr: String = &quot;Hello World&quot;\nlet exampleArray: [Int] = [1, 2, 3, 4, 5, 6]\nlet bool: Bool = true\n\n// To pack items, just put all of them in a single array\n// and call the `pack(items:)` function\n\n//this will be the packed data\nlet msgPackedBytes: NSData = pack(items: [true, foo, exampleInt, exampleStr, exampleArray]) \n\n// Now your payload is ready to send!!!\n\n</code></pre>\n<p>But what if we have some custom data structure to send?</p>\n<pre><code class=\"language-Swift\">\n//To make your struct / class packable\nstruct MyStruct: Packable {  //Confirm to this protocol\n    var name: String\n    var index: Int\n    func packFormat() -&gt; [Packable] { //protocol function\n        return [name, index] //pack order\n    }\n    \n    func msgtype() -&gt; MsgPackTypes {\n        return .Custom\n    }\n}\n\nlet exampleInt: Int = 1\nlet exampleStr: String = &quot;Hello World&quot;\nlet exampleArray: [Int] = [1, 2, 3, 4, 5]\nlet bool: Bool = true\n\nlet foo = MyStruct(name: &quot;foo&quot;, index: 626)\n\nlet msgPackedBytes = pack(items: [bool, foo, exampleInt, exampleStr, exampleArray])\n\n</code></pre>\n<p><strong>Or you can pack them individually and add them to a byte array manually (Which is also less expensive)</strong></p>\n<pre><code class=\"language-swift\">let exampleInt: Int = 1\nlet exampleStr: String = &quot;Hello World&quot;\nlet exampleArray: [Int] = [1, 2, 3, 4, 5, 6]\n\n//Now pack them individually\nlet packedInt = exampleInt.packed()\n\n//if you didn't specific encoding, the default encoding will be ASCII\n#if swift(&gt;=3)\nlet packedStr = exampleStr.packed(withEncoding: NSASCIIStringEncoding) \n#else\nlet packedStr = exampleStr.packed(withEncoding: .ascii)\n#endif\nlet packedArray = exampleArray.packed()\n//You can use this operator +^ the join the data on rhs to the end of data on lhs\nlet msgPackedBytes: NSData = packedInt +^ packedStr +^ packedArray\n</code></pre>\n<h6>Unpack</h6>\n<p>YSMessagePack offer a number of different ways and options to unpack include unpack asynchronously, see the example project for detail.</p>\n<p>To unpack a messagepacked bytearray is pretty easy:</p>\n<pre><code class=\"language-swift\">do {\n    //The unpack method will return an array of NSData which each element is an unpacked object\n    let unpackedItems = try msgPackedBytes.itemsUnpacked()\n    //instead of casting the NSData to the type you want, you can call these `.castTo..` methods to do the job for you\n    let int: Int = unpackedItems[2].castToInt()\n\n    //Same as packing, you can also specify the encoding you want to use, default is ASCII\n    let str: String = unpackedItem[3].castToString() \n    let array: NSArray = unpackedItems[4].castToArray() \n} catch let error as NSError{\n    NSLog(&quot;Error occurs during unpacking: %@&quot;, error)\n}\n\n//Remember how to pack your struct? Here is a better way to unpack a stream of bytes formatted in specific format\n let testObj1 = MyStruct(name: &quot;TestObject1&quot;, index: 1)\n let testObj2 = MyStruct(name: &quot;TestObject2&quot;, index: 2)\n let testObj3 = MyStruct(name: &quot;TestObject3&quot;, index: 3)\n \n let packed = packCustomObjects(testObj1, testObj2, testObj3) //This is an other method that can pack your own struct easier\n \n let nobjsInOneGroup = 2\n \n try! packed.unpackByGroupsWith(nobjsInOneGroup) {\n     (unpackedData, isLast) -&gt; Bool\n     \n     //you can also involve additional args like number of groups to unpack\n     guard let name = unpackedData[0].castToString() else {return false} //abort unpacking hen something wrong\n     let index = unpackedData[1]\n     let testObj = MyStruct(name: name, index: index) // assembly      \n     return true //proceed unpacking, or return false to abort\n } \n\n</code></pre>\n<p><strong>If you don't want to unpack every single thing included in the message-pack byte array, you can also specify an amount to unpack, if you want to keep the remaining bytes, you can put <code>true</code> in the <code>returnRemainingBytes</code> argument, the remaining bytes will stored in the end of the <code>NSData</code> array.</strong></p>\n<pre><code class=\"language-swift\">do {\n    //Unpack only 2 objects, and we are not interested in remaining bytes\n    let unpackedItems = try msgPackedBytes.itemsUnpacked(specific_amount: 2, returnRemainingBytes: false)\n    print(unpackedItems.count) //will print 2\n} catch let error as NSError{\n    NSLog(&quot;Error occurs during unpacking: %@&quot;, error)\n}\n</code></pre>\n",
    "msgpack_repo_id": "michael-yuji-YSMessagePack",
    "msgpack_repo_homepage": "https://github.com/michael-yuji/YSMessagePack",
    "full_name": "michael-yuji/YSMessagePack",
    "owner": "michael-yuji",
    "html_url": "https://github.com/michael-yuji/YSMessagePack"
  },
  {
    "msgpack_lang": "Arduino",
    "msgpack_quickstart_html": "<h5>MsgPack</h5>\n<p>MessagePack implementation for Arduino (compatible with other C++ apps)</p>\n<h6>Feature</h6>\n<ul>\n<li>one-line [serialize / deserialize] for almost all standard type of C++ same as <a href=\"https://github.com/msgpack/msgpack-c\">msgpack-c</a></li>\n<li>support custom class [serialization / deserialization]</li>\n<li>support working with <a href=\"https://github.com/bblanchon/ArduinoJson\">ArduinoJSON</a></li>\n<li>one-line [save / load] between custom serializable MsgPack class and JSON file</li>\n<li>one-line [save / load] custom serializable MsgPack class [to / from] EEPROM</li>\n</ul>\n<h6>Typical Usage</h6>\n<p>This library is only for serialize / deserialize.\nTo send / receive serialized data with <code>Stream</code> class, please use <a href=\"https://github.com/hideakitai/MsgPacketizer\">MsgPacketizer</a>.</p>\n<pre><code class=\"language-C++\">#include &lt;MsgPack.h&gt;\n\n// input to msgpack\nint i = 123;\nfloat f = 1.23;\nMsgPack::str_t s = &quot;str&quot;; // std::string or String\nMsgPack::arr_t&lt;int&gt; v {1, 2, 3}; // std::vector or arx::stdx::vector\nMsgPack::map_t&lt;String, float&gt; m {{&quot;one&quot;, 1.1}, {&quot;two&quot;, 2.2}, {&quot;three&quot;, 3.3}}; // std::map or arx::stdx::map\n\n// output from msgpack\nint ri;\nfloat rf;\nMsgPack::str_t rs;\nMsgPack::arr_t&lt;int&gt; rv;\nMsgPack::map_t&lt;String, float&gt; rm;\n\nvoid setup() {\n    delay(2000);\n    Serial.begin(115200);\n    Serial.println(&quot;msgpack test start&quot;);\n\n    // serialize to msgpack\n    MsgPack::Packer packer;\n    packer.serialize(i, f, s, v, m);\n\n    // deserialize from msgpack\n    MsgPack::Unpacker unpacker;\n    unpacker.feed(packer.data(), packer.size());\n    unpacker.deserialize(ri, rf, rs, rv, rm);\n\n    if (i != ri) Serial.println(&quot;failed: int&quot;);\n    if (f != rf) Serial.println(&quot;failed: float&quot;);\n    if (s != rs) Serial.println(&quot;failed: string&quot;);\n    if (v != rv) Serial.println(&quot;failed: vector&lt;int&gt;&quot;);\n    if (m != rm) Serial.println(&quot;failed: map&lt;string, int&gt;&quot;);\n\n    Serial.println(&quot;msgpack test success&quot;);\n}\n\nvoid loop() {}\n</code></pre>\n<h6>Encode / Decode to Collections without Container</h6>\n<p>In msgpack, there are two collection types: <code>Array</code> and <code>Map</code>.\nC++ containers will be converted to one of them but you can do that from individual parameters.\nTo <code>pack</code> / <code>unpack</code> values as such collections in a simple way, please use these functions.</p>\n<pre><code class=\"language-C++\">packer.to_array(i, f, s); // becoms array format [i, f, s];\nunpacker.from_array(ii, ff, ss); // unpack from array format to ii, ff, ss\n\npacker.to_map(&quot;i&quot;, i, &quot;f&quot;, f); // becoms {&quot;i&quot;:i, &quot;f&quot;:f}\nunpacker.from_map(ki, ii, kf, ff); // unpack from map to ii, ff, ss\n</code></pre>\n<p>The same conversion can be achieved using <code>serialize</code> and <code>deserialize</code>.</p>\n<pre><code class=\"language-C++\">packer.serialize(MsgPack::arr_size_t(3), i, f, s); // [i, f, s]\nunpacker.deserialize(MsgPack::arr_size_t(3), ii, ff, ss);\n\npacker.serialize(MsgPack::map_size_t(2), &quot;i&quot;, i, &quot;f&quot;, f); // {&quot;i&quot;:i, &quot;f&quot;:f}\nunpacker.deserialize(MsgPack::map_size_t(2), ki, ii, kf, ff);\n</code></pre>\n<p>Here, <code>MsgPack::arr_size_t</code> and <code>MsgPack::map_size_t</code> are used to identify the size of <code>Array</code> and <code>Map</code> format in <code>serialize</code> or <code>deserialize</code>.\nThis way is expandable to <code>pack</code> and <code>unpack</code> complex data structure because it can be nested.</p>\n<pre><code class=\"language-C++\">// {&quot;i&quot;:i, &quot;arr&quot;:[ii, iii]}\npacker.serialize(MsgPack::map_size_t(2), &quot;i&quot;, i, &quot;arr&quot;, MsgPack::arr_size_t(2), ii, iii);\nunpacker.deserialize(MsgPack::map_size_t(2), ki, i, karr, MsgPack::arr_size_t(2), ii, iii);\n</code></pre>\n<h6>Custom Class Adaptation</h6>\n<p>To serialize / deserialize custom type you defined, please use <code>MSGPACK_DEFINE()</code> macro inside of your class. This macro enables you to convert your custom class to <code>Array</code> format.</p>\n<pre><code class=\"language-C++\">struct CustomClass {\n    int i;\n    float f;\n    MsgPack::str_t s;\n    MSGPACK_DEFINE(i, f, s); // -&gt; [i, f, s]\n};\n</code></pre>\n<p>After that, you can <code>serialize</code> your class completely same as other types.</p>\n<pre><code class=\"language-C++\">int i;\nfloat f;\nMsgPack::str_t s;\nCustomClass c;\n\nMsgPack::Packer packer;\npacker.serialize(i, f, s, c);\n// -&gt; packer.serialize(i, f, s, arr_size_t(3), c.i, c.f, c.s)\n\nint ii;\nfloat ff;\nMsgPack::str_t ss;\nCustomClass cc;\n\nMsgPack::Unpacker unpacker;\nunpacker.feed(packer.data(), packer.size());\nunpacker.deserialize(ii, ff, ss, cc);\n</code></pre>\n<p>You can also wrap your custom class to <code>Map</code> format by using <code>MSGPACK_DEFINE_MAP</code> macro.\nPlease note that you need &quot;key&quot; string for <code>Map</code> format.</p>\n<pre><code class=\"language-C++\">struct CustomClass {\n    MsgPack::str_t key_i {&quot;i&quot;}; int i;\n    MsgPack::str_t key_f {&quot;f&quot;}; float f;\n    MSGPACK_DEFINE_MAP(key_i, i, key_f, f); // -&gt; {&quot;i&quot;:i, &quot;f&quot;:f}\n};\n\nCustomClass c;\nMsgPack::Packer packer;\npacker.serialize(c);\n// -&gt; packer.serialize(map_size_t(2), c.key_i, c.i, c.key_f, c.f)\n\nCustomClass cc;\nMsgPack::Unpacker unpacker;\nunpacker.feed(packer.data(), packer.size());\nunpacker.deserialize(cc);\n</code></pre>\n<h7>Custom Class with Inheritance</h7>\n<p>Also you can use <code>MSGPACK_BASE()</code> macro to pack values of base class.</p>\n<pre><code class=\"language-C++\">struct Base {\n    int i;\n    float f;\n    MSGPACK_DEFINE(i, f);\n};\n\nstruct Derived : public Base {\n    MsgPack::str_t s;\n    MSGPACK_DEFINE(s, MSGPACK_BASE(Base));\n    // -&gt; packer.serialize(arr_size_t(2), s, arr_size_t(2), Base::i, Base::f)\n};\n</code></pre>\n<p>If you wamt to use <code>Map</code> format in derived class, add &quot;key&quot; for your <code>MSGPACK_BASE</code>.</p>\n<pre><code class=\"language-C++\">struct Derived : public Base {\n    MsgPack::str_t key_s; MsgPack::str_t s;\n    MsgPack::str_t key_b; // key for base class\n    MSGPACK_DEFINE_MAP(key_s, s, key_b, MSGPACK_BASE(Base));\n    // -&gt; packer.serialize(map_size_t(2), key_s, s, key_b, arr_size_t(2), Base::i, Base::f)\n};\n</code></pre>\n<h7>Nested Custom Class</h7>\n<p>You can nest custom classes to express complex data structure.</p>\n<pre><code class=\"language-C++\">// serialize and deserialize nested structure\n// {&quot;i&quot;:i, &quot;f&quot;:f, &quot;a&quot;:[&quot;str&quot;, {&quot;first&quot;:1, &quot;second&quot;:&quot;two&quot;}]}\n\n// {&quot;first&quot;:1, &quot;second&quot;:&quot;two&quot;}\nstruct MyMap {\n    MsgPack::str_t key_first; int i;\n    MsgPack::str_t key_second; MsgPack::str_t s;\n    MSGPACK_DEFINE_MAP(key_first, i, key_second, s);\n};\n\n// [&quot;str&quot;, {&quot;first&quot;:1, &quot;second&quot;:&quot;two&quot;}]\nstruct MyArr {\n    MsgPack::str_t s;\n    MyMap m;\n    MSGPACK_DEFINE(s, m):\n};\n\n// {&quot;i&quot;:i, &quot;f&quot;:f, &quot;a&quot;:[&quot;str&quot;, {&quot;first&quot;:1, &quot;second&quot;:&quot;two&quot;}]}\nstruct MyNestedClass {\n    MsgPack::str_t key_i; int i;\n    MsgPack::str_t key_f; int f;\n    MsgPack::str_t key_a;\n    MyArr arr;\n    MSGPACK_DEFINE_MAP(key_i, i, key_f, f, key_a, arr);\n};\n</code></pre>\n<p>And you can <code>serialize</code> / <code>deserialize</code> as same as other types.</p>\n<pre><code class=\"language-C++\">MyNestedClass c;\nMsgPack::Packer packer;\npacker.serialize(c);\n\nMyNestedClass cc;\nMsgPack::Unpacker unpacker;\nunpacker.feed(packer.data(), packer.size());\nunpacker.deserialize(cc);\n</code></pre>\n<h6>JSON and Other language's msgpack compatibility</h6>\n<p>In other languages like JavaScript, Python and etc. has also library for msgpack.\nBut some libraries can NOT convert msgpack in &quot;plain&quot; style.\nThey always wrap them into collections like <code>Array</code> or <code>Map</code> by default.\nFor example, you can't convert &quot;plain&quot; format in other languages.</p>\n<pre><code class=\"language-C++\">packer.serialize(i, f, s);                // &quot;plain&quot; format is NOT unpackable\npacker.serialize(arr_size_t(3), i, f, s); // unpackable if you wrap that into Array\n</code></pre>\n<p>It is because the msgpack is used as based on JSON (I think).\nSo you need to use <code>Array</code> format for JSON array, and <code>Map</code> for Json Object.\nTo achieve that, there are several ways.</p>\n<ul>\n<li>use <code>to_array</code> or <code>to_map</code> to convert to simple structure</li>\n<li>use <code>serialize()</code> or <code>deserialize()</code> with <code>arr_size_t</code> / <code>map_size_t</code> for complex structure</li>\n<li>use custom class as JSON array / object which is wrapped into <code>Array</code> / <code>Map</code></li>\n<li>use custom class nest recursively for more complex structure</li>\n<li>use <code>ArduinoJson</code> for more flexible handling of JSON</li>\n</ul>\n<h7>Use MsgPack with ArduinoJson</h7>\n<ul>\n<li>you can [serialize / deserialize] <code>StaticJsonDocument&lt;N&gt;</code> and <code>DynamicJsonDocument</code> directly</li>\n</ul>\n<pre><code class=\"language-C++\">#include &lt;ArduinoJson.h&gt;  // include before MsgPack.h\n#include &lt;MsgPack.h&gt;\n\nvoid setup() {\n    StaticJsonDocument&lt;200&gt; doc_in;\n    MsgPack::Packer packer;\n    packer.serialize(doc_in); // serialize directly\n\n    StaticJsonDocument&lt;200&gt; doc;\n    MsgPack::Unpacker unpacker;\n    unpacker.feed(packer.data(), packer.size());\n    unpacker.deserialize(doc); // deserialize directly\n}\n</code></pre>\n<h6>Utilities</h6>\n<h7>Save/Load to/from JSON file directly from/to MsgPack</h7>\n<p>You can directly save/load to/from JSON file with this library. <code>SD</code>, <code>SdFat</code>, <code>SD_MMC</code>, <code>SPIFFS</code>, etc. are available for the target file system. Please see <code>save_load_as_json_file</code> example for more details.</p>\n<pre><code class=\"language-C++\">#include &lt;SD.h&gt;\n#include &lt;MsgPack.h&gt;\n\nstruct MyConfig {\n    Meta meta;\n    Data data;\n    MSGPACK_DEFINE(meta, data);\n};\n\nMyConfig config;\n\nvoid setup() {\n    SD.begin();\n\n    // load json data from /config.txt to config struct directly\n    MsgPack::file::load_from_json_static&lt;256&gt;(SD, &quot;/config.txt&quot;, config);\n\n    // change your configuration...\n\n    // save config data from config struct to /config.txt as json directly\n    MsgPack::file::save_as_json_static&lt;256&gt;(SD, &quot;/config.txt&quot;, config);\n}\n</code></pre>\n<h7>Save/Load to/from EEPROM with MsgPack</h7>\n<p>In Arduino, you can use the MsgPack utility to save/load to/from EEPROM. Following code shows how to use them. Please see <code>save_load_eeprom</code> example for more details.</p>\n<pre><code class=\"language-C++\">struct MyConfig {\n    Meta meta;\n    Data data;\n    MSGPACK_DEFINE(meta, data);\n};\n\nMyConfig config;\n\nvoid setup() {\n    EEPROM.begin();\n\n    // load current config\n    MsgPack::eeprom::load(config);\n\n    // change your configuration...\n\n    // save\n    MsgPack::eeprom::save(config);\n\n    EEPROM.end();\n}\n</code></pre>\n<h6>Supported Type Adaptors</h6>\n<p>These are the lists of types which can be <code>serialize</code> and <code>deserialize</code>.\nYou can also <code>pack()</code> or <code>unpack()</code> variable one by one.</p>\n<h7>NIL</h7>\n<ul>\n<li><code>MsgPack::object::nil_t</code></li>\n</ul>\n<h7>Bool</h7>\n<ul>\n<li><code>bool</code></li>\n</ul>\n<h7>Integer</h7>\n<ul>\n<li><code>char (signed/unsigned)</code></li>\n<li><code>ints (signed/unsigned)</code></li>\n</ul>\n<h7>Float</h7>\n<ul>\n<li><code>float</code></li>\n<li><code>double</code></li>\n</ul>\n<h7>Str</h7>\n<ul>\n<li><code>char*</code></li>\n<li><code>char[]</code></li>\n<li><code>std::string</code> or <code>String(Arduino)</code> (<code>MsgPack::str_t</code>)</li>\n</ul>\n<h7>Bin</h7>\n<ul>\n<li><code>unsigned char*</code> (need to <code>serialize(ptr, size)</code> or <code>pack(ptr, size)</code>)</li>\n<li><code>unsigned char[]</code> (need to <code>serialize(ptr, size)</code> or <code>pack(ptr, size)</code>)</li>\n<li><code>std::vector&lt;char&gt;</code> (<code>MsgPack::bin_t&lt;char&gt;</code>)</li>\n<li><code>std::vector&lt;unsigned char&gt;</code> (<code>MsgPack::bin_t&lt;unsigned char&gt;</code>)</li>\n<li><code>std::array&lt;char&gt;</code></li>\n<li><code>std::array&lt;unsigned char&gt;</code></li>\n</ul>\n<h7>Array</h7>\n<ul>\n<li><code>T[]</code> (need to <code>serialize(ptr, size)</code> or <code>pack(ptr, size)</code>)</li>\n<li><code>std::vector</code> (<code>MsgPack::arr_t&lt;T&gt;</code>)</li>\n<li><code>std::array</code> (<code>MsgPack::fix_arr_t&lt;T, N&gt;</code>)</li>\n<li><code>std::deque</code></li>\n<li><code>std::pair</code></li>\n<li><code>std::tuple</code></li>\n<li><code>std::list</code></li>\n<li><code>std::forward_list</code></li>\n<li><code>std::set</code></li>\n<li><code>std::multiset</code></li>\n<li><code>std::unordered_set</code></li>\n<li><code>std::unordered_multiset</code></li>\n</ul>\n<h7>Map</h7>\n<ul>\n<li><code>std::map</code> (<code>MsgPack::map_t&lt;T&gt;</code>)</li>\n<li><code>std::multimap</code></li>\n<li><code>std::unordered_map</code></li>\n<li><code>std::unordered_multimap</code></li>\n</ul>\n<h7>Ext</h7>\n<ul>\n<li><code>MsgPack::object::ext</code></li>\n</ul>\n<h7>TimeStamp</h7>\n<ul>\n<li><code>MsgPack::object::timespec</code></li>\n</ul>\n<h7>N/A</h7>\n<ul>\n<li><code>std::queue</code></li>\n<li><code>std::priority_queue</code></li>\n<li><code>std::bitset</code></li>\n<li><code>std::stack</code></li>\n</ul>\n<h7>Note</h7>\n<ul>\n<li><code>unordered_xxx</code> cannot be used in all Arduino</li>\n<li>C-style array and pointers are supported only packing.</li>\n<li>for NO-STL Arduino, following types can be used\n<ul>\n<li>all types of NIL, Bool, Integer, Float, Str, Bin</li>\n<li>for Array, only <code>T[]</code>, <code>MsgPack::arr_t&lt;T&gt;</code> (<code>arx::stdx::vector&lt;T&gt;</code>), and <code>MsgPack::fix_arr_t&lt;T, N&gt;</code> (<code>arx::stdx::array&lt;T, N&gt;</code>) can be used</li>\n<li>for Map, only <code>MsgPack::map_t&lt;T, U&gt;</code> (<code>arx::stdx::map&lt;T, U&gt;</code>) can be used</li>\n<li>for the detail of <code>arx::stdx::xxx</code>, see <a href=\"https://github.com/hideakitai/ArxContainer\">ArxContainer</a></li>\n</ul>\n</li>\n</ul>\n<h7>Additional Types for MsgPack</h7>\n<p>There are some additional types are defined to express msgpack formats easily.</p>\n<h8>Type Aliases for Str / Bin / Array / Map</h8>\n<p>These types have type aliases like this:</p>\n<ul>\n<li><code>MsgPack::str_t</code> = <code>String</code> (Arduino only)</li>\n<li><code>MsgPack::bin_t&lt;T&gt;</code> = <code>std::vector&lt;T&gt;</code></li>\n<li><code>MsgPack::arr_t&lt;T&gt;</code> = <code>std::vector&lt;T&gt;</code></li>\n<li><code>MsgPack::fix_arr_t&lt;T, N&gt;</code> = <code>std::array&lt;T, N&gt;</code></li>\n<li><code>MsgPack::map_t&lt;T, U&gt;</code> = <code>std::map&lt;T, U&gt;</code></li>\n</ul>\n<p>For general C++ apps (not Arduino), <code>str_t</code> is defined as:</p>\n<ul>\n<li><code>MsgPack::str_t</code> = <code>std::string</code></li>\n</ul>\n<h8>MsgPack::obeject::nil_t</h8>\n<p><code>MsgPack::object::nil_t</code> is used to <code>pack</code> and <code>unpack</code> Nil type.\nThis object is just a dummy and do nothing.</p>\n<h8>MsgPack::obeject::ext</h8>\n<p><code>MsgPack::object::ext</code> holds binary data of Ext type.</p>\n<pre><code class=\"language-C++\">// create ext type with args: int8_t, const uint8_t*, uint32_t\nMsgPack::object::ext e(type, bin_ptr, size);\nMsgPack::Packer packer;\npacker.serialize(e); // serialize ext type\n\nMsgPack::object::ext r;\nmsgPack::Unpacker unpacker;\nunpacker.feed(packer.data(), packer.size());\nunpacker.deserialize(r); // deserialize ext type\n</code></pre>\n<h8>MsgPack::obeject::timespec</h8>\n<p><code>MsgPack::object::timespec</code> is used to <code>pack</code> and <code>unpack</code> Timestamp type.</p>\n<pre><code class=\"language-C++\">MsgPack::object::timespec t = {\n    .tv_sec  = 123456789, /* int64_t  */\n    .tv_usec = 123456789  /* uint32_t */\n};\nMsgPack::Packer packer;\npacker.serialize(t); // serialize timestamp type\n\nMsgPack::object::timespec r;\nmsgPack::Unpacker unpacker;\nunpacker.feed(packer.data(), packer.size());\nunpacker.deserialize(r); // deserialize timestamp type\n</code></pre>\n<h6>Other Options</h6>\n<h7>Enable Error Info</h7>\n<p>Error information report is disabled by default. You can enable it by defining this macro.</p>\n<pre><code class=\"language-C++\">#define MSGPACK_DEBUGLOG_ENABLE\n</code></pre>\n<p>Also you can change debug info stream by calling this macro (default: <code>Serial</code>).</p>\n<pre><code class=\"language-C++\">DEBUG_LOG_ATTACH_STREAM(Serial1);\n</code></pre>\n<p>See <a href=\"https://github.com/hideakitai/DebugLog\">DebugLog</a> for details.</p>\n<h7>Packet Data Storage Class Inside</h7>\n<p>STL is used to handle packet data by default, but for following boards/architectures, <a href=\"https://github.com/hideakitai/ArxContainer\">ArxContainer</a> is used to store the packet data because STL can not be used for such boards.\nThe storage size of such boards for max packet binary size and number of msgpack objects are limited.</p>\n<ul>\n<li>AVR</li>\n<li>megaAVR</li>\n<li>SAMD</li>\n</ul>\n<h7>Memory Management (for NO-STL Boards)</h7>\n<p>As mentioned above, for such boards like Arduino Uno, the storage sizes are limited.\nAnd of course you can manage them by defining following macros.\nBut these default values are optimized for such boards, please be careful not to excess your boards storage/memory.</p>\n<pre><code class=\"language-C++\">// msgpack serialized binary size\n#define MSGPACK_MAX_PACKET_BYTE_SIZE  128\n// max size of MsgPack::arr_t\n#define MSGPACK_MAX_ARRAY_SIZE          8\n// max size of MsgPack::map_t\n#define MSGPACK_MAX_MAP_SIZE            8\n// msgpack objects size in one packet\n#define MSGPACK_MAX_OBJECT_SIZE        24\n</code></pre>\n<p>These macros have no effect for STL enabled boards.</p>\n<p>In addtion for such boards, type aliases for following types are different from others.</p>\n<ul>\n<li><code>MsgPack::str_t</code> = <code>String</code></li>\n<li><code>MsgPack::bin_t&lt;T&gt;</code> = <code>arx::stdx::vector&lt;T, N = MSGPACK_MAX_PACKET_BYTE_SIZE&gt;</code></li>\n<li><code>MsgPack::arr_t&lt;T&gt;</code> = <code>arx::stdx::vector&lt;T, N = MSGPACK_MAX_ARRAY_SIZE&gt;</code></li>\n<li><code>MsgPack::map_t&lt;T, U&gt;</code> = <code>arx::stdx::map&lt;T, U, N = MSGPACK_MAX_MAP_SIZE&gt;</code></li>\n</ul>\n<p>Please see &quot;Memory Management&quot; section and <a href=\"https://github.com/hideakitai/ArxContainer\">ArxContainer</a> for detail.</p>\n<h7>STL library for Arduino Support</h7>\n<p>For such boards, there are several STL libraries, like <a href=\"https://github.com/mike-matera/ArduinoSTL\">ArduinoSTL</a>, <a href=\"https://github.com/maniacbug/StandardCplusplus\">StandardCPlusPlus</a>, and so on.\nBut such libraries are mainly based on <a href=\"https://cxx.uclibc.org/\">uClibc++</a> and it has many lack of function.\nI considered to support them but I won't support them unless uClibc++ becomes much better compatibility to standard C++ library.\nI reccomend to use low cost but much better performance chip like ESP series.</p>\n<h6>Dependent Libraries</h6>\n<ul>\n<li><a href=\"https://github.com/hideakitai/ArxContainer\">ArxContainer</a></li>\n<li><a href=\"https://github.com/hideakitai/ArxTypeTraits\">ArxTypeTraits</a></li>\n<li><a href=\"https://github.com/hideakitai/DebugLog\">DebugLog</a></li>\n</ul>\n<h6>Embedded Libraries</h6>\n<ul>\n<li><a href=\"https://github.com/hideakitai/TeensyDirtySTLErrorSolution\">TeensyDirtySTLErrorSolution v0.1.0</a></li>\n</ul>\n<h6>Used Inside of</h6>\n<ul>\n<li><a href=\"https://github.com/hideakitai/MsgPacketizer\">MsgPacketizer</a></li>\n</ul>\n<h6>APIs</h6>\n<h7>MsgPack::Packer</h7>\n<pre><code class=\"language-C++\">// reserve internal buffer\nvoid reserve_buffer(const size_t size);\n\n// variable sized serializer for any type\ntemplate &lt;typename First, typename ...Rest&gt;\nvoid serialize(const First&amp; first, Rest&amp;&amp;... rest);\ntemplate &lt;typename T&gt;\nvoid serialize(const arr_size_t&amp; arr_size, Args&amp;&amp;... args);\ntemplate &lt;typename ...Args&gt;\nvoid serialize(const map_size_t&amp; map_size, Args&amp;&amp;... args);\ntemplate &lt;size_t N&gt;\nvoid serialize(const StaticJsonDocument&lt;N&gt;&amp; doc, const size_t num_max_string_type = 32);\nvoid serialize(const DynamicJsonDocument&amp; doc, const size_t num_max_string_type = 32);\nvoid serialize_arduinojson(const JsonDocument&amp; doc, const size_t num_max_string_type = 32);\n\n// variable sized serializer to array or map for any type\ntemplate &lt;typename ...Args&gt;\nvoid to_array(Args&amp;&amp;... args);\ntemplate &lt;typename ...Args&gt;\nvoid to_map(Args&amp;&amp;... args);\n\n// single arg packer for any type\ntemplate &lt;typename T&gt;\nvoid pack&lt;T&gt;(const T&amp; t);\ntemplate &lt;typename T&gt;\nvoid pack&lt;T&gt;(const T* ptr, const size_t size); // only for pointer types\n\n// accesor and utility for serialized binary data\nconst bin_t&lt;uint8_t&gt;&amp; packet() const;\nconst uint8_t* data() const;\nsize_t size() const;\nsize_t indices() const;\nvoid clear();\n\n// abstract serializer for msgpack formats\n// serialize() and pack() are wrapper for these methods\nvoid packInteger(const T&amp; value); // accept both uint and int\nvoid packFloat(const T&amp; value);\nvoid packString(const T&amp; str);\nvoid packString(const T&amp; str, const size_t len);\nvoid packBinary(const uint8_t* bin, const size_t size);\nvoid packArraySize(const size_t size);\nvoid packMapSize(const size_t size);\nvoid packFixExt(const int8_t type, const T value);\nvoid packFixExt(const int8_t type, const uint64_t value_h, const uint64_t value_l);\nvoid packFixExt(const int8_t type, const uint8_t* ptr, const uint8_t size);\nvoid packFixExt(const int8_t type, const uint16_t* ptr, const uint8_t size);\nvoid packFixExt(const int8_t type, const uint32_t* ptr, const uint8_t size);\nvoid packFixExt(const int8_t type, const uint64_t* ptr, const uint8_t size);\nvoid packExt(const int8_t type, const T* ptr, const U size);\nvoid packExt(const object::ext&amp; e);\nvoid packTimestamp(const object::timespec&amp; time);\n\n// serializer for detailed msgpack format\n// serialize() and pack() are wrapper for these methods\nvoid packNil();\nvoid packNil(const object::nil_t&amp; n);\nvoid packBool(const bool b);\nvoid packUInt7(const uint8_t value);\nvoid packUInt8(const uint8_t value);\nvoid packUInt16(const uint16_t value);\nvoid packUInt32(const uint32_t value);\nvoid packUInt64(const uint64_t value);\nvoid packInt5(const int8_t value);\nvoid packInt8(const int8_t value);\nvoid packInt16(const int16_t value);\nvoid packInt32(const int32_t value);\nvoid packInt64(const int64_t value);\nvoid packFloat32(const float value);\nvoid packFloat64(const double value);\nvoid packString5(const str_t&amp; str);\nvoid packString5(const str_t&amp; str, const size_t len);\nvoid packString5(const char* value);\nvoid packString5(const char* value, const size_t len);\nvoid packString8(const str_t&amp; str);\nvoid packString8(const str_t&amp; str, const size_t len);\nvoid packString8(const char* value);\nvoid packString8(const char* value, const size_t len);\nvoid packString16(const str_t&amp; str);\nvoid packString16(const str_t&amp; str, const size_t len);\nvoid packString16(const char* value);\nvoid packString16(const char* value, const size_t len);\nvoid packString32(const str_t&amp; str);\nvoid packString32(const str_t&amp; str, const size_t len);\nvoid packString32(const char* value);\nvoid packString32(const char* value, const size_t len);\nvoid packString5(const __FlashStringHelper* str);\nvoid packString5(const __FlashStringHelper* str, const size_t len);\nvoid packString8(const __FlashStringHelper* str);\nvoid packString8(const __FlashStringHelper* str, const size_t len);\nvoid packString16(const __FlashStringHelper* str);\nvoid packString16(const __FlashStringHelper* str, const size_t len);\nvoid packString32(const __FlashStringHelper* str);\nvoid packString32(const __FlashStringHelper* str, const size_t len);\nvoid packBinary8(const uint8_t* value, const uint8_t size);\nvoid packBinary16(const uint8_t* value, const uint16_t size);\nvoid packBinary32(const uint8_t* value, const uint32_t size);\nvoid packArraySize4(const uint8_t value);\nvoid packArraySize16(const uint16_t value);\nvoid packArraySize32(const uint32_t value);\nvoid packMapSize4(const uint8_t value);\nvoid packMapSize16(const uint16_t value);\nvoid packMapSize32(const uint32_t value);\nvoid packFixExt1(const int8_t type, const uint8_t value);\nvoid packFixExt2(const int8_t type, const uint16_t value);\nvoid packFixExt2(const int8_t type, const uint8_t* ptr);\nvoid packFixExt2(const int8_t type, const uint16_t* ptr);\nvoid packFixExt4(const int8_t type, const uint32_t value);\nvoid packFixExt4(const int8_t type, const uint8_t* ptr);\nvoid packFixExt4(const int8_t type, const uint32_t* ptr);\nvoid packFixExt8(const int8_t type, const uint64_t value);\nvoid packFixExt8(const int8_t type, const uint8_t* ptr);\nvoid packFixExt8(const int8_t type, const uint64_t* ptr);\nvoid packFixExt16(const int8_t type, const uint64_t value_h, const uint64_t value_l);\nvoid packFixExt16(const int8_t type, const uint8_t* ptr);\nvoid packFixExt16(const int8_t type, const uint64_t* ptr);\nvoid packExtSize8(const int8_t type, const uint8_t size);\nvoid packExtSize16(const int8_t type, const uint16_t size);\nvoid packExtSize32(const int8_t type, const uint32_t size);\nvoid packTimestamp32(const uint32_t unix_time_sec);\nvoid packTimestamp64(const uint64_t unix_time);\nvoid packTimestamp64(const uint64_t unix_time_sec, const uint32_t unix_time_nsec);\nvoid packTimestamp96(const int64_t unix_time_sec, const uint32_t unix_time_nsec);\n</code></pre>\n<h7>MsgPack::Unpacker</h7>\n<pre><code class=\"language-C++\">// reserve internal buffer for indices\nvoid reserve_indices(const size_t size);\n\n// feed data to deserialize\nbool feed(const uint8_t* data, size_t size);\n\n// variable sized deserializer\ntemplate &lt;typename First, typename ...Rest&gt;\nbool deserialize(First&amp; first, Rest&amp;&amp;... rest);\ntemplate &lt;size_t N&gt;\nbool deserialize(StaticJsonDocument&lt;N&gt;&amp; doc);\nbool deserialize(DynamicJsonDocument&amp; doc);\n\n// varibale sized desrializer for array and map\ntemplate &lt;typename ...Args&gt;\nbool from_array(Args&amp;&amp;... args);\ntemplate &lt;typename ...Args&gt;\nbool from_map(Args&amp;&amp;... args);\n\n// single arg deserializer\ntemplate &lt;typename T&gt;\nbool unpack(T&amp; value);\n\n// check if next arg can be deserialized to value\ntemplate &lt;typename T&gt;\nbool unpackable(const T&amp; value) const;\n\n// accesor and utility for deserialized msgpack data\nbool decode_ready() const;\nbool decoded() const;\nsize_t size() const;\nvoid index(const size_t i);\nsize_t index() const;\nvoid clear();\n\n// abstract deserializer for msgpack formats\n// deserialize() and unpack() are wrapper for these methods\nT unpackUInt();\nT unpackInt();\nT unpackFloat();\nstr_t unpackString();\nbin_t&lt;T&gt; unpackBinary();\nbin_t&lt;T&gt; unpackBinary();\nsize_t unpackArraySize();\nsize_t unpackMapSize();\nobject::ext unpackExt();\nobject::timespec unpackTimestamp();\n\n// deserializer for detailed msgpack format\n// these methods check deserialize index overflow and type mismatch\n// deserialize() and unpack() are wrapper for these methods\nbool unpackNil();\nbool unpackBool();\nuint8_t unpackUInt7();\nuint8_t unpackUInt8();\nuint16_t unpackUInt16();\nuint32_t unpackUInt32();\nuint64_t unpackUInt64();\nint8_t unpackInt5();\nint8_t unpackInt8();\nint16_t unpackInt16();\nint32_t unpackInt32();\nint64_t unpackInt64();\nfloat unpackFloat32();\ndouble unpackFloat64();\nstr_t unpackString5();\nstr_t unpackString8();\nstr_t unpackString16();\nstr_t unpackString32();\nbin_t&lt;T&gt; unpackBinary8();\nbin_t&lt;T&gt; unpackBinary16();\nbin_t&lt;T&gt; unpackBinary32();\nstd::array&lt;T, N&gt; unpackBinary8();\nstd::array&lt;T, N&gt; unpackBinary16();\nstd::array&lt;T, N&gt; unpackBinary32();\nsize_t unpackArraySize4();\nsize_t unpackArraySize16();\nsize_t unpackArraySize32();\nsize_t unpackMapSize4();\nsize_t unpackMapSize16();\nsize_t unpackMapSize32();\nobject::ext unpackFixExt1();\nobject::ext unpackFixExt2();\nobject::ext unpackFixExt4();\nobject::ext unpackFixExt8();\nobject::ext unpackFixExt16();\nobject::ext unpackExt8();\nobject::ext unpackExt16();\nobject::ext unpackExt32();\nobject::timespec unpackTimestamp32();\nobject::timespec unpackTimestamp64();\nobject::timespec unpackTimestamp96();\n\n// deserializer for detailed msgpack format\n// these methods does NOT check index overflow and type mismatch\nbool unpackNilUnchecked();\nbool unpackBoolUnchecked();\nuint8_t unpackUIntUnchecked7();\nuint8_t unpackUIntUnchecked8();\nuint16_t unpackUIntUnchecked16();\nuint32_t unpackUIntUnchecked32();\nuint64_t unpackUIntUnchecked64();\nint8_t unpackIntUnchecked5();\nint8_t unpackIntUnchecked8();\nint16_t unpackIntUnchecked16();\nint32_t unpackIntUnchecked32();\nint64_t unpackIntUnchecked64();\nfloat unpackFloatUnchecked32();\ndouble unpackFloatUnchecked64();\nstr_t unpackStringUnchecked5();\nstr_t unpackStringUnchecked8();\nstr_t unpackStringUnchecked16();\nstr_t unpackStringUnchecked32();\nbin_t&lt;T&gt; unpackBinaryUnchecked8();\nbin_t&lt;T&gt; unpackBinaryUnchecked16();\nbin_t&lt;T&gt; unpackBinaryUnchecked32();\nstd::array&lt;T, N&gt; unpackBinaryUnchecked8();\nstd::array&lt;T, N&gt; unpackBinaryUnchecked16();\nstd::array&lt;T, N&gt; unpackBinaryUnchecked32();\nsize_t unpackArraySizeUnchecked4();\nsize_t unpackArraySizeUnchecked16();\nsize_t unpackArraySizeUnchecked32();\nsize_t unpackMapSizeUnchecked4();\nsize_t unpackMapSizeUnchecked16();\nsize_t unpackMapSizeUnchecked32();\nobject::ext unpackFixExtUnchecked1();\nobject::ext unpackFixExtUnchecked2();\nobject::ext unpackFixExtUnchecked4();\nobject::ext unpackFixExtUnchecked8();\nobject::ext unpackFixExtUnchecked16();\nobject::ext unpackExtUnchecked8();\nobject::ext unpackExtUnchecked16();\nobject::ext unpackExtUnchecked32();\nobject::timespec unpackTimestampUnchecked32();\nobject::timespec unpackTimestampUnchecked64();\nobject::timespec unpackTimestampUnchecked96();\n\n// checks types of next msgpack object\nbool isNil() const;\nbool isBool() const;\nbool isUInt7() const;\nbool isUInt8() const;\nbool isUInt16() const;\nbool isUInt32() const;\nbool isUInt64() const;\nbool isUInt() const;\nbool isInt5() const;\nbool isInt8() const;\nbool isInt16() const;\nbool isInt32() const;\nbool isInt64() const;\nbool isInt() const;\nbool isFloat32() const;\nbool isFloat64() const;\nbool isFloat() const;\nbool isStr5() const;\nbool isStr8() const;\nbool isStr16() const;\nbool isStr32() const;\nbool isStr() const;\nbool isBin8() const;\nbool isBin16() const;\nbool isBin32() const;\nbool isBin() const;\nbool isArray4() const;\nbool isArray16() const;\nbool isArray32() const;\nbool isArray() const;\nbool isMap4() const;\nbool isMap16() const;\nbool isMap32() const;\nbool isMap() const;\nbool isFixExt1() const;\nbool isFixExt2() const;\nbool isFixExt4() const;\nbool isFixExt8() const;\nbool isFixExt16() const;\nbool isFixExt() const;\nbool isExt8() const;\nbool isExt16() const;\nbool isExt32() const;\nbool isExt() const;\nbool isTimestamp32() const;\nbool isTimestamp64() const;\nbool isTimestamp96() const;\nbool isTimestamp() const;\nMsgPack::Type getType() const\n</code></pre>\n<h7>MsgPack Utilities</h7>\n<pre><code class=\"language-C++\">template &lt;typename T&gt;\ninline size_t estimate_size(const T&amp; msg);\n\nnamespace file {\n    template &lt;typename FsType, typename T&gt;\n    inline bool save_as_json(FsType&amp; fs, const String&amp; path, const T&amp; value, JsonDocument&amp; doc);\n    template &lt;size_t N, typename FsType, typename T&gt;\n    inline bool save_as_json_static(FsType&amp; fs, const String&amp; path, const T&amp; value);\n    template &lt;typename FsType, typename T&gt;\n    inline bool save_as_json_dynamic(FsType&amp; fs, const String&amp; path, const T&amp; value, const size_t json_size = 512);\n\n    template &lt;typename FsType, typename T&gt;\n    inline bool load_from_json(FsType&amp; fs, const String&amp; path, T&amp; value, JsonDocument&amp; doc, const size_t num_max_string_type = 32);\n    template &lt;size_t N, typename FsType, typename T&gt;\n    inline bool load_from_json_static(FsType&amp; fs, const String&amp; path, T&amp; value);\n    template &lt;typename FsType, typename T&gt;\n    inline bool load_from_json_dynamic(FsType&amp; fs, const String&amp; path, T&amp; value, const size_t json_size = 512);\n}\n\nnamespace eeprom {\n    template &lt;typename T&gt;\n    inline bool save(const T&amp; value, const size_t index_offset = 0);\n    template &lt;typename T&gt;\n    inline bool load(T&amp; value, const size_t index_offset = 0);\n    template &lt;typename T&gt;\n    inline void clear(const T&amp; value, const size_t index_offset = 0);\n    inline void clear_size(const size_t size, const size_t index_offset = 0);\n}\n</code></pre>\n<h7>MsgPack::Type</h7>\n<pre><code class=\"language-C++\">enum class Type : uint8_t {\n    NA          = 0xC1, // never used\n    NIL         = 0xC0,\n    BOOL        = 0xC2,\n    UINT7       = 0x00, // same as POSITIVE_FIXINT\n    UINT8       = 0xCC,\n    UINT16      = 0xCD,\n    UINT32      = 0xCE,\n    UINT64      = 0xCF,\n    INT5        = 0xE0, // same as NEGATIVE_FIXINT\n    INT8        = 0xD0,\n    INT16       = 0xD1,\n    INT32       = 0xD2,\n    INT64       = 0xD3,\n    FLOAT32     = 0xCA,\n    FLOAT64     = 0xCB,\n    STR5        = 0xA0, // same as FIXSTR\n    STR8        = 0xD9,\n    STR16       = 0xDA,\n    STR32       = 0xDB,\n    BIN8        = 0xC4,\n    BIN16       = 0xC5,\n    BIN32       = 0xC6,\n    ARRAY4      = 0x90, // same as FIXARRAY\n    ARRAY16     = 0xDC,\n    ARRAY32     = 0xDD,\n    MAP4        = 0x80, // same as FIXMAP\n    MAP16       = 0xDE,\n    MAP32       = 0xDF,\n    FIXEXT1     = 0xD4,\n    FIXEXT2     = 0xD5,\n    FIXEXT4     = 0xD6,\n    FIXEXT8     = 0xD7,\n    FIXEXT16    = 0xD8,\n    EXT8        = 0xC7,\n    EXT16       = 0xC8,\n    EXT32       = 0xC9,\n    TIMESTAMP32 = 0xD6,\n    TIMESTAMP64 = 0xD7,\n    TIMESTAMP96 = 0xC7,\n\n    POSITIVE_FIXINT = 0x00,\n    NEGATIVE_FIXINT = 0xE0,\n    FIXSTR          = 0xA0,\n    FIXARRAY        = 0x90,\n    FIXMAP          = 0x80,\n};\n</code></pre>\n<h6>Reference</h6>\n<ul>\n<li><a href=\"https://github.com/msgpack/msgpack/blob/master/spec.md\">MessagePack Specification</a></li>\n<li><a href=\"https://github.com/msgpack/msgpack-c/wiki/v2_0_cpp_adaptor\">msgpack adaptor</a></li>\n<li><a href=\"https://github.com/msgpack/msgpack-c/wiki/v2_0_cpp_object\">msgpack object</a></li>\n<li><a href=\"https://github.com/msgpack/msgpack-c/wiki\">msgpack-c wiki</a></li>\n</ul>\n<h6>License</h6>\n<p>MIT</p>\n",
    "msgpack_repo_id": "hideakitai-MsgPack",
    "msgpack_repo_homepage": "https://github.com/hideakitai/MsgPack",
    "full_name": "hideakitai/MsgPack",
    "owner": "hideakitai",
    "html_url": "https://github.com/hideakitai/MsgPack"
  },
  {
    "msgpack_lang": "c++23",
    "msgpack_quickstart_html": "<h5>msgpack23</h5>\n<p><a href=\"https://conan.io/center/recipes/msgpack23\"><img src=\"https://img.shields.io/conan/v/msgpack23\" alt=\"Conan Center\"></a></p>\n<p>A modern, header-only C++ library for MessagePack serialization and deserialization.</p>\n<h6>Overview</h6>\n<p>msgpack23 is a lightweight library that provides a straightforward approach to serializing and deserializing C++ data structures into the <a href=\"https://msgpack.org/\">MessagePack</a> format. It is written in modern C++ (targeting C++20 and beyond) and leverages templates and type traits to provide a flexible, zero-dependency solution for packing and unpacking various data types.</p>\n<h6>Key Features</h6>\n<ul>\n<li><strong>Header-only</strong>: Simply include the header and start using it—no additional build steps or dependencies.</li>\n<li><strong>Modern C++</strong>: Uses C++ features like concepts to handle containers, maps, enums, time points, and user-defined types.</li>\n<li><strong>Extensible</strong>: Allows you to define custom types by implementing <code>pack</code> and <code>unpack</code> member functions, automatically integrating them into the serialization pipeline.</li>\n<li><strong>Collection and Map Support</strong>: Automatically detects and serializes STL containers (e.g., <code>std::vector</code>, <code>std::map</code>) without extra work.</li>\n<li><strong>Time Point Support</strong>: Native support for serializing <code>std::chrono::time_point</code> objects.</li>\n<li><strong>Variety of Primitive Types</strong>: Integers (signed/unsigned), booleans, floating-point, <code>std::string</code>, byte arrays, and <code>nullptr</code> are all supported out-of-the-box.</li>\n<li><strong>Endian-Aware</strong>: Properly handles endianness using <code>std::endian</code> and <code>std::byteswap</code> to ensure portability.</li>\n</ul>\n<h6>Getting Started</h6>\n<ol>\n<li>\n<p><strong>Clone the Repository</strong></p>\n<pre><code class=\"language-bash\">git clone https://github.com/rwindegger/msgpack23.git\n</code></pre>\n</li>\n<li>\n<p><strong>Include the Header</strong><br>\nSince this is a header-only library, just include the main header in your project:</p>\n<pre><code class=\"language-cpp\">#include &quot;msgpack23.h&quot;\n</code></pre>\n</li>\n<li>\n<p><strong>Pack and Unpack</strong></p>\n<pre><code class=\"language-cpp\">#include &lt;iostream&gt;\n#include &lt;map&gt;\n#include &quot;msgpack23.hpp&quot;\n\nint main() {\n   // Create a map of some data\n   std::map&lt;std::string, int&gt; original {{&quot;apple&quot;, 1}, {&quot;banana&quot;, 2}};\n\n   // 1) Pack into a vector of std::byte\n   std::vector&lt;std::byte&gt; packedData{};\n   auto const inserter = std::back_insert_iterator(packedData);\n   msgpack23::Packer packer{inserter};\n   packer(original); \n\n   // 2) Unpack back into a map\n   std::map&lt;std::string, int&gt; unpacked;\n   msgpack23::Unpacker unpacker(packedData);\n   unpacker(unpacked);\n\n   // Verify the result\n   for (auto const&amp; [key, value] : unpacked) {\n      std::cout &lt;&lt; key &lt;&lt; &quot;: &quot; &lt;&lt; value &lt;&lt; &quot;\\n&quot;;\n   }\n   return 0;\n}\n</code></pre>\n</li>\n</ol>\n<h6>Custom Types</h6>\n<p>To serialize your own types, define a <code>pack</code> and <code>unpack</code> function. The <code>pack</code> should accept a <code>T &amp;</code> and the <code>unpack</code> should accept a <code>T &amp;</code>.</p>\n<pre><code class=\"language-cpp\">struct MyData {\n   int64_t my_integer;\n   std::string my_string;\n   \n   template&lt;typename T&gt;\n   void pack(T &amp;packer) const {\n      packer(my_integer, my_string);\n   }\n   \n   template&lt;typename T&gt;\n   void unpack(T &amp;unpacker) {\n      unpacker(my_integer, my_string);\n   }\n};\n</code></pre>\n<p>Now you can use <code>MyData</code> with <code>msgpack23</code> just like any built-in type:</p>\n<pre><code class=\"language-cpp\">MyData const my_data {42, &quot;Hello&quot; };\nstd::vector&lt;std::byte&gt; data{};\nauto const inserter = std::back_insert_iterator(data);\nmsgpack23::pack(my_data);\nauto obj = msgpack23::unpack&lt;MyData&gt;(data);\n</code></pre>\n<h6>Why msgpack23?</h6>\n<ul>\n<li><strong>Simplicity</strong>: A single header with clearly structured pack/unpack logic.</li>\n<li><strong>Performance</strong>: Minimal overhead by using direct memory operations and compile-time type deductions.</li>\n<li><strong>Flexibility</strong>: From primitive types and STL containers to custom structures, everything can be serialized with minimal boilerplate.</li>\n</ul>\n<h6>Contributing</h6>\n<p>Contributions, bug reports, and feature requests are welcome! Feel free to open an <a href=\"https://github.com/rwindegger/msgpack23/issues\">issue</a> or submit a pull request.</p>\n<ol>\n<li>Fork it!</li>\n<li>Create your feature branch: <code>git checkout -b feature/my-new-feature</code></li>\n<li>Commit your changes: <code>git commit -am 'Add some feature'</code></li>\n<li>Push to the branch: <code>git push origin feature/my-new-feature</code></li>\n<li>Submit a pull request</li>\n</ol>\n<h6>License</h6>\n<p>This project is licensed under the <a href=\"LICENSE\">MIT License</a>.</p>\n<hr>\n<p>Happy packing (and unpacking)! If you have any questions or feedback, please open an issue or start a discussion.</p>\n",
    "msgpack_repo_id": "rwindegger-msgpack23",
    "msgpack_repo_homepage": "https://github.com/rwindegger/msgpack23",
    "full_name": "rwindegger/msgpack23",
    "owner": "rwindegger",
    "html_url": "https://github.com/rwindegger/msgpack23"
  },
  {
    "msgpack_lang": "Jackson-dataformat",
    "msgpack_quickstart_html": "<h5>jackson-dataformat-msgpack</h5>\n<p><strong>This project is merged to msgpack-java!!</strong> Yay!</p>\n<p><strong>See <a href=\"https://github.com/msgpack/msgpack-java/blob/develop/msgpack-jackson/README.md\">msgpack-java/msgpack-jackson</a> for the updated documents</strong></p>\n<h5>Overview</h5>\n<p><a href=\"https://travis-ci.org/komamitsu/jackson-dataformat-msgpack\"><img src=\"https://travis-ci.org/komamitsu/jackson-dataformat-msgpack.svg\" alt=\"Build Status\"></a></p>\n<p>This Jackson extension library handles reading and writing of data encoded in <a href=\"http://msgpack.org/\">MessagePack</a> data format.\nIt extends standard Jackson streaming API (<code>JsonFactory</code>, <code>JsonParser</code>, <code>JsonGenerator</code>), and as such works seamlessly with all the higher level data abstractions (data binding, tree model, and pluggable extensions).</p>\n<h6>Maven dependency</h6>\n<p>To use this module on Maven-based projects, use following dependency:</p>\n<pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;org.komamitsu&lt;/groupId&gt;\n  &lt;artifactId&gt;jackson-dataformat-msgpack&lt;/artifactId&gt;\n  &lt;version&gt;0.0.3&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n<h6>Usage</h6>\n<p>Only thing you need to do is to instantiate MessagePackFactory and pass it to the constructor of ObjectMapper.</p>\n<pre><code>  ObjectMapper objectMapper = new ObjectMapper(new MessagePackFactory());\n  ExamplePojo orig = new ExamplePojo(&quot;komamitsu&quot;);\n  byte[] bytes = objectMapper.writeValueAsBytes(orig);\n  ExamplePojo value = objectMapper.readValue(bytes, ExamplePojo.class);\n  System.out.println(value.getName()); // =&gt; komamitsu\n</code></pre>\n<p>Also, you can exchange data among multiple languages.</p>\n<p>Java</p>\n<pre><code>  // Serialize\n  Map&lt;String, Object&gt; obj = new HashMap&lt;String, Object&gt;();\n  obj.put(&quot;foo&quot;, &quot;hello&quot;);\n  obj.put(&quot;bar&quot;, &quot;world&quot;);\n  byte[] bs = objectMapper.writeValueAsBytes(obj);\n  // bs =&gt; [-126, -93, 102, 111, 111, -91, 104, 101, 108, 108, 111,\n  //        -93, 98, 97, 114, -91, 119, 111, 114, 108, 100]\n</code></pre>\n<p>Ruby</p>\n<pre><code>  require 'msgpack'\n\n  # Deserialize\n  xs = [-126, -93, 102, 111, 111, -91, 104, 101, 108, 108, 111,\n        -93, 98, 97, 114, -91, 119, 111, 114, 108, 100]\n  MessagePack.unpack(xs.pack(&quot;C*&quot;))\n  # =&gt; {&quot;foo&quot;=&gt;&quot;hello&quot;, &quot;bar&quot;=&gt;&quot;world&quot;}\n\n  # Serialize\n  [&quot;zero&quot;, 1, 2.0, nil].to_msgpack.unpack('C*')\n  # =&gt; [148, 164, 122, 101, 114, 111, 1, 203, 64, 0, 0, 0, 0, 0, 0, 0, 192]\n</code></pre>\n<p>Java</p>\n<pre><code>  // Deserialize\n  bs = new byte[] {(byte) 148, (byte) 164, 122, 101, 114, 111, 1,\n                   (byte) 203, 64, 0, 0, 0, 0, 0, 0, 0, (byte) 192};\n  TypeReference&lt;List&lt;Object&gt;&gt; typeReference = new TypeReference&lt;List&lt;Object&gt;&gt;(){};\n  List&lt;Object&gt; xs = objectMapper.readValue(bs, typeReference);\n  // xs =&gt; [zero, 1, 2.0, null]\n</code></pre>\n",
    "msgpack_repo_id": "komamitsu-jackson-dataformat-msgpack",
    "msgpack_repo_homepage": "https://github.com/komamitsu/jackson-dataformat-msgpack",
    "full_name": "komamitsu/jackson-dataformat-msgpack",
    "owner": "komamitsu",
    "html_url": "https://github.com/komamitsu/jackson-dataformat-msgpack"
  },
  {
    "msgpack_lang": "Perl 6",
    "msgpack_quickstart_html": "<h5>Perl6-Data-MessagePack</h5>\n<p><a href=\"https://travis-ci.org/pierre-vigier/Perl6-Data-MessagePack\"><img src=\"https://travis-ci.org/pierre-vigier/Perl6-Data-MessagePack.svg?branch=master\" alt=\"Build Status\"></a></p>\n<h5>NAME</h5>\n<p>Data::MessagePack - Perl 6 implementation of MessagePack</p>\n<h5>SYNOPSIS</h5>\n<pre><code>use Data::MessagePack;\n\nmy $data-structure = {\n    key =&gt; 'value',\n    k2 =&gt; [ 1, 2, 3 ]\n};\n\nmy $packed = Data::MessagePack::pack( $data-structure );\n\nmy $unpacked = Data::MessagePack::unpack( $packed );\n</code></pre>\n<p>Or for streaming:</p>\n<pre><code>use Data::MessagePack::StreamingUnpacker;\n\nmy $supplier = Some Supplier; #Could be from IO::Socket::Async for instance\n\nmy $unpacker = Data::MessagePack::StreamingUnpacker.new(\n    source =&gt; $supplier.Supply\n);\n\n$unpacker.tap( -&gt; $value {\n    say &quot;Got new value&quot;;\n    say $value.perl;\n}, done =&gt; { say &quot;Source supply is done&quot;; } );\n</code></pre>\n<h5>DESCRIPTION</h5>\n<p>The present module proposes an implemetation of the MessagePack specification as described on <a href=\"http://msgpack.org/\">http://msgpack.org/</a>. The implementation is now in Pure Perl which could come as a performance penalty opposed to some other packer implemented in C.</p>\n<h5>WHY THAT MODULE</h5>\n<p>There are already some part of MessagePack implemented in Perl6, with for instance MessagePack available here: <a href=\"https://github.com/uasi/messagepack-pm6\">https://github.com/uasi/messagepack-pm6</a>, however that module only implements the unpacking part of the specification. Futhermore, that module uses the unpack functionality which is tagged as experimental as of today</p>\n<h5>FUNCTIONS</h5>\n<h6>function pack</h6>\n<p>That function takes a data structure as parameter, and returns a Blob with the packed version of the data structure.</p>\n<h6>function unpack</h6>\n<p>That function takes a MessagePack packed message as parameter, and returns the deserialized data structure.</p>\n<h5>Author</h5>\n<p>Pierre VIGIER</p>\n<h5>Contributors</h5>\n<p>Timo Paulssen</p>\n<h5>License</h5>\n<p>Artistic License 2.0</p>\n",
    "msgpack_repo_id": "pierre-vigier-Perl6-Data-MessagePack",
    "msgpack_repo_homepage": "https://github.com/pierre-vigier/Perl6-Data-MessagePack",
    "full_name": "pierre-vigier/Perl6-Data-MessagePack",
    "owner": "pierre-vigier",
    "html_url": "https://github.com/pierre-vigier/Perl6-Data-MessagePack"
  },
  {
    "msgpack_lang": "Nim",
    "msgpack_quickstart_html": "<p>I will start this project once Nim compiler reaches 1.0</p>\n<h5>msgpack-nim</h5>\n<p>A MessagePack binding for Nim</p>\n<p><a href=\"https://travis-ci.org/akiradeveloper/msgpack-nim\"><img src=\"https://travis-ci.org/akiradeveloper/msgpack-nim.svg?branch=master\" alt=\"Build Status\"></a></p>\n<p>API: https://rawgit.com/akiradeveloper/msgpack-nim/master/msgpack.html</p>\n<p>msgpack-nim currently provides only the basic functionality.\nPlease see what's listed in Todo section. Compared to other language bindings, it's well-tested by\n1000 auto-generated test cases by Haskell QuickCheck, which always runs\non every commit to Github repository. Please try <code>make quickcheck</code> on your local machine\nto see what happens (It will take a bit while. Be patient). Have a nice packing!</p>\n<p><img src=\"https://rawgit.com/akiradeveloper/msgpack-nim/master/overview.svg\" alt=\"Overview\"></p>\n<h6>Install</h6>\n<pre><code class=\"language-sh\">$ nimble update\n$ nimble install msgpack\n</code></pre>\n<h6>Example</h6>\n<pre><code class=\"language-nimrod\">import msgpack\nimport streams\n\n# You can use any stream subclasses to serialize/deserialize\n# messages. e.g. FileStream\nlet st: Stream = newStringStream()\n\nassert(st.getPosition == 0)\n\n# Type checking protects you from making trivial mistakes.\n# Now we pack {&quot;a&quot;:[5,-3], &quot;b&quot;:[1,2,3]} but more complex\n# combination of any Msg types is allowed.\n#\n# In xs we can mix specific conversion (PFixNum) and generic\n# conversion (unwrap).\nlet xs: Msg = wrap(@[PFixNum(5), (-3).wrap])\nlet ys: Msg = wrap(@[(&quot;a&quot;.wrap, xs.wrap), (&quot;b&quot;.wrap, @[1, 2, 3].wrap)])\nst.pack(ys.wrap) # Serialize!\n\n# We need to reset the cursor to the beginning of the target\n# byte sequence.\nst.setPosition(0)\n\nlet msg = st.unpack # Deserialize!\n\n# output:\n# a\n# 5\n# -3\n# b\n# 1\n# 2\n# 3\nfor e in msg.unwrapMap:\n  echo e.key.unwrapStr\n  for e in e.val.unwrapArray:\n    echo e.unwrapInt\n</code></pre>\n<h6>Todo</h6>\n<ul>\n<li>Implement unwrapInto to convert Msg object to Nim object handily</li>\n<li>Evaluate performance and scalability</li>\n<li>Talk with offical Ruby implementation</li>\n<li>Don't repeat yourself: The code now has too much duplications. Using templates?</li>\n</ul>\n<h6>Author</h6>\n<p>Akira Hayakawa (ruby.wktk@gmail.com)</p>\n",
    "msgpack_repo_id": "akiradeveloper-msgpack-nim",
    "msgpack_repo_homepage": "https://github.com/akiradeveloper/msgpack-nim",
    "full_name": "akiradeveloper/msgpack-nim",
    "owner": "akiradeveloper",
    "html_url": "https://github.com/akiradeveloper/msgpack-nim"
  },
  {
    "msgpack_lang": "Scala",
    "msgpack_quickstart_html": "<h5>msgpack4z-core</h5>\n<p><a href=\"https://javadoc.io/doc/com.github.xuwei-k/msgpack4z-core_3/latest/api/msgpack4z.html\"><img src=\"https://javadoc.io/badge2/com.github.xuwei-k/msgpack4z-core_3/javadoc.svg\" alt=\"scaladoc\"></a>\n<a href=\"https://www.scala-js.org\"><img src=\"https://www.scala-js.org/assets/badges/scalajs-1.0.0.svg\" alt=\"Scala.js\"></a></p>\n<ul>\n<li><a href=\"https://msgpack.org/\">https://msgpack.org/</a></li>\n<li><a href=\"https://github.com/msgpack/msgpack/blob/master/spec.md\">https://github.com/msgpack/msgpack/blob/master/spec.md</a></li>\n</ul>\n<h7>example</h7>\n<ul>\n<li><a href=\"https://github.com/msgpack4z/msgpack4z-core/blob/master/src/test/scala/msgpack4z/CaseClassExample.scala\">https://github.com/msgpack4z/msgpack4z-core/blob/master/src/test/scala/msgpack4z/CaseClassExample.scala</a></li>\n<li><a href=\"https://github.com/xuwei-k/msgpack-json/blob/640878e88171/src/main/scala/App.scala\">https://github.com/xuwei-k/msgpack-json/blob/640878e88171/src/main/scala/App.scala</a></li>\n</ul>\n<h7>latest stable version</h7>\n<pre><code class=\"language-scala\">libraryDependencies += &quot;com.github.xuwei-k&quot; %% &quot;msgpack4z-core&quot; % &quot;0.6.2&quot;\n</code></pre>\n<h7>dependency graph</h7>\n<p><a href=\"https://msgpack4z.github.io/graph.svg\"><img src=\"https://msgpack4z.github.io/graph.svg\" alt=\"graph\"></a></p>\n",
    "msgpack_repo_id": "msgpack4z-msgpack4z-core",
    "msgpack_repo_homepage": "https://github.com/msgpack4z/msgpack4z-core",
    "full_name": "msgpack4z/msgpack4z-core",
    "owner": "msgpack4z",
    "html_url": "https://github.com/msgpack4z/msgpack4z-core"
  },
  {
    "msgpack_lang": "Arduino C",
    "msgpack_quickstart_html": "<h5>arduino_msgpack</h5>\n<p>This Arduino library provides a light weight serializer and parser for messagepack.</p>\n<h6>Install</h6>\n<p>Download the zip, and import it with your Arduino IDE: <em>Sketch&gt;Include Library&gt;Add .zip library</em></p>\n<h6>Usage</h6>\n<p>See the either the <code>.h</code> file, or the examples (<code>led_controller</code> and <code>test_uno_writer</code>).</p>\n<p>In short:</p>\n<ul>\n<li>functions like <code>msgpck_what_next(Stream * s);</code> watch the next type of data without reading it (without advancing the buffer of Stream <code>s</code>).</li>\n<li>functions like <code>msgpck_read_bool(Stream * s, bool *b)</code> read a value from Stream <code>s</code>.</li>\n<li>functions like <code>msgpck_write_bool(Stream * s, bool b)</code> write a value on Stream <code>s</code>.</li>\n</ul>\n<p>Notes:</p>\n<ul>\n<li>Stream are used as much as possible in order not to add to much overhead with buffers. Therefore you should be able to store the minimum number of value at a given time.</li>\n<li>Map and Array related functions concern only their headers. Ex: If you want to write an array containing two elements you should write the array header, then write the two elements.</li>\n</ul>\n<h6>Limitations</h6>\n<p>Currently the library does <strong>not</strong> support:</p>\n<ul>\n<li>8 bytes float (Only 4 bytes floats are supported by default on every Arduino and floats are anyway not recommended on Arduino)</li>\n<li>2^32 char long (or longer) strings</li>\n<li>2^32 byte long (or longer) bins</li>\n<li>extention types.</li>\n</ul>\n",
    "msgpack_repo_id": "HEADS-project-arduino_msgpack",
    "msgpack_repo_homepage": "https://github.com/HEADS-project/arduino_msgpack",
    "full_name": "HEADS-project/arduino_msgpack",
    "owner": "HEADS-project",
    "html_url": "https://github.com/HEADS-project/arduino_msgpack"
  },
  {
    "msgpack_lang": "Shell",
    "msgpack_quickstart_html": "<h5>msgpack-cli</h5>\n<p><a href=\"https://travis-ci.org/jakm/msgpack-cli\"><img src=\"https://travis-ci.org/jakm/msgpack-cli.svg?branch=master\" alt=\"Build Status\"></a></p>\n<p>msgpack-cli is command line tool that converts data from JSON to <a href=\"http://msgpack.org\">Msgpack</a> and vice versa. Also allows calling RPC methods via <a href=\"https://github.com/msgpack-rpc/msgpack-rpc/blob/master/spec.md\">msgpack-rpc</a>.</p>\n<h6>Installation</h6>\n<pre><code class=\"language-sh\">% go get github.com/jakm/msgpack-cli\n</code></pre>\n<p>Debian packages and Windows binaries are available on project's\n<a href=\"https://github.com/jakm/msgpack-cli/releases/latest\">Releases page</a>.</p>\n<h6>Usage</h6>\n<pre><code>msgpack-cli\n\nUsage:\n    msgpack-cli encode &lt;input-file&gt; [--out=&lt;output-file&gt;] [--disable-int64-conv]\n    msgpack-cli decode &lt;input-file&gt; [--out=&lt;output-file&gt;] [--pp]\n    msgpack-cli rpc &lt;host&gt; &lt;port&gt; &lt;method&gt; [&lt;params&gt;|--file=&lt;input-file&gt;] [--pp]\n        [--timeout=&lt;timeout&gt;][--disable-int64-conv]\n    msgpack-cli -h | --help\n    msgpack-cli --version\n\nCommands:\n    encode                Encode data from input file to STDOUT\n    decode                Decode data from input file to STDOUT\n    rpc                   Call RPC method and write result to STDOUT\n\nOptions:\n    -h --help             Show this help message and exit\n    --version             Show version\n    --out=&lt;output-file&gt;   Write output data to file instead of STDOUT\n    --file=&lt;input-file&gt;   File where parameters or RPC method are read from\n    --pp                  Pretty-print - indent output JSON data\n    --timeout=&lt;timeout&gt;   Timeout of RPC call [default: 30]\n    --disable-int64-conv  Disable the default behaviour such that JSON numbers\n                          are converted to float64 or int64 numbers by their\n                          meaning, all result numbers will have float64 type\n\n\nArguments:\n    &lt;input-file&gt;          File where data are read from\n    &lt;host&gt;                Server hostname\n    &lt;port&gt;                Server port\n    &lt;method&gt;              Name of RPC method\n    &lt;params&gt;              Parameters of RPC method in JSON format\n</code></pre>\n<h6>Examples</h6>\n<p>Encoding/decoding:</p>\n<pre><code>$ cat test.json\n{\n  &quot;firstName&quot;: &quot;John&quot;,\n  &quot;lastName&quot;: &quot;Smith&quot;,\n  &quot;isAlive&quot;: true,\n  &quot;age&quot;: 25,\n  &quot;height_cm&quot;: 167.6,\n  &quot;address&quot;: {\n    &quot;streetAddress&quot;: &quot;21 2nd Street&quot;,\n    &quot;city&quot;: &quot;New York&quot;,\n    &quot;state&quot;: &quot;NY&quot;,\n    &quot;postalCode&quot;: &quot;10021-3100&quot;\n  },\n  &quot;phoneNumbers&quot;: [\n    {\n      &quot;type&quot;: &quot;home&quot;,\n      &quot;number&quot;: &quot;212 555-1234&quot;\n    },\n    {\n      &quot;type&quot;: &quot;office&quot;,\n      &quot;number&quot;: &quot;646 555-4567&quot;\n    }\n  ],\n  &quot;children&quot;: [],\n  &quot;spouse&quot;: null\n}\n$\n$ msgpack-cli encode test.json --out test.bin\n$\n$ ls -l test.* | awk '{print $9, $5}'\ntest.bin 242\ntest.json 429\n$\n$ msgpack-cli decode test.bin --pp  # pretty-print\n{\n  &quot;address&quot;: {\n    &quot;city&quot;: &quot;New York&quot;,\n    &quot;postalCode&quot;: &quot;10021-3100&quot;,\n    &quot;state&quot;: &quot;NY&quot;,\n    &quot;streetAddress&quot;: &quot;21 2nd Street&quot;\n  },\n  &quot;age&quot;: 25,\n  &quot;children&quot;: [],\n  &quot;firstName&quot;: &quot;John&quot;,\n  &quot;height_cm&quot;: 167.6,\n  &quot;isAlive&quot;: true,\n  &quot;lastName&quot;: &quot;Smith&quot;,\n  &quot;phoneNumbers&quot;: [\n    {\n      &quot;number&quot;: &quot;212 555-1234&quot;,\n      &quot;type&quot;: &quot;home&quot;\n    },\n    {\n      &quot;number&quot;: &quot;646 555-4567&quot;,\n      &quot;type&quot;: &quot;office&quot;\n    }\n  ],\n  &quot;spouse&quot;: null\n}\n</code></pre>\n<p>RPC calling:</p>\n<pre><code>$ # zero params\n$ msgpack-cli rpc localhost 8000 echo\n[]\n$\n$ # single param\n$ msgpack-cli rpc localhost 8000 echo 3.14159\n[3.14159]\n$\n$ # multiple params (as json array)\n$ msgpack-cli rpc localhost 8000 echo '[&quot;abc&quot;, &quot;def&quot;, &quot;ghi&quot;, {&quot;A&quot;: 65, &quot;B&quot;: 66, &quot;C&quot;: 67}]'\n[&quot;abc&quot;,&quot;def&quot;,&quot;ghi&quot;,{&quot;A&quot;:65,&quot;B&quot;:66,&quot;C&quot;:67}]\n</code></pre>\n",
    "msgpack_repo_id": "jakm-msgpack-cli",
    "msgpack_repo_homepage": "https://github.com/jakm/msgpack-cli",
    "full_name": "jakm/msgpack-cli",
    "owner": "jakm",
    "html_url": "https://github.com/jakm/msgpack-cli"
  },
  {
    "msgpack_lang": "Javascript/NodeJS",
    "msgpack_quickstart_html": "<h5>what-the-pack</h5>\n<p>Ultra-fast MessagePack for NodeJS &amp; Browsers.</p>\n<h6>implementation notes</h6>\n<ul>\n<li>this implementation uses pre-allocated buffers and buffer.copy() for encoding, instead of regular arrays</li>\n<li>uses a buffer polyfill if used in browser environments</li>\n<li>has dictionary support, to further reduce payload size</li>\n</ul>\n<h6>backward compatibility notes with other libraries</h6>\n<ul>\n<li>used extensions\n<ul>\n<li><code>fixext 1, type 0, data 0</code> = <code>undefined</code></li>\n<li><code>fixext 1, type 0, data 1</code> = <code>NaN</code></li>\n<li><code>fixext 1, type 0, data 2</code> = <code>+Infinity</code></li>\n<li><code>fixext 1, type 0, data 3</code> = <code>-Infinity</code></li>\n</ul>\n</li>\n<li><code>Buffers</code>, <code>ArrayBuffers</code> and <code>TypedArrays</code>\n<ul>\n<li><code>Buffers</code> : encoded as Buffers, decoded as Buffers</li>\n<li><code>ArrayBuffers</code> : encoded as Buffers, decoded as Buffers</li>\n</ul>\n<pre><code class=\"language-js\">const decoded = decode(encoded);\nconst your_arraybuffer = decoded.buffer;\n</code></pre>\n<ul>\n<li><code>TypedArrays</code> : encoded as Buffers, decoded as Buffers</li>\n</ul>\n<pre><code class=\"language-js\">const decoded = decode(encoded);\nconst your_typedarray = new Uint8Array(decoded.buffer);\n</code></pre>\n</li>\n</ul>\n<h6>usage</h6>\n<pre><code class=\"language-sh\">yarn add what-the-pack\n</code></pre>\n<pre><code class=\"language-js\">const MessagePack = require('what-the-pack');\nconst { encode, decode } = MessagePack.initialize(2**22); // 4MB\n\nconst data = {\n  name: 'Lunox',\n  age: 20\n};\n\nconst encoded = encode(data);\nconst decoded = decode(encoded);\n\nconsole.log({\n  encoded,\n  decoded\n});\n</code></pre>\n<h6>result</h6>\n<pre><code class=\"language-js\">{ encoded: &lt;Buffer 82 a4 6e 61 6d 65 a5 4c 75 6e 6f 78 a3 61 67 65 14&gt;,\n  decoded: { name: 'Lunox', age: 20 } }\n</code></pre>\n<h6>pre-allocating a larger buffer</h6>\n<pre><code class=\"language-js\">const MessagePack = require('what-the-pack');\nconst { encode, decode } = MessagePack.initialize(2**30); // 1GB\nconst data = {\n  // large data goes here\n};\n</code></pre>\n<pre><code>2^7 = 128 B\n2^8 = 256 B\n2^9 = 512 B\n2^10 = 1.02 kB\n2^11 = 2.05 kB\n2^12 = 4.1 kB\n2^13 = 8.19 kB\n2^14 = 16.4 kB\n2^15 = 32.8 kB\n2^16 = 65.5 kB\n2^17 = 131 kB\n2^18 = 262 kB\n2^19 = 524 kB\n2^20 = 1.05 MB\n2^21 = 2.1 MB\n2^22 = 4.19 MB\n2^23 = 8.39 MB\n2^24 = 16.8 MB\n2^25 = 33.6 MB\n2^26 = 67.1 MB\n2^27 = 134 MB\n2^28 = 268 MB\n2^29 = 537 MB\n2^30 = 1.07 GB\n</code></pre>\n<h6>using dictionaries (added in 1.1.3)</h6>\n<ul>\n<li>this feature isn't in MessagePack spec but added as a convenience feature in 1.1.3</li>\n<li>dictionaries allow us to decrease our buffer output size by recognizing strings used as object keys and replacing them with shorter-byte integer values during the encoding process</li>\n<li>these shorter-byte placeholder values are then restored to their respective strings during the decoding process</li>\n<li>the trade-off in using dictionaries is an insignificantly slower encoding and decoding time in exchange of a significantly smaller buffer output, which results into a lower network bandwidth and storage consumption in the long run</li>\n<li>the best part: the byte placeholders starts from -32 then increments upwards, values -32 to 127 are encoded in single byte, which means your first (32 + 128) = 160 keys will be encoded as a single byte instead of encoding the whole string</li>\n</ul>\n<pre><code class=\"language-js\">const MessagePack = require('what-the-pack');\nconst { encode, decode, register } = MessagePack.initialize(2**22); // 4MB\nlet encoded, decoded, data;\ndata = { name: 'Lunox', age: 20 };\n\nencoded = encode(data);\ndecoded = decode(encoded);\nconsole.log({ encoded, decoded });\n/**\n - encoded: &lt;Buffer 82 a4 6e 61 6d 65 a5 4c 75 6e 6f 78 a3 61 67 65 14&gt; (17)\n - decoded: { name: 'Lunox', age: 20 }\n **/\n\nregister('name', 'age');\nencoded = encode(data);\ndecoded = decode(encoded);\nconsole.log({ encoded, decoded });\n/**\n - encoded: &lt;Buffer 82 e0 a5 4c 75 6e 6f 78 e1 14&gt; (10)\n - decoded: { name: 'Lunox', age: 20 }\n **/\n</code></pre>\n<h6>minified build for browsers</h6>\n<pre><code class=\"language-js\">&lt;!-- latest umd build --&gt;\n&lt;script src=&quot;https://unpkg.com/what-the-pack/dist/MessagePack.min.js&quot;&gt;&lt;/script&gt;\n\n&lt;!-- exposed as 'MessagePack' --&gt;\n&lt;script&gt;\n  const { encode, decode } = MessagePack.initialize(2**22); // 4MB\n  const data = {\n    name: 'Lunox',\n    age: 20\n  };\n  const encoded = encode(data);\n  const decoded = decode(encoded);\n  console.log({ encoded, decoded });\n&lt;/script&gt;\n</code></pre>\n<h6>using with browser websockets</h6>\n<h8>server</h8>\n<pre><code class=\"language-js\">const WebSocket = require('ws');\nconst MessagePack = require('what-the-pack');\nconst { encode, decode } = MessagePack.initialize(2**22); // 4MB\n\nconst wss = new WebSocket.Server(\n  /- options go here */\n);\nwss.on('connection', (client, req) =&gt; {\n  console.log('A client has connected.');\n  console.log('IP address:', req.connection.remoteAddress);\n  client.send(\n    encode({\n      message: 'something'\n    })\n  );\n});\n</code></pre>\n<h8>client</h8>\n<ul>\n<li>On browsers, <code>Buffer</code> object is exposed as <code>MessagePack.Buffer</code></li>\n<li>On browsers, call <code>MessagePack.Buffer.from(x)</code> on received ArrayBuffers</li>\n</ul>\n<pre><code class=\"language-js\">// Create WebSocket connection.\nconst socket = new WebSocket('ws://localhost:8080');\nconst { encode, decode, Buffer } = MessagePack.initialize(2**22); // 4MB\n\n// Connection opened\nsocket.addEventListener('open', (event) =&gt; {\n  socket.binaryType = 'arraybuffer'; // important\n  console.log('Connected to server.');\n});\n\n// Listen for messages\nsocket.addEventListener('message', (event) =&gt; {\n  const data = MessagePack.decode(\n    Buffer.from(event.data)\n  );\n  console.log(data);\n  // logs: { message: 'something' }\n});\n</code></pre>\n<h6>benchmarks</h6>\n<pre><code class=\"language-sh\">yarn run benchmark\n</code></pre>\n<pre><code class=\"language-sh\">$ yarn run benchmark\nJSON stringify tiny x 1,477,866 ops/sec ±0.58% (93 runs sampled)\nJSON stringify small x 232,645 ops/sec ±0.25% (91 runs sampled)\nJSON stringify medium x 117,357 ops/sec ±0.31% (93 runs sampled)\nJSON stringify large x 24.01 ops/sec ±0.37% (43 runs sampled)\nJSON parse tiny x 1,301,925 ops/sec ±3.18% (82 runs sampled)\nJSON parse small x 264,410 ops/sec ±0.57% (90 runs sampled)\nJSON parse medium x 133,865 ops/sec ±0.52% (87 runs sampled)\nJSON parse large x 31.52 ops/sec ±0.34% (53 runs sampled)\nwhat-the-pack encode tiny x 1,175,981 ops/sec ±0.39% (92 runs sampled)\nwhat-the-pack encode small x 365,533 ops/sec ±0.85% (90 runs sampled)\nwhat-the-pack encode medium x 173,746 ops/sec ±0.41% (91 runs sampled)\nwhat-the-pack encode large x 218 ops/sec ±0.85% (82 runs sampled)\nwhat-the-pack decode tiny x 1,130,260 ops/sec ±0.30% (91 runs sampled)\nwhat-the-pack decode small x 254,931 ops/sec ±0.79% (94 runs sampled)\nwhat-the-pack decode medium x 146,809 ops/sec ±0.79% (92 runs sampled)\nwhat-the-pack decode large x 211 ops/sec ±0.37% (87 runs sampled)\nnotepack.encode tiny x 1,291,361 ops/sec ±0.22% (95 runs sampled)\nnotepack encode small x 325,882 ops/sec ±1.20% (95 runs sampled)\nnotepack encode medium x 133,398 ops/sec ±0.20% (94 runs sampled)\nnotepack encode large x 231 ops/sec ±1.65% (81 runs sampled)\nnotepack decode tiny x 1,097,597 ops/sec ±0.67% (93 runs sampled)\nnotepack decode small x 231,895 ops/sec ±0.69% (96 runs sampled)\nnotepack decode medium x 137,385 ops/sec ±2.45% (86 runs sampled)\nnotepack decode large x 210 ops/sec ±0.85% (86 runs sampled)\n</code></pre>\n<h6>tests</h6>\n<pre><code class=\"language-sh\">yarn run test\n</code></pre>\n<pre><code class=\"language-sh\">$ yarn run test\n PASS  ./test.js\n  √ fixstr (6ms)\n  √ str 8 (2ms)\n  √ str 16 (1ms)\n  √ str 32 (1ms)\n  √ zero\n  √ positive fixint (1ms)\n  √ negative  fixint (1ms)\n  √ uint 8 (1ms)\n  √ uint 16 (1ms)\n  √ uint 32\n  √ uint 64 (1ms)\n  √ int 8 (1ms)\n  √ int 16\n  √ int 32 (2ms)\n  √ int 64\n  √ float 32 (2ms)\n  √ float 64 (1ms)\n  √ true, false, undefined, NaN, +Infinity, -Infinity (2ms)\n  √ flat &amp; nested empty arrays (1ms)\n  √ flat arrays (456ms)\n  √ nested arrays (5ms)\n  √ highly nested arrays (2ms)\n  √ buffers, bin8 (2ms)\n  √ buffers, bin16 (96ms)\n  √ buffers, bin32 (473ms)\n  √ arraybuffers as buffer (54ms)\n  √ typedarrays as buffer (7ms)\n  √ tiny object (1ms)\n  √ small object\n  √ medium object (1ms)\n  √ large object (1736ms)\n\n  console.log index.js:49\n    MessagePack: Setting buffer limit to 1.07 GB\n\nTest Suites: 1 passed, 1 total\nTests:       31 passed, 31 total\nSnapshots:   0 total\nTime:        5.477s\nRan all test suites.\nDone in 6.59s.\n</code></pre>\n<h6>changelog</h6>\n<ul>\n<li>1.x\n<ul>\n<li>basic support</li>\n<li>dictionary support</li>\n</ul>\n</li>\n<li>2.0.0\n<ul>\n<li>rewrite to use raw functions instead of classes</li>\n<li>update dev-deps</li>\n<li>jest test-cov @ <code>86.06%</code>\n<ul>\n<li>statements <code>389/452</code></li>\n<li>branches <code>137/169</code></li>\n<li>functions <code>11/12</code></li>\n<li>lines <code>374/428</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>2.0.x\n<ul>\n<li>fix tempBufferLength check</li>\n<li>rebuild for browser</li>\n<li>fix leak on buffer decode</li>\n</ul>\n</li>\n</ul>\n<h6>references</h6>\n<ul>\n<li><code>buffer re-alloc idea</code>\n<ul>\n<li>https://github.com/darrachequesne/notepack/issues/12#issuecomment-320872590 (Manuel Astudillo)</li>\n</ul>\n</li>\n<li><code>notepack.io</code>\n<ul>\n<li>https://github.com/darrachequesne/notepack (MIT, Damien Arrachequesne)</li>\n</ul>\n</li>\n<li><code>notepack</code>\n<ul>\n<li>https://github.com/hypergeometric/notepack (MIT, Ben Shepheard)</li>\n</ul>\n</li>\n<li><code>buffer</code>:\n<ul>\n<li>https://github.com/feross/buffer (MIT, Feross Aboukhadijeh)</li>\n</ul>\n</li>\n<li><code>pretty-bytes</code>\n<ul>\n<li>https://github.com/sindresorhus/pretty-bytes (MIT, Sindre Sorhus)</li>\n</ul>\n</li>\n</ul>\n<p>MIT | @davalapar</p>\n",
    "msgpack_repo_id": "davalapar-what-the-pack",
    "msgpack_repo_homepage": "http://npmjs.com/package/what-the-pack",
    "full_name": "davalapar/what-the-pack",
    "owner": "davalapar",
    "html_url": "https://github.com/davalapar/what-the-pack"
  },
  {
    "msgpack_lang": "Swift",
    "msgpack_quickstart_html": "<h5>msgpack-swift</h5>\n<p>An efficient, full-featured, and compliant <a href=\"https://msgpack.org\">MessagePack</a> implementation for Swift.</p>\n<p><img src=\"https://img.shields.io/badge/swift-v5.9-%23F05138\" alt=\"Swift 5.9\">\n<img src=\"https://img.shields.io/badge/platform-Linux%20%7C%20visionOS%201%20%7C%20macOS%2013%20%7C%20iOS%2016%20%7C%20tvOS%2016%20%7C%20watchOS%209-blue\" alt=\"Linux, visionOS 1, macOS 13, iOS 16, tvOS 16, watchOS 9\">\n<img src=\"https://img.shields.io/github/license/fumoboy007/msgpack-swift\" alt=\"MIT License\">\n<img src=\"https://img.shields.io/github/actions/workflow/status/fumoboy007/msgpack-swift/tests.yml?event=push&amp;label=tests\" alt=\"Automated Tests Workflow Status\"></p>\n<h6>Basic Usage</h6>\n<pre><code class=\"language-swift\">import MessagePack\n\nstruct MyMessage: Codable {\n   // ...\n}\nlet myMessage = MyMessage(\n   // ...\n)\n\n// Serialization\nlet encoder = MessagePackEncoder()\nlet serializedMessage = try encoder.encode(myMessage)\n\n// Deserialization\nlet decoder = MessagePackDecoder()\nlet deserializedMessage = try decoder.decode(MyMessage.self, from: serializedMessage)\n</code></pre>\n<p>See the <a href=\"https://swiftpackageindex.com/fumoboy007/msgpack-swift/documentation/messagepack\">documentation</a> for examples of more advanced use cases.</p>\n<h6>Features</h6>\n<ul>\n<li>Full integration with Swift’s <code>Codable</code> serialization system.</li>\n<li>Support for standard <code>Foundation</code> value types such as <code>Date</code>, <code>URL</code>, <code>Data</code>, and <code>Decimal</code>.</li>\n<li>Support for MessagePack extension types like timestamp and application-specific extension types.</li>\n<li>Automated tests verify compliance with the MessagePack <a href=\"https://github.com/msgpack/msgpack/blob/8aa09e2a6a9180a49fc62ecfefe149f063cc5e4b/spec.md\">specification</a> by testing against the <code>msgpack-c</code> <a href=\"https://github.com/fumoboy007/MessagePackReferenceImplementation\">reference implementation</a>.</li>\n<li>Highly optimized for performance.</li>\n</ul>\n<h6>Compared to the Competition</h6>\n<p>(As of September 2023.)</p>\n<h7>Functionality</h7>\n<table>\n<thead>\n<tr>\n<th>Other Library</th>\n<th>Remarks</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/nnabeyang/swift-msgpack\"><code>nnabeyang/swift-msgpack</code></a></td>\n<td>⚠️ No tailored support for <code>Date</code>, <code>URL</code>, or <code>Decimal</code>.</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/hirotakan/MessagePacker\"><code>hirotakan/MessagePacker</code></a></td>\n<td>⚠️ <a href=\"https://github.com/hirotakan/MessagePacker/pull/54\">Does not support</a> complex nested container setups.<br />⚠️ <a href=\"https://github.com/hirotakan/MessagePacker/pull/57\">Missing</a> some validation logic.<br />⚠️ No tailored support for <code>Decimal</code>.</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Flight-School/MessagePack\"><code>Flight-School/MessagePack</code></a></td>\n<td>⚠️ Does not support complex nested container setups.<br />⚠️ Does not have a timestamp type to preserve precision.<br />⚠️ No tailored support for <code>URL</code> or <code>Decimal</code>.<br />⚠️ Does not support application-specific MessagePack extension types.</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/swiftstack/messagepack\"><code>swiftstack/messagepack</code></a></td>\n<td>❌ Timestamp type is not <code>Codable</code>.</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/malcommac/SwiftMsgPack\"><code>malcommac/SwiftMsgPack</code></a></td>\n<td>❌ Does not support <code>Codable</code>.</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/a2/MessagePack.swift\"><code>a2/MessagePack.swift</code></a></td>\n<td>❌ Does not support <code>Codable</code>.</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/michael-yuji/YSMessagePack\"><code>michael-yuji/YSMessagePack</code></a></td>\n<td>❌ Does not support <code>Codable</code>.</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/briandw/SwiftPack\"><code>briandw/SwiftPack</code></a></td>\n<td>❌ Does not have a Swift package manifest.</td>\n</tr>\n</tbody>\n</table>\n<h7>Performance</h7>\n<table>\n<thead>\n<tr>\n<th>Speed Compared to</th>\n<th>Other Library</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Up to 3× faster than</td>\n<td><a href=\"https://github.com/nnabeyang/swift-msgpack\"><code>nnabeyang/swift-msgpack</code></a></td>\n</tr>\n<tr>\n<td>Up to 2× faster than</td>\n<td><a href=\"https://github.com/hirotakan/MessagePacker\"><code>hirotakan/MessagePacker</code></a></td>\n</tr>\n<tr>\n<td>Up to 6× faster than</td>\n<td><a href=\"https://github.com/Flight-School/MessagePack\"><code>Flight-School/MessagePack</code></a></td>\n</tr>\n</tbody>\n</table>\n<p>Tested using real-world messages that are involved in high throughput or low latency use cases. Pull requests to <a href=\"Tests/Benchmarks/Benchmarks.swift\"><code>Benchmarks.swift</code></a> are welcome if you know of similar use cases!</p>\n",
    "msgpack_repo_id": "fumoboy007-msgpack-swift",
    "msgpack_repo_homepage": "https://swiftpackageindex.com/fumoboy007/msgpack-swift/documentation/messagepack",
    "full_name": "fumoboy007/msgpack-swift",
    "owner": "fumoboy007",
    "html_url": "https://github.com/fumoboy007/msgpack-swift"
  },
  {
    "msgpack_lang": "Delphi",
    "msgpack_quickstart_html": "<h5>DynamicDataObjects</h5>\n<p>This Delphi code library lets you model structured data and serialze to/from a variety of data serialization formats such as:\nCBOR, JSON, MessagePack, ION, UBJSON, BSON, Smile, DataObj, CSV, ICS, BinaryJData, etc.  Most of these serializations are complete such as JSON, BSON, CBOR, DataObj, but some of the more obscure ones are coded but are only minimally tested.</p>\n<p>What makes this implementation different from other JSON or BSON or MessagePack or CBOR libraries, etc. is that this library uses one set of objects for modeling data in a consistent way, and then multiple serializers can serialize to/from that object model.  Most of the other serialization libraries out there are only designed to serialize to the one and only one format that they are coded for.  So, if you have a project that needs to serialize CBOR, JSON and BSON, you end up having three separate libraries that all have different objects, properties and methods to use to put data into and extract data out of.  This code library allows you to use one common object &quot;TDataObj&quot; to model hierarchial data and then you can serialize to/from using any of the serialization formats that you choose to include.</p>\n<p>If you have a project that will use two or more serializations, such as JSON with BSON or JSON with CBOR, then this is a very good library to consider as it will give you consistency, high performance and save you in development time.</p>\n<p>This project is primarily coded and tested with Delphi 10.4 and Delphi 11.  It has not been tested with older Delphi versions or other pascal compilers, but likely it will work just fine with some minor tweaks.</p>\n<p>A significant amount of attention has been placed on serialization performance, especially with CBOR, DataObj, BSON and JSON because I use these four the most.  With JSON, it's faster than Embarcadero's multiple JSON implementations under most situations.  The JSON serialization has been extensively compared performance-wise to a few of the other popular JSON libraries for Delphi out there.  Most of them are so extremely slow that I stopped comparing with them.  The three that I found to be the best performance-wise are embarcadero's system.json, Grijjy, DDO, and this code.</p>\n<p>This code is extremely easy to use, you only need to include DataObjects2.pas in your project.  Then, to choose one or more serializers to also be included, simply include those units as well.</p>\n<p>There are a few future features that we have planned such as:</p>\n<ol>\n<li>Geometry data types (The DDO format supports it direcly),</li>\n<li>Direct RTTI object serialization,</li>\n<li>Sparse arrays (somewhat coded already but not fully baked),</li>\n<li>Completing JSON5 support (partially supported now).</li>\n<li>YAML serialization support.</li>\n<li>Comment support (usable by YAML and JSON5)</li>\n<li>Better CBOR tag interpretation.</li>\n</ol>\n<p>Each serializer class may introduce some properties that affect the serialization.  For example, the JSON serializer can produce with tight formatting or human text readable formatting. The JSON serialization supports ASCII, ANSI, UTF8, UTF7 or Unicode character encodings.</p>\n<h5>Code Example</h5>\n<pre><code>procedure TForm15.Button5Click(Sender: TObject);\nvar\n  lDataObj: TDataObj;\n  lJSON: TJsonStreamer;\n  lFS: TFileStream;\nbegin\n  lDataObj:=TDataObj.Create;\n  try\n    // Using RTTI, copy all published properties from the current form into lDataObj\n    lDataObj.AsFrame.NewSlot('Form').AssignFrom(self);\n\n    // Using each of the serializers included into this project, save to a file by\n    // automatically choosing the serializer class via the filename extension, and\n    // using each of the serializers default serialization properties.\n    lDataObj.WriteToFile('c:\\temp\\SampleForm.dataObj');\n    lDataObj.WriteToFile('c:\\temp\\SampleForm.bson');\n    lDataObj.WriteToFile('c:\\temp\\SampleForm.cbor');\n    lDataObj.WriteToFile('c:\\temp\\SampleForm.ddo');\n    lDataObj.WriteToFile('c:\\temp\\SampleForm.ion');\n    lDataObj.WriteToFile('c:\\temp\\SampleForm.smile');\n    lDataObj.WriteToFile('c:\\temp\\SampleForm.ubj');\n\n    // This is an example that serializes to JSON with more detailed control over how the serialization should be structured.\n    lFS:=TFileStream.Create('c:\\temp\\SampleForm.json',fmCreate);   // Create a fileStream to write to.\n    try\n      lJSON:=TJsonStreamer.Create(lFS);                 // Create a JSON streamer that is linked to the file stream we will produce.\n      try\n        lJSON.Encoding := TEncoding.ASCII;              // Set a bunch of serialization properties to define how we want the JSON produced.  \n        lJSON.Style := TJsonStyle.cJsonHumanReadable;   // Make this human readable.\n        lJSON.Indention := 2;                           // Each nested item is indented 2 characters with spaces. \n        lJSON.EncodeNonAsciiCharacters := true;         // Since we are character encoding to ascii, we need to make sure all non-ascii characters are escaped.\n        lJSON.IncludeEncodingPreamble := true;          // Ascii doesn't have a preamble, but UTF8 or Unicode does\n\n        lJSON.Encode(lDataObj);                         // This tells the serializer to produce the JSON into the stream that is linked to the lJSON serializer. \n      finally\n        lJSON.Free;\n      end;\n    finally\n      lFS.Free;\n    end;\n  finally\n    lDataObj.Free;\n  end;\nend;\n</code></pre>\n<p>I have three general purpose executables that are built upon this library:  A standalone editor executable called the DataObject Editor, a windows explorer previewer dll so these file types can be viewed directly in the preview pane, and a Delphi plugin that lets you see the data within a DataObject while debugging.  The source code for these applications are not yet made public as they are just not quite baked enough, but they are coming.</p>\n<h5>License</h5>\n<pre><code>                     Dynamic Data Objects Library                           \n</code></pre>\n<p>MIT License</p>\n<p>Copyright (c) 2022 Sean Solberg</p>\n<p>Permission is hereby granted, free of charge, to any person obtaining a copy<br>\nof this software and associated documentation files (the &quot;Software&quot;), to deal<br>\nin the Software without restriction, including without limitation the rights<br>\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell<br>\ncopies of the Software, and to permit persons to whom the Software is<br>\nfurnished to do so, subject to the following conditions:</p>\n<p>The above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.</p>\n<p>THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR<br>\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,<br>\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE<br>\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER<br>\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,<br>\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE<br>\nSOFTWARE.</p>\n",
    "msgpack_repo_id": "SeanSolberg-DynamicDataObjects",
    "msgpack_repo_homepage": "https://github.com/SeanSolberg/DynamicDataObjects",
    "full_name": "SeanSolberg/DynamicDataObjects",
    "owner": "SeanSolberg",
    "html_url": "https://github.com/SeanSolberg/DynamicDataObjects"
  },
  {
    "msgpack_lang": "Ruby/C++",
    "msgpack_quickstart_html": "<h5>MessagePack</h5>\n<p>An alternative msgpack.org implementation for Ruby and C++</p>\n",
    "msgpack_repo_id": "mneumann-MessagePack",
    "msgpack_repo_homepage": "https://github.com/mneumann/MessagePack",
    "full_name": "mneumann/MessagePack",
    "owner": "mneumann",
    "html_url": "https://github.com/mneumann/MessagePack"
  },
  {
    "msgpack_lang": "ClojureScript",
    "msgpack_quickstart_html": "<h5>msgpack-cljs</h5>\n<p>A Clojurescript implementation of msgpack. This library's structure is <em>heavily</em> adapted from the great work done on <a href=\"https://github.com/edma2/clojure-msgpack\">clojure-msgpack</a>. Support for Clojure <code>keyword</code>, <code>symbol</code>, <code>char</code>, <code>ratio</code>, and <code>set</code> are all included by default as Extension types for convenience and to be compatible with <code>clojure-msgpack</code>.</p>\n<h6>Usage</h6>\n<p><code>pack</code> takes an arbitrary object and converts it into a <code>Uint8Array</code>.</p>\n<p><code>unpack</code> takes a <code>Uint8Array</code> and converts it back into an arbitrary object.</p>\n<h6>Improvements</h6>\n<p>This library could stand to be refactored. We just use this internally at <a href=\"https://pkc.io\">PKC</a>, so, if there is demand (or interest) in making this more feature-rich, we are open to making improvements. Just be vocal, otherwise we'll keep it simple.</p>\n<h6>Copyright</h6>\n<p>Copyright 2018 PKC</p>\n<p>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at:</p>\n<p><a href=\"http://www.apache.org/licenses/LICENSE-2.0\">http://www.apache.org/licenses/LICENSE-2.0</a></p>\n<p>Unless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an &quot;AS IS&quot; BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.</p>\n",
    "msgpack_repo_id": "pkcsecurity-msgpack-cljs",
    "msgpack_repo_homepage": "https://github.com/pkcsecurity/msgpack-cljs",
    "full_name": "pkcsecurity/msgpack-cljs",
    "owner": "pkcsecurity",
    "html_url": "https://github.com/pkcsecurity/msgpack-cljs"
  },
  {
    "msgpack_lang": "R",
    "msgpack_quickstart_html": "<h5>RcppMsgPack</h5>\n<p>Convert to and from msgpack objects in R using the official msgpack-c API through Rcpp.</p>\n<p><img src=\"https://raw.githubusercontent.com/traversc/msgpack2R/master/vignettes/msgpack_flowchart.png\" alt=\"flowchart\" title=\"Conversion flowchart\">\n<em>A flowchart describing the conversion of R objects into msgpack objects and back.</em></p>\n<p>Msgpack EXT types are converted to raw vectors with EXT attributes containing the extension type.  The extension type must be an integer from 0 to 127.</p>\n<p>Maps are converted to data.frames with additional class &quot;map&quot;.  Map objects in R contain key and value list columns and can be simplified to named lists or named vectors.  The helper function <code>msgpack_map</code> creates map objects that can be serialized into msgpack.</p>\n<p>For more information on msgpack types, see <a href=\"https://github.com/msgpack/msgpack/blob/master/spec.md\">here</a>.</p>\n<h7>Installation:</h7>\n<ol>\n<li><code>install.packages(&quot;RcppMsgPack&quot;)</code></li>\n</ol>\n<h7>Example:</h7>\n<p>See <code>tests/tests.r</code> for more examples.</p>\n<pre><code>library(RcppMsgPack)\nlibrary(microbenchmark)\n\nx &lt;- as.list(1:1e6)\nmicrobenchmark(xpk &lt;- msgpack_pack(x), times=3)\nmicrobenchmark(xu &lt;- msgpack_unpack(xpk), times=3)\n</code></pre>\n",
    "msgpack_repo_id": "eddelbuettel-rcppmsgpack",
    "msgpack_repo_homepage": "https://github.com/eddelbuettel/rcppmsgpack",
    "full_name": "eddelbuettel/rcppmsgpack",
    "owner": "eddelbuettel",
    "html_url": "https://github.com/eddelbuettel/rcppmsgpack"
  },
  {
    "msgpack_lang": "Haskell",
    "msgpack_quickstart_html": "<h5>MessagePack for Haskell</h5>\n<p>This implementation defines an messagepack <code>Object</code> type, which is an instance of\n<code>Serialize</code> (from <a href=\"http://hackage.haskell.org/package/cereal\">cereal</a> ):</p>\n<pre><code class=\"language-haskell\">data Object = ObjectNil\n            | ObjectUInt   Word64\n            | ObjectInt    Int64\n            | ObjectBool   Bool\n            | ObjectFloat  Float\n            | ObjectDouble Double\n            | ObjectString ByteString\n            | ObjectBinary ByteString\n            | ObjectArray  [Object]\n            | ObjectMap    (M.Map Object Object )\n            | ObjectExt    !Int8 BS.ByteString\n    deriving (Eq, Ord, Show)\n    \ninstance Serialize Object where\n    -- ...\n</code></pre>\n<p>Thus, you can use cereal's <code>encode</code> and <code>decode</code> to pack and unpack objects.</p>\n",
    "msgpack_repo_id": "rodrigosetti-messagepack",
    "msgpack_repo_homepage": "http://hackage.haskell.org/package/messagepack",
    "full_name": "rodrigosetti/messagepack",
    "owner": "rodrigosetti",
    "html_url": "https://github.com/rodrigosetti/messagepack"
  },
  {
    "msgpack_lang": "Dart",
    "msgpack_quickstart_html": "<h5>dart-msgpack</h5>\n<p>This is a very early release of my MessagePack library for Dart. Currently, message classes must be written by hand. For example:</p>\n<pre><code class=\"language-dart\">class NotificationFrame extends Message {\n    String kind;\n    Map&lt;String, Object&gt; data;\n\n    NotificationFrame(this.kind, this.data);\n\n    static NotificationFrame fromList(List f) =&gt; new NotificationFrame(f[0], f[1]);\n    List toList() =&gt; [kind, data];\n}\n</code></pre>\n<p>For each class you need to define the <code>fromList</code> and <code>toList</code> methods, which convert from and to a list of fields respectively.</p>\n<p>For example usage, see the unit tests.</p>\n",
    "msgpack_repo_id": "danellis-dart-msgpack",
    "msgpack_repo_homepage": "https://github.com/danellis/dart-msgpack",
    "full_name": "danellis/dart-msgpack",
    "owner": "danellis",
    "html_url": "https://github.com/danellis/dart-msgpack"
  },
  {
    "msgpack_lang": "Node",
    "msgpack_quickstart_html": "<h5>msgpack-response</h5>\n<p><img src=\"https://github.com/sschizas/msgpack-response/workflows/Node.js%20CI/badge.svg?branch=master\" alt=\"Node.js CI\">\n<a href=\"https://github.com/sschizas/msgpack-response\"><img src=\"https://david-dm.org/sschizas/msgpack-response.svg\" alt=\"Dependency Status\"></a>\n<a href=\"CODE_OF_CONDUCT.md\"><img src=\"https://img.shields.io/badge/Contributor%20Covenant-v2.0%20adopted-ff69b4.svg\" alt=\"Contributor Covenant\"></a>\n<a href=\"https://opensource.org/licenses/MIT\"><img src=\"https://img.shields.io/badge/License-MIT-yellow.svg\" alt=\"License: MIT\"></a></p>\n<p>An implementation of <a href=\"http://msgpack.org/\">Message Pack</a> middleware for <a href=\"https://expressjs.com/\">ExpressJS</a>.</p>\n<p><strong>Features</strong></p>\n<ul>\n<li>Automatic Message Pack detection (from the HTTP headers) and encoding of all JSON messages to Message Pack.</li>\n<li>Extension of the current ExpressJS API; Introducing the <code>Response.msgPack(jsObject)</code> method on the standard <a href=\"https://expressjs.com/en/4x/api.html#res\">ExpressJS Response</a> object.</li>\n</ul>\n<h6>Getting Started</h6>\n<p>With auto-detection and transformation enabled, the middleware detects automatically the HTTP header <code>Accept: application/x-msgpack</code> and piggybacks the <code>Response.json()</code> method of the ExpressJS API, to encode the JSON response as Message Pack. This method is useful when you have existing applications that need to use the middleware, without changing the codebase very much.</p>\n<pre><code class=\"language-javascript\">const msgpackResponse = require('msgpack-response');\n\napp.use(msgpackResponse({auto_detect: true}));\n\napp.get('/test_json', (req, res) =&gt; {\n\tres.status(200).json({'message': 'a true test'});\n})\n</code></pre>\n<blockquote>\n<p>Note: Remember to add the header <code>Accept: application/x-msgpack</code> in the request.</p>\n</blockquote>\n<p>Also, it can have auto-detection and transformation disabled. The middleware extends the <code>Response</code> object of the ExpressJS framework, by adding the <code>msgPack()</code> method to it. Then to return an encoded response, you just use the <code>Response.msgPack()</code> method that accepts the Javascript object as a parameter. For example,</p>\n<pre><code class=\"language-javascript\">const msgpackResponse = require('msgpack-response');\n\napp.use(msgpackResponse({auto_detect: false}));\n//or\napp.use(msgpackResponse());\n\napp.get('/test_msgpack', (req, res) =&gt; {\n\tres.status(200).msgPack({'message': 'a true test'});\n});\n</code></pre>\n<blockquote>\n<p>Note: Initialize the middleware before the actual routes in the middleware chain to properly extend the <code>Response</code> Object.</p>\n</blockquote>\n<h6>Requirements</h6>\n<p>Node.js &gt;= 6.0</p>\n<h6>Installation</h6>\n<p>With <a href=\"https://www.npmjs.com/\">npm</a> do:</p>\n<pre><code class=\"language-bash\">npm install msgpack-response -save\n</code></pre>\n<h6>About</h6>\n<p>I :heart: open source software!</p>\n<p>Check out my other <a href=\"https://github.com/sschizas\">open source projects</a> or say :wave: on <a href=\"https://twitter.com/StavrosSchizas\">twitter</a>.</p>\n<h6>Contribute</h6>\n<p>Contributions are welcome :metal:. Please see the <a href=\"https://github.com/sschizas/msgpack-response/blob/master/CONTRIBUTING.md\">Contributing Guide</a> and the <a href=\"https://github.com/sschizas/msgpack-response/blob/master/CODE_OF_CONDUCT.md\">Code of Conduct</a>.</p>\n<h6>Authors</h6>\n<ul>\n<li><strong>Stavros Schizas</strong> - <em>Initial work &amp; Maintainer</em></li>\n<li><strong>Vassilios Karakoidas</strong> - <em>Initial work</em> - <a href=\"http://bkarak.wizhut.com\">Wizhut</a></li>\n</ul>\n<p>See also the list of <a href=\"https://github.com/sschizas/msgpack-response/graphs/contributors\">contributors</a> who participated in this project.</p>\n<h6>License</h6>\n<p>msgpack-response is available under the MIT license. See the <a href=\"LICENSE.md\">LICENSE</a> file for more info.</p>\n",
    "msgpack_repo_id": "sschizas-msgpack-response",
    "msgpack_repo_homepage": "https://github.com/sschizas/msgpack-response",
    "full_name": "sschizas/msgpack-response",
    "owner": "sschizas",
    "html_url": "https://github.com/sschizas/msgpack-response"
  },
  {
    "msgpack_lang": "Python/Twisted",
    "msgpack_quickstart_html": "<h5>txmsgpackrpc</h5>\n<p>.. image:: https://travis-ci.org/jakm/txmsgpackrpc.svg?branch=master\n:target: https://travis-ci.org/jakm/txmsgpackrpc</p>\n<p>For the latest source code, see http://github.com/jakm/txmsgpackrpc</p>\n<p><code>txmsgpackrpc</code> is a library for writing asynchronous\n<code>msgpack-rpc &lt;https://github.com/msgpack-rpc/msgpack-rpc/blob/master/spec.md&gt;</code>__\nservers and clients in Python, using <code>Twisted framework &lt;http://twistedmatrix.com&gt;</code><strong>. Library is based on\n<code>txMsgpack &lt;https://github.com/donalm/txMsgpack&gt;</code></strong>, but some\nimprovements and fixes were made.</p>\n<h6>Features</h6>\n<ul>\n<li>user friendly API</li>\n<li>modular object model</li>\n<li>working timeouts and reconnecting</li>\n<li>connection pool support</li>\n<li>TCP, SSL, UDP and UNIX sockets</li>\n</ul>\n<h6>Python 3 note</h6>\n<p>To use UNIX sockets with Python 3 please use Twisted framework 15.3.0 and above.</p>\n<h6>Dependencies</h6>\n<ul>\n<li>msgpack-python https://pypi.python.org/pypi/msgpack-python/</li>\n<li>Twisted http://twistedmatrix.com/trac/</li>\n</ul>\n<h6>Installation</h6>\n<p>.. code:: sh</p>\n<pre><code>% pip install txmsgpackrpc\n</code></pre>\n<p>Debian packages are available on project's <code>Releases page &lt;https://github.com/jakm/txmsgpackrpc/releases/latest&gt;</code>__.</p>\n<h6>TCP example</h6>\n<p>Computation of PI using Chudnovsky algorithm in subprocess. For details,\nsee http://www.craig-wood.com/nick/articles/pi-chudnovsky/.</p>\n<p>Results</p>\n<pre><code>\n::\n\n    Computation of PI with 5 places finished in 0.022390 seconds\n\n    Computation of PI with 100 places finished in 0.037856 seconds\n\n    Computation of PI with 1000 places finished in 0.038070 seconds\n\n    Computation of PI with 10000 places finished in 0.073907 seconds\n\n    Computation of PI with 100000 places finished in 6.741683 seconds\n\n    Computation of PI with 5 places finished in 0.001142 seconds\n\n    Computation of PI with 100 places finished in 0.001182 seconds\n\n    Computation of PI with 1000 places finished in 0.001206 seconds\n\n    Computation of PI with 10000 places finished in 0.001230 seconds\n\n    Computation of PI with 100000 places finished in 0.001255 seconds\n\n    Computation of PI with 1000000 places finished in 432.574457 seconds\n\n    Computation of PI with 1000000 places finished in 402.551226 seconds\n\n    DONE\n\nServer\n~~~~~~\n\n.. code:: python\n\n    from __future__ import print_function\n\n    from collections import defaultdict\n    from twisted.internet import defer, reactor, utils\n    from twisted.python import failure\n    from txmsgpackrpc.server import MsgpackRPCServer\n\n\n    pi_chudovsky_bs = '''\n    &quot;&quot;&quot;\n    Python3 program to calculate Pi using python long integers, binary\n    splitting and the Chudnovsky algorithm\n\n    See: http://www.craig-wood.com/nick/articles/pi-chudnovsky/ for more\n    info\n\n    Nick Craig-Wood &lt;nick@craig-wood.com&gt;\n    &quot;&quot;&quot;\n\n    import math\n    from time import time\n\n    def sqrt(n, one):\n        &quot;&quot;&quot;\n        Return the square root of n as a fixed point number with the one\n        passed in.  It uses a second order Newton-Raphson convgence.  This\n        doubles the number of significant figures on each iteration.\n        &quot;&quot;&quot;\n        # Use floating point arithmetic to make an initial guess\n        floating_point_precision = 10**16\n        n_float = float((n * floating_point_precision) // one) / floating_point_precision\n        x = (int(floating_point_precision * math.sqrt(n_float)) * one) // floating_point_precision\n        n_one = n * one\n        while 1:\n            x_old = x\n            x = (x + n_one // x) // 2\n            if x == x_old:\n                break\n        return x\n\n    def pi_chudnovsky_bs(digits):\n        &quot;&quot;&quot;\n        Compute int(pi * 10**digits)\n\n        This is done using Chudnovsky's series with binary splitting\n        &quot;&quot;&quot;\n        C = 640320\n        C3_OVER_24 = C**3 // 24\n        def bs(a, b):\n            &quot;&quot;&quot;\n            Computes the terms for binary splitting the Chudnovsky infinite series\n\n            a(a) = +/- (13591409 + 545140134*a)\n            p(a) = (6*a-5)*(2*a-1)*(6*a-1)\n            b(a) = 1\n            q(a) = a*a*a*C3_OVER_24\n\n            returns P(a,b), Q(a,b) and T(a,b)\n            &quot;&quot;&quot;\n            if b - a == 1:\n                # Directly compute P(a,a+1), Q(a,a+1) and T(a,a+1)\n                if a == 0:\n                    Pab = Qab = 1\n                else:\n                    Pab = (6*a-5)*(2*a-1)*(6*a-1)\n                    Qab = a*a*a*C3_OVER_24\n                Tab = Pab * (13591409 + 545140134*a) # a(a) * p(a)\n                if a &amp; 1:\n                    Tab = -Tab\n            else:\n                # Recursively compute P(a,b), Q(a,b) and T(a,b)\n                # m is the midpoint of a and b\n                m = (a + b) // 2\n                # Recursively calculate P(a,m), Q(a,m) and T(a,m)\n                Pam, Qam, Tam = bs(a, m)\n                # Recursively calculate P(m,b), Q(m,b) and T(m,b)\n                Pmb, Qmb, Tmb = bs(m, b)\n                # Now combine\n                Pab = Pam * Pmb\n                Qab = Qam * Qmb\n                Tab = Qmb * Tam + Pam * Tmb\n            return Pab, Qab, Tab\n        # how many terms to compute\n        DIGITS_PER_TERM = math.log10(C3_OVER_24/6/2/6)\n        N = int(digits/DIGITS_PER_TERM + 1)\n        # Calclate P(0,N) and Q(0,N)\n        P, Q, T = bs(0, N)\n        one = 10**digits\n        sqrtC = sqrt(10005*one, one)\n        return (Q*426880*sqrtC) // T\n\n    if __name__ == &quot;__main__&quot;:\n        import sys\n        digits = int(sys.argv[1])\n        pi = pi_chudnovsky_bs(digits)\n        print(pi)\n    '''\n\n\n    def set_timeout(deferred, timeout=30):\n        def callback(value):\n            if not watchdog.called:\n                watchdog.cancel()\n            return value\n\n        deferred.addBoth(callback)\n\n        watchdog = reactor.callLater(timeout, defer.timeout, deferred)\n\n\n    class ComputePI(MsgpackRPCServer):\n\n        def __init__(self):\n            self.waiting = defaultdict(list)\n            self.results = {}\n\n        def remote_PI(self, digits, timeout=None):\n            if digits in self.results:\n                return defer.succeed(self.results[digits])\n\n            d = defer.Deferred()\n\n            if digits not in self.waiting:\n                subprocessDeferred = self.computePI(digits, timeout)\n\n                def callWaiting(res):\n                    waiting = self.waiting[digits]\n                    del self.waiting[digits]\n\n                    if isinstance(res, failure.Failure):\n                        func = lambda d: d.errback(res)\n                    else:\n                        func = lambda d: d.callback(res)\n\n                    for d in waiting:\n                        func(d)\n\n                subprocessDeferred.addBoth(callWaiting)\n\n            self.waiting[digits].append(d)\n\n            return d\n\n        def computePI(self, digits, timeout):\n            d = utils.getProcessOutputAndValue('/usr/bin/python', args=('-c', pi_chudovsky_bs, str(digits)))\n\n            def callback((out, err, code)):\n                if code == 0:\n                    pi = int(out)\n                    self.results[digits] = pi\n                    return pi\n                else:\n                    return failure.Failure(RuntimeError('Computation failed: ' + err))\n\n            if timeout is not None:\n                set_timeout(d, timeout)\n\n            d.addCallback(callback)\n\n            return d\n\n\n    def main():\n        server = ComputePI()\n        reactor.listenTCP(8000, server.getStreamFactory())\n\n    if __name__ == '__main__':\n        reactor.callWhenRunning(main)\n        reactor.run()\n\nClient\n~~~~~~\n\n.. code:: python\n\n    from __future__ import print_function\n\n    import sys\n    import time\n    from twisted.internet import defer, reactor, task\n    from twisted.python import failure\n\n    @defer.inlineCallbacks\n    def main():\n        try:\n\n            from txmsgpackrpc.client import connect\n\n            c = yield connect('localhost', 8000, waitTimeout=900)\n\n            def callback(res, digits, start_time):\n                if isinstance(res, failure.Failure):\n                    print('Computation of PI with %d places failed: %s' %\n                          (digits, res.getErrorMessage()), end='\\n\\n')\n                else:\n                    print('Computation of PI with %d places finished in %f seconds' %\n                          (digits, time.time() - start_time), end='\\n\\n')\n                sys.stdout.flush()\n\n            defers = []\n            for _ in range(2):\n                for digits in (5, 100, 1000, 10000, 100000, 1000000):\n                    d = c.createRequest('PI', digits, 600)\n                    d.addBoth(callback, digits, time.time())\n                    defers.append(d)\n                # wait for 30 seconds\n                yield task.deferLater(reactor, 30, lambda: None)\n\n            yield defer.DeferredList(defers)\n\n            print('DONE')\n\n        except Exception:\n            import traceback\n            traceback.print_exc()\n        finally:\n            reactor.stop()\n\n    if __name__ == '__main__':\n        reactor.callWhenRunning(main)\n        reactor.run()\n\nMulticast UDP example\n---------------------\n\nExample servers join to group 224.0.0.5 and listen on port 8000. Their only\nmethod ``echo`` returns its parameter.\n\nClient joins group to 224.0.0.5, sends multicast request to group on port 8000\nand waits for 5 seconds for responses. If some responses are received,\nprotocol callbacks with tuple of results and individual parts are checked for\nerrors. If no responses are received, protocol errbacks with TimeoutError.\n\nBecause there is no common way to determine number of peers in group,\nMsgpackMulticastDatagramProtocol always wait for responses until waitTimeout\nexpires.\n\n.. code:: sh\n\n    $ # setup multicast routing\n    $ ip route add 224.0.0.0/4 dev eth0\n    $ echo 1 &gt; /proc/sys/net/ipv4/ip_forward\n    $\n    $ # start servers listening on port 8000\n    $ python examples/tx_rpc_server_udp_multicast.py &amp;\n    [1] 3584\n    $ python examples/tx_rpc_server_udp_multicast.py &amp;\n    [2] 3585\n    $ python examples/tx_rpc_server_udp_multicast.py &amp;\n    [3] 3586\n    $ python examples/tx_rpc_server_udp_multicast.py &amp;\n    [4] 3587\n    $ python examples/tx_rpc_server_udp_multicast.py &amp;\n    [5] 3588\n    $\n    $ # execute client\n    $ python examples/tx_rpc_client_udp_multicast.py\n    Received results from 5 peers\n    $\n\nServer\n~~~~~~\n\n.. code:: python\n\n    from twisted.internet import defer, reactor, task\n    from txmsgpackrpc.server import MsgpackRPCServer\n\n\n    class EchoRPC(MsgpackRPCServer):\n\n        @defer.inlineCallbacks\n        def remote_echo(self, value, delay=None, msgid=None):\n            if delay is not None:\n                yield task.deferLater(reactor, delay, lambda: None)\n            defer.returnValue(value)\n\n\n    def main():\n        server = EchoRPC()\n        reactor.listenMulticast(8000, server.getMulticastProtocol('228.0.0.5', ttl=5),\n                                listenMultiple=True)\n\n    if __name__ == '__main__':\n        reactor.callWhenRunning(main)\n        reactor.run()\n\n\nClient\n~~~~~~\n\n.. code:: python\n\n    from __future__ import print_function\n\n    from twisted.internet import defer, reactor\n\n    @defer.inlineCallbacks\n    def main():\n        try:\n\n            from txmsgpackrpc.client import connect_multicast\n\n            c = yield connect_multicast('228.0.0.5', 8000, ttl=5, waitTimeout=5)\n\n            data = {\n                        'firstName': 'John',\n                        'lastName': 'Smith',\n                        'isAlive': True,\n                        'age': 25,\n                        'height_cm': 167.6,\n                        'address': {\n                          'streetAddress': &quot;21 2nd Street&quot;,\n                          &quot;city&quot;: 'New York',\n                          &quot;state&quot;: 'NY',\n                          'postalCode': '10021-3100'\n                        },\n                        'phoneNumbers': [\n                          {\n                            'type': 'home',\n                            'number': '212 555-1234'\n                          },\n                          {\n                            'type': 'office',\n                            'number': '646 555-4567'\n                          }\n                        ],\n                        'children': [],\n                        'spouse': None\n                      }\n\n            results = yield c.createRequest('echo', data)\n\n            assert isinstance(results, tuple)\n\n            print('Received results from %d peers' % len(results))\n\n            for i, result in enumerate(results):\n                if result != data:\n                    print('Result %d mismatch' % i)\n                    print(result)\n\n        except Exception:\n            import traceback\n            traceback.print_exc()\n        finally:\n            reactor.stop()\n\n    if __name__ == '__main__':\n        reactor.callWhenRunning(main)\n        reactor.run()\n</code></pre>\n",
    "msgpack_repo_id": "jakm-txmsgpackrpc",
    "msgpack_repo_homepage": "https://github.com/jakm/txmsgpackrpc",
    "full_name": "jakm/txmsgpackrpc",
    "owner": "jakm",
    "html_url": "https://github.com/jakm/txmsgpackrpc"
  },
  {
    "msgpack_lang": "Swift",
    "msgpack_quickstart_html": "<h5>MessagePack</h5>\n<p><strong>MessagePack</strong> is an efficient binary serialization format. It lets you exchange data among multiple languages like JSON. But it's faster and smaller. Small integers are encoded into a single byte, and typical short strings require only one extra byte in addition to the strings themselves.</p>\n<h6>Package.swift</h6>\n<pre><code class=\"language-swift\">.package(url: &quot;https://github.com/swiftstack/messagepack.git&quot;, .branch(&quot;dev&quot;))\n</code></pre>\n<h6>Memo</h6>\n<pre><code class=\"language-swift\">public enum MessagePack {\n    case `nil`\n    case int(Int)\n    case uint(UInt)\n    case bool(Bool)\n    case float(Float)\n    case double(Double)\n    case string(String)\n    case binary([UInt8])\n    case array([MessagePack])\n    case map([MessagePack : MessagePack])\n    case extended(Extended)\n\n    public struct Extended {\n        public let type: Int8\n        public let data: [UInt8]\n        public init(type: Int8, data: [UInt8]) {\n            self.type = type\n            self.data = data\n        }\n    }\n}\n</code></pre>\n<h6>Usage</h6>\n<p>You can find this code and more in <a href=\"https://github.com/swiftstack/examples\">examples</a>.</p>\n<h7>Basic API</h7>\n<pre><code class=\"language-swift\">let hey = MessagePack(&quot;hey there!&quot;)\nlet bytes = try MessagePack.encode(hey)\nlet original = String(try MessagePack.decode(bytes: bytes))\n</code></pre>\n<h7>Stream API</h7>\n<pre><code class=\"language-swift\">let hey = MessagePack(&quot;hey there!&quot;)\nlet stream = BufferedStream(stream: NetworkStream(socket: client))\ntry MessagePack.encode(hey, to: stream)\ntry stream.flush()\nlet original = String(try MessagePack.decode(from: stream))\n</code></pre>\n<h7>Performance optimized</h7>\n<pre><code class=\"language-swift\">let output = OutputByteStream()\nvar encoder = MessagePackWriter(output)\ntry encoder.encode(&quot;one&quot;)\ntry encoder.encode(2)\ntry encoder.encode(3.0)\nlet encoded = output.bytes\n\nvar decoder = MessagePackReader(InputByteStream(encoded))\nlet string = try decoder.decode(String.self)\nlet int = try decoder.decode(UInt8.self)\nlet double = try decoder.decode(Double.self)\nprint(&quot;decoded manually: \\(string), \\(int), \\(double)&quot;)\n</code></pre>\n",
    "msgpack_repo_id": "swiftstack-messagepack",
    "msgpack_repo_homepage": "https://github.com/swiftstack/messagepack",
    "full_name": "swiftstack/messagepack",
    "owner": "swiftstack",
    "html_url": "https://github.com/swiftstack/messagepack"
  },
  {
    "msgpack_lang": "mruby",
    "msgpack_quickstart_html": "<h5>mruby-simplemsgpack</h5>\n<h5>Breaking changes</h5>\n<p>Starting with Release 2.0 only mruby-3 is supported, if you are on an older version check out a commit from before 2021.</p>\n<h5>Installation</h5>\n<p>First get a working copy of <a href=\"https://github.com/mruby/mruby\">mruby</a> then add</p>\n<pre><code class=\"language-ruby\">  conf.gem mgem: 'mruby-simplemsgpack'\n</code></pre>\n<p>to the build_conf.rb of the mruby directory</p>\n<p>mruby-simplemsgpack searches for msgpack-c on your system, if it can find it it links against it, otherwise it builds against msgpack-c from source.\nYou need at least msgpack-c 1 and depending on your system also pkg-config.</p>\n<p>For building from source you need to have cmake installed on your system, take a look at <a href=\"https://github.com/msgpack/msgpack-c/blob/c_master/QUICKSTART-C.md#install-with-source-code\">https://github.com/msgpack/msgpack-c/blob/c_master/QUICKSTART-C.md#install-with-source-code</a> for more information.</p>\n<h6>Example</h6>\n<p>Objects can be packed with <code>Object#to_msgpack</code> or <code>MessagePack.pack</code>:</p>\n<pre><code class=\"language-ruby\">packed_hash = { a: 'hash', with: [1, 'embedded', 'array'] }.to_msgpack\npacked_string = MessagePack.pack('bye')\n\npacked_hash   # =&gt; &quot;\\x82\\xA1a\\xA4hash\\xA4with\\x93\\x01\\xA8embedded\\xA5array&quot;\npacked_string # =&gt; &quot;\\xA3bye&quot;\n</code></pre>\n<p>They are unpacked with <code>MessagePack.unpack</code>:</p>\n<pre><code class=\"language-ruby\">MessagePack.unpack(packed_hash)   # =&gt; { a: 'hash', with: [1, 'embedded', 'array'] }\nMessagePack.unpack(packed_string) # =&gt; 'bye'\n</code></pre>\n<p>A string with multiple packed values can be unpacked by handing a block to\n<code>MessagePack.unpack</code>:</p>\n<pre><code class=\"language-ruby\">packed = packed_string + packed_hash\nunpacked = []\nMessagePack.unpack(packed) do |result|\n  unpacked &lt;&lt; result\nend\nunpacked # =&gt; ['bye', { a: 'hash', with: [1, 'embedded', 'array'] }]\n</code></pre>\n<p>When using <code>MessagePack.unpack</code> with a block and passing it a incomplete packed Message\nit returns the position of the first offending byte, if it was able to unpack the whole Message it returns self.\nThis is helpful if the given data contains an incomplete\nlast object and we want to continue unpacking after we have more data.</p>\n<pre><code class=\"language-ruby\">packed = packed_string + packed_hash.slice(0, packed_hash.length/2)\nunpacked = []\noffending_byte = MessagePack.unpack(packed) do |result|\n  unpacked &lt;&lt; result\nend\noffending_byte # =&gt; 19 (length of packed)\nunpacked # =&gt; ['bye']\n</code></pre>\n<h5>Lazy unpacking</h5>\n<p>Need to pull just a few values from a large MessagePack payload?\n<code>MessagePack.unpack_lazy</code> can be up to <strong>10× faster</strong> because it avoids fully unpacking the structure — only the parts you ask for are decoded.\nIt returns a lightweight handle that lets you navigate using JSON Pointers:</p>\n<pre><code class=\"language-ruby\">data = [\n  { &quot;id&quot; =&gt; 1, &quot;name&quot; =&gt; &quot;Alpha&quot; },\n  { &quot;id&quot; =&gt; 2, &quot;name&quot; =&gt; &quot;Beta&quot; },\n  { &quot;id&quot; =&gt; 3, &quot;name&quot; =&gt; &quot;Gamma&quot; },\n  { &quot;id&quot; =&gt; 4, &quot;name&quot; =&gt; &quot;Delta&quot;, &quot;meta&quot; =&gt; { &quot;active&quot; =&gt; true } }\n]\n\npacked = MessagePack.pack(data)\n\nlazy = MessagePack.unpack_lazy(packed)\n\n# Access an element by JSON Pointer without fully unpacking everything\nlazy.at_pointer(&quot;/3/name&quot;)        # =&gt; &quot;Delta&quot;\nlazy.at_pointer(&quot;/3/meta/active&quot;) # =&gt; true\nlazy.at_pointer(&quot;/3&quot;)             # =&gt; { &quot;id&quot; =&gt; 4, &quot;name&quot; =&gt; &quot;Delta&quot;, &quot;meta&quot; =&gt; { &quot;active&quot; =&gt; true } }\n\n# Root access (returns entire unpacked object)\nlazy.value  # =&gt; full data\n</code></pre>\n<h6>Error handling</h6>\n<p>When using <code>MessagePack.unpack_lazy(...).at_pointer(pointer)</code>, specific exceptions are raised for invalid pointers or traversal mistakes:</p>\n<pre><code class=\"language-ruby\">data = [\n  { &quot;id&quot; =&gt; 1, &quot;name&quot; =&gt; &quot;Alpha&quot; },\n  { &quot;id&quot; =&gt; 2, &quot;name&quot; =&gt; &quot;Beta&quot; }\n]\n\nlazy = MessagePack.unpack_lazy(MessagePack.pack(data))\n\n# Non-existent array index\nlazy.at_pointer(&quot;/99/name&quot;)\n# =&gt; IndexError (array index out of range)\n\n# Non-existent key in an object\nlazy.at_pointer(&quot;/0/nope&quot;)\n# =&gt; KeyError (key not found)\n\n# Attempting to navigate into a scalar value\nlazy.at_pointer(&quot;/0/name/foo&quot;)\n# =&gt; TypeError (cannot navigate into a string)\n</code></pre>\n<h6>Extension Types</h6>\n<p>To customize how objects are packed, define an <a href=\"https://github.com/msgpack/msgpack/blob/master/spec.md#types-extension-type\">extension type</a>.</p>\n<p>By default, MessagePack packs symbols as strings and does not convert them\nback when unpacking them. Symbols can be preserved by registering an extension\ntype for them:</p>\n<pre><code class=\"language-ruby\">sym_ext_type = 0\nMessagePack.register_pack_type(sym_ext_type, Symbol) { |symbol| symbol.to_s }\nMessagePack.register_unpack_type(sym_ext_type) { |data| data.to_sym }\n\nMessagePack.unpack(:symbol.to_msgpack) # =&gt; :symbol\n</code></pre>\n<p>Other objects like classes can also be preserved:</p>\n<pre><code class=\"language-ruby\">cls_ext_type = 1\nMessagePack.register_pack_type(cls_ext_type, Class) { |cls| cls.to_s }\nMessagePack.register_unpack_type(cls_ext_type) { |data| data.constantize }\nMessagePack.unpack(Object.to_msgpack) # =&gt; Object\n</code></pre>\n<p>For nil, true, false, Integer, Float, String, Array and Hash a registered\next type is ignored. They are always packed according to the <a href=\"https://github.com/msgpack/msgpack/blob/master/spec.md\">MessagePack\nspecification</a>.</p>\n<h6>Proc, blocks or lambas</h6>\n<p>If you want to pack and unpack mruby blocks take a look at the <a href=\"https://github.com/Asmod4n/mruby-proc-irep-ext\">mruby-proc-irep-ext</a> gem, it can be registered like the other extension types</p>\n<h6>Overriding <code>to_msgpack</code></h6>\n<p>It's not supported to override <code>to_msgpack</code>, <code>MessagePack.pack</code> ignores it, same when that object is included in a Hash or Array.\nThis gem treats objects like ruby does, if you want to change the way your custom Class gets handled you can add <code>to_hash</code>, <code>to_ary</code>, <code>to_int</code> or <code>to_str</code> methods so it will be packed like a Hash, Array, Integer or String (in that order) then.</p>\n<h6>Acknowledgements</h6>\n<p>This is using code from <a href=\"https://github.com/msgpack/msgpack-c\">https://github.com/msgpack/msgpack-c</a></p>\n<p>Copyright (C) 2008-2015 FURUHASHI Sadayuki</p>\n<p>Distributed under the Boost Software License, Version 1.0.\n(See accompanying file LICENSE_1_0.txt or copy at\nhttp://www.boost.org/LICENSE_1_0.txt)</p>\n",
    "msgpack_repo_id": "Asmod4n-mruby-simplemsgpack",
    "msgpack_repo_homepage": "https://github.com/Asmod4n/mruby-simplemsgpack",
    "full_name": "Asmod4n/mruby-simplemsgpack",
    "owner": "Asmod4n",
    "html_url": "https://github.com/Asmod4n/mruby-simplemsgpack"
  },
  {
    "msgpack_lang": "Pony",
    "msgpack_quickstart_html": "<h5>msgpack</h5>\n<p>A pure Pony implementation of the <a href=\"http://msgpack.org/\">MessagePack serialization format</a>.</p>\n<h6>Status</h6>\n<p>msgpack is currently beta software. It implements a low-level API for encoding and decoding data. Still to do:</p>\n<ul>\n<li>High-level API for a better programming experience</li>\n</ul>\n<h6>Installation</h6>\n<ul>\n<li>Install <a href=\"https://github.com/ponylang/corral\">corral</a></li>\n<li><code>corral add github.com/seantallen-org/msgpack.git --version 0.2.5</code></li>\n<li><code>corral fetch</code> to fetch your dependencies</li>\n<li><code>use &quot;msgpack&quot;</code> to include this package</li>\n<li><code>corral run -- ponyc</code> to compile your application</li>\n</ul>\n<h6>API Documentation</h6>\n<p><a href=\"https://seantallen-org.github.io/msgpack/\">https://seantallen-org.github.io/msgpack/</a></p>\n",
    "msgpack_repo_id": "seantallen-org-msgpack",
    "msgpack_repo_homepage": "https://github.com/seantallen-org/msgpack",
    "full_name": "seantallen-org/msgpack",
    "owner": "seantallen-org",
    "html_url": "https://github.com/seantallen-org/msgpack"
  },
  {
    "msgpack_lang": "msgpack-inspect",
    "msgpack_quickstart_html": "<h5>msgpack-inspect</h5>\n<p>This is a command line tool to inspect/show a data serialized by <a href=\"http://msgpack.org/\">MessagePack</a>.</p>\n<h6>Installation</h6>\n<p>Executable binary files are available from <a href=\"https://github.com/tagomoris/msgpack-inspect/releases\">releases</a>. Download a file for your platform, and use it.</p>\n<p>Otherwise, you can install rubygem version on your CRuby runtime:</p>\n<pre><code>$ gem install msgpack-inspect\n</code></pre>\n<h6>Usage</h6>\n<pre><code>Usage: msgpack-inspect [options] FILE\n\nOptions:\n\n    -f, --format FORMAT              output format of inspection result (yaml/json/jsonl) [default: yaml]\n    -r, --require LIB                ruby file path to require (to load ext type definitions)\n    -v, --version                    Show version of this software\n    -h, --help                       Show this message\n</code></pre>\n<p><code>-r</code> option is available oly with rubygem version, and unavailable with mruby binary release.</p>\n<p>FILE is a file which msgpack binary stored. Specify <code>-</code> to inspect data from STDIN.\nThis command shows the all data contained in specified format (YAML in default).</p>\n<pre><code>---\n- format: &quot;false&quot;\n  header: &quot;0xc2&quot;\n  data: &quot;0xc2&quot;\n  value: false\n- format: &quot;true&quot;\n  header: &quot;0xc3&quot;\n  data: &quot;0xc3&quot;\n  value: true\n</code></pre>\n<h6>Example</h6>\n<p>This is an example to inspect a data from STDIN.\nThe data corresponds to <code>{&quot;compact&quot;:true,&quot;schema&quot;:0}</code> in JSON.</p>\n<pre><code>$ printf &quot;\\x82\\xa7compact\\xc3\\xa6schema\\x00&quot; | msgpack-inspect -\n---\n- format: &quot;fixmap&quot;\n  header: &quot;0x82&quot;\n  length: 2\n  children:\n    - key:\n        format: &quot;fixstr&quot;\n        header: &quot;0xa7&quot;\n        length: 7\n        data: &quot;0x636f6d70616374&quot;\n        value: &quot;compact&quot;\n      value:\n        format: &quot;true&quot;\n        header: &quot;0xc3&quot;\n        data: &quot;0xc3&quot;\n        value: true\n    - key:\n        format: &quot;fixstr&quot;\n        header: &quot;0xa6&quot;\n        length: 6\n        data: &quot;0x736368656d61&quot;\n        value: &quot;schema&quot;\n      value:\n        format: &quot;fixint&quot;\n        header: &quot;0x00&quot;\n        data: &quot;0x00&quot;\n        value: 0\n</code></pre>\n<p>TODO: show more example</p>\n<h6>Contributing</h6>\n<p>Bug reports and pull requests are welcome on GitHub at [https://github.com/tagomoris/msgpack-inspect].</p>\n",
    "msgpack_repo_id": "tagomoris-msgpack-inspect",
    "msgpack_repo_homepage": "https://github.com/tagomoris/msgpack-inspect",
    "full_name": "tagomoris/msgpack-inspect",
    "owner": "tagomoris",
    "html_url": "https://github.com/tagomoris/msgpack-inspect"
  },
  {
    "msgpack_lang": "Scala.js",
    "msgpack_quickstart_html": "<h5>msgpack4z-circe</h5>\n<p><a href=\"https://maven-badges.herokuapp.com/maven-central/com.github.xuwei-k/msgpack4z-circe_2.12\"><img src=\"https://maven-badges.herokuapp.com/maven-central/com.github.xuwei-k/msgpack4z-circe_2.12/badge.svg\" alt=\"Maven Central\"></a>\n<a href=\"https://javadoc.io/doc/com.github.xuwei-k/msgpack4z-circe_3/latest/api/msgpack4z.html\"><img src=\"https://javadoc.io/badge2/com.github.xuwei-k/msgpack4z-circe_3/javadoc.svg\" alt=\"scaladoc\"></a>\n<a href=\"https://www.scala-js.org\"><img src=\"https://www.scala-js.org/assets/badges/scalajs-1.0.0.svg\" alt=\"Scala.js\"></a></p>\n<ul>\n<li><a href=\"https://msgpack.org/\">https://msgpack.org/</a></li>\n<li><a href=\"https://github.com/msgpack/msgpack/blob/master/spec.md\">https://github.com/msgpack/msgpack/blob/master/spec.md</a></li>\n</ul>\n<h7>latest stable version</h7>\n<pre><code class=\"language-scala\">libraryDependencies += &quot;com.github.xuwei-k&quot; %% &quot;msgpack4z-circe&quot; % &quot;0.15.0&quot;\n</code></pre>\n",
    "msgpack_repo_id": "msgpack4z-msgpack4z-circe",
    "msgpack_repo_homepage": "https://github.com/msgpack4z/msgpack4z-circe",
    "full_name": "msgpack4z/msgpack4z-circe",
    "owner": "msgpack4z",
    "html_url": "https://github.com/msgpack4z/msgpack4z-circe"
  },
  {
    "msgpack_lang": "Python",
    "msgpack_quickstart_html": "<h5>mood.msgpack</h5>\n<p>Python MessagePack implementation</p>\n<p><code>MessagePack &lt;https://msgpack.org/&gt;</code>_ is an efficient binary serialization\nformat. It lets you exchange data among multiple languages like JSON. But it's\nfaster and smaller. Small integers are encoded into a single byte, and typical\nshort strings require only one extra byte in addition to the strings themselves.</p>\n<p><strong>Note:</strong> This implementation is designed as a\n<code>pickle &lt;https://docs.python.org/3.10/library/pickle.html&gt;</code>_ substitute.\nIt does not expose MessagePack's extensions mechanism but uses it internally to\npack/unpack non-standard types.</p>\n<p>The following documentation is largely adapted from Python's <code>pickle module documentation &lt;https://docs.python.org/3.10/library/pickle.html&gt;</code>_.</p>\n<p><strong>See also:</strong> <code>MessagePack specification &lt;https://github.com/msgpack/msgpack/blob/master/spec.md&gt;</code>_</p>\n<hr>\n<h6>What can be packed and unpacked?</h6>\n<p>The following standard types can be packed/unpacked:</p>\n<ul>\n<li>\n<p><code>None</code>, <code>True</code> and <code>False</code></p>\n</li>\n<li>\n<p>integers, floating point numbers</p>\n</li>\n<li>\n<p>strings, bytes</p>\n</li>\n<li>\n<p>tuples and dictionaries containing only packable objects</p>\n</li>\n</ul>\n<p>Additionally, the following Python types are supported by default:</p>\n<ul>\n<li>\n<p>complex numbers</p>\n</li>\n<li>\n<p>bytearrays</p>\n</li>\n<li>\n<p>lists, sets and frozensets containing only packable objects</p>\n</li>\n<li>\n<p>classes (these <strong>must</strong> be <code>registered</code>_ in order to be unpacked)</p>\n</li>\n<li>\n<p>instances of classes whose <code>__reduce__</code> method conforms to the interface\ndefined in <code>Packing Class Instances</code>_</p>\n</li>\n</ul>\n<p>The following MessagePack extension types are also supported:</p>\n<ul>\n<li><code>Timestamp</code>_ (<code>specification &lt;https://github.com/msgpack/msgpack/blob/master/spec.md#timestamp-extension-type&gt;</code>_)</li>\n</ul>\n<h6>Module Interface</h6>\n<p>.. _registered:</p>\n<p>register(object)\nAdd <em>object</em> to the <em>registry</em>. <em>object</em> must be a class or a singleton\n(instance whose <code>__reduce__</code> method returns a string).</p>\n<p>pack(object)\nReturn the packed representation of <em>object</em> as a bytearray object.</p>\n<p>unpack(message)\nRead a packed object hierarchy from a <code>bytes-like   &lt;https://docs.python.org/3.10/glossary.html#term-bytes-like-object&gt;</code>_\n<em>message</em> and return the reconstituted object hierarchy specified therein.</p>\n<h6>Packing Class Instances</h6>\n<p><strong>Note:</strong> This being chiefly based on <code>pickle's object.__reduce__() interface &lt;https://docs.python.org/3.10/library/pickle.html#object.__reduce__&gt;</code><em>,\nmost built-in objects and most objects defined in the <code>Python standard library &lt;https://docs.python.org/3.10/library/index.html&gt;</code></em> already conform to it.</p>\n<p>.. _reduce:</p>\n<p>object.<strong>reduce</strong>()\nThe interface is currently defined as follows: the <code>__reduce__</code> method\ntakes no argument and shall return either a unique string or preferably a\ntuple.</p>\n<pre><code>If a string is returned, the string should be interpreted as the name of a\nglobal variable. This behaviour is typically useful for singletons (and is\nthe case for built-in functions).\n\nWhen a tuple is returned, it must be between two and five items long.\nOptional items can either be omitted, or ``None`` can be provided as their\nvalue. The semantics of each item are in order:\n\n* A callable object that will be invoked to create the initial version of\n  the object (it **must** be `registered`_ in order to be unpacked).\n\n* A tuple of arguments for the callable object. An empty tuple must be given\n  if the callable does not accept any argument.\n\n* Optionally, the object's state, which will be passed to the object's\n  ``__setstate__`` method. If the object has no such method then, the value\n  must be a dictionary and it will be merged to the object's ``__dict__``\n  attribute.\n\n* Optionally, a sequence/iterator yielding successive items. These items\n  will be appended to the object using ``object.extend(items)``. This is\n  primarily used for list subclasses, but may be used by other classes as\n  long as they have an ``extend`` method with the appropriate signature. If\n  the object has no such method then, an in-place concatenation will be\n  attempted (equivalent to ``object += items``).\n\n* Optionally, a dict/mapping or a sequence/iterator yielding successive\n  key-value pairs.  These pairs will be stored in the object using\n  ``object.update(pairs)``. This is primarily used for dictionary subclasses,\n  but may be used by other classes as long as they have an ``update`` method\n  with the appropriate signature. If the object has no such method then, an\n  attempt will be made to store these pairs using ``object[key] = value``.\n\n* Optionally, a callable with a ``(object, state)`` signature. This callable\n  allows the user to programmatically control the state-updating behavior of\n  a specific object, instead of using ``object``’s own ``__setstate__``\n  method.\n\nA simple example:\n\n.. code:: python\n\n    &gt;&gt;&gt; from mood.msgpack import pack, unpack, register\n    &gt;&gt;&gt; class Kiki(object):\n    ...     def __init__(self, a, b):\n    ...         self.a = a\n    ...         self.b = b\n    ...     def __repr__(self):\n    ...         return &quot;&lt;Kiki object: a={0.a}, b={0.b}&gt;&quot;.format(self)\n    ...     def change(self, a, b):\n    ...         self.a = a\n    ...         self.b = b\n    ...     def __reduce__(self):\n    ...         return (Kiki, (self.a, self.b))\n    ...\n    &gt;&gt;&gt; k = Kiki(1, 2)\n    &gt;&gt;&gt; k\n    &lt;Kiki object: a=1, b=2&gt;\n    &gt;&gt;&gt; k.change(3, 4)\n    &gt;&gt;&gt; k\n    &lt;Kiki object: a=3, b=4&gt;\n    &gt;&gt;&gt; b = pack(k)\n    &gt;&gt;&gt; b\n    bytearray(b'\\xc7\\x15\\x7f\\x92\\xc7\\x0e\\x06\\xa8__main__\\xa4Kiki\\x92\\x03\\x04')\n    &gt;&gt;&gt; unpack(b)\n    Traceback (most recent call last):\n      File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\n    TypeError: cannot unpack &lt;class '__main__.Kiki'&gt;\n    &gt;&gt;&gt; register(Kiki)\n    &gt;&gt;&gt; unpack(b)\n    &lt;Kiki object: a=3, b=4&gt;\n    &gt;&gt;&gt;\n\nAnother, less simple, example:\n\n.. code:: python\n\n    &gt;&gt;&gt; from mood.msgpack import pack, unpack, register\n    &gt;&gt;&gt; def packable(func):\n    ...     func.__reduce__ = lambda: f&quot;{func.__module__}.{func.__qualname__}&quot;\n    ...     return func\n    ...\n    &gt;&gt;&gt; @packable\n    ... def setstate(obj, state):\n    ...     obj.a = state[&quot;a&quot;]\n    ...     obj.b = state[&quot;b&quot;]\n    ...\n    &gt;&gt;&gt; class Kiki(object):\n    ...     def __init__(self, a=0, b=0):\n    ...         self.a = a\n    ...         self.b = b\n    ...     def __repr__(self):\n    ...         return &quot;&lt;Kiki object: a={0.a}, b={0.b}&gt;&quot;.format(self)\n    ...     def change(self, a, b):\n    ...         self.a = a\n    ...         self.b = b\n    ...     def __reduce__(self):\n    ...         return (Kiki, (), {&quot;a&quot;: self.a, &quot;b&quot;: self.b}, None, None, setstate)\n    ...\n    &gt;&gt;&gt; k = Kiki(1, 2)\n    &gt;&gt;&gt; k\n    &lt;Kiki object: a=1, b=2&gt;\n    &gt;&gt;&gt; k.change(3, 4)\n    &gt;&gt;&gt; k\n    &lt;Kiki object: a=3, b=4&gt;\n    &gt;&gt;&gt; b = pack(k)\n    &gt;&gt;&gt; b\n    bytearray(b'\\xc71\\x7f\\x96\\xc7\\x0e\\x06\\xa8__main__\\xa4Kiki\\x90\\x82\\xa1a\\x03\\xa1b\\x04\\xc0\\xc0\\xc7\\x12\\x07\\xb1__main__.setstate')\n    &gt;&gt;&gt; register(Kiki)\n    &gt;&gt;&gt; register(setstate)\n    &gt;&gt;&gt; unpack(b)\n    &lt;Kiki object: a=3, b=4&gt;\n    &gt;&gt;&gt;\n</code></pre>\n<h6>Timestamp, datetime, ...</h6>\n<p>Packing/unpacking objects from the <code>datetime &lt;https://docs.python.org/3.10/library/datetime.html#module-datetime&gt;</code>_ module is\nstraightforward.</p>\n<p>In the packing process:</p>\n<p>.. code:: python</p>\n<pre><code>&gt;&gt;&gt; import datetime\n&gt;&gt;&gt; from mood import msgpack\n&gt;&gt;&gt; d = datetime.datetime.now()\n&gt;&gt;&gt; d\ndatetime.datetime(2020, 7, 31, 9, 41, 4, 139362)\n&gt;&gt;&gt; msgpack.pack(d)\nbytearray(b'\\xc7#\\x7f\\x92\\xc7\\x12\\x06\\xa8datetime\\xa8datetime\\x91\\xc4\\n\\x07\\xe4\\x07\\x1f\\t)\\x04\\x02 b')\n&gt;&gt;&gt;\n</code></pre>\n<p>In the unpacking process:</p>\n<p>.. code:: python</p>\n<pre><code>&gt;&gt;&gt; import datetime\n&gt;&gt;&gt; from mood import msgpack\n&gt;&gt;&gt; msgpack.register(datetime.datetime)\n&gt;&gt;&gt; msgpack.unpack(bytearray(b'\\xc7#\\x7f\\x92\\xc7\\x12\\x06\\xa8datetime\\xa8datetime\\x91\\xc4\\n\\x07\\xe4\\x07\\x1f\\t)\\x04\\x02 b'))\ndatetime.datetime(2020, 7, 31, 9, 41, 4, 139362)\n&gt;&gt;&gt;\n</code></pre>\n<p>Packing/unpacking <code>Timestamp</code>_ objects is also straightforward:</p>\n<p>.. code:: python</p>\n<pre><code>&gt;&gt;&gt; import time\n&gt;&gt;&gt; from mood import msgpack\n&gt;&gt;&gt; t = msgpack.Timestamp.fromtimestamp(time.time())\n&gt;&gt;&gt; t\nmood.msgpack.Timestamp(seconds=1596180901, nanoseconds=502492666)\n&gt;&gt;&gt; msgpack.pack(t)\nbytearray(b'\\xd7\\xffw\\xcd\\xb7\\xe8_#\\xc9\\xa5')\n&gt;&gt;&gt;\n</code></pre>\n<p>.. code:: python</p>\n<pre><code>&gt;&gt;&gt; from mood import msgpack\n&gt;&gt;&gt; msgpack.unpack(bytearray(b'\\xd7\\xffw\\xcd\\xb7\\xe8_#\\xc9\\xa5'))\nmood.msgpack.Timestamp(seconds=1596180901, nanoseconds=502492666)\n&gt;&gt;&gt;\n</code></pre>\n<p>Converting between <code>Timestamp</code>_ and <code>datetime.datetime &lt;https://docs.python.org/3.10/library/datetime.html#datetime.datetime&gt;</code>_ objects:</p>\n<p>.. code:: python</p>\n<pre><code>&gt;&gt;&gt; import datetime\n&gt;&gt;&gt; from mood import msgpack\n&gt;&gt;&gt; d1 = datetime.datetime.now()\n&gt;&gt;&gt; d1\ndatetime.datetime(2020, 7, 31, 9, 31, 18, 40406)\n&gt;&gt;&gt; t = msgpack.Timestamp.fromtimestamp(d1.timestamp())\n&gt;&gt;&gt; t\nmood.msgpack.Timestamp(seconds=1596180678, nanoseconds=040405989)\n&gt;&gt;&gt; d2 = datetime.datetime.fromtimestamp(t.timestamp())\n&gt;&gt;&gt; d2\ndatetime.datetime(2020, 7, 31, 9, 31, 18, 40406)\n&gt;&gt;&gt; d2 == d1\nTrue\n&gt;&gt;&gt;\n</code></pre>\n<p><strong>Note:</strong> <code>Timestamp</code>_ objects do not carry timezone information and naive\n<code>datetime.datetime &lt;https://docs.python.org/3.10/library/datetime.html#datetime.datetime&gt;</code>_\ninstances are assumed to represent local time.</p>\n<p>.. _Timestamp:</p>\n<p>Timestamp(seconds[, nanoseconds=0])\n* seconds (int)\nNumber of seconds that have elapsed since 1970-01-01 00:00:00 UTC.</p>\n<pre><code>* nanoseconds (int: 0)\n    Nanoseconds precision in ``range(0, 1000000000)``.\n\n**Note:** nanoseconds are always added to seconds, so negative timestamps\nlike -1.2 should be instantiated as Timestamp(-2, 800000000).\n\n\nfromtimestamp(timestamp) (*classmethod*)\n    Return a new `Timestamp`_ instance corresponding to the *timestamp*\n    (int/float) argument. Example:\n\n    .. code:: python\n\n        &gt;&gt;&gt; from mood import msgpack\n        &gt;&gt;&gt; msgpack.Timestamp.fromtimestamp(-1.2)\n        mood.msgpack.Timestamp(seconds=-2, nanoseconds=800000000)\n        &gt;&gt;&gt;\n\n\ntimestamp()\n    Return the floating point timestamp corresponding to this `Timestamp`_\n    instance. The result of ``self.seconds + (self.nanoseconds / 1000000000)``.\n\n\nseconds (*read only*)\n    *seconds* argument passed to the constructor.\n\n\nnanoseconds (*read only*)\n    *nanoseconds* argument passed to the constructor.\n</code></pre>\n",
    "msgpack_repo_id": "lekma-mood.msgpack",
    "msgpack_repo_homepage": "https://github.com/lekma/mood.msgpack",
    "full_name": "lekma/mood.msgpack",
    "owner": "lekma",
    "html_url": "https://github.com/lekma/mood.msgpack"
  },
  {
    "msgpack_lang": "Objective-C",
    "msgpack_quickstart_html": "<h5>msgpack-objc</h5>\n<p>An Objective-C wrapper for <a href=\"https://github.com/msgpack/msgpack-c\">msgpack-c</a>. Focuses on ease of use and speed.\nIf you need configurability, there are other, more advanced libraries, for example <a href=\"https://github.com/gabriel/MPMessagePack\">MPMessagePack</a>.</p>\n<p>This library will always try to use sane defaults. If any nil value is encountered in the MessagePack-data, the object will\nbe omitted instead of returning an <code>[NSNull null]</code>. This means that there can be no nil objects in dictionaries, and object-less\nkeys will be lost in translation.</p>\n<h7>Example usage:</h7>\n<pre><code class=\"language-objc\">#import &lt;msgpack-objc/MessagePack.h&gt;\n\nNSDictionary *dictionary = @{@&quot;name&quot;: @&quot;msgpack-objc&quot;};\n\nNSData *messagePackData = [MessagePack packObject:dictionary];\nNSDictionary *unpackedDictionary = [MessagePack unpackData:messagePackData];\n</code></pre>\n<h7>Supported native types:</h7>\n<ul>\n<li><code>NSArray</code></li>\n<li><code>NSData</code></li>\n<li><code>NSDate</code> (using <a href=\"https://github.com/msgpack/msgpack/blob/master/spec.md#timestamp-extension-type\">MessagePack timestamps</a>)</li>\n<li><code>NSDictionary</code></li>\n<li><code>NSNumber</code> (<code>boolean</code>, <code>u64</code>, <code>i64</code>, <code>float32/64</code>)</li>\n<li><code>NSString</code></li>\n</ul>\n<h6>Extension support</h6>\n<p>The library supports <a href=\"https://github.com/msgpack/msgpack/blob/master/spec.md#timestamp-extension-type\">MessagePack timestamps</a>,\nand will return an <code>NSDate</code>-object whenever one is encountered. When serializing, any <code>NSDate</code>-objects will also be\nserialized as native MessagePack timestamps.</p>\n<p>You can add native serialization for your own classes by conforming to protocol <code>MessagePackSerializable</code> and register it like this:</p>\n<pre><code class=\"language-c\">[MessagePack registerClass:Person.class forExtensionType:14];\n</code></pre>\n",
    "msgpack_repo_id": "forzafootball-msgpack-objc",
    "msgpack_repo_homepage": "https://github.com/forzafootball/msgpack-objc",
    "full_name": "forzafootball/msgpack-objc",
    "owner": "forzafootball",
    "html_url": "https://github.com/forzafootball/msgpack-objc"
  },
  {
    "msgpack_lang": "Go",
    "msgpack_quickstart_html": "<h5>MessagePack Code Generator and Library for Go</h5>\n<p><a href=\"https://travis-ci.org/dchenk/msgp\"><img src=\"https://travis-ci.org/dchenk/msgp.svg?branch=master\" alt=\"Build Status\"></a>\n<a href=\"https://goreportcard.com/badge/github.com/dchenk/msgp\"><img src=\"https://goreportcard.com/badge/github.com/dchenk/msgp\" alt=\"Go Report Card\"></a>\n<a href=\"https://godoc.org/github.com/dchenk/msgp/msgp\"><img src=\"https://godoc.org/github.com/dchenk/msgp?status.svg\" alt=\"GoDoc\"></a></p>\n<p>This is a code generation tool and serialization library for MessagePack. You can read more about MessagePack <a href=\"https://github.com/dchenk/msgp/wiki\">in the wiki</a>\nor at <a href=\"https://msgpack.org\">msgpack.org</a>.</p>\n<p><strong>This library is no longer being maintained. You should be using <a href=\"https://developers.google.com/protocol-buffers/\">Protocol Buffers</a> for binary data serialization</strong></p>\n<h7>Top Features</h7>\n<ul>\n<li>Use Go as your schema language</li>\n<li>Performance is amazing</li>\n<li>JSON <a href=\"https://godoc.org/github.com/dchenk/msgp/msgp#CopyToJSON\">interoperability</a></li>\n<li>Type safety</li>\n<li>Support for complex type declarations</li>\n<li>Define your own <a href=\"https://github.com/dchenk/msgp/wiki/Using-Extensions\">MessagePack extensions</a></li>\n<li>Automatic unit test and benchmark generation</li>\n<li>Native support for Go’s <code>time.Time</code>, <code>complex64</code>, and <code>complex128</code> types</li>\n<li><a href=\"https://github.com/dchenk/msgp/wiki/Using-the-Code-Generator\">Preprocessor directives</a></li>\n<li>Generation of both <code>[]byte</code>-oriented and <code>io.Reader/io.Writer</code>-oriented methods</li>\n</ul>\n<h7>Quickstart</h7>\n<p>In a Go code source file, include the following directive:</p>\n<pre><code class=\"language-go\">//go:generate msgp\n</code></pre>\n<p>Within the directory with the file where you placed that directive, run <code>go generate</code>.</p>\n<p>The <code>msgp</code> command will tell the <code>go generate</code> tool to generate serialization and deserialization methods (functions) for all exported types in the file. These custom-built functions enable you to use package <a href=\"https://godoc.org/github.com/dchenk/msgp/msgp\"><code>msgp</code></a> to efficiently encode objects to and from the MessagePack format.</p>\n<p>You can <a href=\"https://github.com/dchenk/msgp/wiki/Using-the-Code-Generator\">read more about the code generation options here</a>.</p>\n<h7>Use</h7>\n<p>Struct field names can be set the same way as with the <code>encoding/json</code> package. For example:</p>\n<pre><code class=\"language-go\">type Person struct {\n    Name       string `msgp:&quot;name&quot;`\n    Address    string `msgp:&quot;address&quot;`\n    Age        int    `msgp:&quot;age&quot;`\n    Hidden     string `msgp:&quot;-&quot;` // this field is ignored\n    unexported bool              // this field is also ignored\n}\n</code></pre>\n<p>(The struct field tags are optional.)</p>\n<p>By default, the code generator will satisfy <code>msgp.Sizer</code>, <code>msgp.Encoder</code>, <code>msgp.Decoder</code>, <code>msgp.Marshaler</code>, and <code>msgp.Unmarshaler</code>.\nYou’ll often find that much marshalling and unmarshalling will be done with zero heap allocations.</p>\n<p>Although <code>msgp.Marshaler</code> and <code>msgp.Unmarshaler</code> are similar to the standard library’s <code>json.Marshaler</code> and <code>json.Unmarshaler</code>,\n<code>msgp.Encoder</code> and <code>msgp.Decoder</code> are useful for stream serialization. (<code>*msgp.Writer</code> and <code>*msgp.Reader</code> are essentially\nprotocol-aware versions of <code>*bufio.Writer</code> and <code>*bufio.Reader</code>.)</p>\n<p>Consider the following:</p>\n<pre><code class=\"language-go\">const Eight = 8\ntype MyInt int\ntype Data []byte\n\ntype Struct struct {\n    Which  map[string]*MyInt `msgp:&quot;which&quot;`\n    Other  Data              `msgp:&quot;other&quot;`\n    Nums   [Eight]float64    `msgp:&quot;nums&quot;`\n}\n</code></pre>\n<p>As long as the declarations of <code>MyInt</code> and <code>Data</code> are in the same file as <code>Struct</code>, the parser will determine that the type information\nfor <code>MyInt</code> and <code>Data</code> can be passed into the definition of <code>Struct</code> before its methods are generated.</p>\n<h8>Extensions</h8>\n<p>MessagePack supports defining your own types through &quot;extensions,&quot; which are just a tuple of the data &quot;type&quot; (<code>int8</code>) and the raw binary.\nYou can see <a href=\"https://github.com/dchenk/msgp/wiki/Using-Extensions\">a worked example in the wiki.</a></p>\n<h7>Status</h7>\n<p>The code generator here and runtime library are both stable. Newer versions of the code may generate different code than older versions\nfor performance reasons.</p>\n<p>You can read more about how <code>msgp</code> maps MessagePack types onto Go types <a href=\"http://github.com/dchenk/msgp/wiki\">in the wiki</a>.</p>\n<p>Here some of the known limitations/restrictions:</p>\n<ul>\n<li>Identifiers from outside the processed source file are assumed to satisfy the generator's interfaces. If this isn't the case, your code\nwill fail to compile.</li>\n<li>The <code>chan</code> and <code>func</code> fields and types are ignored as well as un-exported fields.</li>\n<li>Encoding of <code>interface{}</code> is limited to built-ins or types that have explicit encoding methods.</li>\n<li>Maps must have <code>string</code> keys. This is intentional (as it preserves JSON interoperability). Although non-string map keys are not forbidden\nby the MessagePack standard, many serializers impose this restriction. (It also means <em>any</em> well-formed <code>struct</code> can be decoded into a\n<code>map[string]interface{}</code>.) The only exception to this rule is that the decoders will allow you to read map keys encoded as <code>bin</code> types,\nsince some legacy encodings permitted this. (However, those values will still be cast to Go <code>string</code>s, and they will be converted to <code>str</code>\ntypes when re-encoded. It is the responsibility of the user to ensure that map keys are UTF-8 safe in this case.) The same rules hold true\nfor JSON translation.</li>\n</ul>\n<p>If the output compiles, then there's a pretty good chance things are fine. (Plus, we generate tests for you.) Please file an issue if you\nthink the generator is writing broken code.</p>\n<h7>Performance</h7>\n<p>If you like benchmarks, see <a href=\"https://github.com/dchenk/messagepack-benchmarks\">here</a>, <a href=\"http://bravenewgeek.com/so-you-wanna-go-fast/\">here</a>,\nand <a href=\"https://github.com/alecthomas/go_serialization_benchmarks\">here</a>.</p>\n<h6>Credits</h6>\n<p>This repository is a fork of github.com/tinylib/msgp.</p>\n<p>Differences between this tool and tinylib/msgp:</p>\n<ul>\n<li>Here we have <a href=\"https://github.com/dchenk/msgp/wiki/Using-the-Code-Generator#matching-type-names\">regular expression matching</a> for type\nnames in directives.</li>\n<li>Here we do not use package <code>unsafe</code> for conversions from byte slices to strings: <code>[]byte</code> is converted quite efficiently to <code>string</code>\nsimply with the built-in <code>string()</code>.</li>\n<li>This codebase is thoroughly refactored to be more Go-idiomatic and efficient.</li>\n</ul>\n<p>You're welcome to contribute!</p>\n",
    "msgpack_repo_id": "dchenk-msgp",
    "msgpack_repo_homepage": "https://github.com/dchenk/msgp",
    "full_name": "dchenk/msgp",
    "owner": "dchenk",
    "html_url": "https://github.com/dchenk/msgp"
  },
  {
    "msgpack_lang": "Retrofit converter (Java)",
    "msgpack_quickstart_html": "<h5>Retrofit-Converter-MessagePack</h5>\n<p><a href=\"https://travis-ci.org/komamitsu/retrofit-converter-msgpack\"><img src=\"https://travis-ci.org/komamitsu/retrofit-converter-msgpack.svg?branch=master\"/></a>\n<a href=\"https://maven-badges.herokuapp.com/maven-central/org.komamitsu/retrofit-converter-msgpack\"><img src=\"https://maven-badges.herokuapp.com/maven-central/org.komamitsu/retrofit-converter-msgpack/badge.svg\" alt=\"Maven Central\"></a>\n<a href=\"https://coveralls.io/github/komamitsu/retrofit-converter-msgpack?branch=master\"><img src=\"https://coveralls.io/repos/komamitsu/retrofit-converter-msgpack/badge.svg?branch=master&amp;service=github\" alt=\"Coverage Status\"></a></p>\n<p>Retrofit Converter for MessagePack</p>\n<h6>Prerequisites</h6>\n<ul>\n<li>JDK 11 or later</li>\n</ul>\n<h6>Install</h6>\n<h7>Gradle</h7>\n<pre><code class=\"language-groovy\">dependencies {\n    implementation 'org.komamitsu:retrofit-converter-msgpack:x.x.x'\n}\n</code></pre>\n<h7>Maven</h7>\n<pre><code class=\"language-xml\">&lt;dependency&gt;\n    &lt;groupId&gt;org.komamitsu&lt;/groupId&gt;\n    &lt;artifactId&gt;retrofit-converter-msgpack&lt;/artifactId&gt;\n    &lt;version&gt;x.x.x&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n<h6>Usage</h6>\n<p>To use, supply an instance of this converter when building your Retrofit instance.</p>\n<pre><code>Retrofit retrofit = new Retrofit.Builder()\n    .baseUrl(&quot;https://api.example.com&quot;)\n    .addConverterFactory(MessagePackConverterFactory.create())\n    .build();\n</code></pre>\n",
    "msgpack_repo_id": "komamitsu-retrofit-converter-msgpack",
    "msgpack_repo_homepage": "https://github.com/komamitsu/retrofit-converter-msgpack",
    "full_name": "komamitsu/retrofit-converter-msgpack",
    "owner": "komamitsu",
    "html_url": "https://github.com/komamitsu/retrofit-converter-msgpack"
  },
  {
    "msgpack_lang": "SION,Swift",
    "msgpack_quickstart_html": "<h5>SION supports MessagePack natively</h5>\n<h6>Synopsis</h6>\n<pre><code class=\"language-swift\">import SION\nimport Foundation\nlet data    = Data([    // [&quot;compact&quot;:true,&quot;schema&quot;:0]\n    0x82,0xa7,0x63,0x6f,0x6d,0x70,0x61,0x63,\n    0x74,0xc3,0xa6,0x73,0x63,0x68,0x65,0x6d,\n    0x61,0x00\n])\nlet sion    = SION(msgPack: data)  // deselialize\nlet msgPack = sion.msgPack         // serialize\ndata == msgPack                    // true\n</code></pre>\n<p>for details of the module, visit:</p>\n<ul>\n<li>https://github.com/dankogai/swift-sion</li>\n</ul>\n<p>for details of the SION serialization format, visit:</p>\n<ul>\n<li>https://dankogai.github.io/SION</li>\n</ul>\n",
    "msgpack_repo_id": "dankogai-swift-sion",
    "msgpack_repo_homepage": "https://github.com/dankogai/swift-sion",
    "full_name": "dankogai/swift-sion",
    "owner": "dankogai",
    "html_url": "https://github.com/dankogai/swift-sion"
  },
  {
    "msgpack_lang": "scala-native",
    "msgpack_quickstart_html": "<h5>msgpack4z-argonaut</h5>\n<p><a href=\"https://maven-badges.herokuapp.com/maven-central/com.github.xuwei-k/msgpack4z-argonaut_2.12\"><img src=\"https://maven-badges.herokuapp.com/maven-central/com.github.xuwei-k/msgpack4z-argonaut_2.12/badge.svg\" alt=\"Maven Central\"></a>\n<a href=\"https://javadoc.io/doc/com.github.xuwei-k/msgpack4z-argonaut_3/latest/api/msgpack4z.html\"><img src=\"https://javadoc.io/badge2/com.github.xuwei-k/msgpack4z-argonaut_3/javadoc.svg\" alt=\"scaladoc\"></a></p>\n<ul>\n<li><a href=\"https://msgpack.org/\">https://msgpack.org/</a></li>\n<li><a href=\"https://github.com/msgpack/msgpack/blob/master/spec.md\">https://github.com/msgpack/msgpack/blob/master/spec.md</a></li>\n</ul>\n<h7>latest stable version</h7>\n<pre><code class=\"language-scala\">libraryDependencies += &quot;com.github.xuwei-k&quot; %% &quot;msgpack4z-argonaut&quot; % &quot;0.8.1&quot;\n</code></pre>\n",
    "msgpack_repo_id": "msgpack4z-msgpack4z-argonaut",
    "msgpack_repo_homepage": "https://msgpack4z.github.io/graph.svg",
    "full_name": "msgpack4z/msgpack4z-argonaut",
    "owner": "msgpack4z",
    "html_url": "https://github.com/msgpack4z/msgpack4z-argonaut"
  },
  {
    "msgpack_lang": "LabVIEW",
    "msgpack_quickstart_html": "<h5>MsgPack_Lab-VIEW</h5>\n<p>MsgPack_Lab-VIEW is a lightweight MessagePack serializer and deserializer library written in native LabVIEW 2016.</p>\n<p>One can decode a MsgPack message to LabVIEW variant containing correct type, or - when type is known at compile time - one can use dedicated decode functions for each supported type.</p>\n",
    "msgpack_repo_id": "mradziwo-MsgPack_LabVIEW",
    "msgpack_repo_homepage": "https://github.com/mradziwo/MsgPack_LabVIEW",
    "full_name": "mradziwo/MsgPack_LabVIEW",
    "owner": "mradziwo",
    "html_url": "https://github.com/mradziwo/MsgPack_LabVIEW"
  },
  {
    "msgpack_lang": "Go",
    "msgpack_quickstart_html": "<h5>MessagePack Code Generator for Go</h5>\n<p><a href=\"https://pkg.go.dev/github.com/shamaton/msgpackgen\"><img src=\"https://pkg.go.dev/badge/github.com/shamaton/msgpackgen.svg\" alt=\"Go Reference\"></a>\n<img src=\"https://github.com/shamaton/msgpackgen/workflows/test/badge.svg\" alt=\"test\">\n<a href=\"https://goreportcard.com/report/github.com/shamaton/msgpackgen\"><img src=\"https://goreportcard.com/badge/github.com/shamaton/msgpackgen\" alt=\"Go Report Card\"></a>\n<a href=\"https://codecov.io/gh/shamaton/msgpackgen\"><img src=\"https://codecov.io/gh/shamaton/msgpackgen/branch/main/graph/badge.svg?token=K7M3778X7C\" alt=\"codecov\"></a>\n<a href=\"https://app.fossa.com/projects/git%2Bgithub.com%2Fshamaton%2Fmsgpackgen?ref=badge_shield\"><img src=\"https://app.fossa.com/api/projects/git%2Bgithub.com%2Fshamaton%2Fmsgpackgen.svg?type=shield\" alt=\"FOSSA Status\"></a></p>\n<p><strong>msgpackgen</strong> provides a code generation tool and serialization library for <a href=\"http://msgpack.org/\">MessagePack</a>.</p>\n<ul>\n<li>🚀 Extremely Fast</li>\n<li>♻️ Easy Maintenance</li>\n<li>💯 Compliant with <a href=\"https://github.com/msgpack/msgpack/blob/master/spec.md\">specifications</a></li>\n</ul>\n<h6>Quickstart</h6>\n<p>Create go.mod file, if you still have not created.</p>\n<pre><code class=\"language-shell\"># example\ngo mod init github.com/user/awesome\n</code></pre>\n<p>In a source file(ex. main.go), include the following directive:</p>\n<pre><code class=\"language-go\">//go:generate msgpackgen\nor\n//go:generate go run github.com/shamaton/msgpackgen\n</code></pre>\n<p>And run the following command in your shell:</p>\n<pre><code class=\"language-shell\">go generate\n</code></pre>\n<p>It will generate one <code>.go</code> file for serialization, default is <code>resolver.msgpackgen.go</code>.\nYou can call one method to use generated code.</p>\n<pre><code class=\"language-go\">func main() {\n\t// this method is defined in resolver.msgpackgen.go\n\tRegisterGeneratedResolver()\n\t\n\t// ... your code ...\n}\n</code></pre>\n<p><code>Marshal</code> and <code>Unmarshal</code> look like this:</p>\n<pre><code class=\"language-go\">    // import github.com/shamaton/msgpackgen/msgpack\n    v := ResolvedStruct{}\n    b, err := msgpack.Marshal(v)\n    if err != nil {\n        panic(err)\n    }\n    \n    var vv ResolvedStruct\n    err = msgpack.Unmarshal(b, &amp;vv)\n    if err != nil {\n        panic(err)\n    }\n</code></pre>\n<h6>Serializer</h6>\n<h7>Supported Types</h7>\n<p>primitive types:<br>\n<code>int</code>, <code>int8</code>, <code>int16</code>, <code>int32</code>, <code>int64</code>,\n<code>uint</code>, <code>uint8</code>, <code>uint16</code>, <code>uint32</code>, <code>uint64</code>,\n<code>float32</code>, <code>float64</code>, <code>string</code>, <code>bool</code>, <code>byte</code>, <code>rune</code>,\n<code>complex64</code>, <code>complex128</code></p>\n<p>slice, array: <code>[]</code>, <code>[cap]</code></p>\n<p>map: <code>map[key]value</code></p>\n<p>struct: <code>time.Time</code> and structures you defined</p>\n<h7>Tags</h7>\n<p>Renaming or omitting are available.</p>\n<ul>\n<li>Renaming fields via <code>msgpack:&quot;field_name&quot;</code></li>\n<li>Omitting fields via <code>msgpack:&quot;-&quot;</code></li>\n</ul>\n<h7>Switch Default Behaviour</h7>\n<p>Default serialization behaviour is map type. But the performance of array type is better.\nIf you want to switch array type as default, use <code>SetStructAsArray</code>.</p>\n<p>Also, you can use <code>MarshalAsArray</code>, <code>UnmarshalAsArray</code>.</p>\n<h6>Code Generator</h6>\n<h7>Easy maintenance</h7>\n<p>This tool generates only one <code>.go</code> file.\nAll you have to delete is one generated <code>.go</code> file.</p>\n<h7>Analyzing</h7>\n<p><code>-input-dir</code> needs to be in $GOPATH.</p>\n<p>Resolver is generated by recursively searching directories,\nbut some directories and files are ignored.</p>\n<ul>\n<li>Prefix <code>_</code> and <code>.</code> directory.</li>\n<li><code>testdata</code> and <code>vendor</code> directory</li>\n<li><code>_test.go</code> file</li>\n</ul>\n<p>If you use <code>-input-file</code> option, it will work without considering the above conditions.</p>\n<hr>\n<p>Compatible with various import rules.</p>\n<pre><code class=\"language-go\">import (&quot;\n\t&quot;example.com/user/a/b&quot;\n\td &quot;example.com/user/a/c&quot;\n\t. &quot;example.com/user/a/e&quot;\n)\n</code></pre>\n<h7>Not Generated Case</h7>\n<p>Not generated in the following cases:</p>\n<pre><code class=\"language-go\">// ex. a/example.go\ntype Example struct {\n\t// unsupported types\n\tInterface interface{}\n\tUintptr uintptr\n\tError error\n\tChan chan\n\tFunc func()\n\t\n\t// nested struct is also unsupported\n\tNestedStruct struct {}\n\t\n\t// because b.Example is not generated\n\tB b.Example\n\t\n\t// because bytes.Butffer is in outside package\n\tBuf bytes.Buffer\n}\n\nfunc (e Example) F() {\n\t// unsupported  struct defined in func\n\ttype InFunction struct {}\n}\n\n// ex a/b/example.go\ntype Example struct {\n\tInterface interface{}\n}\n</code></pre>\n<p>If you serialize a struct that wasn't code generated, it will be processed by <a href=\"https://github.com/shamaton/msgpack\">shamaton/msgpack</a>.</p>\n<h7>Strict Mode</h7>\n<p>If you use strict mode(option <code>-strict</code>), you will get an error if an unrecognized structure is passed.\nIn other words,  <a href=\"https://github.com/shamaton/msgpack\">shamaton/msgpack</a> is not used.</p>\n<hr>\n<p>See also <code>msgpackgen -h</code></p>\n<pre><code class=\"language-shell\">Usage of msgpackgen:\n  -dry-run\n        dry run mode\n  -input-dir string\n        input directory. input-file cannot be used at the same time (default &quot;.&quot;)\n  -input-file string\n        input a specific file. input-dir cannot be used at the same time\n  -output-dir string\n        output directory (default &quot;.&quot;)\n  -output-file string\n        name of generated file (default &quot;resolver.msgpackgen.go&quot;)\n  -pointer int\n        pointer level to consider (default 1)\n  -strict\n        strict mode\n  -use-gopath\n        use GOPATH instead of go.mod\n  -v    verbose diagnostics\n</code></pre>\n<h6>Benchmarks</h6>\n<p>These results are recorded by <a href=\"https://github.com/shamaton/msgpack_bench\">msgpack_bench</a> at 2021/08.<br>\nThe result of this package is that the suffix has <code>ShamatonGen</code>.\n<img src=\"https://user-images.githubusercontent.com/4637556/128298988-0e3c96fd-6014-42a0-9050-36e2b58316b1.png\" alt=\"msgpack_bench\">\nThe result of <a href=\"https://github.com/alecthomas/go_serialization_benchmarks\">go_serialization_benchmarks</a> is here.\n<img src=\"https://user-images.githubusercontent.com/4637556/128299037-06b3a645-2726-4205-848a-cccebb9a3d7f.png\" alt=\"go_serialization_benchmarks\"></p>\n",
    "msgpack_repo_id": "shamaton-msgpackgen",
    "msgpack_repo_homepage": "https://github.com/shamaton/msgpackgen",
    "full_name": "shamaton/msgpackgen",
    "owner": "shamaton",
    "html_url": "https://github.com/shamaton/msgpackgen"
  },
  {
    "msgpack_lang": "Tcl",
    "msgpack_quickstart_html": "<p>msgpack - A pure Tcl implementation of the MessagePack object serialization library\nGenerated from file 'msgpack.man' by tcllib/doctools with format 'text'\nmsgpack(n) 2.0.0  &quot;A pure Tcl implementation of the MessagePack object serialization library&quot;</p>\n<h5>NAME</h5>\n<p>msgpack - msgpack Package Reference</p>\n<h5>SYNOPSIS</h5>\n<p>package require Tcl 8.6\npackage require msgpack ?2.0.0?</p>\n<p>msgpack::packer new\npackerObject data\npackerObject destroy\npackerObject pack args\npackerObject reset\nmsgpack::unpacker new\nunpackerObject destroy\nunpackerObject set_ext_unpacker ?type? ?script?\nunpackerObject unpack_stream istream callback\nunpackerObject unpack_string istring ?callback?\nmsgpack array2list\nmsgpack map2array\nmsgpack map2dict\nmsgpack pack args\nmsgpack unpack string</p>\n<h5>DESCRIPTION</h5>\n<p>The <em>msgpack</em> package is a pure Tcl implementation of the MessagePack object\nserialization library. You can find the code at GitHub:\n<a href=\"URL:https://github.com/jdc8/msgpack\">URL:https://github.com/jdc8/msgpack</a>. MessagePack can be found at\n<a href=\"URL:http://msgpack.org/\">URL:http://msgpack.org/</a>.</p>\n<p>Use this documentation in combination with the MessagePack documentation for\nmore details.</p>\n<h5>Packer class</h5>\n<pre><code>msgpack::packer new\n\n    _oo::class_ &lt;URL:http://www.tcl.tk/man/tcl8.6/TclCmd/class.htm&gt;\n    implementing the MessagePack packing.\n\npackerObject data\n\n    Return the packed data.\n\npackerObject destroy\n\n    Destroy the packer object.\n\npackerObject pack args\n\n    Pack the specified value and store it internally. More information on\n    how to specify values to be packed can be found in section -&gt; Pack\n    options. To get the packed data, use the data method.\n\npackerObject reset\n\n    Reset the packer.\n</code></pre>\n<h5>Unpacker class</h5>\n<pre><code>msgpack::unpacker new\n\n    _oo::class_ &lt;URL:http://www.tcl.tk/man/tcl8.6/TclCmd/class.htm&gt;\n    implementing the MessagePack unpacking.\n\nunpackerObject destroy\n\n    Destroy the unpacker object.\n\nunpackerObject set_ext_unpacker ?type? ?script?\n\n    Set the handler for an extension type. When the unpacker encounters\n    extension type type, it will call script with the type and the data as\n    its arguments. Omit script or script and type to get handlers. Set the\n    handler for a type to an empty string to disable it.\n\nunpackerObject unpack_stream istream callback\n\n    Unpack data read from the istream argument. The callback command is\n    called when a MessagePack object is unpacked. Before calling the\n    callback command, the word _data_ and the unpacked MessagePack object is\n    _lappend_-ed to the command. When the stream is closed (_eof_ detected),\n    the callback command is called with the word _eof_ and the stream handle\n    _lappend_-ed.\n\n    The istream is configure like this:\n\n    *   Non blocking\n\n    *   Unbuffered\n\n    *   Translation _binary_\n\n    *   Encoding _binary_\n\n    Opening and closing the istream is the responsability of the script\n    calling the unpack_stream method.\n\nunpackerObject unpack_string istring ?callback?\n\n    Unpack the specified data. If no callback command is specified, a list\n    with unpacked type (see below) and value pairs is returned. If a\n    callback command is specified, this command is called when a MessagePack\n    object is unpacked. Before calling the callback command, the word _data_\n    and the unpacked MessagePack object is _lappend_-ed to the command.\n</code></pre>\n<p>Type information found in the unpacked MessagePack objects can be one of the\nfollowing:</p>\n<pre><code>array\n\nbin\n\nboolean\n\next\n\nfloat32\n\nfloat64\n\ninteger\n\nmap\n\nnil\n\nstr\n\ntimestamp\n</code></pre>\n<p>Values can be nested type/value list.</p>\n<h5>Utilities</h5>\n<pre><code>msgpack array2list\n\n    Convert a MessagePack array as retuned by the unpack command or method\n    into a Tcl list.\n\nmsgpack map2array\n\n    Convert a MessagePack map as retuned by the unpack command or method\n    into a Tcl array.\n\nmsgpack map2dict\n\n    Convert a MessagePack map as retuned by the unpack command or method\n    into a Tcl dict.\n\nmsgpack pack args\n\n    Pack the specified value. The packed value is returned. More information\n    on how to specify values to be packed can be found in section -&gt; Pack\n    options.\n\nmsgpack unpack string\n\n    Unpack the specified data. A list with unpacked type (see -&gt; Unpacker\n    class) and value pairs is returned.\n</code></pre>\n<h5>Pack options</h5>\n<p>The arguments for the pack command or method are always one or more type\nspecifiers and if needed a value. The list below shows the supported types:</p>\n<pre><code>array size\n\n    Add array size to packed data. Must be followed by size calls to method\n    pack to add the array elements to the packed data.\n\nbin bytes\n\n    Add a byte array (a binary string) to the packed data.\n\nboolean data\n\n    Add a boolean to the packed data. Is equivalent calling methods pack\n    true or pack false.\n\ndict keyType valueType dictionaryValue\n\n    Add a dict to the packed data. This is equivalent to calling method pack\n    map with the dict size as argument, followed by calling method pack\n    keyType and method pack valueType for each key/value pair in the dict.\n\next type bytes\n\n    Add a byte array of a chosen extension type to the packed data.\n\nfalse\n\n    Add a boolean with value false to the packed data.\n\nfix_ext1 type byte\n\n    Add 1 byte of a chosen extension type to the packed data.\n\nfix_ext2 type bytes\n\n    Add 2 bytes of a chosen extension type to the packed data.\n\nfix_ext4 type bytes\n\n    Add 4 bytes of a chosen extension type to the packed data.\n\nfix_ext8 type bytes\n\n    Add 8 bytes of a chosen extension type to the packed data.\n\nfix_ext16 type bytes\n\n    Add 16 bytes of a chosen extension type to the packed data.\n\nfix_int8 data\n\n    Add an 8 bit integer to the packed data.\n\nfix_int16 data\n\n    Add a 16 bit integer to the packed data.\n\nfix_int32 data\n\n    Add a 32 bit integer to the packed data.\n\nfix_int64 data\n\n    Add a 64 bit integer to the packed data.\n\nfix_uint8 data\n\n    Add an 8 bit unsigned integer to the packed data.\n\nfix_uint16 data\n\n    Add a 16 bit unsigned integer to the packed data.\n\nfix_uint32 data\n\n    Add a 32 bit unsigned integer to the packed data.\n\nfix_uint64 data\n\n    Add a 64 bit unsigned integer to the packed data.\n\nfloat32 data\n\n    Add a 32-bit float to the packed data.\n\nfloat64 data\n\n    Add a 64-bit (double precision) float to the packed data.\n\nint data\n\n    Add an integer to the packed data, let the packer choose the best\n    packing.\n\nint8 data\n\n    Add an 8 bit integer to the packed data, let the packer choose the best\n    packing.\n\nint16 data\n\n    Add a 16 bit integer to the packed data, let the packer choose the best\n    packing.\n\nint32 data\n\n    Add a 32 bit integer to the packed data, let the packer choose the best\n    packing.\n\nint64 data\n\n    Add a 64 bit integer to the packed data, let the packer choose the best\n    packing.\n\nlist elemenType list\n\n    Add a Tcl list to the packed data. This is equivalent to calling method\n    pack array with the list length as argument followed by calls to method\n    pack elementType for each list element.\n\nlong data\n\n    Add a long integer to the packed data.\n\nlong_long data\n\n    Add a long long integer to the packed data.\n\nmap size\n\n    Add the map size to the packed data. Must be followed by size pairs of\n    calls to method pack to add the keys and values to the packed data.\n\nmicroseconds micros\n\n    Add a microsecond timestamp to the packed data as a timestamp96.\n\nmilliseconds millis\n\n    Add a millisecond timestamp to the packed data as a timestamp96.\n\nnil\n\n    Add a nil to the packed data.\n\nshort data\n\n    Add a short integer to the packed data.\n\nstr string\n\n    Add a string to the packed data.\n\ntcl_array keyType valueType arrayName\n\n    Add a Tcl array to the packed data. This is equivalent to calling method\n    pack map with the array size as argument, followed by calling method\n    pack keyType and method pack valueType for each key/value pair in the\n    array.\n\ntimestamp32 seconds\n\n    Add a 32-bit unsigned timestamp to the packed data.\n\ntimestamp64 seconds nanoseconds\n\n    Add a 64-bit timestamp (34 bits for seconds, 30 bits for nanoseconds,\n    both unsigned) to the packed data. Nanoseconds must not exceed\n    999999999.\n\ntimestamp96 seconds nanoseconds\n\n    Add a 96-bit timestamp (64 bits for seconds, signed, and 32 bits for\n    nanoseconds, unsigned) to the packed data. Nanoseconds must not exceed\n    999999999.\n\ntrue\n\n    Add a boolean with value true to the packed data.\n\nuint8 data\n\n    Add an 8 bit unsigned integer to the packed data, let the packer choose\n    the best packing.\n\nuint16 data\n\n    Add a 16 bit unsigned integer to the packed data, let the packer choose\n    the best packing.\n\nuint32 data\n\n    Add a 32 bit unsigned integer to the packed data, let the packer choose\n    the best packing.\n\nuint64 data\n\n    Add a 64 bit unsigned integer to the packed data, let the packer choose\n    the best packing.\n\nunsigned_int data\n\n    Add an unsigned integer to the packed data.\n\nunsigned_long data\n\n    Add a unsigned long integer to the packed data.\n\nunsigned_long_long data\n\n    Add an unsigned long long integer to the packed data.\n\nunsigned_short data\n\n    Add an unsigned short integer to the packed data.\n</code></pre>\n<h5>Examples</h5>\n<p>Creating a <em>msgpack::packer</em> object and packing some data:</p>\n<p>| package require msgpack</p>\n<p>| set p [msgpack::packer new]</p>\n<p>| $p pack int 123456789\n| $p pack str &quot;A MessagePack example&quot;\n| $p pack dict int str {1 one 2 two}\n| set packed_data [$p data]\n| $p destroy</p>\n<p>Now unpack the packed data using a <em>msgpack::packer</em> object:</p>\n<p>| package require msgpack</p>\n<p>| set u [msgpack::unpacker new]\n| $u unpack_string $packed_data</p>\n<p>| $u destroy</p>\n<p>After unpacking, the following list of type/value pairs is returned by the\nunpack_string method:</p>\n<p>| {integer 123456789} {str {A MessagePack example}} {map {{integer 1} {str one} {integer 2} {str two}}}</p>\n<p>The same example using the pack utility function for packing the data:</p>\n<p>| set packed_data &quot;&quot;\n| append packed_data [msgpack pack int 0xFFFFFFFF]\n| append packed_data [msgpack pack bin &quot;A Utility example&quot;]\n| append packed_data [msgpack pack dict int str {3 three 4 four}]</p>\n<p>An using the unpack utility function to unpack the data:</p>\n<p>| puts [msgpack unpack $packed_data]</p>\n<p>After unpacking, the following list of type/value pairs is returned by the\nunpack utility function:</p>\n<p>| {integer 4294967295} {bin {A Utility example}} {map {{integer 3} {str three} {integer 4} {str four}}}</p>\n<p>With set_ext_unpacker you can register a handler to unpack custom extension\ntypes.</p>\n<p>| set up [msgpack::unpacker new]</p>\n<p>| proc xor {n type data} {\n|     set res {}\n|     foreach b [split $data {}] {\n|         set code [scan $b %c]\n|         append res [format %c [expr { $code ^ $n }]]\n|     }</p>\n<p>|     return [list encrypted $res]\n| }</p>\n<p>| $up set_ext_unpacker 100 {xor 5}\n| # Prints &quot;{encrypted Hello!}&quot;.\n| puts [$up unpack_string [msgpack pack ext 100 M`iij$]]\n| $up destroy</p>\n<h5>Bugs, ideas, feedback</h5>\n<p>This document, and the package it describes, will undoubtedly contain bugs and\nother problems. Please report such at the <em>Github tracker</em>\n<a href=\"URL:https://github.com/jdc8/msgpack/issues\">URL:https://github.com/jdc8/msgpack/issues</a>. Please also report any ideas for\nenhancements you may have for either package and/or documentation.</p>\n<h5>License</h5>\n<p>The code is released under the BSD license (specifically Modified BSD aka New\nBSD aka 3-clause BSD). Check COPYING.BSD for more info about the license.</p>\n<h5>KEYWORDS</h5>\n<p>MessagePack, msgpack, serialization</p>\n<h5>CATEGORY</h5>\n<p>Serialization</p>\n<h5>COPYRIGHT</h5>\n<p>Copyright (c) 2013 Jos Decoster <a href=\"mailto:jos.decoster@gmail.com\">jos.decoster@gmail.com</a>\nCopyright (c) 2020 D. Bohdan <a href=\"https://dbohdan.com/\">https://dbohdan.com/</a></p>\n",
    "msgpack_repo_id": "jdc8-msgpack",
    "msgpack_repo_homepage": "http://wiki.tcl.tk/37718",
    "full_name": "jdc8/msgpack",
    "owner": "jdc8",
    "html_url": "https://github.com/jdc8/msgpack"
  },
  {
    "msgpack_lang": "Zig",
    "msgpack_quickstart_html": "<h5>MessagePack for Zig</h5>\n<p>High-level APIs for <a href=\"https://github.com/ludocode/mpack\">MPack</a>, a fast compliant encoder/decoder for the <a href=\"https://msgpack.org/\">MessagePack</a> binary format.</p>\n<p>Built and tested with Zig version <code>0.13.0</code>.</p>\n<blockquote>\n<ul>\n<li>Simple and easy to use</li>\n<li>Secure against untrusted data</li>\n<li>Lightweight, suitable for embedded</li>\n<li><a href=\"https://github.com/ludocode/schemaless-benchmarks#speed---desktop-pc\">Extremely fast</a></li>\n</ul>\n</blockquote>\n<h6>Table of Contents</h6>\n<ul>\n<li><a href=\"#installation\">Installation</a></li>\n<li><a href=\"#usage\">Usage</a></li>\n<li><a href=\"#api\">API</a>\n<ul>\n<li><a href=\"#writer\"><code>Writer</code></a></li>\n<li><a href=\"#tree\"><code>Tree</code></a></li>\n<li><a href=\"#treecursor\"><code>TreeCursor</code></a></li>\n<li><a href=\"#reader\"><code>Reader</code></a></li>\n<li><a href=\"#cursor\"><code>Cursor</code></a></li>\n</ul>\n</li>\n<li><a href=\"#testing\">Testing</a></li>\n<li><a href=\"#benchmarks\">Benchmarks</a></li>\n</ul>\n<h6>Installation</h6>\n<pre><code class=\"language-bash\"># replace {VERSION} with the latest release eg: v0.1.0\nzig fetch https://github.com/theseyan/mpack-zig/archive/refs/tags/{VERSION}.tar.gz\n</code></pre>\n<p>Copy the hash generated and add mpack-zig to <code>build.zig.zon</code>:</p>\n<pre><code class=\"language-zig\">.{\n    .dependencies = .{\n        .mpack = .{\n            .url = &quot;https://github.com/theseyan/mpack-zig/archive/refs/tags/{VERSION}.tar.gz&quot;,\n            .hash = &quot;{HASH}&quot;,\n        },\n    },\n}\n</code></pre>\n<h6>API</h6>\n<p>As there is currently no proper documentation, I recommend checking out the <a href=\"https://github.com/theseyan/mpack-zig/tree/main/test\">tests</a> to refer for examples. The source code is also well-commented.</p>\n<h7><code>Writer</code></h7>\n<blockquote>\n<p>[!NOTE]\nZero-allocating API, all writes are flushed to user-provided buffer.</p>\n</blockquote>\n<p>The simplest way to incrementally write a MessagePack encoded message to a buffer. Writing should always start with <code>startMap</code> and end with <code>finishMap</code>. Values should always be written immediately after respective keys.\nAfter writing is done, call <code>deinit</code> to flush the written bytes to the underlying buffer.</p>\n<p>For pure-Zig code, it can be useful to directly encode a struct (or any supported type) using the <code>writeAny</code>/<code>writeAnyExplicit</code> methods.</p>\n<p>If you already have a parsed tree of nodes (using <code>Tree</code> API), and need to serialize a nested child <code>Map</code> node to it's own MessagePack buffer, use the <code>writeMapNode</code> method which accepts a <code>Tree.Node</code> (internally, it uses the <code>Writer</code> and <code>TreeCursor</code> APIs).</p>\n<p>It is also possible to write pre-encoded MessagePack object bytes as value to a larger object via <code>writeEncodedObject</code>. This is particularly useful when creating a larger structure that embeds smaller encoded structures, wihout having to decode and re-encode everything.</p>\n<pre><code class=\"language-zig\">const Writer = mpack.Writer;\n\nvar buffer: [1024]u8 = undefined;\nvar writer = Writer.init(&amp;buffer);\n\ntry writer.startMap(3);\ntry writer.writeString(&quot;name&quot;);     // Key\n  try writer.writeString(&quot;Sayan&quot;);  // Value\n\ntry writer.writeString(&quot;age&quot;);      // Key\n  try writer.writeUint32(100);      // Value\n\ntry writer.writeString(&quot;location&quot;); // and so on...\n  try writer.startMap(2);\n    try writer.writeString(&quot;x&quot;);\n      try writer.writeDouble(123.535);\n    try writer.writeString(&quot;y&quot;);\n      try writer.writeDouble(1234.1234);\n  try writer.finishMap();\ntry writer.finishMap();\n\n// Flush buffered writes to stream\ntry writer.deinit();\n</code></pre>\n<p>Results in an encoded message equivalent to the following JSON:</p>\n<pre><code class=\"language-json\">{\n  &quot;name&quot;: &quot;Sayan&quot;,\n  &quot;age&quot;: 100,\n  &quot;location&quot;: {\n    &quot;x&quot;: 123.535,\n    &quot;y&quot;: 1234.1234\n  }\n}\n</code></pre>\n<p>The following <code>Writer</code> methods are available:</p>\n<ul>\n<li><code>writeAny</code> - Serialize any supported data type, including structs, value must be known at comptime.</li>\n<li><code>writeHashMap</code> - Write a <code>StringArrayHashMap</code> as a <code>Map</code> value.</li>\n<li><code>writeNumber</code> - Infer the type of number at comptime.</li>\n<li><code>writeNull</code></li>\n<li><code>writeBool</code></li>\n<li><code>writeInt8</code>, <code>writeInt16</code>, <code>writeInt32</code>, <code>writeInt64</code></li>\n<li><code>writeUint8</code>, <code>writeUint16</code>, <code>writeUint32</code>, <code>writeUint64</code></li>\n<li><code>writeFloat</code>, <code>writeDouble</code></li>\n<li><code>writeNumberExplicit</code> - Infer the type of number at comptime, but value is runtime-known.</li>\n<li><code>writeString</code></li>\n<li><code>writeBytes</code></li>\n<li><code>writeExtension</code> - Read more on <a href=\"https://github.com/msgpack/msgpack/blob/master/spec.md#extension-types\">MessagePack Extensions</a>.</li>\n<li><code>startArray</code> - Start writing an array. <code>count</code> must be known upfront.</li>\n<li><code>startMap</code> - Start writing a map. <code>length</code> must be known upfront.</li>\n<li><code>finishArray</code>, <code>finishMap</code> - Close the last opened array/map.</li>\n<li><code>writeAnyExplicit</code> - When value is unknown at comptime, but type is known.</li>\n<li><code>writeMapNode</code> - Encode a parsed <code>NodeType.Map</code> node back to binary.</li>\n<li><code>writeEncodedObject</code> - Write a pre-encoded MessagePack object as value.</li>\n<li><code>stat</code> - Returns information about underlying buffer.</li>\n</ul>\n<h7><code>Tree</code></h7>\n<blockquote>\n<p>[!NOTE]\nBy default, nodes of the parsed tree are allocated on the heap as required automatically.\nTo avoid dynamic allocations, you can create a re-useable <code>Pool</code> with pre-allocated nodes.\nStrings/Binary/Extension values are zero-copy and point to the original buffer, hence are only valid as long as the buffer lives.</p>\n</blockquote>\n<p>Tree-based reader, can be used to read data explicitly and with random access, get a item by path (eg. <code>parents.mother.children[0].name</code>), de-serialize a message to a Zig struct, or traverse the tree using <code>TreeCursor</code>.</p>\n<pre><code class=\"language-zig\">pub const Tree = struct {\n  pub fn init(allocator: std.mem.Allocator, data: []const u8, pool: ?Pool) !Tree\n  pub fn deinit(self: *Tree) !void\n\n  pub fn getByPath(self: *Tree, path: []const u8) !Node\n  pub fn readAny(self: *Tree, comptime T: type) !struct { value: T, arena: std.heap.ArenaAllocator }\n  pub fn cursor(self: *Tree) !Cursor\n\n  /// A pre-allocated pool of nodes to avoid dynamic allocations in hot paths.\n  pub const Pool = struct {\n    /// Creates a pool of pre-allocated nodes for use with `init`.\n    /// This helps avoid slow dynamic allocations in hot paths.\n    pub fn init(allocator: std.mem.Allocator, size: usize) !Pool\n\n    /// Destroys the pool and frees the underlying memory.\n    pub fn deinit(self: *Pool) void\n  };\n};\n\npub const Node = {\n  pub const NodeType = enum {\n    Null,\n    Bool,\n    Int,\n    Uint,\n    Float,\n    Double,\n    String,\n    Bytes,\n    Array,\n    Map,\n    Extension,\n    Missing\n  };\n\n  pub fn getType(self: Node) NodeType\n  pub fn isValid(self: Node) bool\n  pub fn isNull(self: Node) bool\n  pub fn getBool(self: Node) !bool\n  pub fn getInt(self: Node) !i64\n  pub fn getUint(self: Node) !u64\n  pub fn getFloat(self: Node) !f32\n  pub fn getDouble(self: Node) !f64\n  pub fn getString(self: Node) ![]const u8\n  pub fn getBytes(self: Node) ![]const u8\n  pub fn getExtensionType(self: Node) !i8\n  pub fn getExtensionBytes(self: Node) ![]const u8\n  pub fn getArrayLength(self: Node) !u32\n  pub fn getArrayItem(self: Node, index: u32) !Node\n  pub fn getMapLength(self: Node) !u32\n  pub fn getMapKeyAt(self: Node, index: u32) !Node\n  pub fn getMapValueAt(self: Node, index: u32) !Node\n  pub fn getMapKey(self: Node, key: []const u8) !Node\n};\n</code></pre>\n<h7><code>TreeCursor</code></h7>\n<p>A <code>TreeCursor</code> can be used to traverse through a tree's nodes in order.</p>\n<pre><code class=\"language-zig\">var cursor = try tree.cursor();\n\n// ... or a cursor starting from any nested Map node\nvar cursor = try TreeCursor.init(nested_map_node);\n</code></pre>\n<p>It is non-allocating, and returns items one-by-one via the <code>next</code> method. When all items are exhausted, <code>null</code> is returned.</p>\n<pre><code class=\"language-zig\">pub const TreeCursor = struct {\n  pub const MAX_STACK_DEPTH = 512;\n  pub const Event = union(enum) {\n    // Value events\n    null,\n    bool: bool,\n    int: i64,\n    uint: u64,\n    float: f32,\n    double: f64,\n    string: []const u8,\n    bytes: []const u8,\n    \n    // Container events\n    mapStart: u32,      // Count of map\n    mapEnd,\n    arrayStart: u32,    // Length of array\n    arrayEnd,\n\n    // Extensions\n    extension: struct {\n        type: i8,\n        data: []const u8,\n    },\n  };\n\n  pub fn init(root: Node) TreeCursor\n  pub fn next(self: *TreeCursor) !?Event\n};\n</code></pre>\n<h7><code>Reader</code></h7>\n<blockquote>\n<p>[!NOTE]\nSimple, zero-allocating, single-pass reader.\nStrings/Binary/Extension values are &quot;views&quot; into the original buffer, and hence only valid as long as the buffer lives.</p>\n</blockquote>\n<p>Simple primitive reader API that reads tags from the encoded buffer one-by-one. This is the fastest way to traverse through the message but cannot go backwards nor provide random-access. Each read tag advances the reader automatically.</p>\n<p>Use the <code>Tree</code> API if elements are to be accessed multiple times or random-access is required.\nOtherwise, it is recommended to use the traversing <code>Cursor</code> API instead of using this directly.</p>\n<pre><code class=\"language-zig\">pub const Reader = struct {\n  pub const TagType = enum {\n    Null,\n    Bool,\n    Int,\n    Uint,\n    Float,\n    Double,\n    String,\n    Bytes,\n    Array,\n    Map,\n  };\n\n  pub const Tag = struct {\n    pub fn getType(self: *Tag) TagType,\n\n    pub fn isNull(self: *Tag) bool,\n    pub fn getBool(self: *Tag) bool,\n    pub fn getInt(self: *Tag) i64,\n    pub fn getUint(self: *Tag) u64,\n    pub fn getFloat(self: *Tag) f32,\n    pub fn getDouble(self: *Tag) f64,\n    pub fn getStringValue(self: *Tag, reader: *Reader) ![]const u8,\n    pub fn getBinaryBytes(self: *Tag, reader: *Reader) ![]const u8,\n    pub fn getExtensionBytes(self: *Tag, reader: *Reader) ![]const u8\n    pub fn getStringLength(self: *Tag) u32,\n    pub fn getArrayLength(self: *Tag) u32,\n    pub fn getMapLength(self: *Tag) u32,\n    pub fn getBinLength(self: *Tag) u32,\n    pub fn getExtensionLength(self: *Tag) u32,\n    pub fn getExtensionType(self: *Tag) i8\n  }\n\n  pub fn init(data: []const u8) Reader\n  pub fn readTag(self: *Reader) !Tag\n  pub fn finishArray(self: *Reader) void\n  pub fn finishMap(self: *Reader) void\n  pub fn cursor(self: *Reader) Cursor\n  pub fn deinit(self: *Reader) !void\n};\n</code></pre>\n<h7><code>Cursor</code></h7>\n<p>Cursor based on the <code>Reader</code> API. Faster than <code>TreeCursor</code> but subject to the same limitations as <code>Reader</code>.</p>\n<p>The API is very similar to <code>TreeCursor</code>.</p>\n<pre><code class=\"language-zig\">pub const Cursor = struct {\n  pub const MAX_STACK_DEPTH = 512;\n  pub const Event = union(enum) {\n    // Value events\n    null,\n    bool: bool,\n    int: i64,\n    uint: u64,\n    float: f32,\n    double: f64,\n    string: []const u8,\n    bytes: []const u8,\n    \n    // Container events\n    mapStart: u32,      // Count of map\n    mapEnd,\n    arrayStart: u32,    // Length of array\n    arrayEnd,\n\n    // Extensions\n    extension: struct {\n        type: i8,\n        data: []const u8,\n    },\n  };\n\n  pub fn init(reader: *Reader) Cursor\n  pub fn next(self: *Cursor) !?Event\n};\n</code></pre>\n<h6>Testing</h6>\n<p>Unit tests are present in the <code>test/</code> directory.</p>\n<p>Currently, the tests are limited and do not cover everything.\nPRs to improve the quality of these tests are welcome.</p>\n<pre><code class=\"language-bash\">zig build test\n</code></pre>\n<h6>Benchmarks</h6>\n<p>Benchmarks are present in <code>benchmark/</code> and use the <a href=\"https://github.com/hendriknielaender/zBench\">zBench</a> library.</p>\n<p>Run the benchmarks:</p>\n<pre><code class=\"language-bash\">zig build bench\n</code></pre>\n<p>Results on my personal PC (Intel i5-11400H, Debian, 32 GiB RAM):</p>\n<pre><code>benchmark              runs     total time     time/run (avg ± σ)     (min ... max)                p75        p99        p995      \n-----------------------------------------------------------------------------------------------------------------------------\nexplicit write x 100   65535    625.421ms      9.543us ± 1.091us      (8.976us ... 82.607us)       9.808us    13.675us   15.594us  \nserialize struct x 100 65535    585.208ms      8.929us ± 1.517us      (7.551us ... 52.956us)       9.685us    12.922us   13.962us  \ntree: parse            65535    10.195ms       155ns ± 93ns           (136ns ... 19.05us)          158ns      186ns      188ns     \ntree: parse w/ pool    65535    10.901ms       166ns ± 1.222us        (129ns ... 211.649us)        166ns      247ns      248ns     \ntree: read by path     65535    23.742ms       362ns ± 183ns          (324ns ... 31.989us)         367ns      413ns      526ns     \ntree: cursor iterate   65535    23.694ms       361ns ± 234ns          (328ns ... 35.133us)         363ns      410ns      421ns     \nreader: cursor iterate 65535    11.166ms       170ns ± 41ns           (158ns ... 5.897us)          175ns      187ns      190ns\n</code></pre>\n",
    "msgpack_repo_id": "theseyan-mpack-zig",
    "msgpack_repo_homepage": "https://github.com/theseyan/mpack-zig",
    "full_name": "theseyan/mpack-zig",
    "owner": "theseyan",
    "html_url": "https://github.com/theseyan/mpack-zig"
  },
  {
    "msgpack_lang": "Scheme",
    "msgpack_quickstart_html": "<h5>MessagePack for R6RS Scheme</h5>\n<p>This is an implementation of <a href=\"http://msgpack.org/\">MessagePack</a> for\nR6RS Scheme.</p>\n<h6>API references</h6>\n<p><em>Function</em> (pack! bv message)<br>\n<em>Function</em> (pack! bv message offset)</p>\n<p>Pack <em>message</em> to message pack format bytevector and put it into the\n<em>bv</em> destructively. Given <em>bv</em> must have enough length to hold the message.</p>\n<p>Optional argument <em>offset</em> indicates where to start with, default is 0.</p>\n<p><em>Function</em> (pack message)</p>\n<p>The same as <strong>pack!</strong> but this one creates a new bytevector.</p>\n<p><em>Function</em> (pack-size message)</p>\n<p>Calculate the converted message size.</p>\n<p><em>Function</em> (unpack bv)<br>\n<em>Function</em> (unpack bv offset)</p>\n<p>Unpack the given message format bytevector to Scheme object.</p>\n<p>Optional argument <em>offset</em> indicates where to start with, default is 0.</p>\n<p><em>Function</em> (get-unpack in)</p>\n<p>Unpack the given binary input port to Scheme object.</p>\n<h6>Conversion rules</h6>\n<p>As you already know, Scheme doesn't have static types so the conversion of\nScheme objects to message pack data might cause unexpected results. To avoid\nit, I will describe how conversion works.</p>\n<h7>Scheme to message pack</h7>\n<h8>Integer conversion</h8>\n<p>The library automatically decides proper size. More specifically, if it\ncan fit to message pack's fixnum then library uses it, so are uint8-64.\nIf the number is too big, then an error is raised. Users must know it tries\nto use uint as much as possible. If the given number was negative then\nsint will be used.</p>\n<h8>Floating point conversion</h8>\n<p>Unfortunately R6RS doesn't have difference between float and double. So\nwhen flonum is given then it always converts to double number.</p>\n<h8>Collection conversion</h8>\n<p>Message pack has collections which are map and array. And these are associated\nwith alist (association list) and vector respectively. When you want to convert\nalist to message pack data, then you need to make sure the <em>cdr</em> part will be\nthe data and if you put <em>((&quot;key&quot; &quot;value))</em>_ then it will be converted to nested\nmap.</p>\n<p>The collection size calculation is done automatically. It tries to use the\nsmallest size.</p>\n<h7>Message pack to Scheme</h7>\n<p>The other way around is easy, it can simply restore the byte data to Scheme\nobject. Following describes the conversion rules;</p>\n<p>Positive fixnum -&gt; integer<br>\nNegative fixnum -&gt; integer<br>\nuint8, uint16, uint32, uint64 -&gt; integer<br>\nsint8, sint16, sint32, sint64 -&gt; integer<br>\nMap -&gt; alist<br>\nArray -&gt; vector<br>\nfixstr, str8, str16, str32 -&gt; string\nbit8, bit16, bit32 -&gt; bytevector</p>\n<h6>Tested Scheme implementations</h6>\n<p><a href=\"http://code.google.com/p/sagittarius-scheme/\">Sagittarius Scheme</a></p>\n<p><a href=\"http://code.google.com/p/mosh-scheme/\">Mosh Scheme</a></p>\n<p><a href=\"http://code.google.com/p/ypsilon/\">Ypsilon</a></p>\n<p>Your contributions are always welcome.</p>\n<h6>TODO</h6>\n<ul>\n<li>More testing</li>\n<li>Extended type handling</li>\n</ul>\n",
    "msgpack_repo_id": "ktakashi-r6rs-msgpack",
    "msgpack_repo_homepage": "https://github.com/ktakashi/r6rs-msgpack",
    "full_name": "ktakashi/r6rs-msgpack",
    "owner": "ktakashi",
    "html_url": "https://github.com/ktakashi/r6rs-msgpack"
  },
  {
    "msgpack_lang": "R",
    "msgpack_quickstart_html": "<h5>msgpack for R</h5>\n<p>Peter Meilstrup</p>\n<p><a href=\"https://cran.r-project.org/package=msgpack\"><img src=\"http://www.r-pkg.org/badges/version/msgpack\" alt=\"CRAN version\nbadge\"></a>\n<a href=\"https://travis-ci.org/crowding/msgpack-r\"><img src=\"http://travis-ci.org/crowding/msgpack-r.svg?branch=master\" alt=\"Travis build\nstatus\"></a>\n<a href=\"https://codecov.io/gh/crowding/msgpack-r\"><img src=\"https://codecov.io/gh/crowding/msgpack-r/branch/master/graph/badge.svg\" alt=\"Code\ncoverage\"></a></p>\n<p>This is a high speed <a href=\"https://msgpack.org\">msgpack</a> encoder and decoder\nfor R, based on the <a href=\"https://github.com/clwi/CWPack\">CWPack</a> C\nimplementation.</p>\n<p><code>msgpack</code> is a binary data format with data structures similar to <code>JSON</code>\nand a compact binary encoding. It can be a drop-in replacement for\n<code>JSON</code> in most applications. It is designed to be fast to parse and\ncompact to transmit and store.</p>\n<h6>Installation</h6>\n<p>From CRAN:</p>\n<pre><code class=\"language-r\">install.packages(&quot;msgpack&quot;)\n</code></pre>\n<p>From Github:</p>\n<pre><code class=\"language-r\">library(devtools)\ninstall_github(&quot;crowding/msgpack-r&quot;)\n</code></pre>\n<h6>Usage</h6>\n<pre><code class=\"language-r\">library(msgpack)\nx &lt;- packMsg( list(compact=TRUE, schema=0) )\nx\n##  [1] 82 a7 63 6f 6d 70 61 63 74 c3 a6 73 63 68 65 6d 61 00\ndput(unpackMsg( x ))\n## structure(list(compact = TRUE, schema = 0L), .Names = c(&quot;compact&quot;, \n## &quot;schema&quot;))\n</code></pre>\n<h7>Connections / Streaming</h7>\n<p>Write messages one or several at a time:</p>\n<pre><code class=\"language-r\">conOut &lt;- rawConnection(raw(0), open = &quot;w&quot;) # or socketConnection, etc\nwriteMsg(&quot;one&quot;, conOut)\nwriteMsgs(list(2, c(buckle=TRUE), c(owner=&quot;my&quot;, type=&quot;shoe&quot;)), conOut)\n</code></pre>\n<p>Use a <code>msgConnection</code> object to read messages one or several at a\ntime:</p>\n<pre><code class=\"language-r\">conIn &lt;- msgConnection(rawConnection(rawConnectionValue(conOut), open = &quot;r&quot;))\ndput(readMsgs(conIn, 2))\n## list(&quot;one&quot;, 2L)\ndput(readMsg(conIn))\n## structure(TRUE, .Names = &quot;buckle&quot;)\ndput(readMsgs(conIn))\n## list(structure(c(&quot;my&quot;, &quot;shoe&quot;), .Names = c(&quot;owner&quot;, &quot;type&quot;)))\n</code></pre>\n<h7>Performance</h7>\n<p>Msgpack is fast and compact. See the <a href=\"inst/doc/comparison.html\">benchmarking\nvignette</a>.</p>\n<p><img src=\"gh/space.svg\" alt=\"Plot of time taken to transmit dataset, vs size of dataset, for each\nencoder under four conditions.\"></p>\n<p><img src=\"gh/time.svg\" alt=\"Comparison of space used by each encoder to encode a test\ndataset.\"></p>\n",
    "msgpack_repo_id": "crowding-msgpack-r",
    "msgpack_repo_homepage": "https://github.com/crowding/msgpack-r",
    "full_name": "crowding/msgpack-r",
    "owner": "crowding",
    "html_url": "https://github.com/crowding/msgpack-r"
  },
  {
    "msgpack_lang": "Python",
    "msgpack_quickstart_html": "<h7>msgpack</h7>\n",
    "msgpack_repo_id": "polyglotted-msgpack-python",
    "msgpack_repo_homepage": "https://github.com/polyglotted/msgpack-python",
    "full_name": "polyglotted/msgpack-python",
    "owner": "polyglotted",
    "html_url": "https://github.com/polyglotted/msgpack-python"
  },
  {
    "msgpack_lang": "JavaScript",
    "msgpack_quickstart_html": "<h5>Express Msgpack</h5>\n<p><a href=\"https://github.com/textbook/express-msgpack/blob/main/LICENSE\"><img src=\"https://img.shields.io/github/license/textbook/express-msgpack.svg\" alt=\"License\"></a>\n<a href=\"https://github.com/textbook/express-msgpack/actions\"><img src=\"https://github.com/textbook/express-msgpack/workflows/Node.js%20CI/badge.svg?branch=main\" alt=\"Build Status\"></a>\n<a href=\"https://codeclimate.com/github/textbook/express-msgpack/test_coverage\"><img src=\"https://api.codeclimate.com/v1/badges/e9a820ea77a01c1ba8bb/test_coverage\" alt=\"Test Coverage\"></a>\n<a href=\"https://codeclimate.com/github/textbook/express-msgpack/maintainability\"><img src=\"https://api.codeclimate.com/v1/badges/e9a820ea77a01c1ba8bb/maintainability\" alt=\"Maintainability\"></a>\n<a href=\"https://www.npmjs.com/package/express-msgpack\"><img src=\"https://img.shields.io/npm/v/express-msgpack.svg\" alt=\"NPM Version\"></a></p>\n<p><a href=\"https://expressjs.com/\">Express</a> and <a href=\"https://msgpack.org/\">MessagePack</a>, together at last. Uses <a href=\"https://www.npmjs.com/package/@msgpack/msgpack\"><code>@msgpack/msgpack</code></a> by default.</p>\n<h6>Functionality</h6>\n<p>Provides transparent middleware that can be used to support clients requesting\n<code>Accept: application/msgpack</code> from endpoints using <code>res.json</code> or sending\n<code>Content-Type: application/msgpack</code> to any endpoint. You can continue to use\n<code>req.body</code> and <code>res.json</code> and <code>expressMsgpack</code> will handle the conversion in\nthe background using <code>@msgpack/msgpack</code> (or any compatible library of your\nchoice).</p>\n<h6>Installation</h6>\n<pre><code class=\"language-bash\">$ npm install --save express-msgpack\n// or\n$ yarn add express-msgpack\n</code></pre>\n<p>If you intend to use an alternative to <code>@msgpack/msgpack</code> (see Configuration)\nyou can add the <code>--no-optional</code> flag; it's an optional dependency.</p>\n<h6>Usage</h6>\n<pre><code class=\"language-javascript\">import msgpack from &quot;express-msgpack&quot;;\n\n// ...\napp.use(msgpack());\n</code></pre>\n<h7>CommonJS</h7>\n<pre><code class=\"language-javascript\">const msgpack = require(&quot;express-msgpack&quot;).default;\n\n// ...\napp.use(msgpack());\n</code></pre>\n<h6>Configuration</h6>\n<p>To configure, pass options when you configure the middleware. Currently supported options are:</p>\n<table>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Description</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>decoder</code></td>\n<td>a function converting from MessagePack to JavaScript</td>\n<td><code>@msgpack/msgpack#decode</code></td>\n</tr>\n<tr>\n<td><code>encoder</code></td>\n<td>a function converting from JavaScript to MessagePack</td>\n<td><code>@msgpack/msgpack#encode</code> (with a wrapper to convert the result to a Buffer)</td>\n</tr>\n<tr>\n<td><code>mimeType</code></td>\n<td>the MIME type to detect and set for MessagePack payloads</td>\n<td><code>&quot;application/msgpack&quot;</code></td>\n</tr>\n<tr>\n<td><code>limit</code></td>\n<td>The byte limit of the body. This is the number of bytes or any string format supported by <a href=\"https://www.npmjs.com/package/bytes\">bytes</a></td>\n<td><code>&quot;100kb&quot;</code></td>\n</tr>\n</tbody>\n</table>\n<p>For example, to switch to the node-gyp C++ based <a href=\"https://www.npmjs.com/package/msgpack\">msgpack</a> library:</p>\n<pre><code class=\"language-javascript\">import msgpack from &quot;express-msgpack&quot;;\nimport { pack, unpack } from &quot;msgpack&quot;;\n\n// ...\napp.use(msgpack({ decoder: unpack, encoder: pack }));\n</code></pre>\n<h6>Development</h6>\n<p>The project has code linting and testing, using the following commands:</p>\n<ul>\n<li><code>npm run e2e</code>: run the smoke/E2E tests</li>\n<li><code>npm run lint</code>: run the ESLint checks</li>\n<li><code>npm run ship</code>: lint and run unit, integration and E2E tests</li>\n<li><code>npm test</code>: run the Jest unit and integration tests</li>\n<li><code>npm test:watch</code>: run the tests in watch mode</li>\n</ul>\n<p>The tests are in the <code>__tests__/</code> directory and are run using <a href=\"https://jestjs.io/\">Jest</a>. They're\nsplit into two files:</p>\n<ul>\n<li><code>unit.test.ts</code> - mockist unit tests, to check specific internal details</li>\n<li><code>integration.test.ts</code> - integration tests using <a href=\"https://github.com/visionmedia/supertest\">SuperTest</a> with a simple\nExpress app using the middleware</li>\n</ul>\n<p>There is also a <code>smoke/</code> directory containing E2E/smoke tests for a deployed\nversion of the package, used by <code>bin/smoke.sh</code>. If the <code>--local</code> argument is\nsupplied to the script the local version is packaged and tested , otherwise\nthe specified <code>$TAG</code> version is installed from the registry and tested.</p>\n",
    "msgpack_repo_id": "textbook-express-msgpack",
    "msgpack_repo_homepage": "https://www.npmjs.com/package/express-msgpack",
    "full_name": "textbook/express-msgpack",
    "owner": "textbook",
    "html_url": "https://github.com/textbook/express-msgpack"
  },
  {
    "msgpack_lang": "D",
    "msgpack_quickstart_html": "<h5>msgpack-ll</h5>\n<p><a href=\"https://coveralls.io/github/jpf91/msgpack-ll?branch=master\"><img src=\"https://coveralls.io/repos/github/jpf91/msgpack-ll/badge.svg?branch=master\" alt=\"Coverage Status\"></a>\n<a href=\"https://travis-ci.org/jpf91/msgpack-ll\"><img src=\"https://travis-ci.org/jpf91/msgpack-ll.svg?branch=master\" alt=\"Build Status\"></a></p>\n<p>This is a low-level <code>@nogc</code>, <code>nothrow</code>, <code>@safe</code>, <code>pure</code> and <code>betterC</code> compatible\n<a href=\"http://msgpack.org/\">MessagePack</a> serializer and deserializer. The\nlibrary was designed to avoid any external dependencies and handle the low-level protocol\ndetails only. As a result the library doesn't have to do any error handling or\nbuffer management. This library does never dynamically allocate memory.</p>\n<p>The API documentation is available <a href=\"https://jpf91.github.io/msgpack-ll/msgpack_ll.html\">here</a>.</p>\n<h6>A simple example showing the complete API</h6>\n<pre><code class=\"language-d\">import msgpack_ll;\n\n// Buffer allocation is not handled by the library\nubyte[128] buffer;\n\n\n// The MsgpackType enum contains all low-level MessagePack types\nenum type = MsgpackType.uint8;\n\n// The DataSize!(MsgpackType) function returns the size of serialized data\n// for a certain type.\n\n// The formatter and parser use ref ubyte[DataSize!type] types. This\n// forces the compiler to do array length checks at compile time and avoid\n// any runtime bounds checking.\n\n// Format the number 42 as a uint8 type. This will require\n// DataSize!(MsgpackType.uint8) == 2 bytes storage.\nformatType!(type)(42, buffer[0..DataSize!type]);\n\n// To deserialize we have to somehow get the data type at runtime\n// Then verify the type is as expected.\nassert(getType(buffer[0]) == type);\n\n// Now deserialize. Here we have to specify the MsgpackType\n// as a compile time value.\nconst result = parseType!type(buffer[0..DataSize!type]);\nassert(result == 42);\n</code></pre>\n<h6>A quick view at the generated code for this library</h6>\n<h7>Serializing an 8 bit integer</h7>\n<pre><code class=\"language-d\">void format(ref ubyte[128] buffer)\n{\n    enum type = MsgpackType.uint8;\n    formatType!(type)(42, buffer[0..DataSize!type]);\n}\n</code></pre>\n<p>Because of clever typing there's no runtime bounds checking but all bounds\nchecks are performed at compile time by type checking.</p>\n<pre><code class=\"language-asm\">pure nothrow @nogc @safe void msgpack_ll.format(ref ubyte[128]):\n        mov     BYTE PTR [rdi], -52\n        mov     BYTE PTR [rdi+1], 42\n        ret\n</code></pre>\n<h7>Serializing a small negative integer into one byte</h7>\n<pre><code class=\"language-d\">void format(ref ubyte[128] buffer)\n{\n    enum type = MsgpackType.negFixInt;\n    formatType!(type)(-11, buffer[0..DataSize!type]);\n}\n</code></pre>\n<p>The MessagePack format is cleverly designed, so encoding the type is actually free\nin this case.</p>\n<pre><code class=\"language-asm\">pure nothrow @nogc @safe void msgpack_ll.format(ref ubyte[128]):\n        mov     BYTE PTR [rdi], -11\n        ret\n</code></pre>\n<h7>Deserializing an expected type</h7>\n<pre><code class=\"language-d\">bool parse(ref ubyte[128] buffer, ref byte value)\n{\n    enum type = MsgpackType.negFixInt;\n    auto rtType = getType(buffer[0]);\n    if(rtType != type)\n        return false;\n\n    value = parseType!type(buffer[0..DataSize!type]);\n    return true;\n}\n</code></pre>\n<p>The compiler will inline functions and can see through the switch block in\n<code>getType</code>. If you explicitly ask for one type, the compiler will reduce the\ncode to a simple explicit <code>if</code> check for this type!</p>\n<pre><code class=\"language-asm\">pure nothrow @nogc @safe bool msgpack_ll.parse(ref ubyte[128], ref byte):\n        movzx   edx, BYTE PTR [rdi]\n        cmp     edx, 223\n        jle     .L58\n        mov     BYTE PTR [rsi], dl\n        mov     eax, 1\n        ret\n.L58:\n        xor     eax, eax\n        ret\n</code></pre>\n<h7>Deserializing one of multiple types</h7>\n<pre><code class=\"language-d\">bool parse(ref ubyte[128] buffer, ref byte value)\n{\n    auto rtType = getType(buffer[0]);\n    switch(rtType)\n    {\n        case MsgpackType.negFixInt:\n            value = parseType!(MsgpackType.negFixInt)(buffer[0..DataSize!(MsgpackType.negFixInt)]);\n            return true;\n        case MsgpackType.int8:\n            value = parseType!(MsgpackType.int8)(buffer[0..DataSize!(MsgpackType.int8)]);\n            return true;\n        default:\n            return false;\n    }\n}\n</code></pre>\n<p>The generated code is obviously slighly more complex. The interesting part here\nis that type checking is directly done using the raw type value and not the\nenum values returned by <code>getType</code>. Even manually written ASM probably can't do\nmuch better here.</p>\n<pre><code class=\"language-asm\">pure nothrow @nogc @safe bool msgpack_ll.parse(ref ubyte[128], ref byte):\n        movzx   ecx, BYTE PTR [rdi]\n        xor     eax, eax\n        cmp     ecx, 191\n        jle     .L55\n        cmp     ecx, 223\n        jg      .L56\n        cmp     ecx, 208\n        jne     .L60\n        movzx   eax, BYTE PTR [rdi+1]\n        mov     BYTE PTR [rsi], al\n        mov     eax, 1\n.L55:\n        rep; ret\n.L56:\n        mov     BYTE PTR [rsi], cl\n        mov     eax, 1\n        ret\n.L60:\n        ret\n</code></pre>\n",
    "msgpack_repo_id": "jpf91-msgpack-ll",
    "msgpack_repo_homepage": "https://github.com/jpf91/msgpack-ll",
    "full_name": "jpf91/msgpack-ll",
    "owner": "jpf91",
    "html_url": "https://github.com/jpf91/msgpack-ll"
  },
  {
    "msgpack_lang": "Kotlin Serialization",
    "msgpack_quickstart_html": "<h5>Kotlin Serialization MessagePack library</h5>\n<p>This library extends <a href=\"https://github.com/Kotlin/kotlinx.serialization/\">kotlinx.serialization</a> framework to support\n<a href=\"https://msgpack.org/\">MessagePack</a> format.</p>\n<h6>Implementation details</h6>\n<p>When multiple equivalent encodings exist, the shortest (in terms of number of bytes) is used.\nDecoders decode any format and convert it to a required type (possibly loosing precision or significant higher digits)</p>\n<p>Thus, not for any input decoding and encoding back will produce the exact same byte array. However, for any <code>@Serializable</code> class\nencoding and decoding should result in the equivalent instance.</p>\n<h6>Current Limitations</h6>\n<ul>\n<li>Only JVM is supported as of now</li>\n<li>Unsigned integers can't be encoded because kotlinx.serialization framework <a href=\"https://github.com/Kotlin/kotlinx.serialization/issues/259\">doesn't support <code>inline</code> classes</a> (yet)</li>\n<li>MessagePack extensions are not supported</li>\n</ul>\n<h6>Verification</h6>\n<p>The implementation is tested against https://github.com/kawanet/msgpack-test-suite/</p>\n<h6>Usage</h6>\n<pre><code class=\"language-kotlin\">import com.github.kropp.messagepack.MessagePack\n\n@Serializable\ndata class Demo(val compact: Boolean, val schema: Int)\n\nval bytes = byteArrayOf(0x82.toByte(), 0xA7.toByte(), 0x63, 0x6F, 0x6D, 0x70, 0x61, 0x63, 0x74, 0xC3.toByte(), 0xA6.toByte(), 0x73, 0x63, 0x68, 0x65, 0x6D, 0x61, 0x00)\nval demo = MessagePack.decode(Demo.serializer(), bytes)\n\nassertEquals(demo.compact, true)\nassertEquals(demo.schema, 0)\n</code></pre>\n",
    "msgpack_repo_id": "kropp-kotlinx.serialization.msgpack",
    "msgpack_repo_homepage": "https://github.com/kropp/kotlinx.serialization.msgpack",
    "full_name": "kropp/kotlinx.serialization.msgpack",
    "owner": "kropp",
    "html_url": "https://github.com/kropp/kotlinx.serialization.msgpack"
  },
  {
    "msgpack_lang": "Clojure",
    "msgpack_quickstart_html": "<h5>msgpack-cljc</h5>\n<p>msgpack-cljc is a lightweight and simple library for converting\nbetween native Clojure(script) data structures and MessagePack byte formats.\nmsgpack-cljc only depends on Clojure(script) itself; it has no third-party\ndependencies.</p>\n<h7>History</h7>\n<p>This library is the result of integrating and extending two previous msgpack libraries:</p>\n<ul>\n<li><a href=\"https://github.com/edma2/clojure-msgpack\">clojure-msgpack</a></li>\n<li><a href=\"https://github.com/pkcsecurity/msgpack-cljs\">msgpack-cljs</a></li>\n</ul>\n<p>Their differing interfaces and approaches for extending msgpack with\nadditional types have been unified into a single cljc library, and support\nfor transmitting typed (Java -&gt; JS) arrays has been added. The library is also tested\nto be compatible with itself sending data in both directions between\nClojure and ClojureScript, and it has been used in production for\nseveral years. After trying to coordinate with the original authors (no replies)\nI decided to fork the projects and continue development here.</p>\n<ul>\n<li>https://github.com/edma2/clojure-msgpack/issues/29</li>\n<li>https://github.com/pkcsecurity/msgpack-cljs/issues/4</li>\n</ul>\n<p>Thanks for the original work!</p>\n<h6>Installation</h6>\n<p><a href=\"https://clojars.org/com.github.rosejn/msgpack-cljc\"><img src=\"https://img.shields.io/clojars/v/com.github.rosejn/msgpack-cljc.svg\" alt=\"Clojars Project\"></a></p>\n<h6>Usage</h6>\n<h7>Clojure data structures to bytes and back</h7>\n<ul>\n<li><code>pack</code>: Serialize object as a sequence of java.lang.Bytes.</li>\n<li><code>unpack</code> Deserialize bytes as a Clojure object.</li>\n</ul>\n<p>If you stick to a JSON like data structure then your msgpack data will be readable by other languages.  This has been used in production to talk with python services for a few years.  Otherwise if you are in an a pure clj/cljs system then you can use keywords, symbols, ratios, and sets as well.</p>\n<pre><code class=\"language-clojure\">(require '[msgpack.core :as msg])\n\n(msg/pack {&quot;foo&quot; &quot;bar&quot; &quot;baz&quot; 234.23})\n; =&gt; #object[&quot;[B&quot; 0x33db72bd &quot;[B@33db72bd&quot;]\n\n(msg/unpack (msg/pack {&quot;foo&quot; &quot;bar&quot; &quot;baz&quot; 234.23}))\n; =&gt; {&quot;foo&quot; &quot;bar&quot;, &quot;baz&quot; 234.23}\n\nuser=&gt; (msg/unpack (msg/pack {&quot;user-login&quot; &quot;jon.doe@email.com&quot;\n                              &quot;phone&quot; &quot;222-333-4444&quot;\n                              &quot;age&quot; 42\n                              &quot;foo&quot; [1 2 3 4]}))\n; =&gt; {&quot;user-login&quot; &quot;jon.doe@email.com&quot;, &quot;phone&quot; &quot;222-333-4444&quot;, &quot;age&quot; 42, &quot;foo&quot; [1 2 3 4]}\n\n\n; Load clojure extensions for keyword etc. support\n(require 'msgpack.extensions)\n\nuser=&gt; (msg/unpack (msg/pack {:user/login &quot;jon.doe@email.com&quot; :user/phone &quot;222-333-4444&quot; :user/age 42 :user/foo\n[1 2 3 4]}))\n; =&gt; #:user{:login &quot;jon.doe@email.com&quot;, :phone &quot;222-333-4444&quot;, :age 42, :foo [1 2 3 4]}\n\n</code></pre>\n<h7>Clojure data structures to bytes and back</h7>\n<h7>Sente</h7>\n<p>This library works great with <a href=\"https://github.com/ptaoussanis/sente\">Sente</a> for sending data between Clojure and ClojureScript over ajax/websockets.</p>\n<p>Use the <code>IPacker</code> protocol to connect msgpack to sente:</p>\n<pre><code class=\"language-clojure\">\n(ns example.server\n  (:require\n    [msgpack.core :as msgpack]\n    [msgpack.extensions]\n    [msgpack.macros :refer [extend-msgpack]]\n    [taoensso.sente :as sente]\n    [taoensso.sente.server-adapters.http-kit :refer (get-sch-adapter)]\n    [taoensso.sente.interfaces :refer [IPacker]])\n  (:import\n    [java.time Instant]))\n\n; Example of adding packing support for java.time.Instant\n(extend-msgpack\n  java.time.Instant\n  100\n\n  (pack\n    [instant]\n    (msgpack/pack (.toString instant)))\n\n  (unpack\n    [bytes]\n    (java.time.Instant/parse (String. bytes))))\n\n; Setup the sente packer\n(deftype MsgPacker\n  []\n  IPacker\n  (pack   [_ x]\n    (msgpack/pack x))\n\n  (unpack [_ s]\n    (let [msg (msgpack/unpack s)]\n      msg)))\n\n(defn msgpack-packer\n  []\n  (MsgPacker.))\n\n\n(let [ws-http-kit-adapter (get-sch-adapter)\n      opts {:csrf-token-fn (fn [_] &quot;special-csrf-token&quot;)\n            :packer (msgpack-packer)\n            :user-id-fn (fn [_] (util/uuid))}\n      ws-server (sente/make-channel-socket-server! ws-http-kit-adapter opts)]\n     ...)\n</code></pre>\n<p>And on the client side you do basically the same thing:</p>\n<pre><code class=\"language-clojure\">(ns example.client\n   [taoensso.sente :as sente]\n   [taoensso.sente.interfaces :refer [IPacker]])\n\n(deftype MsgPacker []\n  IPacker\n  (pack   [_ x] (msgpack/pack x))\n  (unpack [_ s] (msgpack/unpack s)))\n\n\n(defn msg-packer\n  []\n  (MsgPacker.))\n\n\n(let [{:keys [chsk ch-recv send-fn state]}\n      (sente/make-channel-socket-client!\n        &quot;/my-ws-endpoint&quot; &quot;special-csrf-token&quot;\n        {:type :ws\n         :port 4444\n         :packer (msg-packer)\n         :ws-opts {:binary-type &quot;arraybuffer&quot;}})\n\n</code></pre>\n<h7>Streaming</h7>\n<p><code>msgpack-cljc</code> provides a streaming API for situations where it is more\nconvenient or efficient to work with byte streams instead of fixed byte arrays\n(e.g. size of object is not known ahead of time).</p>\n<p>The streaming counterpart to <code>msgpack.core/pack</code> is <code>msgpack.core/pack-stream</code>\nwhich returns nil and accepts either\n<a href=\"http://docs.oracle.com/javase/7/docs/api/java/io/OutputStream.html\">java.io.OutputStream</a>\nor\n<a href=\"http://docs.oracle.com/javase/7/docs/api/java/io/DataOutput.html\">java.io.DataOutput</a>\nas an additional argument.</p>\n<p><code>msgpack.core/unpack</code> is in &quot;streaming mode&quot; when the argument is of type\n<a href=\"http://docs.oracle.com/javase/7/docs/api/java/io/DataInput.html\">java.io.DataInput</a>\nor\n<a href=\"http://docs.oracle.com/javase/7/docs/api/java/io/InputStream.html\">java.io.InputStream</a>.</p>\n<pre><code class=\"language-clojure\">(use 'clojure.java.io)\n\n(with-open [s (output-stream &quot;test.dat&quot;)]\n  (msg/pack-stream {:compact true :schema 0} s))\n\n(with-open [s (input-stream &quot;test.dat&quot;)] (msg/unpack s))\n; =&gt; {:schema 0, :compact true}\n</code></pre>\n<h7>Core types</h7>\n<table>\n<thead>\n<tr>\n<th>Clojure</th>\n<th>MessagePack</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>nil</td>\n<td>Nil</td>\n</tr>\n<tr>\n<td>java.lang.Boolean</td>\n<td>Boolean</td>\n</tr>\n<tr>\n<td>java.lang.Byte</td>\n<td>Integer</td>\n</tr>\n<tr>\n<td>java.lang.Short</td>\n<td>Integer</td>\n</tr>\n<tr>\n<td>java.lang.Integer</td>\n<td>Integer</td>\n</tr>\n<tr>\n<td>java.lang.Long</td>\n<td>Integer</td>\n</tr>\n<tr>\n<td>java.lang.BigInteger</td>\n<td>Integer</td>\n</tr>\n<tr>\n<td>clojure.lang.BigInt</td>\n<td>Integer</td>\n</tr>\n<tr>\n<td>java.lang.Float</td>\n<td>Float</td>\n</tr>\n<tr>\n<td>java.lang.Double</td>\n<td>Float</td>\n</tr>\n<tr>\n<td>java.math.BigDecimal</td>\n<td>Float</td>\n</tr>\n<tr>\n<td>java.lang.String</td>\n<td>String</td>\n</tr>\n<tr>\n<td>clojure.lang.Sequential</td>\n<td>Array</td>\n</tr>\n<tr>\n<td>clojure.lang.IPersistentMap</td>\n<td>Map</td>\n</tr>\n<tr>\n<td>msgpack.core.Ext</td>\n<td>Extended</td>\n</tr>\n</tbody>\n</table>\n<p>Serializing a value of unrecognized type will fail with <code>IllegalArgumentException</code>.  See <a href=\"#application-types\">Application types</a> if you want to register your own types.</p>\n<h7>Clojure types</h7>\n<p>Some native Clojure types don't have an obvious MessagePack counterpart. We can\nserialize them as Extended types. To enable automatic conversion of these\ntypes, load the <code>msgpack.extensions</code> library.</p>\n<table>\n<thead>\n<tr>\n<th>Clojure</th>\n<th>MessagePack</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>clojure.lang.Keyword</td>\n<td>Extended (type = 3)</td>\n</tr>\n<tr>\n<td>clojure.lang.Symbol</td>\n<td>Extended (type = 4)</td>\n</tr>\n<tr>\n<td>java.lang.Character</td>\n<td>Extended (type = 5)</td>\n</tr>\n<tr>\n<td>clojure.lang.Ratio</td>\n<td>Extended (type = 6)</td>\n</tr>\n<tr>\n<td>clojure.lang.IPersistentSet</td>\n<td>Extended (type = 7)</td>\n</tr>\n</tbody>\n</table>\n<p>With <code>msgpack.extensions</code>:</p>\n<pre><code class=\"language-clojure\">(require 'msgpack.extensions)\n(msg/pack :hello)\n; =&gt; #&lt;byte[] [B@a8c55bf&gt;\n</code></pre>\n<p>Without <code>msgpack.extensions</code>:</p>\n<pre><code class=\"language-clojure\">(msg/pack :hello)\n; =&gt; IllegalArgumentException No implementation of method: :pack-stream of\n; protocol: #'msgpack.core/Packable found for class: clojure.lang.Keyword\n; clojure.core/-cache-protocol-fn (core _deftype.clj:544)\n</code></pre>\n<h7><a name=\"application-types\">Application types</a></h7>\n<p>You can also define your own Extended types with <code>extend-msgpack</code>.</p>\n<pre><code class=\"language-clojure\">(require '[msgpack.macros :refer [extend-msgpack]])\n\n(defrecord Person [name])\n\n(extend-msgpack\n  Person\n  100\n  [p] (.getBytes (:name p))\n  [bytes] (-&gt;Person (String. bytes)))\n\n(msg/unpack (msg/pack [(-&gt;Person &quot;bob&quot;) 5 &quot;test&quot;]))\n; =&gt; (#user.Person{:name &quot;bob&quot;} 5 &quot;test&quot;)\n</code></pre>\n<h7>Options</h7>\n<p>All pack and unpack functions take an optional map of options:</p>\n<ul>\n<li>\n<p><code>:compatibility-mode</code>\nSerialize/deserialize strings and bytes using the raw-type defined here:\nhttps://github.com/msgpack/msgpack/blob/master/spec-old.md</p>\n<p>Note: No error is thrown if an unpacked value is reserved under the old spec\nbut defined under the new spec. We always deserialize something if we can\nregardless of <code>compatibility-mode</code>.</p>\n</li>\n</ul>\n<pre><code class=\"language-clojure\">(msg/pack (byte-array (byte 9)) {:compatibility-mode true})\n</code></pre>\n<h6>License</h6>\n<p>msgpack-cljc is MIT licensed. See the included LICENSE file for more details.</p>\n",
    "msgpack_repo_id": "rosejn-msgpack-cljc",
    "msgpack_repo_homepage": "https://github.com/rosejn/msgpack-cljc",
    "full_name": "rosejn/msgpack-cljc",
    "owner": "rosejn",
    "html_url": "https://github.com/rosejn/msgpack-cljc"
  },
  {
    "msgpack_lang": "SML",
    "msgpack_quickstart_html": "<h5>ML-MessagePack</h5>\n<p>MessagePack implementation for Standard ML (SML)</p>\n<h6>Features</h6>\n<ul>\n<li>Portable: Depends only on the required components of the SML Basis Library specification.</li>\n<li>Composable: Composable combinators for encoding and decoding.</li>\n</ul>\n<h6>Usage</h6>\n<h8>MLton and MLKit</h8>\n<p>Include mlmsgpack.mlb in your MLB file.</p>\n<h8>Poly/ML</h8>\n<p>From the interactive shell, use .sml files in the following order.</p>\n<ul>\n<li>mlmsgpack-aux.sml</li>\n<li>realprinter-default.sml</li>\n<li>mlmsgpack.sml</li>\n</ul>\n<h8>SML/NJ</h8>\n<p>Use mlmsgpack.cm.</p>\n<h8>Moscow ML</h8>\n<p>From the interactive shell, use .sml files in the following order.</p>\n<ul>\n<li>large.sml</li>\n<li>mlmsgpack-aux.sml</li>\n<li>realprinter-fail.sml</li>\n<li>mlmsgpack.sml</li>\n</ul>\n<p>Makefile.mosml is also provided.</p>\n<h8>HaMLet</h8>\n<p>From the interactive shell, use .sml files in the following order.</p>\n<ul>\n<li>mlmsgpack-aux.sml</li>\n<li>realprinter-fail.sml</li>\n<li>mlmsgpack.sml</li>\n</ul>\n<h8>Alice ML</h8>\n<p>Makefile.alice is provided.</p>\n<pre><code>make -f Makefile.alice\nalicerun mlmsgpack-test\n</code></pre>\n<h8>SML#</h8>\n<p>For separate compilation, .smi files are provided. Require mlmsgpack.smi from your .smi file.</p>\n<p>From the interactive shell, use .sml files in the following order.</p>\n<ul>\n<li>mlmsgpack-aux.sml</li>\n<li>realprinter-default.sml</li>\n<li>mlmsgpack.sml</li>\n</ul>\n<h6>Tutorial</h6>\n<p>See TUTORIAL.md.</p>\n<h6>Known Problems</h6>\n<p>Our recommendation is MLton, MLKit, Poly/ML and SML#(&gt;=2.0.0) as all tests passed on them.\nSML/NJ and Moscow ML are fine if you don't use real values.</p>\n<h8>SML/NJ</h8>\n<p>Packing real values fail or produces imprecise results in some cases.</p>\n<h8>Moscow ML</h8>\n<p>Packing real values is not supported, since some components of the SML Basis Library are not provided.</p>\n<h8>HaMLet</h8>\n<p>Packing real values is not supported, since some components of the SML Basis Library are not provided.\nSome functions are very slow, although they work properly. (We tested HaMLet compiled with MLton.)</p>\n<h8>Alice ML</h8>\n<p>Packing real values is not supported, since some components of the SML Basis Library are not provided.\nAlso, some unit tests fail.</p>\n<h8>SML#</h8>\n<p>Most functions do not work properly because of bugs of SML# prior to version 2.0.0.</p>\n<h6>See Also</h6>\n<p>There already exists another MessagePack implemenatation for SML,\ncalled MsgPack-SML, which is targeted for MLton.</p>\n<p>https://msgpacksml.codeplex.com/</p>\n<p>ML-MessagePack is written from scratch and not a fork of MsgPack-SML.</p>\n<p>For information on MessagePack, see:</p>\n<p>http://msgpack.org/</p>\n",
    "msgpack_repo_id": "tkob-mlmsgpack",
    "msgpack_repo_homepage": "https://github.com/tkob/mlmsgpack",
    "full_name": "tkob/mlmsgpack",
    "owner": "tkob",
    "html_url": "https://github.com/tkob/mlmsgpack"
  },
  {
    "msgpack_lang": "Elixir",
    "msgpack_quickstart_html": "<h5>The Alchemist</h5>\n<p><a href=\"https://travis-ci.org/vertexclique/thealchemist\"><img src=\"https://travis-ci.org/vertexclique/thealchemist.svg?branch=master\" alt=\"Build Status\"></a></p>\n<p>Elixir implementation bundle for MessagePack</p>\n<img src=\"http://www.whats-your-sign.com/images/AlchemySymbols.jpg\" alt=\"The Alchemist\" style=\"width: 300px;\">\n<p>Elixir implementation relies on <code>mururu/msgpack-elixir</code>\n<a href=\"http://badge.fury.io/gh/mururu%2Fmsgpack-elixir\"><img src=\"https://badge.fury.io/gh/mururu%2Fmsgpack-elixir.svg\" alt=\"GitHub version\"></a></p>\n<p>Pure erlang implementation used with <code>msgpack/msgpack-erlang</code>\n<a href=\"http://badge.fury.io/gh/msgpack%2Fmsgpack-erlang\"><img src=\"https://badge.fury.io/gh/msgpack%2Fmsgpack-erlang.svg\" alt=\"GitHub version\"></a></p>\n<h6>Usage</h6>\n<p>### In pure elixir:</p>\n<pre><code class=\"language-elixir\"># pack\nTheAlchemist.pack([1,2,3]) #=&gt; { :ok, &lt;&lt;147,1,2,3&gt;&gt; }\nTheAlchemist.pack!([1,2,3]) #=&gt; &lt;&lt;147,1,2,3&gt;&gt;\n\n# unpack\nTheAlchemist.unpack(&lt;&lt;147,1,2,3&gt;&gt;) #=&gt; { :ok, [1,2,3] }\nTheAlchemist.unpack!(&lt;&lt;147,1,2,3&gt;&gt;) #=&gt; [1,2,3]\n\n# unpack_once\nTheAlchemist.unpack_once(&lt;&lt;147,1,2,3,4&gt;&gt;) #=&gt; {:ok, {[1, 2, 3], &lt;&lt;4&gt;&gt;}}\nTheAlchemist.unpack_once!(&lt;&lt;147,1,2,3,4&gt;&gt;) #=&gt; {[1, 2, 3], &lt;&lt;4&gt;&gt;}\n\n</code></pre>\n<p>### With underlying erlang:</p>\n<h8>Deserialization</h8>\n<pre><code class=\"language-elixir\">msgpacked = TheAlchemistErl.pack('{&quot;test&quot;:false}')\nTheAlchemistErl.unpack(msgpacked)\n</code></pre>\n<h8>Stream deserialization</h8>\n<pre><code class=\"language-elixir\">mat = TheAlchemistErl.unpack_stream(data)\nTheAlchemistErl.unpack_stream(elem(mat, 1)),\n</code></pre>\n<h8>String type</h8>\n<p>Now this supports string type!</p>\n<pre><code class=\"language-elixir\">opt = [{:enable_str, true}]\nTheAlchemistErl.unpack(TheAlchemistErl.pack(&quot;埼玉kanji&quot;, opt), opt)\n =&gt; {:ok, &quot;埼玉kanji&quot;}\n</code></pre>\n<h8>Map Style</h8>\n<p>Since Erlang/OTP 17.0</p>\n<pre><code class=\"language-erlang\">msgpack:pack(#{ &lt;&lt;&quot;key&quot;&gt;&gt; =&gt; &lt;&lt;&quot;value&quot;&gt;&gt; }, [{format, map}]).\n</code></pre>\n<p>Or use old jiffy/jsx style</p>\n<pre><code class=\"language-erlang\">msgpack:pack({[{&lt;&lt;&quot;key&quot;&gt;&gt;, &lt;&lt;&quot;value&quot;&gt;&gt;}]}, [{format, jiffy}]),\nmsgpack:pack([{&lt;&lt;&quot;key&quot;&gt;&gt;, &lt;&lt;&quot;value&quot;&gt;&gt;}], [{format, jsx}]).\n</code></pre>\n<h6>Running interactively</h6>\n<p>Firstly <code>make all</code> to ensure all source files are compiled\nafter that you can bring the <code>ERL shell</code> with</p>\n<p><code>make run</code></p>\n<p>If you want to bring the <code>IEX</code> you can type</p>\n<p><code>make runex</code></p>\n",
    "msgpack_repo_id": "ymofen-thealchemist",
    "msgpack_repo_homepage": "https://github.com/ymofen/thealchemist",
    "full_name": "ymofen/thealchemist",
    "owner": "ymofen",
    "html_url": "https://github.com/ymofen/thealchemist"
  },
  {
    "msgpack_lang": "Monkey C",
    "msgpack_quickstart_html": "<h5>MessagePack for MonkeyC (Garmin Connect IQ)</h5>\n<p>(c)2024 Douglas Robertson (GitHub: <a href=\"https://github.com/douglasr\">douglasr</a>; Garmin Connect: dbrobert)</p>\n<p><a href=\"https://msgpack.org/\">MessagePack</a> is an efficient binary serialization format. It lets you exchange data among multiple languages like JSON but it's faster and smaller. For example, small integers (like flags or error code) are encoded into a single byte, and typical short strings only require an extra byte in addition to the strings themselves.</p>\n<p>If you ever wished to use JSON for convenience (storing an image with metadata) but could not for technical reasons (binary data, size, speed...), MessagePack is a perfect replacement.</p>\n<h6>License</h6>\n<p>This Connect IQ barrel is licensed under the &quot;MIT License&quot;, which essentially means that while the original author retains the copyright to the original code, you are free to do whatever you'd like with this code (or any derivative of it). See the LICENSE.txt file for complete details.</p>\n<h6>Using the Barrel</h6>\n<p>This project cannot be used on it's own; it is designed to be included in existing projects.</p>\n<h7>Include the Barrel</h7>\n<p>Download the barrel file (and associated debug.xml) and include it in your project. See <a href=\"https://developer.garmin.com/connect-iq/core-topics/shareable-libraries/\">Shareable Libraries</a> on the Connect IQ Developer site for more details.</p>\n<p>The code within the barrel is separated into serialization and deserialization modules and annotated accordingly. This allows you to only include the functionality that you require. As such, you must specify which annotations to include. If you need both, then add the following to the monkey.jungle within your project:</p>\n<pre><code>base.MessagePack.annotations = MessagePackSerialize; MessagePackDeserialize\n</code></pre>\n<h6>Serializing objects</h6>\n<p>Use <code>MessagePack.Serialize.pack</code>:</p>\n<pre><code>MessagePack.Serialize.pack(obj);\n</code></pre>\n<h6>Deserializing objects</h6>\n<p>Use <code>MessagePack.Deserialize.unpack</code>:</p>\n<pre><code>MessagePack.Deserialize.unpack(obj);\n</code></pre>\n<h6>Limitations</h6>\n<ul>\n<li>does not support float or double</li>\n<li>does not currently support extended (8-bit) ASCII characters (or Unicode for that matter) within strings</li>\n<li>because of device memory constraints within the Connect IQ platform, it's not likely that these will be implemented:\n<ul>\n<li>support for numbers greater than 9,223,372,036,854,775,807 (largest value for Monkey C; should probably be handled on the unpack though)</li>\n<li>support for arrays bigger than 65535 elements</li>\n<li>support maps (Dictionary) with more than 65535 keys</li>\n<li>support for symbols (since values for symbols may change across builds)</li>\n</ul>\n</li>\n</ul>\n<h6>Contributing</h6>\n<p>Please see the CONTRIBUTING.md file for details on how contribute.</p>\n<h7>Contributors</h7>\n<ul>\n<li><a href=\"https://github.com/douglasr\">Douglas Robertson</a></li>\n</ul>\n<h6>Changelog</h6>\n<p>See the summaried list of changes in the changelog.txt file. The complete list of changes can be viewed via the repo commit log.</p>\n",
    "msgpack_repo_id": "douglasr-msgpack-monkeyc",
    "msgpack_repo_homepage": "https://github.com/douglasr/msgpack-monkeyc",
    "full_name": "douglasr/msgpack-monkeyc",
    "owner": "douglasr",
    "html_url": "https://github.com/douglasr/msgpack-monkeyc"
  },
  {
    "msgpack_lang": "Zig",
    "msgpack_quickstart_html": "<h5>Zig library for working with msgpack messages</h5>\n<p>This is a Zig library for encoding/decoding <a href=\"https://msgpack.org/\">msgpack</a> messages based on static types.</p>\n<p>You can define a struct type and then serialize it using a stable binary format that is readable with any\nlanguage that supports msgpack. This is useful for data files and network APIs. You can use it like protobuf,\nbut with the advantage that you use Zig's type system instead of a foreign schema language.</p>\n<p>There are multiple options on how to encode struct fields, in order to generate compact messages, see below for details.</p>\n<h6>Installation</h6>\n<ol>\n<li>Add msgpack.zig as a dependency in your <code>build.zig.zon</code>:</li>\n</ol>\n<pre><code class=\"language-bash\">zig fetch --save &quot;git+https://github.com/lalinsky/msgpack.zig?ref=v0.4.0&quot;\n</code></pre>\n<ol start=\"2\">\n<li>In your <code>build.zig</code>, add the <code>msgpack</code> module as a dependency you your program:</li>\n</ol>\n<pre><code class=\"language-zig\">const msgpack = b.dependency(&quot;msgpack&quot;, .{\n    .target = target,\n    .optimize = optimize,\n});\n\n// the executable from your call to b.addExecutable(...)\nexe.root_module.addImport(&quot;msgpack&quot;, msgpack.module(&quot;msgpack&quot;));\n</code></pre>\n<h6>Usage</h6>\n<p>Basic encoding and decoding:</p>\n<pre><code class=\"language-zig\">const std = @import(&quot;std&quot;);\nconst msgpack = @import(&quot;msgpack&quot;);\n\nconst Message = struct {\n    name: []const u8,\n    age: u8,\n};\n\nvar buffer = std.ArrayList(u8).init(allocator);\ndefer buffer.deinit();\n\ntry msgpack.encode(Message{\n    .name = &quot;John&quot;,\n    .age = 20,\n}, buffer.writer());\n\nconst decoded = try msgpack.decodeFromSlice(Message, allocator, buffer.items);\ndefer decoded.deinit();\n\nstd.debug.assert(std.mem.eql(u8, decoded.value.name, &quot;John&quot;));\nstd.debug.assert(decoded.value.age == 20);\n</code></pre>\n<p>The encoded message will use field names as keys to encode the message. In order to generate more compact messages, you can change the format to use field indexes:</p>\n<pre><code class=\"language-zig\">const std = @import(&quot;std&quot;);\nconst msgpack = @import(&quot;msgpack&quot;);\n\nconst Message = struct {\n    name: []const u8,\n    age: u8,\n\n    pub fn msgpackFormat() msgpack.StructFormat {\n        return .{ .as_map = .{ .key = .field_index } };\n    }\n};\n</code></pre>\n<p>Or you can also use field name prefixes:</p>\n<pre><code class=\"language-zig\">const std = @import(&quot;std&quot;);\nconst msgpack = @import(&quot;msgpack&quot;);\n\nconst Message = struct {\n    name: []const u8,\n    age: u8,\n\n    pub fn msgpackFormat() msgpack.StructFormat {\n        return .{ .as_map = .{ .key = .{ .field_name_prefix = 1 } } };\n    }\n};\n</code></pre>\n<p>Both options have the disadvantage that changing the fields in the struct will have impact on the encoded message, so you need to be careful about backwarads compatibility.\nYou can also use custom protobuf-like field keys to ensure full compatibility even after changing the struct:</p>\n<pre><code class=\"language-zig\">const std = @import(&quot;std&quot;);\nconst msgpack = @import(&quot;msgpack&quot;);\n\nconst Message = struct {\n    name: []const u8,\n    age: u8,\n\n    pub fn msgpackFormat() msgpack.StructFormat {\n        return .{ .as_map = .{ .key = .custom } };\n    }\n\n    pub fn msgpackFieldKey(field: std.meta.FieldEnum(@This())) u8 {\n        return switch (field) {\n            .name =&gt; 1,\n            .age =&gt; 2,\n        };\n    }\n};\n</code></pre>\n<p>Or you can use a completely custom format:</p>\n<pre><code class=\"language-zig\">const std = @import(&quot;std&quot;);\nconst msgpack = @import(&quot;msgpack&quot;);\n\nconst Message = struct {\n    items: []u32,\n\n    pub fn msgpackWrite(self: Message, packer: anytype) !void {\n        try packer.writeArray(u32, self.items);\n    }\n\n    pub fn msgpackRead(unpacker: anytype) !Message {\n        const items = try unpacker.readArray(u32);\n        return Message{ .items = items };\n    }\n};\n</code></pre>\n",
    "msgpack_repo_id": "lalinsky-msgpack.zig",
    "msgpack_repo_homepage": "https://github.com/lalinsky/msgpack.zig",
    "full_name": "lalinsky/msgpack.zig",
    "owner": "lalinsky",
    "html_url": "https://github.com/lalinsky/msgpack.zig"
  },
  {
    "msgpack_lang": "Dart",
    "msgpack_quickstart_html": "<h5>dxvalue</h5>\n<p><strong><a href=\"./README.md\" title=\"English\">English</a></strong>  <strong><a href=\"./README_CN.md\" title=\"简体中文\">中文简体</a></strong><br>\nA super value library support json,msgpack,bson.</p>\n<h6>Getting Started</h6>\n<h7>1、Constructors</h7>\n<ul>\n<li>create an empty DxValue()</li>\n<li>create DxValue from Json</li>\n<li>create DxValue from MsgPack</li>\n<li>create DxValue from Bson</li>\n</ul>\n<p>When creating a blank object, you need to specify a parameter to indicate whether you want to create an array type or an object type.</p>\n<h7>2、Decode</h7>\n<ul>\n<li>use Constructors <strong>DxValue.fromJson</strong>  to decode  json</li>\n<li>use Constructors <strong>DxValue.fromMsgPack</strong> to decode msgpack</li>\n<li>use Constructors <strong>DxValue.fromBson</strong> to decode bson</li>\n<li>use <strong>resetFromMsgPack</strong> method to decode msgpack</li>\n<li>use <strong>resetFromJson</strong> method to decode json</li>\n<li>use <strong>resetFromBson</strong> method to decode bson</li>\n<li>use <strong>decodeWithCoder</strong> appoint custom decoder to decode custom Code</li>\n</ul>\n<h7>3、encode</h7>\n<ul>\n<li><strong>encodeJson</strong></li>\n<li><strong>encodeMsgPack</strong></li>\n<li><strong>encodeBson</strong></li>\n<li>use <strong>encodeWithCoder</strong> appoint custom encoder to encode custom code</li>\n</ul>\n<h7>4、useage</h7>\n<pre><code class=\"language-dart\">    DxValue dxValue = DxValue(false);\n    dxValue.setKeyInt(&quot;fixInt1&quot;, 23);\n    dxValue.setKeyInt(&quot;NegFixInt&quot;, -19);\n    dxValue.setKeyInt(&quot;Int&quot;, 256);\n    dxValue.setKeyInt(&quot;Int1&quot;, 255);\n    dxValue.setKeyInt(&quot;Int2&quot;, 2255);\n    dxValue.setKeyInt(&quot;Int3&quot;, 655234);\n    dxValue.setKeyString(&quot;string&quot;, &quot;字符串测试内燃烧地方，嘎斯的发生地方阿斯顿发生的发生地方阿三的发生地方&quot;);\n    dxValue.setKeyString(&quot;fixStr&quot;, &quot;测试Fix&quot;);\n    dxValue.setKeyFloat(&quot;Float&quot;, 32.423);\n    dxValue.setKeyDouble(&quot;Double&quot;,83.45234423424234);\n    dxValue.setKeyDateTime(&quot;now&quot;, DateTime.now());\n    String binary = &quot;&quot;&quot;\n  仙路尽头谁为峰，\n  一见无始道成空。\n  源天师，晚年不祥\n&quot;&quot;&quot;;\n    dxValue.setKeyBinary(&quot;源天师&quot;, binary.toUtf8());\n    dxValue.setKeyExtBinary(&quot;源天师2&quot;, 3, binary.toUtf8());\n    dxValue.encodeMsgPack();\n    dxValue.encodeJson();\n</code></pre>\n<h7>5、setValues</h7>\n<p>You can use a series of functions such as set... to setValue. For object, you can use <strong>setkey...</strong> Related functions to set. For array, you can use <strong>setIndex...</strong> And other functions to set\nTo build a new object, use <strong>newobject</strong>, <strong>newarray</strong> to build a sub object structure</p>\n<p>use <strong>forceValue</strong> or <strong>forcePath</strong>  can create an unexists path route</p>\n<pre><code class=\"language-dart\">  DxValue dxvalue = DxValue(false);\n  DxValue childHome = dxvalue.forceValue(&quot;root/home/childhome&quot;,arrayValue: false);\n  DxValue homes = childHome.newArray(key: &quot;homes&quot;);\n  homes.setIndexInt(-1, 100);\n  homes.setIndexString(-1, &quot;平米&quot;);\n  print(dxvalue);\n</code></pre>\n<p>This will print as follows:</p>\n<pre><code class=\"language-json\">{\n  &quot;root&quot;:{\n    &quot;home&quot;:{\n      &quot;childhome&quot;:{\n        &quot;homes&quot;:[\n          100,\n          &quot;平米&quot;\n        ]\n      }\n    }\n  }\n}\n</code></pre>\n<h7>6、getValues</h7>\n<p>If you want to get the value inside dxvalue,you can use some functions like <strong>...ByIndex</strong> or <strong>...ByKey</strong>\nsuch as <strong>valueByIndex, intByKey, doubleByKey, dateTimeByKey</strong> ...\nuse <strong>clear</strong> method to clear dxvalue</p>\n<h7>7、Syntax sugar, operator overloading</h7>\n<p>For dxvalue, the [] operator is overloaded. Therefore, for jsonobject, [string] can be used to retrieve data, and for array, [int] can be used to retrieve data, such as</p>\n<pre><code class=\"language-dart\">DxValue value = DxValue(false);\nvalue.setKeyString(&quot;Name&quot;,&quot;不得闲&quot;);\nvalue.setKeyInt(&quot;Age&quot;,32);\nprint(value[&quot;Name&quot;]);\nprint(value[&quot;Age&quot;]);\nDxValue childs = value.newArray(key: &quot;childs&quot;);\nchilds.setIndexString(-1,&quot;test&quot;);\nprint(childs[0]);\n</code></pre>\n<p>the operator []= is overloaded, you can directly use this syntax assignment, such as</p>\n<pre><code class=\"language-dart\">DxValue value = DxValue(false);\nvalue[&quot;Name&quot;] = &quot;不得闲&quot;;\nvalue[&quot;Age&quot;] = 32;\nprint(value);\n</code></pre>\n",
    "msgpack_repo_id": "dxflutter-dxvalue",
    "msgpack_repo_homepage": "https://msgpack.org/",
    "full_name": "dxflutter/dxvalue",
    "owner": "dxflutter",
    "html_url": "https://github.com/dxflutter/dxvalue"
  },
  {
    "msgpack_lang": "ActionScript3",
    "msgpack_quickstart_html": "<h5>MessagePack for ActionScript3</h5>\n<p>msgpack-as3 is an implementation of the latest MessagePack specification for ActionScript3 language (Flash, Flex and AIR).</p>\n<ul>\n<li>Message Pack specification (Dec 22, 2015): <a href=\"https://github.com/msgpack/msgpack/blob/master/spec.md\">https://github.com/msgpack/msgpack/blob/master/spec.md</a></li>\n</ul>\n<h6>Basic Usage</h6>\n<h7>Serialize and Deserialize</h7>\n<p>The usage of MsgPack class is very simple. You need create an object and call read and write methods.</p>\n```actionscript\n// message pack object created\nvar msgpack:MsgPack = new MsgPack();\n<p>// encode an array\nvar bytes:ByteArray = msgpack.write([1, 2, 3, 4, 5]);</p>\n<p>// rewind the buffer\nbytes.position = 0;</p>\n<p>// print the decoded object\ntrace(msgpack.read(bytes));</p>\n<pre><code>\n### Flags\n&lt;p&gt;Currently there are three flags which you may use to initialize a MsgPack object:&lt;/p&gt;\n* &lt;code&gt;MsgPackFlags.READ_STRING_AS_BYTE_ARRAY&lt;/code&gt;: message pack string data is read as byte array instead of string;\n* &lt;code&gt;MsgPackFlags.ACCEPT_LITTLE_ENDIAN&lt;/code&gt;: MsgPack objects will work with little endian buffers (message pack specification defines big endian as default).\n* &lt;code&gt;MsgPackFlags.SPEC2013_COMPATIBILITY&lt;/code&gt;: MsgPack will run in backwards compatibility mode.\n\n```actionscript\nvar msg:MsgPack;\n\n// use logical operator OR to set the flags.\nmsgpack = new MsgPack(MsgPackFlags.READ_STRING_AS_BYTE_ARRAY | MsgPackFlags.ACCEPT_LITTLE_ENDIAN);\n</code></pre>\n<h6>Advanced Usage</h6>\n<h7>Extensions</h7>\n<p>You can create your own Extension Workers by extending the <code>ExtensionWorker</code> Class and then assigning it to the MsgPack Factory.</p>\n<p>The following example assigns a custom worker which extends the <code>ExtensionWorker</code> Class.</p>\n```actionscript\nvar msgpack:MsgPack = new MsgPack();\n<p>// Assign the new worker to the factory.\nmsgpack.factory.assign(new CustomWorker());</p>\n<pre><code>\n&lt;p&gt;For more information regarding Extensions refer to the MessagePack specification.&lt;/p&gt;\n\n### Priorities\n&lt;p&gt;Worker priority behaves similar to how the Adobe Event Dispatcher priorities work. In MessagePack, deciding which worker will be use for serializing/deserializing depends on two(2) factors.&lt;/p&gt;\n1. The order in which the worker was assigned to the factory.\n2. The priority of the worker. Higher values take precedence.\n\nAll workers have a default priority of 0.\n\n&lt;p&gt;In the following example &lt;code&gt;workerB&lt;/code&gt; will never be used because it's assign after &lt;code&gt;workerA&lt;/code&gt;&lt;/p&gt;\n```actionscript\nvar msgpack:MsgPack = new MsgPack();\n\nvar workerA:StringWorker = new StringWorker();\nvar workerB:DifferentStringWorker = new DifferentStringWorker();\n\nmsgpack.factory.assign(workerA);\nmsgpack.factory.assign(workerB);\n</code></pre>\n<p>However if we adjust the priority of <code>workerB</code>, then <code>workerA</code> will never be used.</p>\n```actionscript\nvar msgpack:MsgPack = new MsgPack();\n<p>var workerA:StringWorker = new StringWorker();\nvar workerB:DifferentStringWorker = new DifferentStringWorker(null, 1);</p>\n<p>msgpack.factory.assign(workerA);\nmsgpack.factory.assign(workerB);</p>\n<pre><code>\n## Credits\nThis application uses Open Source components. You can find the source code of their open source projects along with license information below. We acknowledge and are grateful to these developers for their contributions to open source.\n\nProject: as3-msgpack https://github.com/loteixeira/as3-msgpack  \nCopyright (C) 2013 Lucas Teixeira  \nLicense (Apache V2.0) http://www.apache.org/licenses/LICENSE-2.0  \n</code></pre>\n",
    "msgpack_repo_id": "st3v0-msgpack-as3",
    "msgpack_repo_homepage": "https://github.com/st3v0/msgpack-as3",
    "full_name": "st3v0/msgpack-as3",
    "owner": "st3v0",
    "html_url": "https://github.com/st3v0/msgpack-as3"
  },
  {
    "msgpack_lang": "gopher-lua",
    "msgpack_quickstart_html": "<p><a href=\"https://msgpack.org\">msgpack</a> encoding library for <a href=\"https://github.com/yuin/gopher-lua\">gopher-lua</a> in PeerDB</p>\n<p>This follows many ideas from <a href=\"https://github.com/PeerDB-io/gluajson\">gluajson</a></p>\n<p>For now there's no unmark function, as most marker types do not have a clear &amp; precise Lua value</p>\n<p>We also don't have a ubiquitous MarshalJSON trait to rely on,\ninstead custom encodings must be done with a Packer interface:</p>\n<pre><code class=\"language-go\">type Packer interface {\n  PackMsg([]byte) []byte\n}\n</code></pre>\n<p>Which is passed the entire msgpack buffer &amp; should append accordingly, returning the result</p>\n<hr>\n<p><code>decode</code> is not currently implemented, only <code>encode</code></p>\n<p>Lua strings are checked, if valid utf8 they are encoded as str, otherwise as bin</p>\n<p><code>encode</code> checks UserData for a <code>__msgpack</code> metamethod,\nthe result of which is encoded</p>\n<p>If no <code>__msgpack</code> metamethod exists, the Value is checked. If it implements the <code>Packer</code> interface, then it is invoked. Otherwise the following types have predictable implementations:</p>\n<ul>\n<li><code>string</code> <em>(not checked for valid utf8)</em></li>\n<li><code>[]byte</code></li>\n<li><code>uint64</code></li>\n<li><code>int64</code></li>\n<li><code>time.Time</code></li>\n</ul>\n<p>There exists the following marker methods:</p>\n<ul>\n<li><code>raw</code> takes a string</li>\n<li><code>array</code>, <code>map</code> takes a table <em>(useful for encoding empty arrays)</em></li>\n<li><code>bin</code>, <code>str</code> takes a string</li>\n<li><code>signed</code>, <code>unsigned</code> takes a number, or parses string</li>\n<li><code>f32</code>, <code>f64</code> takes a number</li>\n<li><code>time</code>, <code>time32</code>, <code>time64</code>, <code>time96</code> takes number representing time since unix epoch in seconds, or string with optional format (default RFC3339), or UserData with time.Time value</li>\n<li><code>ext</code> takes a number for type &amp; string for bytes</li>\n</ul>\n",
    "msgpack_repo_id": "PeerDB-io-gluamsgpack",
    "msgpack_repo_homepage": "https://github.com/PeerDB-io/gluamsgpack",
    "full_name": "PeerDB-io/gluamsgpack",
    "owner": "PeerDB-io",
    "html_url": "https://github.com/PeerDB-io/gluamsgpack"
  },
  {
    "msgpack_lang": "JavaScript/NodeJS",
    "msgpack_quickstart_html": "<h5>msgpack-nodejs</h5>\n<p><img src=\"https://img.shields.io/github/actions/workflow/status/artyomliou/msgpack-nodejs/node.js.yml\" alt=\"GitHub Workflow Status\">\n<img src=\"https://img.shields.io/node/v/msgpack-nodejs\" alt=\"node-current\">\n<img src=\"https://img.shields.io/snyk/vulnerabilities/github/artyomliou/msgpack-nodejs\" alt=\"Vulnerabilities\">\n<a href=\"https://codeclimate.com/github/artyomliou/msgpack-nodejs/maintainability\"><img src=\"https://api.codeclimate.com/v1/badges/d0d52768bb6be694536e/maintainability\" alt=\"Maintainability\"></a>\n<a href=\"https://codeclimate.com/github/artyomliou/msgpack-nodejs/test_coverage\"><img src=\"https://api.codeclimate.com/v1/badges/d0d52768bb6be694536e/test_coverage\" alt=\"Test Coverage\"></a></p>\n<p>Yet another javascript/nodejs implementation of <a href=\"https://github.com/msgpack/msgpack/blob/master/spec.md\">MsgPack Spec</a>.<br>\nThe purpose behind is learning by doing, which focuses on modern tools/techniques of nodejs/typescript ecosystem.</p>\n<h5>Contents</h5>\n<ul>\n<li><a href=\"#usage\">Usage</a>\n<ul>\n<li><a href=\"#examples\">Examples</a></li>\n<li><a href=\"#api\">API</a></li>\n<li><a href=\"#options\">Options</a></li>\n</ul>\n</li>\n<li><a href=\"#project-status\">Project status</a>\n<ul>\n<li><a href=\"#compability\">Compability</a></li>\n<li><a href=\"#limitation\">Limitation</a></li>\n<li><a href=\"#todo\">TODO</a></li>\n<li><a href=\"#benchmark\">Benchmark</a></li>\n</ul>\n</li>\n<li><a href=\"#implementation-detail\">Implementation detail</a>\n<ul>\n<li><a href=\"#encode\">Encode</a></li>\n<li><a href=\"#decode\">Decode</a></li>\n<li><a href=\"#lessons-learned\">Lesson learned</a></li>\n</ul>\n</li>\n<li><a href=\"#references\">References</a></li>\n</ul>\n<hr>\n<h5>Usage</h5>\n<pre><code class=\"language-bash\">npm i msgpack-nodejs\nnpm test\n</code></pre>\n<h6>Example</h6>\n<p>Please check <a href=\"example.md\">example.md</a></p>\n<h6>API</h6>\n<ol>\n<li><a href=\"src/encoder/encoder.ts\">encode()</a>: <code>any</code> =&gt; <code>Uint8Array</code></li>\n<li><a href=\"src/decoder/decoder.ts\">decode()</a>: <code>Uint8Array</code> =&gt; <code>Exclude&lt;any, Map&gt;</code></li>\n<li><a href=\"src/streams/encode-stream.ts\">EncodeStream class</a>: <code>Exclude&lt;any, null&gt;</code> =&gt; <code>Buffer</code></li>\n<li><a href=\"src/streams/decode-stream.ts\">DecodeStream class</a>: <code>Buffer</code> =&gt; <code>Exclude&lt;any, null&gt;</code> [^1]</li>\n<li><a href=\"src/extensions/registry.ts\">registerExtension()</a>: Register your own extension</li>\n<li><a href=\"src/encoder/string-buffer.ts\">stringBufferStat()</a>: Show string buffer copied count and size</li>\n<li><a href=\"src/encoder/lru-cache.ts\">lruCacheStat()</a>: Show cache hit/miss count</li>\n<li><a href=\"src/encoder/byte-array.ts\">bufferAllocatorStat()</a>: Show how byte-array allocate new buffer</li>\n<li><a href=\"src/decoder/prefix-trie.ts\">prefixTrieStat()</a>: Show prefix-trie hit/miss count</li>\n<li><a href=\"src/options.ts\">applyOptions()</a>: Manually control caching</li>\n</ol>\n<p>[^1]: After attaching another stream that does not expect a object as its input, you may encounter error</p>\n<h6>Options</h6>\n<p>You can apply options <a href=\"example.md#apply-options\">like this</a></p>\n<table>\n<thead>\n<tr>\n<th>Key</th>\n<th>type</th>\n<th style=\"text-align:center\">default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>encoder.mapKeyCache.enabled</td>\n<td>boolean</td>\n<td style=\"text-align:center\">true</td>\n<td>Cache map-key or not</td>\n</tr>\n<tr>\n<td>encoder.mapKeyCache.size</td>\n<td>number</td>\n<td style=\"text-align:center\">30</td>\n<td>How big is the mapKeyCache</td>\n</tr>\n<tr>\n<td>encoder.stringCache.enabled</td>\n<td>boolean</td>\n<td style=\"text-align:center\">true</td>\n<td>Cache any string except map-key or not</td>\n</tr>\n<tr>\n<td>encoder.stringCache.size</td>\n<td>number</td>\n<td style=\"text-align:center\">100</td>\n<td>How big is the stringCache</td>\n</tr>\n<tr>\n<td>encoder.byteArray.base</td>\n<td>number</td>\n<td style=\"text-align:center\">1024</td>\n<td>How many bytes will be allocated for every execution. Setting this would increase performance when handling many big JSON data</td>\n</tr>\n<tr>\n<td>decoder.shortStringCache.enabled</td>\n<td>boolean</td>\n<td style=\"text-align:center\">true</td>\n<td>Use prefix-trie or not</td>\n</tr>\n<tr>\n<td>decoder.shortStringCache.lessThan</td>\n<td>number</td>\n<td style=\"text-align:center\">10</td>\n<td>Only cache if string is shorter than this value</td>\n</tr>\n<tr>\n<td>decoder.jsUtf8Decode.enabled</td>\n<td>boolean</td>\n<td style=\"text-align:center\">true</td>\n<td>Use JS utf8-decode or not</td>\n</tr>\n<tr>\n<td>decoder.jsUtf8Decode.lessThan</td>\n<td>number</td>\n<td style=\"text-align:center\">200</td>\n<td>Only use JS utf8-decode if string is shorter than this value</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h5>Project status</h5>\n<h6>Compability</h6>\n<table>\n<thead>\n<tr>\n<th>Env</th>\n<th>Executable?</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Node.js 18</td>\n<td>✅</td>\n</tr>\n<tr>\n<td>Node.js 16</td>\n<td>✅</td>\n</tr>\n<tr>\n<td>Node.js 14</td>\n<td>✅</td>\n</tr>\n<tr>\n<td>Node.js 12</td>\n<td>❌</td>\n</tr>\n</tbody>\n</table>\n<h6>Limitation</h6>\n<ol>\n<li>Does not support float 32 encoding, because Javascript float is always 64-bit.</li>\n</ol>\n<h6>TODO</h6>\n<ol>\n<li>Ext tests</li>\n<li>Map 16/32 tests</li>\n</ol>\n<h6>Benchmark</h6>\n<p>By utlizing the great <a href=\"https://github.com/kawanet/msgpack-lite/blob/master/lib/benchmark.js\">benchmark tool by msgpack-lite</a>,\nI thought the performance of this project would not be disappointing.</p>\n<p>Runs on node.js 16 &amp; laptop with R5-5625U.</p>\n<table>\n<thead>\n<tr>\n<th>operation</th>\n<th style=\"text-align:right\">op</th>\n<th style=\"text-align:right\">ms</th>\n<th style=\"text-align:right\">op/s</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>buf = Buffer(JSON.stringify(obj));</td>\n<td style=\"text-align:right\">1021200</td>\n<td style=\"text-align:right\">5000</td>\n<td style=\"text-align:right\">204240</td>\n</tr>\n<tr>\n<td>obj = JSON.parse(buf);</td>\n<td style=\"text-align:right\">1279500</td>\n<td style=\"text-align:right\">5000</td>\n<td style=\"text-align:right\">255900</td>\n</tr>\n<tr>\n<td>buf = require(&quot;msgpack-lite&quot;).encode(obj);</td>\n<td style=\"text-align:right\">685800</td>\n<td style=\"text-align:right\">5000</td>\n<td style=\"text-align:right\">137160</td>\n</tr>\n<tr>\n<td>obj = require(&quot;msgpack-lite&quot;).decode(buf);</td>\n<td style=\"text-align:right\">389800</td>\n<td style=\"text-align:right\">5001</td>\n<td style=\"text-align:right\">77944</td>\n</tr>\n<tr>\n<td>buf = Buffer(require(&quot;msgpack.codec&quot;).msgpack.pack(obj));</td>\n<td style=\"text-align:right\">713600</td>\n<td style=\"text-align:right\">5000</td>\n<td style=\"text-align:right\">142720</td>\n</tr>\n<tr>\n<td>obj = require(&quot;msgpack.codec&quot;).msgpack.unpack(buf);</td>\n<td style=\"text-align:right\">401300</td>\n<td style=\"text-align:right\">5001</td>\n<td style=\"text-align:right\">80243</td>\n</tr>\n<tr>\n<td>buf = require(&quot;msgpack-js-v5&quot;).encode(obj);</td>\n<td style=\"text-align:right\">284400</td>\n<td style=\"text-align:right\">5000</td>\n<td style=\"text-align:right\">56880</td>\n</tr>\n<tr>\n<td>obj = require(&quot;msgpack-js-v5&quot;).decode(buf);</td>\n<td style=\"text-align:right\">544600</td>\n<td style=\"text-align:right\">5000</td>\n<td style=\"text-align:right\">108920</td>\n</tr>\n<tr>\n<td>buf = require(&quot;msgpack-js&quot;).encode(obj);</td>\n<td style=\"text-align:right\">277100</td>\n<td style=\"text-align:right\">5001</td>\n<td style=\"text-align:right\">55408</td>\n</tr>\n<tr>\n<td>obj = require(&quot;msgpack-js&quot;).decode(buf);</td>\n<td style=\"text-align:right\">559800</td>\n<td style=\"text-align:right\">5000</td>\n<td style=\"text-align:right\">111960</td>\n</tr>\n<tr>\n<td>buf = require(&quot;msgpack5&quot;)().encode(obj);</td>\n<td style=\"text-align:right\">147700</td>\n<td style=\"text-align:right\">5001</td>\n<td style=\"text-align:right\">29534</td>\n</tr>\n<tr>\n<td>obj = require(&quot;msgpack5&quot;)().decode(buf);</td>\n<td style=\"text-align:right\">239500</td>\n<td style=\"text-align:right\">5000</td>\n<td style=\"text-align:right\">47900</td>\n</tr>\n<tr>\n<td>buf = require(&quot;notepack&quot;).encode(obj);</td>\n<td style=\"text-align:right\">1041500</td>\n<td style=\"text-align:right\">5000</td>\n<td style=\"text-align:right\">208300</td>\n</tr>\n<tr>\n<td>obj = require(&quot;notepack&quot;).decode(buf);</td>\n<td style=\"text-align:right\">671300</td>\n<td style=\"text-align:right\">5000</td>\n<td style=\"text-align:right\">134260</td>\n</tr>\n<tr>\n<td>obj = require(&quot;msgpack-unpack&quot;).decode(buf);</td>\n<td style=\"text-align:right\">163400</td>\n<td style=\"text-align:right\">5001</td>\n<td style=\"text-align:right\">32673</td>\n</tr>\n<tr>\n<td><strong>buf = require(&quot;msgpack-nodejs&quot;).encode(obj);</strong> (Run in sequence)</td>\n<td style=\"text-align:right\">1148900</td>\n<td style=\"text-align:right\">5000</td>\n<td style=\"text-align:right\"><strong>229780</strong></td>\n</tr>\n<tr>\n<td><strong>obj = require(&quot;msgpack-nodejs&quot;).decode(buf);</strong> (Run in sequence)</td>\n<td style=\"text-align:right\">777500</td>\n<td style=\"text-align:right\">5000</td>\n<td style=\"text-align:right\"><strong>155500</strong></td>\n</tr>\n<tr>\n<td><strong>buf = require(&quot;msgpack-nodejs&quot;).encode(obj);</strong> (Run exclusively)</td>\n<td style=\"text-align:right\">1321900</td>\n<td style=\"text-align:right\">5000</td>\n<td style=\"text-align:right\"><strong>264380</strong></td>\n</tr>\n<tr>\n<td><strong>obj = require(&quot;msgpack-nodejs&quot;).decode(buf);</strong> (Run exclusively)</td>\n<td style=\"text-align:right\">805400</td>\n<td style=\"text-align:right\">5000</td>\n<td style=\"text-align:right\"><strong>161080</strong></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h5>Implementation detail</h5>\n<h6>Encode</h6>\n<p><a href=\"src/encoder/encoder.ts\">Encoder</a> uses a recursive function <code>match()</code> to match JSON structure (primitive value, object, array or nested), and pushes anything encoded into <a href=\"src/encoder/byte-array.ts\">ByteArray</a> that responsible for allocating buffer. Encoded string will be written in <a href=\"src/encoder/string-buffer.ts\">StringBuffer</a> first and cached in <a href=\"src/encoder/lru-cache.ts\">LruCache</a>.</p>\n<h6>Decode</h6>\n<p><a href=\"src/decoder/decoder.ts\">Decoder</a> uses <code>parseBuffer()</code> to read every value out, and push them into <a href=\"src/decoder/struct-builder.ts\">StructBuilder</a> to rebuild whole JSON object. For string less than 200 bytes, use pure JS <a href=\"src/decoder/utf8-decode.ts\">utf8Decode()</a>, then cache in <a href=\"src/decoder/prefix-trie.ts\">prefix trie</a>.</p>\n<h6>Optimization strategies:</h6>\n<h5>Cache</h5>\n<ul>\n<li>To improve encoding performance, <a href=\"src/encoder/lru-cache.ts\">LruCache</a> was used for caching encoded string and its header.</li>\n<li>To improve decoding peformance, <a href=\"src/decoder/prefix-trie.ts\">prefix trie</a> was deployed for Uint8Array caching.</li>\n<li>To avoid evicting, map-key caching and string caching were separated.</li>\n</ul>\n<h5>ArrayBuffer / TypedArray</h5>\n<ul>\n<li>To efficiently allocate new buffer, every <a href=\"src/encoder/byte-array.ts\">ByteArray</a> begins with small buffer (1K). [^2]</li>\n<li>To efficiently handle unpredictable large JSON, <a href=\"src/encoder/byte-array.ts\">ByteArray</a> allocates exponentially.</li>\n<li>To avoid overhead on writing, <a href=\"src/encoder/byte-array.ts\">ByteArray</a> uses <a href=\"https://v8.dev/blog/dataview\"><code>DataView</code> calls</a> as much as possible.</li>\n</ul>\n<h5>Node.js</h5>\n<ul>\n<li>To maximize performance of array, use <a href=\"src/decoder/decoder.ts#L11-L12\">pre-allocated array</a>. [^3]</li>\n<li>To maximize performance of string encoding, string are encoded in <a href=\"src/encoder/string-buffer.ts\">StringBuffer</a> with <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder/encodeInto\">encodeInto()</a> to prevent unnecessary copying. Then these encoded content will be referenced by <code>subarray()</code> for writing and caching. [^4]</li>\n<li>To avoid overhead of <code>TextDecoder()</code>, <a href=\"src/decoder/utf8-decode.ts\">decode UTF-8 bytes with pure JS</a> when less than 200 bytes. [^3]</li>\n<li>To avoid GC overhead in decoder, every parsed typed value will be passed into <code>builder.insertValue()</code> directly. [^17]</li>\n<li>To avoid syntax penalty of <a href=\"https://v8.dev/blog/faster-class-features\">private class fields</a> under node.js 18, use <a href=\"https://www.typescriptlang.org/docs/handbook/2/classes.html#caveats\">TypeScript's syntax</a> instead.</li>\n</ul>\n<h6>Lessons learned</h6>\n<ul>\n<li>Javascript\n<ul>\n<li>The difference between <code>ArrayBuffer</code>, <code>TypedArray</code> and the node.js API <code>Buffer</code> [^5]</li>\n<li><code>BigInt</code> operators [^6]</li>\n<li><code>left shift</code> and <code>right shift</code> [^7] [^8]</li>\n<li>Private class features [^9]</li>\n<li>Pre-allocated array [^3]</li>\n<li>UTF-8 encoding/decoding [^10]</li>\n<li>Node.js transform stream [^11]</li>\n</ul>\n</li>\n<li>Node.js\n<ul>\n<li>Profiler [^12]</li>\n</ul>\n</li>\n<li>Typescript\n<ul>\n<li>Testing - ts-jest [^13]</li>\n<li>Linter - typescript-eslint &amp; lint-staged [^14]</li>\n<li>Packaging for ESModule &amp; CommonJS [^15]</li>\n</ul>\n</li>\n<li>CI &amp; CD\n<ul>\n<li>Github Actions [^16]</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p>[^2]: Thanks to <a href=\"https://github.com/kriszyp/msgpackr/blob/master/pack.js#L636-L657\">kriszyp/msgpackr</a> for inspiration of better buffer allocation strategy.\n[^3]: Thanks to <a href=\"https://appspector.com/blog/how-to-improve-messagepack-javascript-parsing-speed-by-2-6-times\">AppSpector</a>, this article gives very practical advices including pre-allocated array and manual decoding under 200 characters.\n[^4]: Thanks to <a href=\"https://github.com/msgpack/msgpack-javascript/blob/da998c654fbba8952c49ec407c554cc7400b36ac/src/Encoder.ts#L178-L195\">msgpack/msgpack-javascript</a> for technique including UTF-8 bytes calculation and usage of <code>encodeInto()</code>, which led me to the ultra optimization strategy.\n[^5]: <a href=\"https://pjchender.dev/javascript/js-typedarray-buffer-dataview/\">[JS] TypedArray, ArrayBuffer 和 DataView</a>\n[^6]: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt#operators\">BigInt operators</a>\n[^7]: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Left_shift\">left shift</a>\n[^8]: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Right_shift\">right shift</a>\n[^9]: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_class_fields\">Private class features</a>\n[^10]: <a href=\"https://zh.wikipedia.org/zh-tw/UTF-8#UTF-8%E7%9A%84%E7%B7%A8%E7%A2%BC%E6%96%B9%E5%BC%8F\">UTF-8 encoding/decoding</a>\n[^11]: <a href=\"https://github.com/samerbuna/efficient-node/blob/main/400-node-streams.adoc\">samerbuna/efficient-node</a>\n[^12]: <a href=\"https://nodejs.org/en/docs/guides/simple-profiling/\">Profiler</a>\n[^13]: <a href=\"https://kulshekhar.github.io/ts-jest/docs/guides/esm-support\">ts-jest</a>\n[^14]: <a href=\"https://medium.com/@danielhu95/set-up-eslint-pipeline-zh-tw-990d7d9eb68e\">使用 ESLint, Prettier, Husky, Lint-staged 以及 Commitizen 提升專案品質及一致性</a>\n[^15]: <a href=\"https://snyk.io/blog/best-practices-create-modern-npm-package/\">Best practices for creating a modern npm package</a>\n[^16]: <a href=\"https://github.com/artyomliou/msgpack-nodejs/actions\">Github Actions</a>\n[^17]: <a href=\"https://nodejs.org/en/docs/guides/diagnostics/memory/using-gc-traces/\">Memory Diagnostics - Using GC Trace</a></p>\n",
    "msgpack_repo_id": "artyomliou-msgpack-nodejs",
    "msgpack_repo_homepage": "https://www.npmjs.com/package/msgpack-nodejs",
    "full_name": "artyomliou/msgpack-nodejs",
    "owner": "artyomliou",
    "html_url": "https://github.com/artyomliou/msgpack-nodejs"
  },
  {
    "msgpack_lang": "Zig",
    "msgpack_quickstart_html": "<h5>msgpack-zig</h5>\n<p>msgpack-zig provides a simple API for encoding and decoding msgpack data. The\nAPI is designed to similar to <code>std.json</code>. Msgpack inherently requires less\nallocation than JSON so the return values are slightly different.</p>\n<blockquote>\n<p>[!IMPORTANT]\nmsgpack-zig uses zig 0.13.0</p>\n</blockquote>\n<h6>Usage</h6>\n<blockquote>\n<p>[!NOTE]\nRefer to the <a href=\"https://rockorager.github.io/msgpack-zig/\">documentation</a> for additional usage.</p>\n</blockquote>\n<p>There are two main functions provided by msgpack-zig:</p>\n<pre><code class=\"language-zig\">/// Pack a given type as a msgpack Value\npub fn pack(comptime T: type, writer: std.io.AnyWriter) anyerror!void {}\n\n/// Unpack the next msgpack Value from reader as type T\npub fn unpack(comptime T: type, reader: std.io.AnyReader) anyerror!void {}\n</code></pre>\n<p>For packing, any type which has a function signature <code>msgpackPack(self: T, writer: std.io.AnyWriter) anyerror!void</code> will use this function has for packing.\nOtherwise it will be packed using the defaults.</p>\n<p>Likewise, unpacking types can implement <code>msgpackUnpack(writer: std.io.AnyWriter) anyerror!T</code> to unpack from a stream, or <code>msgpackUnpackFromValue(value: msgpack.Value) anyerror!T</code> to unpack from a msgpack.Value.</p>\n<h6>Value</h6>\n<p>msgpack values are stored internally as a tagged union. Note that we impose a\nlimitation on maps: the keys <em>must</em> be strings, similar to JSON (the msgpack\nspecification allows for any msgpack type to be a key).</p>\n<pre><code class=\"language-zig\">pub const Value = union(enum) {\n    i64: i64,\n    u64: u64,\n    f64: f64,\n    nil: void,\n    bool: bool,\n    str: []const u8,\n    bin: []const u8,\n    array: []Value,\n    map: std.StringHashMap(Value),\n    ext: struct {\n        id: i8,\n        data: []const u8,\n    },\n};\n</code></pre>\n<h6>Roadmap</h6>\n<ul>\n<li>[ ] Automatic unpacking of <code>map</code> to structs</li>\n</ul>\n",
    "msgpack_repo_id": "rockorager-msgpack-zig",
    "msgpack_repo_homepage": "https://github.com/rockorager/msgpack-zig",
    "full_name": "rockorager/msgpack-zig",
    "owner": "rockorager",
    "html_url": "https://github.com/rockorager/msgpack-zig"
  },
  {
    "msgpack_lang": "Swift, java compatibel",
    "msgpack_quickstart_html": "<h5>swift-msgpack-serialization</h5>\n<p><a href=\"https://github.com/Carthage/Carthage\"><img src=\"https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat\" alt=\"Carthage compatible\"></a></p>\n<p>Another swift serialization library for msgpack with support for the Codable environement.</p>\n<p>This framework is designed to be (optionaly) compatibel to the msgpack-java library.\nSee <a href=\"https://github.com/cherrywoods/swift-msgpack-serialization/blob/master/Compatibility.md\">Compatibility.md</a> for more detailed information about this.</p>\n<p>Please make sure, that the swift model classes and java model classes you use are compatibel to each other, e.g. enums are named equaly (including case).</p>\n<p>This framework also supplies the possibiliy to encode keys of other types than String (generalContainer function of MsgpackEncoder).</p>\n<p>swift-msgpack-serialization works with <a href=\"https://github.com/a2/MessagePack.swift\">MessagePack.swift</a>. This means, that you can encode your classes, structs and enums, that conform to Codable to MessagePackValue from MessagePack.swift, do something with this MessagePackValue and then encode it to msgpack using MessagePack.swift. You may of course also decode to MessagePackValue first and then decode a particular MessagePackValue to your own type.</p>\n<h6>Instalation</h6>\n<p>Currently, only carthage is supported.</p>\n<h6>Compatibilty restrictions</h6>\n<p>Make sure you never call .encode(to:) directly! Instead use the encode method on a keyed, unkeyed or singleValue container or cast the encoder passed to you to MsgpackEncoder and call encodeIntermediate(_) on this encoder. If you do not use this, this framework won't be able to do it's work properly.</p>\n",
    "msgpack_repo_id": "cherrywoods-swift-msgpack-serialization",
    "msgpack_repo_homepage": "https://github.com/cherrywoods/swift-msgpack-serialization",
    "full_name": "cherrywoods/swift-msgpack-serialization",
    "owner": "cherrywoods",
    "html_url": "https://github.com/cherrywoods/swift-msgpack-serialization"
  },
  {
    "msgpack_lang": "Go",
    "msgpack_quickstart_html": "<h5>go-msgpack</h5>\n<p>go-msgpack is a package of MessagePack encoding for Go.</p>\n<h6>Quick Start</h6>\n<pre><code>package main\n\nimport (\n\tgomsgpack &quot;github.com/nnabeyang/go-msgpack&quot;\n)\n\ntype Pair struct {\n\tX int\n\tY int\n}\n\nfunc main() {\n\tv := Pair{X: 1, Y: 2}\n\tdata, err := gomsgpack.Marshal(v, false)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tvar r Pair\n\tif err := gomsgpack.Unmarshal(data, &amp;r); err != nil {\n\t\tpanic(err)\n\t}\n}\n</code></pre>\n<h6>License</h6>\n<p>go-msgpack is published under the MIT License, see LICENSE.</p>\n<h6>Author</h6>\n<p><a href=\"https://twitter.com/nnabeyang\">Noriaki Watanabe@nnabeyang</a></p>\n",
    "msgpack_repo_id": "nnabeyang-go-msgpack",
    "msgpack_repo_homepage": "https://github.com/nnabeyang/go-msgpack",
    "full_name": "nnabeyang/go-msgpack",
    "owner": "nnabeyang",
    "html_url": "https://github.com/nnabeyang/go-msgpack"
  },
  {
    "msgpack_lang": "Racket",
    "msgpack_quickstart_html": "<p>#######################\nMessagePack in Racket\n#######################</p>\n<p>.. default-role:: code</p>\n<p>This is a Racket_ implementation of MessagePack_, a binary data serialisation\nformat. It allows you to serialise (pack) and de-serialise (unpack) Racket\nobject to and from binary data.</p>\n<p>.. _MessagePack: http://msgpack.org/\n.. _Racket: http://racket-lang.org/</p>\n<p>Installation\n############</p>\n<p>The easiest way to install this library is from the <code>Racket Package Catalog</code>_.\nRun the following code from your shell:</p>\n<p>.. code:: sh</p>\n<p>raco pkg install msgpack</p>\n<p>If you wish to install the package from this repository use the included\nmakefile:</p>\n<p>.. code:: sh</p>\n<p>make install   # Install the package\nmake remove    # Uninstall the package</p>\n<p>.. _Racket Package Catalog: https://pkgs.racket-lang.org/</p>\n<p>Using MessagePack\n#################</p>\n<p>.. code:: racket</p>\n<p>;;; Import the library first\n(require msgpack)</p>\n<p>;;; Some object to pack\n(define hodgepodge (vector 1 2 (void) '#(3 #t) &quot;foo&quot;))</p>\n<p>;;; Packing data\n(define packed (call-with-output-bytes (λ (out) (pack hodgepodge out))))\n;;; &gt; #&quot;\\225\\1\\2\\300\\222\\3\\303\\243foo&quot;</p>\n<p>;;; Unpacking data\n(define unpacked (call-with-input-bytes packed (λ (in) (unpack in))))\n;;; &gt; '#(1 2 #<void> #(3 #t) &quot;foo&quot;)</p>\n<p>The <code>pack</code> function takes a Racket object and a binary output port as arguments\nand writes the serialised data to the port.  The <code>unpack</code> function takes a\nbinary input port and returns one de-serialised object, consuming the necessary\namount of bytes from the port in the process. For more details please refer to\nthe documentation_.</p>\n<p>In the above example code we set the output and input ports to be byte strings\nso we could work with the packed and unpacked data directly inside the Racket\ninstance.</p>\n<p>.. _documentation: https://docs.racket-lang.org/msgpack/index.html</p>\n<p>Status</p>\n<h6></h6>\n<p>The library is fully functional, covered by test cases, and the API should be\nreasonably mature, but I am not yet willing to completely rule out changes. See\nalso below for parts of the library that could not be tested at the moment due\nto technical reasons.</p>\n<p>Caveats\n#######</p>\n<p>The following cases cannot be tested for the time being:</p>\n<ul>\n<li>The <code>bin32</code> type, storing a byte string that is :math:<code>2^32</code> bytes long\nrequires 4GiB, my machine simply runs out of memory.</li>\n<li>The same goes for the <code>str32</code> type</li>\n<li>The same goes for the <code>array32</code> type</li>\n<li>The same goes for the <code>map32</code> type</li>\n<li>The same goes for the <code>ext32</code> type</li>\n<li>Strings are only tested using ASCII characters, if anyone can generate\nUTF-8 strings with a given length in <em>bytes</em> please help out.</li>\n</ul>\n<p>License\n#######</p>\n<p>Released under the GPLv3+ license, see the COPYING_ file for details.</p>\n<p>.. _COPYING: COPYING.txt</p>\n",
    "msgpack_repo_id": "HiPhish-msgpack-racket",
    "msgpack_repo_homepage": "https://gitlab.com/HiPhish/MsgPack.rkt",
    "full_name": "HiPhish/msgpack-racket",
    "owner": "HiPhish",
    "html_url": "https://github.com/HiPhish/msgpack-racket"
  },
  {
    "msgpack_lang": "GNU Guile",
    "msgpack_quickstart_html": "<p>.. default-role:: code</p>\n<p>###########################\nMessagePack for GNU Guile\n###########################</p>\n<p>This is a GNU Guile library implementing the MessagePack data serialisation\nformat. It allows you to serialise (pack) and de-serialise (unpack) Scheme\nobjects to and from binary data according to the MessagePack format.</p>\n<p>.. image:: screenshot.png\n:alt: Screenshot of running a Racket REPL in Neovim, using Racket to control\nNeovim\n:align: center</p>\n<p>Installation\n############</p>\n<p>Use the included makefile to build the library, documentation and run tests.\nHere is a quick run-down, please refer to the INSTALL_ file for full details.</p>\n<p>.. code:: sh</p>\n<h5>Run tests, install to /usr/local, build PDF and HTML documentation</h5>\n<p>make check &amp;&amp; make lib doc PREFIX=/usr/local &amp;&amp; make pdf html</p>\n<p>Using MessagePack\n#################</p>\n<p>First import the module, then you can pack an object to a binary input port or\nunpack one from a binary output port.</p>\n<p>.. code:: scheme</p>\n<p>(use-modules ((msgpack) #:select (pack unpack pack-to unpack-from)))</p>\n<p>;; Some object to pack\n(define hodgepodge (vector 1 2 '#(3 #t) &quot;foo&quot;))</p>\n<p>(pack hodgepodge)\n;; Returns #vu8(#x94 #x01 #x02 #x92 #x03 #xC3 #xA3 #x66 #x6F #x6F)</p>\n<p>(unpack #vu8(#x94 #x01 #x02 #x92 #x03 #xC3 #xA3 #x66 #x6F #x6F))\n;; Returns '#(1 2 #(3 #t) &quot;foo&quot;)</p>\n<p>;; We can also pack and unpack directly to and from a port\n(pack-to (current-output-port) hodgepodge)\n(unpack-from (current-input-port))</p>\n<p>In the above code we have two variants of <code>pack</code> and <code>unpack</code>: a pure one and\nan impure one with a <code>to</code>- or <code>from</code> suffix. The pure variant performs the\npacking or unpacking without any side effects by returning the packed bytes or\nthe unpacked object. The impure variant on the other hand writes to or reads\nfrom a port as a side effect, but does not return anything.</p>\n<p>Status of the project\n#####################</p>\n<p>The project is still fresh, but it is complete and stable as far as I am\nconcerned. I will wait a little while for it to set before committing to a\nproper release though. User experience reports are always welcome.</p>\n<p>License\n#######</p>\n<p>Released under the GPLv3+ license, see the COPYING_ file for details.</p>\n<p>.. _MessagePack: http://msgpack.org/\n.. _INSTALL: INSTALL.rst\n.. _COPYING: COPYING.txt</p>\n<p>Self-promotion\n##############</p>\n<p>If you like this library please consider financially supporting its\ndevelopment, every small amount helps. Feel free to explore my other software\nprojects as well.</p>\n<ul>\n<li>\n<p>http://hiphish.github.io/</p>\n</li>\n<li>\n<p>https://liberapay.com/HiPhish/</p>\n</li>\n</ul>\n",
    "msgpack_repo_id": "HiPhish-guile-msgpack",
    "msgpack_repo_homepage": "https://gitlab.com/HiPhish/guile-msgpack",
    "full_name": "HiPhish/guile-msgpack",
    "owner": "HiPhish",
    "html_url": "https://github.com/HiPhish/guile-msgpack"
  },
  {
    "msgpack_lang": "Python",
    "msgpack_quickstart_html": "<h5>msglc --- (de)serialize json objects with lazy/partial loading containers using msgpack</h5>\n<p><a href=\"https://codecov.io/gh/TLCFEM/msglc\"><img src=\"https://codecov.io/gh/TLCFEM/msglc/graph/badge.svg?token=JDPARZSVDR\" alt=\"codecov\"></a>\n<a href=\"https://pypi.org/project/msglc/\"><img src=\"https://badge.fury.io/py/msglc.svg\" alt=\"PyPI version\"></a></p>\n<h6>What</h6>\n<p><code>msglc</code> is a Python library that provides a way to serialize and deserialize json objects with lazy/partial loading\ncontainers using <code>msgpack</code> as the serialization format.</p>\n<p>It can be used in environments that use <code>msgpack</code> to store/exchange data that is larger than a few MBs if any of the\nfollowings hold.</p>\n<ol>\n<li>After cold storage, each retrieval only accesses part of the stored data.</li>\n<li>Cannot afford to decode the whole file due to memory limitation, performance consideration, etc.</li>\n<li>Want to combine encoded data into a single blob without decoding and re-encoding the same piece of data.</li>\n</ol>\n<p>One may want to check the <a href=\"https://github.com/TLCFEM/msglc/wiki/Benchmark\">benchmark</a>.</p>\n<h6>Quick Start</h6>\n<h7>Serialization</h7>\n<p>Use <code>dump</code> to serialize a json object to a file.</p>\n<pre><code class=\"language-python\">from msglc import dump\n\ndata = {&quot;a&quot;: [1, 2, 3], &quot;b&quot;: {&quot;c&quot;: 4, &quot;d&quot;: 5, &quot;e&quot;: [0x221548313] * 10}}\ndump(&quot;data.msg&quot;, data)\n</code></pre>\n<p>Use <code>combine</code> to combine several serialized files together.\nThe combined files can be further combined.</p>\n<h8>Combine as <code>dict</code></h8>\n<pre><code class=\"language-python\">from msglc import dump, combine, FileInfo\nfrom msglc.reader import LazyReader\n\ndump(&quot;dict.msg&quot;, {str(v): v for v in range(1000)})\ndump(&quot;list.msg&quot;, [float(v) for v in range(1000)])\n\ncombine(&quot;combined.msg&quot;, [FileInfo(&quot;dict.msg&quot;, &quot;dict&quot;), FileInfo(&quot;list.msg&quot;, &quot;list&quot;)])\n# support recursively combining files\n# ...\n\n# the combined file uses a dict layout\n# { 'dict' : {'1':1,'2':2,...}, 'list' : [1.0,2.0,3.0,...] }\n# so one can read it as follows, details in coming section\nwith LazyReader(&quot;combined.msg&quot;) as reader:\n    assert reader['dict/101'] == 101  # also reader['dict'][101]\n    assert reader['list/101'] == 101.0  # also reader['list'][101]\n</code></pre>\n<h8>Combine as <code>list</code></h8>\n<pre><code class=\"language-python\">from msglc import dump, combine, FileInfo\nfrom msglc.reader import LazyReader\n\ndump(&quot;dict.msg&quot;, {str(v): v for v in range(1000)})\ndump(&quot;list.msg&quot;, [float(v) for v in range(1000)])\n\ncombine(&quot;combined.msg&quot;, [FileInfo(&quot;dict.msg&quot;), FileInfo(&quot;list.msg&quot;)])\n# support recursively combining files\n# ...\n\n# the combined file uses a list layout\n# [ {'1':1,'2':2,...}, [1.0,2.0,3.0,...] ]\n# so one can read it as follows, details in coming section\nwith LazyReader(&quot;combined.msg&quot;) as reader:\n    assert reader['0/101'] == 101  # also reader[0][101]\n    assert reader['1/101'] == 101.0  # also reader[1][101]\n</code></pre>\n<h7>Deserialization</h7>\n<p>Use <code>LazyReader</code> to read a file.</p>\n<pre><code class=\"language-python\">from msglc.reader import LazyReader, to_obj\n\nwith LazyReader(&quot;data.msg&quot;) as reader:\n    data = reader.read()  # return a LazyDict, LazyList, dict, list or primitive value\n    data = reader[&quot;b/c&quot;]  # subscriptable if the actual data is subscriptable\n    # data = reader[2:]  # also support slicing if its underlying data is list compatible\n    data = reader.read(&quot;b/c&quot;)  # or provide a path to visit a particular node\n    print(data)  # 4\n    b_dict = reader.read(&quot;b&quot;)\n    print(b_dict.__class__)  # &lt;class 'msglc.reader.LazyDict'&gt;\n    for k, v in b_dict.items():  # dict compatible\n        if k != &quot;e&quot;:\n            print(k, v)  # c 4, d 5\n    b_json = to_obj(b_dict)  # ensure plain dict\n</code></pre>\n<p>Please note all data operations shall be performed inside the <code>with</code> block.</p>\n<p>All data is lazily loaded, use <code>to_obj()</code> function to ensure it is properly read, especially when the data goes out of\nthe <code>with</code> block.</p>\n<p>If there is no need to cache the read data, pass the argument <code>cached=False</code> to the initializer.</p>\n<pre><code class=\"language-python\">from msglc.reader import LazyReader, to_obj\n\nwith LazyReader(&quot;data.msg&quot;, cached=False) as reader:\n    data = to_obj(reader.read('some/path/to/the/target'))\n</code></pre>\n<h6>Why</h6>\n<p>The <code>msgpack</code> specification and the corresponding Python library <code>msgpack</code> provide a tool to serialize json objects into\nbinary data.\nHowever, the encoded data has to be fully decoded to reveal what is inside.\nThis becomes an issue when the data is large and only a small part of it is needed.</p>\n<p><code>msglc</code> provides an enhanced format to embed structure information into the encoded data.\nThis allows lazy and partial decoding of the data of interest, which can be a significant performance improvement.</p>\n<h6>How</h6>\n<h7>Overview</h7>\n<p><code>msglc</code> packs tables of contents and data into a single binary blob. The detailed layout can be shown as follows.</p>\n<pre><code class=\"language-text\">#####################################################################\n# magic bytes # 20 bytes # encoded data # encoded table of contents #\n#####################################################################\n</code></pre>\n<ol>\n<li>The magic bytes are used to identify the format of the file.</li>\n<li>The 20 bytes are used to store the start position and the length of the encoded table of contents.</li>\n<li>The encoded data is the original msgpack encoded data.</li>\n</ol>\n<p>The table of contents is placed at the end of the file to allow direct writing of the encoded data to the file.\nThis makes the memory footprint small.</p>\n<h7>Buffering</h7>\n<p>One can configure the buffer size for reading and writing.</p>\n<pre><code class=\"language-python\">from msglc.config import configure\n\nconfigure(write_buffer_size=2 ** 23)\nconfigure(read_buffer_size=2 ** 16)\n</code></pre>\n<p>Combining multiple files into a single one requires copying data from one file to another.\nAdjust <code>copy_chunk_size</code> to control memory footprint.</p>\n<pre><code class=\"language-python\">from msglc.config import configure\n\nconfigure(copy_chunk_size=2 ** 24)  # 16 MB\n</code></pre>\n<h7>Table of Contents</h7>\n<p>There are two types of containers in json objects: array and object.\nThey correspond to <code>list</code> and <code>dict</code> in Python, respectively.</p>\n<p>The table of contents mimics the structure of the original json object.\nHowever, only containers that exceed a certain size are included in the table of contents.\nThis size is configurable and can be often set to the multiple of the block size of the storage system.</p>\n<pre><code class=\"language-python\">from msglc.config import configure\n\nconfigure(small_obj_optimization_threshold=2 ** 20)\n</code></pre>\n<p>The above configuration assigns a threshold of 1 MB, containers larger than 1 MB will be indexed in the table of\ncontents.\nTo achieve optimal performance, one shall configure this value according to the underlying file system.</p>\n<p>The basic structure of the table of contents of any object is a <code>dict</code> with two keys: <code>t</code> (toc) and <code>p</code> (position).\nThe <code>t</code> field only exists when the object is a <strong>sufficiently large container</strong>.</p>\n<p>If all the elements in the container are small, the <code>t</code> field will also be omitted.</p>\n<p>For the purpose of demonstration, the size threshold is set to 2 bytes in the following examples.</p>\n<pre><code class=\"language-python\"># an integer is not a container\ndata = 2154848\ntoc = {&quot;p&quot;: [0, 5]}\n\n# a string is not a container\ndata = &quot;a string&quot;\ntoc = {&quot;p&quot;: [5, 14]}\n\n# the inner lists contain small elements, so the `t` field is omitted\n# the outer list is larger than 2 bytes, so the `t` field is included\ndata = [[1, 1], [2, 2, 2, 2, 2]]\ntoc = {&quot;t&quot;: [{&quot;p&quot;: [15, 18]}, {&quot;p&quot;: [18, 24]}], &quot;p&quot;: [14, 24]}\n\n# the outer dict is larger than 2 bytes, so the `t` field is included\n# the `b` field is not a container\n# the `aa` field is a container, but all its elements are small, so the `t` field is omitted\ndata = {'a': {'aa': [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]}, 'b': 2}\ntoc = {&quot;t&quot;: {&quot;a&quot;: {&quot;t&quot;: {&quot;aa&quot;: {&quot;p&quot;: [31, 42]}}, &quot;p&quot;: [27, 42]}, &quot;b&quot;: {&quot;p&quot;: [44, 45]}}, &quot;p&quot;: [24, 45]}\n</code></pre>\n<p>Due to the presence of the size threshold, the table of contents only requires a small amount of extra space.</p>\n<h7>Reading</h7>\n<p>The table of contents is read first. The actual data is represented by <code>LazyDict</code> and <code>LazyList</code> classes, which have\nsimilar interfaces to the original <code>dict</code> and <code>list</code> classes in Python.</p>\n<p>As long as the table of contents contains the <code>t</code> field, no actual data is read.\nEach piece of data is read only when it is accessed, and it is cached for future use.\nThus, the data is read lazily and will only be read once (unless fast loading is enabled).</p>\n<h7>Fast Loading</h7>\n<p>There are two ways to read a container into memory:</p>\n<ol>\n<li>Read the entire container into memory.</li>\n<li>Read each element of the container into memory one by one.</li>\n</ol>\n<p>The first way only requires one system call, but data may be repeatedly read if some of its children have been read\nbefore.\nThe second way requires multiple system calls, but it ensures that each piece of data is read only once.\nDepending on various factors, one may be faster than the other.</p>\n<p>Fast loading is a feature that allows the entire data to be read into memory at once.\nThis helps to avoid issuing multiple system calls to read the data, which can be slow if the latency is high.</p>\n<pre><code class=\"language-python\">from msglc.config import configure\n\nconfigure(fast_loading=True)\n</code></pre>\n<p>One shall also configure the threshold for fast loading.</p>\n<pre><code class=\"language-python\">from msglc.config import configure\n\nconfigure(fast_loading_threshold=0.5)\n</code></pre>\n<p>The threshold is a fraction between 0 and 1. The above 0.5 means if more than half of the children of a container have\nbeen read already, <code>to_obj</code> will use the second way to read the whole container. Otherwise, it will use the first way.</p>\n<h7>Detection of Long List with Small Elements</h7>\n<p>Longs lists with small elements, such as integers and floats, can be further optimized by grouping elements into blocks\nthat are of the size of <code>small_obj_optimization_threshold</code> so that small reads can be avoided.</p>\n<p>Set a <code>trivial_size</code> to the desired bytes to identify those long lists.\nFor example, the following sets it to 10 bytes, long lists of integers and floats will be grouped into blocks.\n64-bit integers and doubles require 8 bytes (data) + 1 byte (type) = 9 bytes.</p>\n<pre><code class=\"language-python\">from msglc.config import configure\n\nconfigure(trivial_size=10)\n</code></pre>\n<h7>Disable GC</h7>\n<p>To improve performance, <code>gc</code> can be disabled during (de)serialization.\nIt is controlled by a global counter, as long as there is one active writer/reader, <code>gc</code> will stay disabled.</p>\n<pre><code class=\"language-python\">from msglc.config import configure\n\nconfigure(disable_gc=True)\n</code></pre>\n<h7>Default Values</h7>\n<pre><code class=\"language-python\">from dataclasses import dataclass\n\n\n@dataclass\nclass Config:\n    small_obj_optimization_threshold: int = 2 ** 13  # 8KB\n    write_buffer_size: int = 2 ** 23  # 8MB\n    read_buffer_size: int = 2 ** 16  # 64KB\n    fast_loading: bool = True\n    fast_loading_threshold: float = 0.3\n    trivial_size: int = 20\n    disable_gc: bool = True\n    simple_repr: bool = True\n    copy_chunk_size: int = 2 ** 24  # 16MB\n</code></pre>\n",
    "msgpack_repo_id": "TLCFEM-msglc",
    "msgpack_repo_homepage": "https://tlcfem.github.io/msglc/",
    "full_name": "TLCFEM/msglc",
    "owner": "TLCFEM",
    "html_url": "https://github.com/TLCFEM/msglc"
  },
  {
    "msgpack_lang": "J",
    "msgpack_quickstart_html": "<h5>msgpack-j</h5>\n<p>Implementation of the Message Pack serialization format in J.\n###Usage\nimport into projects and open in jqt or other. It's very simple.</p>\n<p>###Examples\n<code>pack</code> packs J types into a byte string. <code>unpack</code> reverses this.</p>\n<pre><code>  `pack 'hello world'`\n\n     `�hello world`\n\n  `unpack �hello world`\n\n     `'hello world'`\n</code></pre>\n<p><b><code>packObj</code></b> packs J types into a hex string (string literal). <b><code>unpackObj</code></b> reverses this.</p>\n<p>e.g.</p>\n<pre><code>   `packObj 'Hello World'`\n\n     `ab48656c6c6f20576f726c64`\n\n  `unpackObj 'ab48656c6c6f20576f726c64'`\n\n     `Hello World`\n</code></pre>\n<p>###More Usage\nExample:</p>\n<pre><code>  `pack 2;4.67;'hello, world'`\n\n     `�\u0002�@┐�┼z�G��hello, world`\n\n  `packObj 2;4.67;'hello, world'`\n\n     `9302cb4012ae147ae147aeac68656c6c6f2c20776f726c64`\n</code></pre>\n<p>JSON representation:\n<code>[2,4.67,&quot;hello, world&quot;]</code></p>\n<p>Example:</p>\n<pre><code>  `unpackObj '81a46461746183a2696401a673636f72657394cb400999999999999acb4016cccccccccccdcb40091eb851eb851fcb4007333333333333a56f7468657283a4736f6d65d1f2b8a46d6f7265ccc8a4646174610c'`\n</code></pre>\n<p>returns a nested dictionary.</p>\n<p>JSON representation:</p>\n<pre><code>  `{&quot;data&quot;:{&quot;id&quot;:1,&quot;scores&quot;:[3.2,5.7,3.14,2.9],&quot;other&quot;:{&quot;some&quot;:_3400,&quot;more&quot;:200,&quot;data&quot;:12}}}`\n</code></pre>\n<p>###Handling dictionary / hashmap datatypes</p>\n<p>Since J has no native Dictionary / Hashmap type, one has been implemented for the purposes of MsgPack serialization.</p>\n<p>Construction:</p>\n<pre><code>  `HM =: '' conew 'HashMap'`\n</code></pre>\n<p>This will instantiate a new HashMap object.</p>\n<pre><code>  `set__HM 'key';'value'`\n</code></pre>\n<p>This will add a key value pair to the dicitonary. Note the length of the boxed array argument must be two. i.e. if  the value is an array itself, then it must be boxed together before appending to the key value.</p>\n<pre><code>  `get__HM 'key'`\n</code></pre>\n<p>This will return the value for the given key, if one exists.</p>\n<p>To pack a HashMap:</p>\n<pre><code>  `packObj s: HM`\n</code></pre>\n<p>Here HM is the HashMap reference name. It must be symbolized first, before packing. Furthermore, to add a HashMap as a value of another HashMap:</p>\n<pre><code>  `set__HM 'hashmapkey';s:HM2`\n</code></pre>\n<p>The inner HashMap reference (HM2) must be symbolized before adding to the dictionary. If you are adding a list of HashMaps to the parent HashMap:</p>\n<pre><code>  `set__HM 'key'; &lt;(s:HM2;s:HM3;s:HM4)`\n</code></pre>\n<p>Note the HashMap array is boxed so that the argument for <code>set</code> is of length two. Since the HashMap <code>HM</code> stores the reference to the child HashMaps as symbols, they must be desymbolized if retrieved. e.g.</p>\n<pre><code>  `ChildHM =: getHashmapFromValue_HashMap_ get__HM 'mychildHashMapkey'`\n</code></pre>\n<p>Here, <b><code>getHashmapFromValue_HashMap_</code></b> ensures that the retrieved object is a reference to a hashmap, as is wanted.</p>\n<p>When unpacking data, assuming the root object is a dictionary / hashmap:</p>\n<pre><code>  `HM =: 5 s: unpackObj 'some serialized data'`\n</code></pre>\n<p><b><code>5 s:</code></b> must be called to desymbolize the reference to the HashMap. Furthermore, all child HashMaps of <code>HM</code> must also be desymbolized too.</p>\n<p>`</p>\n",
    "msgpack_repo_id": "jonghough-msgpack-j",
    "msgpack_repo_homepage": "https://github.com/jonghough/msgpack-j",
    "full_name": "jonghough/msgpack-j",
    "owner": "jonghough",
    "html_url": "https://github.com/jonghough/msgpack-j"
  },
  {
    "msgpack_lang": "expert-carnival",
    "msgpack_quickstart_html": "<h5>https-github.com-msgpack-msgpack-java</h5>\n<p>msgpack.org[expert-carnival]</p>\n",
    "msgpack_repo_id": "tihannalouise-https-github.com-msgpack-msgpack-java",
    "msgpack_repo_homepage": "https://github.com/tihannalouise/https-github.com-msgpack-msgpack-java",
    "full_name": "tihannalouise/https-github.com-msgpack-msgpack-java",
    "owner": "tihannalouise",
    "html_url": "https://github.com/tihannalouise/https-github.com-msgpack-msgpack-java"
  },
  {
    "msgpack_lang": "Go",
    "msgpack_quickstart_html": null,
    "msgpack_repo_id": "ybkimm-msgpack",
    "msgpack_repo_homepage": "https://godoc.org/github.com/ybkimm/msgpack",
    "full_name": "ybkimm/msgpack",
    "owner": "ybkimm",
    "html_url": "https://github.com/ybkimm/msgpack"
  },
  {
    "msgpack_lang": "C#",
    "msgpack_quickstart_html": "<h5>MessagePack for C# (.NET, .NET Core, Unity, Xamarin)</h5>\n<p><a href=\"https://www.nuget.org/packages/messagepack\"><img src=\"https://img.shields.io/nuget/v/MessagePack.svg\" alt=\"NuGet\"></a>\n<a href=\"https://www.nuget.org/packages/messagepack\"><img src=\"https://img.shields.io/nuget/vpre/MessagePack.svg\" alt=\"NuGet\"></a>\n[<img src=\"https://img.shields.io/github/release/neuecc/MessagePack-CSharp.svg\" alt=\"Releases\">][Releases]</p>\n<p><a href=\"https://gitter.im/MessagePack-CSharp/Lobby?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge\"><img src=\"https://badges.gitter.im/MessagePack-CSharp/Lobby.svg\" alt=\"Join the chat at https://gitter.im/MessagePack-CSharp/Lobby\"></a>\n<a href=\"https://dev.azure.com/ils0086/MessagePack-CSharp/_build/latest?definitionId=2&amp;branchName=master\"><img src=\"https://dev.azure.com/ils0086/MessagePack-CSharp/_apis/build/status/MessagePack-CSharp-CI?branchName=master\" alt=\"Build Status\"></a></p>\n<p>The extremely fast <a href=\"http://msgpack.org/\">MessagePack</a> serializer for C#.\nIt is 10x faster than <a href=\"https://github.com/msgpack/msgpack-cli\">MsgPack-Cli</a> and outperforms other C# serializers. MessagePack for C# also ships with built-in support for LZ4 compression - an extremely fast compression algorithm. Performance is important, particularly in applications like games, distributed computing, microservices, or data caches.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/46207/23835716/89c8ab08-07af-11e7-9183-9e9415bdc87f.png\" alt=\"Perf comparison graph\"></p>\n<p>MessagePack has a compact binary size and a full set of general purpose expressive data types. Please have a look at the <a href=\"#comparison\">comparison with JSON, protobuf, ZeroFormatter section</a> and learn <a href=\"#performance\">why MessagePack C# is the fastest</a>.</p>\n<h6>Table of Contents</h6>\n<ul>\n<li><a href=\"#installation\">Installation</a>\n<ul>\n<li><a href=\"#nuget-packages\">NuGet packages</a></li>\n<li><a href=\"#unity\">Unity</a></li>\n<li><a href=\"#migration-notes-from-v1x\">Migration notes from v1.x</a></li>\n</ul>\n</li>\n<li><a href=\"#quick-start\">Quick Start</a></li>\n<li><a href=\"#analyzer\">Analyzer</a></li>\n<li><a href=\"#built-in-supported-types\">Built-in supported types</a></li>\n<li><a href=\"#object-serialization\">Object Serialization</a></li>\n<li><a href=\"#datacontract-compatibility\">DataContract compatibility</a></li>\n<li><a href=\"#serializing-readonlyimmutable-object-members--serializationconstructor\">Serializing readonly/immutable object members  (SerializationConstructor)</a></li>\n<li><a href=\"#serialization-callback\">Serialization Callback</a></li>\n<li><a href=\"#union\">Union</a></li>\n<li><a href=\"#dynamic-untyped-deserialization\">Dynamic (Untyped) Deserialization</a></li>\n<li><a href=\"#object-type-serialization\">Object Type Serialization</a></li>\n<li><a href=\"#typeless\">Typeless</a></li>\n<li><a href=\"#security\">Security</a></li>\n<li><a href=\"#performance\">Performance</a>\n<ul>\n<li><a href=\"#deserialization-performance-for-different-options\">Deserialization Performance for different options</a></li>\n<li><a href=\"#string-interning\">String interning</a></li>\n</ul>\n</li>\n<li><a href=\"#lz4-compression\">LZ4 Compression</a>\n<ul>\n<li><a href=\"#attributions\">Attributions</a></li>\n</ul>\n</li>\n<li><a href=\"#comparison-with-protobuf-json-zeroformatter\">Comparison with protobuf, JSON, ZeroFormatter</a></li>\n<li><a href=\"#hints-to-achieve-maximum-performance-when-using-messagepack-for-c\">Hints to achieve maximum performance when using MessagePack for C#</a>\n<ul>\n<li><a href=\"#use-indexed-keys-instead-of-string-keys-contractless\">Use indexed keys instead of string keys (Contractless)</a></li>\n<li><a href=\"#create-own-custom-composite-resolver\">Create own custom composite resolver</a></li>\n<li><a href=\"#use-native-resolvers\">Use native resolvers</a></li>\n<li><a href=\"#be-careful-when-copying-buffers\">Be careful when copying buffers</a></li>\n<li><a href=\"#choosing-compression\">Choosing compression</a></li>\n</ul>\n</li>\n<li><a href=\"#extensions\">Extensions</a></li>\n<li><a href=\"#experimental-features\">Experimental Features</a></li>\n<li><a href=\"#high-level-api-messagepackserializer\">High-Level API (<code>MessagePackSerializer</code>)</a>\n<ul>\n<li><a href=\"#multiple-messagepack-structures-on-a-single-stream\">Multiple MessagePack structures on a single <code>Stream</code></a></li>\n</ul>\n</li>\n<li><a href=\"#low-level-api-imessagepackformattert\">Low-Level API (<code>IMessagePackFormatter&lt;T&gt;</code>)</a></li>\n<li><a href=\"#primitive-api-messagepackwriter-messagepackreader\">Primitive API (<code>MessagePackWriter</code>, <code>MessagePackReader</code>)</a>\n<ul>\n<li><a href=\"#messagepackreader\"><code>MessagePackReader</code></a></li>\n<li><a href=\"#messagepackwriter\"><code>MessagePackWriter</code></a></li>\n</ul>\n</li>\n<li><a href=\"#main-extension-point-iformatterresolver\">Main Extension Point (<code>IFormatterResolver</code>)</a></li>\n<li><a href=\"#messagepackformatterattribute\">MessagePackFormatterAttribute</a></li>\n<li><a href=\"#ignoreformatter\">IgnoreFormatter</a></li>\n<li><a href=\"#reserved-extension-types\">Reserved Extension Types</a></li>\n<li><a href=\"#unity-support\">Unity support</a></li>\n<li><a href=\"#aot-code-generation-support-for-unityxamarin\">AOT Code Generation (support for Unity/Xamarin)</a></li>\n<li><a href=\"#rpc\">RPC</a>\n<ul>\n<li><a href=\"#magiconion\">MagicOnion</a></li>\n<li><a href=\"#streamjsonrpc\">StreamJsonRpc</a></li>\n</ul>\n</li>\n<li><a href=\"#how-to-build\">How to build</a></li>\n<li><a href=\"#author-info\">Author Info</a></li>\n</ul>\n<h6>Installation</h6>\n<p>This library is distributed via NuGet. Special <a href=\"#unity\">Unity support</a> is available, too.</p>\n<p>We target .NET Standard 2.0 with special optimizations for .NET Core 2.1+, making it compatible with most reasonably recent .NET runtimes such as Core 2.0 and later, Framework 4.6.1 and later, Mono 5.4 and later and Unity 2018.3 and later.\nThe library code is pure C# (with Just-In-Time IL code generation on some platforms).</p>\n<h7>NuGet packages</h7>\n<p>To install with NuGet, just install the <code>MessagePack</code> package:</p>\n<pre><code class=\"language-ps1\">Install-Package MessagePack\n</code></pre>\n<p>Install the optional C# <a href=\"doc/analyzers/index.md\">analyzers</a> package to get warnings about coding mistakes and automatic fix suggestions to save you time:</p>\n<pre><code class=\"language-ps1\">Install-Package MessagePackAnalyzer\n</code></pre>\n<p>There are also a range of official and third party Extension Packages available (learn more in our <a href=\"#extensions\">extensions section</a>):</p>\n<pre><code class=\"language-ps1\">Install-Package MessagePack.ReactiveProperty\nInstall-Package MessagePack.UnityShims\nInstall-Package MessagePack.AspNetCoreMvcFormatter\n</code></pre>\n<h7>Unity</h7>\n<p>For Unity projects, the [releases][Releases] page provides downloadable <code>.unitypackage</code> files. When using in Unity IL2CPP or Xamarin AOT environments, please carefully read the <a href=\"#aot\">pre-code generation section</a>.</p>\n<h7>Migration notes from v1.x</h7>\n<p>If you were using MessagePack for C# v1.x, check out the <a href=\"doc/migration.md\">&quot;How to update to our new v2.x version&quot;</a> document.</p>\n<h6>Quick Start</h6>\n<p>Define the struct or class to be serialized and annotate it with a <code>[MessagePackObject]</code> attribute.\nAnnotate members whose values should be serialized (fields as well as properties) with <code>[Key]</code> attributes.</p>\n<pre><code class=\"language-csharp\">[MessagePackObject]\npublic class MyClass\n{\n    // Key attributes take a serialization index (or string name)\n    // The values must be unique and versioning has to be considered as well.\n    // Keys are described in later sections in more detail.\n    [Key(0)]\n    public int Age { get; set; }\n\n    [Key(1)]\n    public string FirstName { get; set; }\n\n    [Key(2)]\n    public string LastName { get; set; }\n\n    // All fields or properties that should not be serialized must be annotated with [IgnoreMember].\n    [IgnoreMember]\n    public string FullName { get { return FirstName + LastName; } }\n}\n</code></pre>\n<p>Call <code>MessagePackSerializer.Serialize&lt;T&gt;/Deserialize&lt;T&gt;</code> to serialize/deserialize your object instance.\nYou can use the <code>ConvertToJson</code> method to get a human readable representation of any MessagePack binary blob.</p>\n<pre><code class=\"language-csharp\">class Program\n{\n    static void Main(string[] args)\n    {\n        var mc = new MyClass\n        {\n            Age = 99,\n            FirstName = &quot;hoge&quot;,\n            LastName = &quot;huga&quot;,\n        };\n\n        // Call Serialize/Deserialize, that's all.\n        byte[] bytes = MessagePackSerializer.Serialize(mc);\n        MyClass mc2 = MessagePackSerializer.Deserialize&lt;MyClass&gt;(bytes);\n\n        // You can dump MessagePack binary blobs to human readable json.\n        // Using indexed keys (as opposed to string keys) will serialize to MessagePack arrays,\n        // hence property names are not available.\n        // [99,&quot;hoge&quot;,&quot;huga&quot;]\n        var json = MessagePackSerializer.ConvertToJson(bytes);\n        Console.WriteLine(json);\n    }\n}\n</code></pre>\n<p>By default, a <code>MessagePackObject</code> annotation is required. This can be made optional; see the <a href=\"#object-serialization\">Object Serialization section</a> and the <a href=\"#resolvers\">Formatter Resolver section</a> for details.</p>\n<h6>Analyzer</h6>\n<p>The MessagePackAnalyzer package aids with:</p>\n<ol>\n<li>Automating definitions for your serializable objects.</li>\n<li>Produces compiler warnings upon incorrect attribute use, member accessibility, and more.</li>\n</ol>\n<p><img src=\"https://cloud.githubusercontent.com/assets/46207/23837445/ce734eae-07cb-11e7-9758-d69f0f095bc1.gif\" alt=\"analyzergif\"></p>\n<p>If you want to allow a specific custom type (for example, when registering a custom type), put <code>MessagePackAnalyzer.json</code> at the project root and change the Build Action to <code>AdditionalFiles</code>.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/46207/23837427/8a8d507c-07cb-11e7-9277-5a566eb0bfde.png\" alt=\"image\"></p>\n<p>An example <code>MessagePackAnalyzer.json</code>:</p>\n<pre><code class=\"language-json\">[ &quot;MyNamespace.FooClass&quot;, &quot;MyNameSpace.BarStruct&quot; ]\n</code></pre>\n<h6>Built-in supported types</h6>\n<p>These types can serialize by default:</p>\n<ul>\n<li>Primitives (<code>int</code>, <code>string</code>, etc...), <code>Enum</code>s, <code>Nullable&lt;&gt;</code>, <code>Lazy&lt;&gt;</code></li>\n<li><code>TimeSpan</code>,  <code>DateTime</code>, <code>DateTimeOffset</code></li>\n<li><code>Guid</code>, <code>Uri</code>, <code>Version</code>, <code>StringBuilder</code></li>\n<li><code>BigInteger</code>, <code>Complex</code>, <code>Half</code></li>\n<li><code>Array[]</code>, <code>Array[,]</code>, <code>Array[,,]</code>, <code>Array[,,,]</code>, <code>ArraySegment&lt;&gt;</code>, <code>BitArray</code></li>\n<li><code>KeyValuePair&lt;,&gt;</code>, <code>Tuple&lt;,...&gt;</code>, <code>ValueTuple&lt;,...&gt;</code></li>\n<li><code>ArrayList</code>, <code>Hashtable</code></li>\n<li><code>List&lt;&gt;</code>, <code>LinkedList&lt;&gt;</code>, <code>Queue&lt;&gt;</code>, <code>Stack&lt;&gt;</code>, <code>HashSet&lt;&gt;</code>, <code>ReadOnlyCollection&lt;&gt;</code>, <code>SortedList&lt;,&gt;</code></li>\n<li><code>IList&lt;&gt;</code>, <code>ICollection&lt;&gt;</code>, <code>IEnumerable&lt;&gt;</code>, <code>IReadOnlyCollection&lt;&gt;</code>, <code>IReadOnlyList&lt;&gt;</code></li>\n<li><code>Dictionary&lt;,&gt;</code>, <code>IDictionary&lt;,&gt;</code>, <code>SortedDictionary&lt;,&gt;</code>, <code>ILookup&lt;,&gt;</code>, <code>IGrouping&lt;,&gt;</code>, <code>ReadOnlyDictionary&lt;,&gt;</code>, <code>IReadOnlyDictionary&lt;,&gt;</code></li>\n<li><code>ObservableCollection&lt;&gt;</code>, <code>ReadOnlyObservableCollection&lt;&gt;</code></li>\n<li><code>ISet&lt;&gt;</code>,</li>\n<li><code>ConcurrentBag&lt;&gt;</code>, <code>ConcurrentQueue&lt;&gt;</code>, <code>ConcurrentStack&lt;&gt;</code>, <code>ConcurrentDictionary&lt;,&gt;</code></li>\n<li>Immutable collections (<code>ImmutableList&lt;&gt;</code>, etc)</li>\n<li>Custom implementations of <code>ICollection&lt;&gt;</code> or <code>IDictionary&lt;,&gt;</code> with a parameterless constructor</li>\n<li>Custom implementations of <code>IList</code> or <code>IDictionary</code> with a parameterless constructor</li>\n</ul>\n<p>You can add support for custom types, and there are some official/third-party extension packages for:</p>\n<ul>\n<li>ReactiveProperty</li>\n<li>for Unity (<code>Vector3</code>, <code>Quaternion</code>, etc...)</li>\n<li>F# (Record, FsList, Discriminated Unions, etc...)</li>\n</ul>\n<p>Please see the <a href=\"#extensions\">extensions section</a>.</p>\n<p><code>MessagePack.Nil</code> is the built-in type representing null/void in MessagePack for C#.</p>\n<h6>Object Serialization</h6>\n<p>MessagePack for C# can serialize your own public <code>class</code> or <code>struct</code> types. By default, serializable types must be annotated with the <code>[MessagePackObject]</code> attribute and members with the <code>[Key]</code> attribute. Keys can be either indexes (<code>int</code>) or arbitrary strings. If all keys are indexes, arrays are used for serialization, which offers advantages in performance and binary size. Otherwise, MessagePack maps (dictionaries) will be used.</p>\n<p>If you use <code>[MessagePackObject(keyAsPropertyName: true)]</code>, then members do not require explicit <code>Key</code> attributes, but string keys will be used.</p>\n<pre><code class=\"language-csharp\">[MessagePackObject]\npublic class Sample1\n{\n    [Key(0)]\n    public int Foo { get; set; }\n    [Key(1)]\n    public int Bar { get; set; }\n}\n\n[MessagePackObject]\npublic class Sample2\n{\n    [Key(&quot;foo&quot;)]\n    public int Foo { get; set; }\n    [Key(&quot;bar&quot;)]\n    public int Bar { get; set; }\n}\n\n[MessagePackObject(keyAsPropertyName: true)]\npublic class Sample3\n{\n    // No need for a Key attribute\n    public int Foo { get; set; }\n\n    // If want to ignore a public member, you can use the  IgnoreMember attribute\n    [IgnoreMember]\n    public int Bar { get; set; }\n}\n\n// [10,20]\nConsole.WriteLine(MessagePackSerializer.SerializeToJson(new Sample1 { Foo = 10, Bar = 20 }));\n\n// {&quot;foo&quot;:10,&quot;bar&quot;:20}\nConsole.WriteLine(MessagePackSerializer.SerializeToJson(new Sample2 { Foo = 10, Bar = 20 }));\n\n// {&quot;Foo&quot;:10}\nConsole.WriteLine(MessagePackSerializer.SerializeToJson(new Sample3 { Foo = 10, Bar = 20 }));\n</code></pre>\n<p>All public instance members (fields as well as properties) will be serialized. If you want to ignore certain public members, annotate the member with a <code>[IgnoreMember]</code> attribute.</p>\n<p>Please note that any serializable struct or class must have public accessibility; private and internal structs and classes cannot be serialized!\nThe default of requiring <code>MessagePackObject</code> annotations is meant to enforce explicitness and therefore may help write more robust code.</p>\n<p>Should you use an indexed (<code>int</code>) key or a string key?\nWe recommend using indexed keys for faster serialization and a more compact binary representation than string keys.\nHowever, the additional information in the strings of string keys can be quite useful when debugging.</p>\n<p>When classes change or are extended, be careful about versioning. <code>MessagePackSerializer</code> will initialize members to their <code>default</code> value if a key does not exist in the serialized binary blob, meaning members using reference types can be initialized to <code>null</code>.\nIf you use indexed (<code>int</code>) keys, the keys should start at 0 and should be sequential. If a later version stops using certain members, you should keep the obsolete members (C# provides an <code>Obsolete</code> attribute to annotate such members) until all other clients had a chance to update and remove their uses of these members as well. Also, when the values of indexed keys &quot;jump&quot; a lot, leaving gaps in the sequence, it will negatively affect the binary size, as <code>null</code> placeholders will be inserted into the resulting arrays. However, you shouldn't reuse indexes of removed members to avoid compatibility issues between clients or when trying to deserialize legacy blobs.</p>\n<p>Example of index gaps and resulting placeholders:</p>\n<pre><code class=\"language-csharp\">[MessagePackObject]\npublic class IntKeySample\n{\n    [Key(3)]\n    public int A { get; set; }\n    [Key(10)]\n    public int B { get; set; }\n}\n\n// [null,null,null,0,null,null,null,null,null,null,0]\nConsole.WriteLine(MessagePackSerializer.SerializeToJson(new IntKeySample()));\n</code></pre>\n<p>If you do not want to explicitly annotate with the <code>MessagePackObject</code>/<code>Key</code> attributes and instead want to use MessagePack for C# more like e.g. <a href=\"https://github.com/JamesNK/Newtonsoft.Json\">Json.NET</a>, you can make use of the contractless resolver.</p>\n<pre><code class=\"language-csharp\">public class ContractlessSample\n{\n    public int MyProperty1 { get; set; }\n    public int MyProperty2 { get; set; }\n}\n\nvar data = new ContractlessSample { MyProperty1 = 99, MyProperty2 = 9999 };\nvar bin = MessagePackSerializer.Serialize(\n  data,\n  MessagePack.Resolvers.ContractlessStandardResolver.Options);\n\n// {&quot;MyProperty1&quot;:99,&quot;MyProperty2&quot;:9999}\nConsole.WriteLine(MessagePackSerializer.ConvertToJson(bin));\n\n// You can also set ContractlessStandardResolver as the default.\n// (Global state; Not recommended when writing library code)\nMessagePackSerializer.DefaultOptions = MessagePack.Resolvers.ContractlessStandardResolver.Options;\n\n// Now serializable...\nvar bin2 = MessagePackSerializer.Serialize(data);\n</code></pre>\n<p>If you want to serialize private members as well, you can use one of the <code>*AllowPrivate</code> resolvers.</p>\n<pre><code class=\"language-csharp\">[MessagePackObject]\npublic class PrivateSample\n{\n    [Key(0)]\n    int x;\n\n    public void SetX(int v)\n    {\n        x = v;\n    }\n\n    public int GetX()\n    {\n        return x;\n    }\n}\n\nvar data = new PrivateSample();\ndata.SetX(9999);\n\n// You can choose either StandardResolverAllowPrivate\n// or ContractlessStandardResolverAllowPrivate\nvar bin = MessagePackSerializer.Serialize(\n  data,\n  MessagePack.Resolvers.DynamicObjectResolverAllowPrivate.Options);\n</code></pre>\n<p>If you want to use MessagePack for C# more like a BinaryFormatter with a typeless serialization API, use the typeless resolver and helpers. Please consult the <a href=\"#typeless\">Typeless section</a>.</p>\n<p>Resolvers are the way to add specialized support for custom types to MessagePack for C#. Please refer to the <a href=\"#resolvers\">Extension point section</a>.</p>\n<h6>DataContract compatibility</h6>\n<p>You can use <code>[DataContract]</code> annotations instead of <code>[MessagePackObject]</code> ones. If type is annotated with <code>DataContract</code>, you can use <code>[DataMember]</code> annotations instead of <code>[Key]</code> ones and <code>[IgnoreDataMember]</code> instead of <code>[IgnoreMember]</code>.</p>\n<p>Then <code>[DataMember(Order = int)]</code> will behave the same as <code>[Key(int)]</code>, <code>[DataMember(Name = string)]</code> the same as <code>[Key(string)]</code>, and <code>[DataMember]</code> the same as <code>[Key(nameof(member name)]</code>.</p>\n<p>Using <code>DataContract</code>, e.g. in shared libraries, makes your classes/structs independent from MessagePack for C# serialization. However, it is not supported by the analyzers nor in code generation by the <code>mpc</code> tool. Also, features like <code>UnionAttribute</code>, <code>MessagePackFormatter</code>, <code>SerializationConstructor</code>, etc can not be used. Due to this, we recommend that you use the specific MessagePack for C# annotations when possible.</p>\n<h6>Serializing readonly/immutable object members  (SerializationConstructor)</h6>\n<p>MessagePack for C# supports serialization of readonly/immutable objects/members. For example, this struct can be serialized and deserialized.</p>\n<pre><code class=\"language-csharp\">[MessagePackObject]\npublic struct Point\n{\n    [Key(0)]\n    public readonly int X;\n    [Key(1)]\n    public readonly int Y;\n\n    public Point(int x, int y)\n    {\n        this.X = x;\n        this.Y = y;\n    }\n}\n\nvar data = new Point(99, 9999);\nvar bin = MessagePackSerializer.Serialize(data);\n\n// Okay to deserialize immutable object\nvar point = MessagePackSerializer.Deserialize&lt;Point&gt;(bin);\n</code></pre>\n<p><code>MessagePackSerializer</code> will choose the constructor with the best matched argument list, using argument indexes index for index keys, or parameter names for string keys. If it cannot determine an appropriate constructor, a <code>MessagePackDynamicObjectResolverException: can't find matched constructor parameter</code> exception will be thrown.\nYou can specify which constructor to use manually with a <code>[SerializationConstructor]</code> annotation.</p>\n<pre><code class=\"language-csharp\">[MessagePackObject]\npublic struct Point\n{\n    [Key(0)]\n    public readonly int X;\n    [Key(1)]\n    public readonly int Y;\n\n    [SerializationConstructor]\n    public Point(int x)\n    {\n        this.X = x;\n        this.Y = -1;\n    }\n\n    // If not marked attribute, used this(most matched argument)\n    public Point(int x, int y)\n    {\n        this.X = x;\n        this.Y = y;\n    }\n}\n</code></pre>\n<h7>C# 9 <code>record</code> types</h7>\n<p>C# 9.0 record with primary constructor is similar immutable object, also supports serialize/deserialize.</p>\n<pre><code class=\"language-csharp\">// use key as property name\n[MessagePackObject(true)]public record Point(int X, int Y);\n\n// use property: to set KeyAttribute\n[MessagePackObject] public record Point([property:Key(0)] int X, [property: Key(1)] int Y);\n\n// Or use explicit properties\n[MessagePackObject]\npublic record Person\n{\n    [Key(0)]\n    public string FirstName { get; init; }\n\n    [Key(1)]\n    public string LastName { get; init; }\n}\n</code></pre>\n<h7>C# 9 <code>init</code> property setter limitations</h7>\n<p>When using <code>init</code> property setters in <em>generic</em> classes, <a href=\"https://github.com/neuecc/MessagePack-CSharp/issues/1134\">a CLR bug</a> prevents our most efficient code generation from invoking the property setter.\nAs a result, you should avoid using <code>init</code> on property setters in generic classes when using the public-only <code>DynamicObjectResolver</code>/<code>StandardResolver</code>.</p>\n<p>When using the <code>DynamicObjectResolverAllowPrivate</code>/<code>StandardResolverAllowPrivate</code> resolver the bug does not apply and you may use <code>init</code> without restriction.</p>\n<h6>Serialization Callback</h6>\n<p>Objects implementing the <code>IMessagePackSerializationCallbackReceiver</code> interface will received <code>OnBeforeSerialize</code> and <code>OnAfterDeserialize</code> calls during serialization/deserialization.</p>\n<pre><code class=\"language-csharp\">[MessagePackObject]\npublic class SampleCallback : IMessagePackSerializationCallbackReceiver\n{\n    [Key(0)]\n    public int Key { get; set; }\n\n    public void OnBeforeSerialize()\n    {\n        Console.WriteLine(&quot;OnBefore&quot;);\n    }\n\n    public void OnAfterDeserialize()\n    {\n        Console.WriteLine(&quot;OnAfter&quot;);\n    }\n}\n</code></pre>\n<h6>Union</h6>\n<p>MessagePack for C# supports serializing interface-typed and abstract class-typed objects. It behaves like <code>XmlInclude</code> or <code>ProtoInclude</code>. In MessagePack for C# these are called <code>Union</code>. Only interfaces and abstracts classes are allowed to be annotated with <code>Union</code> attributes. Unique union keys are required.</p>\n<pre><code class=\"language-csharp\">// Annotate inheritance types\n[MessagePack.Union(0, typeof(FooClass))]\n[MessagePack.Union(1, typeof(BarClass))]\npublic interface IUnionSample\n{\n}\n\n[MessagePackObject]\npublic class FooClass : IUnionSample\n{\n    [Key(0)]\n    public int XYZ { get; set; }\n}\n\n[MessagePackObject]\npublic class BarClass : IUnionSample\n{\n    [Key(0)]\n    public string OPQ { get; set; }\n}\n\n// ---\n\nIUnionSample data = new FooClass() { XYZ = 999 };\n\n// Serialize interface-typed object.\nvar bin = MessagePackSerializer.Serialize(data);\n\n// Deserialize again.\nvar reData = MessagePackSerializer.Deserialize&lt;IUnionSample&gt;(bin);\n\n// Use with e.g. type-switching in C# 7.0\nswitch (reData)\n{\n    case FooClass x:\n        Console.WriteLine(x.XYZ);\n        break;\n    case BarClass x:\n        Console.WriteLine(x.OPQ);\n        break;\n    default:\n        break;\n}\n</code></pre>\n<p>Unions are internally serialized to two-element arrays.</p>\n<pre><code class=\"language-csharp\">IUnionSample data = new BarClass { OPQ = &quot;FooBar&quot; };\n\nvar bin = MessagePackSerializer.Serialize(data);\n\n// Union is serialized to two-length array, [key, object]\n// [1,[&quot;FooBar&quot;]]\nConsole.WriteLine(MessagePackSerializer.ConvertToJson(bin));\n</code></pre>\n<p>Using <code>Union</code> with abstract classes works the same way.</p>\n<pre><code class=\"language-csharp\">[Union(0, typeof(SubUnionType1))]\n[Union(1, typeof(SubUnionType2))]\n[MessagePackObject]\npublic abstract class ParentUnionType\n{\n    [Key(0)]\n    public int MyProperty { get; set; }\n}\n\n[MessagePackObject]\npublic class SubUnionType1 : ParentUnionType\n{\n    [Key(1)]\n    public int MyProperty1 { get; set; }\n}\n\n[MessagePackObject]\npublic class SubUnionType2 : ParentUnionType\n{\n    [Key(1)]\n    public int MyProperty2 { get; set; }\n}\n</code></pre>\n<p>Please be mindful that you cannot reuse the same keys in derived types that are already present in the parent type, as internally a single flat array or map will be used and thus cannot have duplicate indexes/keys.</p>\n<h6>Dynamic (Untyped) Deserialization</h6>\n<p>When calling <code>MessagePackSerializer.Deserialize&lt;object&gt;</code> or <code>MessagePackSerializer.Deserialize&lt;dynamic&gt;</code>, any values present in the blob will be converted to primitive values, i.e. <code>bool</code>, <code>char</code>, <code>sbyte</code>, <code>byte</code>, <code>short</code>, <code>int</code>, <code>long</code>, <code>ushort</code>, <code>uint</code>, <code>ulong</code>, <code>float</code>, <code>double</code>, <code>DateTime</code>, <code>string</code>, <code>byte[]</code>, <code>object[]</code>, <code>IDictionary&lt;object, object&gt;</code>.</p>\n<pre><code class=\"language-csharp\">// Sample blob.\nvar model = new DynamicModel { Name = &quot;foobar&quot;, Items = new[] { 1, 10, 100, 1000 } };\nvar blob = MessagePackSerializer.Serialize(model, ContractlessStandardResolver.Options);\n\n// Dynamic (&quot;untyped&quot;)\nvar dynamicModel = MessagePackSerializer.Deserialize&lt;dynamic&gt;(blob, ContractlessStandardResolver.Options);\n\n// You can access the data using array/dictionary indexers, as shown above\nConsole.WriteLine(dynamicModel[&quot;Name&quot;]); // foobar\nConsole.WriteLine(dynamicModel[&quot;Items&quot;][2]); // 100\n</code></pre>\n<p>Exploring object trees using the dictionary indexer syntax is the fastest option for untyped deserialization, but it is tedious to read and write.\nWhere performance is not as important as code readability, consider deserializing with <a href=\"doc/ExpandoObject.md\">ExpandoObject</a>.</p>\n<h6>Object Type Serialization</h6>\n<p><code>StandardResolver</code> and <code>ContractlessStandardResolver</code> can serialize <code>object</code>/anonymous typed objects.</p>\n<pre><code class=\"language-csharp\">var objects = new object[] { 1, &quot;aaa&quot;, new ObjectFieldType { Anything = 9999 } };\nvar bin = MessagePackSerializer.Serialize(objects);\n\n// [1,&quot;aaa&quot;,[9999]]\nConsole.WriteLine(MessagePackSerializer.ConvertToJson(bin));\n\n// Support anonymous Type Serialize\nvar anonType = new { Foo = 100, Bar = &quot;foobar&quot; };\nvar bin2 = MessagePackSerializer.Serialize(anonType, MessagePack.Resolvers.ContractlessStandardResolver.Options);\n\n// {&quot;Foo&quot;:100,&quot;Bar&quot;:&quot;foobar&quot;}\nConsole.WriteLine(MessagePackSerializer.ConvertToJson(bin2));\n</code></pre>\n<blockquote>\n<p>Unity supports is limited.</p>\n</blockquote>\n<p>When deserializing, the behavior will be the same as Dynamic (Untyped) Deserialization.</p>\n<h6>Typeless</h6>\n<p>The typeless API is similar to <code>BinaryFormatter</code>, as it will embed type information into the blobs, so no types need to be specified explicitly when calling the API.</p>\n<pre><code class=\"language-csharp\">object mc = new Sandbox.MyClass()\n{\n    Age = 10,\n    FirstName = &quot;hoge&quot;,\n    LastName = &quot;huga&quot;\n};\n\n// Serialize with the typeless API\nvar blob = MessagePackSerializer.Typeless.Serialize(mc);\n\n// Blob has embedded type-assembly information.\n// [&quot;Sandbox.MyClass, Sandbox&quot;,10,&quot;hoge&quot;,&quot;huga&quot;]\nConsole.WriteLine(MessagePackSerializer.ConvertToJson(bin));\n\n// You can deserialize to MyClass again with the typeless API\n// Note that no type has to be specified explicitly in the Deserialize call\n// as type information is embedded in the binary blob\nvar objModel = MessagePackSerializer.Typeless.Deserialize(bin) as MyClass;\n</code></pre>\n<p>Type information is represented by the MessagePack <code>ext</code> format, type code <code>100</code>.</p>\n<p><code>MessagePackSerializer.Typeless</code> is a shortcut of <code>Serialize/Deserialize&lt;object&gt;(TypelessContractlessStandardResolver.Instance)</code>.\nIf you want to configure it as the default resolver, you can use <code>MessagePackSerializer.Typeless.RegisterDefaultResolver</code>.</p>\n<p><code>TypelessFormatter</code> can used standalone or combined with other resolvers.</p>\n<pre><code class=\"language-csharp\">// Replaced `object` uses the typeless resolver\nvar resolver = MessagePack.Resolvers.CompositeResolver.Create(\n    new[] { MessagePack.Formatters.TypelessFormatter.Instance },\n    new[] { MessagePack.Resolvers.StandardResolver.Instance });\n\npublic class Foo\n{\n    // use Typeless(this field only)\n    [MessagePackFormatter(typeof(TypelessFormatter))]\n    public object Bar;\n}\n</code></pre>\n<p>If a type's name is changed later, you can no longer deserialize old blobs. But you can specify a fallback name in such cases, providing a <code>TypelessFormatter.BindToType</code> function of your own.</p>\n<pre><code class=\"language-csharp\">MessagePack.Formatters.TypelessFormatter.BindToType = typeName =&gt;\n{\n    if (typeName.StartsWith(&quot;SomeNamespace&quot;))\n    {\n        typeName = typeName.Replace(&quot;SomeNamespace&quot;, &quot;AnotherNamespace&quot;);\n    }\n\n    return Type.GetType(typeName, false);\n};\n</code></pre>\n<h6><a name=\"security\"></a>Security</h6>\n<p>Deserializing data from an untrusted source can introduce security vulnerabilities in your application.\nDepending on the settings used during deserialization, <strong>untrusted data may be able to execute arbitrary code</strong> or cause a denial of service attack.\nUntrusted data might come from over the network from an untrusted source (e.g. any and every networked client) or can be tampered with by an intermediary when transmitted over an unauthenticated connection, or from a local storage that might have been tampered with, or many other sources. MessagePack for C# does not provide any means to authenticate data or make it tamper-resistant. Please use an appropriate method of authenticating data before deserialization - such as a <a href=\"https://en.wikipedia.org/wiki/Message_authentication_code\"><code>MAC</code></a> .</p>\n<p>Please be very mindful of these attack scenarios; many projects and companies, and serialization library users in general, have been bitten by untrusted user data deserialization in the past.</p>\n<p>When deserializing untrusted data, put MessagePack into a more secure mode by configuring your <code>MessagePackSerializerOptions.Security</code> property:</p>\n<pre><code class=\"language-cs\">var options = MessagePackSerializerOptions.Standard\n    .WithSecurity(MessagePackSecurity.UntrustedData);\n\n// Pass the options explicitly for the greatest control.\nT object = MessagePackSerializer.Deserialize&lt;T&gt;(data, options);\n\n// Or set the security level as the default.\nMessagePackSerializer.DefaultOptions = options;\n</code></pre>\n<p>You should also avoid the Typeless serializer/formatters/resolvers for untrusted data as that opens the door for the untrusted data to potentially deserialize unanticipated types that can compromise security.</p>\n<p>The <code>UntrustedData</code> mode merely hardens against some common attacks, but is no fully secure solution in itself.</p>\n<h6>Performance</h6>\n<p>Benchmarks comparing MessagePack For C# to other serializers were run on <code>Windows 10 Pro x64 Intel Core i7-6700K 4.00GHz, 32GB RAM</code>. Benchmark code is <a href=\"https://github.com/neuecc/ZeroFormatter/tree/master/sandbox/PerformanceComparison\">available here</a> - and their <a href=\"https://github.com/neuecc/ZeroFormatter/blob/bc63cb925d/sandbox/PerformanceComparison/packages.config\">version info</a>.\n<a href=\"https://github.com/neuecc/ZeroFormatter/\">ZeroFormatter</a> and <a href=\"https://google.github.io/flatbuffers/\">FlatBuffers</a> have infinitely fast deserializers, so ignore their deserialization performance.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/46207/23835765/55fe494e-07b0-11e7-98be-5e7a9411da40.png\" alt=\"image\"></p>\n<p>MessagePack for C# uses many techniques to improve performance.</p>\n<ul>\n<li>The serializer uses <code>IBufferWriter&lt;byte&gt;</code> rather than <code>System.IO.Stream</code> to reduce memory overhead.</li>\n<li>Buffers are rented from pools to reduce allocations, keeping throughput high through reduced GC pressure.</li>\n<li>Don't create intermediate utility instances (<code>*Writer/*Reader</code>, <code>*Context</code>, etc...)</li>\n<li>Utilize dynamic code generation and JIT to avoid boxing value types. Use AOT generation on platforms that prohibit JITs.</li>\n<li>Cached generated formatters on static generic fields (don't use dictionary-cache because dictionary lookup is overhead). See <a href=\"https://github.com/neuecc/MessagePack-CSharp/tree/209f301e2e595ed366408624011ba2e856d23429/src/MessagePack/Resolvers\">Resolvers</a></li>\n<li>Heavily tuned dynamic IL code generation and JIT to avoid boxing value types. See <a href=\"https://github.com/neuecc/MessagePack-CSharp/blob/209f301e2e595ed366408624011ba2e856d23429/src/MessagePack/Resolvers/DynamicObjectResolver.cs#L142-L754\">DynamicObjectTypeBuilder</a>. Use AOT generation on platforms that prohibit JIT.</li>\n<li>Call the Primitive API directly when IL code generation determines target types to be  primitive.</li>\n<li>Reduce branching of variable length formats when IL code generation knows the target type (integer/string) ranges</li>\n<li>Don't use the <code>IEnumerable&lt;T&gt;</code> abstraction to iterate over collections when possible, <a href=\"https://github.com/neuecc/MessagePack-CSharp/blob/209f301e2e595ed366408624011ba2e856d23429/src/MessagePack/Formatters/CollectionFormatter.cs#L192-L355\">see: CollectionFormatterBase</a> and derived collection formatters</li>\n<li>Use pre-generated lookup tables to reduce checks of mgpack type constraints, <a href=\"https://github.com/neuecc/MessagePack-CSharp/blob/209f301e2e595ed366408624011ba2e856d23429/src/MessagePack/MessagePackBinary.cs#L15-L212\">see: MessagePackBinary</a></li>\n<li>Uses optimized type key dictionary for non-generic methods, <a href=\"https://github.com/neuecc/MessagePack-CSharp/blob/91312921cb7fe987f48336768c898a76ac7dbb40/src/MessagePack/Internal/ThreadsafeTypeKeyHashTable.cs\">see: ThreadsafeTypeKeyHashTable</a></li>\n<li>Avoid string key decoding for lookup maps (string key and use automata based name lookup with inlined IL code generation, see: <a href=\"https://github.com/neuecc/MessagePack-CSharp/blob/bcedbce3fd98cb294210d6b4a22bdc4c75ccd916/src/MessagePack/Internal/AutomataDictionary.cs\">AutomataDictionary</a></li>\n<li>To encode string keys, use pre-generated member name bytes and fixed sized byte array copies in IL, see: <a href=\"https://github.com/neuecc/MessagePack-CSharp/blob/f17ddc5d107d3a2f66f60398b214ef87919ff892/src/MessagePack/Internal/UnsafeMemory.cs\">UnsafeMemory.cs</a></li>\n</ul>\n<p>Before creating this library, I implemented a fast serializer with <a href=\"https://github.com/neuecc/ZeroFormatter#performance\">ZeroFormatter#Performance</a>. This is a further evolved implementation. MessagePack for C# is always fast and optimized for all types (primitive, small struct, large object, any collections).</p>\n<h7><a name=\"deserialize-performance\"></a>Deserialization Performance for different options</h7>\n<p>Performance varies depending on the options used. This is a micro benchmark with <a href=\"https://github.com/dotnet/BenchmarkDotNet\">BenchmarkDotNet</a>. The target object has 9 members (<code>MyProperty1</code> ~ <code>MyProperty9</code>), values are zero.</p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th style=\"text-align:right\">Mean</th>\n<th style=\"text-align:right\">Error</th>\n<th style=\"text-align:right\">Scaled</th>\n<th style=\"text-align:right\">Gen 0</th>\n<th style=\"text-align:right\">Allocated</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>M IntKey</td>\n<td style=\"text-align:right\">72.67 ns</td>\n<td style=\"text-align:right\">NA</td>\n<td style=\"text-align:right\">1.00</td>\n<td style=\"text-align:right\">0.0132</td>\n<td style=\"text-align:right\">56 B</td>\n</tr>\n<tr>\n<td>M StringKey</td>\n<td style=\"text-align:right\">217.95 ns</td>\n<td style=\"text-align:right\">NA</td>\n<td style=\"text-align:right\">3.00</td>\n<td style=\"text-align:right\">0.0131</td>\n<td style=\"text-align:right\">56 B</td>\n</tr>\n<tr>\n<td>M Typeless_IntKey</td>\n<td style=\"text-align:right\">176.71 ns</td>\n<td style=\"text-align:right\">NA</td>\n<td style=\"text-align:right\">2.43</td>\n<td style=\"text-align:right\">0.0131</td>\n<td style=\"text-align:right\">56 B</td>\n</tr>\n<tr>\n<td>M Typeless_StringKey</td>\n<td style=\"text-align:right\">378.64 ns</td>\n<td style=\"text-align:right\">NA</td>\n<td style=\"text-align:right\">5.21</td>\n<td style=\"text-align:right\">0.0129</td>\n<td style=\"text-align:right\">56 B</td>\n</tr>\n<tr>\n<td>MsgPackCliMap</td>\n<td style=\"text-align:right\">1,355.26 ns</td>\n<td style=\"text-align:right\">NA</td>\n<td style=\"text-align:right\">18.65</td>\n<td style=\"text-align:right\">0.1431</td>\n<td style=\"text-align:right\">608 B</td>\n</tr>\n<tr>\n<td>MsgPackCliArray</td>\n<td style=\"text-align:right\">455.28 ns</td>\n<td style=\"text-align:right\">NA</td>\n<td style=\"text-align:right\">6.26</td>\n<td style=\"text-align:right\">0.0415</td>\n<td style=\"text-align:right\">176 B</td>\n</tr>\n<tr>\n<td>ProtobufNet</td>\n<td style=\"text-align:right\">265.85 ns</td>\n<td style=\"text-align:right\">NA</td>\n<td style=\"text-align:right\">3.66</td>\n<td style=\"text-align:right\">0.0319</td>\n<td style=\"text-align:right\">136 B</td>\n</tr>\n<tr>\n<td>Hyperion</td>\n<td style=\"text-align:right\">366.47 ns</td>\n<td style=\"text-align:right\">NA</td>\n<td style=\"text-align:right\">5.04</td>\n<td style=\"text-align:right\">0.0949</td>\n<td style=\"text-align:right\">400 B</td>\n</tr>\n<tr>\n<td>JsonNetString</td>\n<td style=\"text-align:right\">2,783.39 ns</td>\n<td style=\"text-align:right\">NA</td>\n<td style=\"text-align:right\">38.30</td>\n<td style=\"text-align:right\">0.6790</td>\n<td style=\"text-align:right\">2864 B</td>\n</tr>\n<tr>\n<td>JsonNetStreamReader</td>\n<td style=\"text-align:right\">3,297.90 ns</td>\n<td style=\"text-align:right\">NA</td>\n<td style=\"text-align:right\">45.38</td>\n<td style=\"text-align:right\">1.4267</td>\n<td style=\"text-align:right\">6000 B</td>\n</tr>\n<tr>\n<td>JilString</td>\n<td style=\"text-align:right\">553.65 ns</td>\n<td style=\"text-align:right\">NA</td>\n<td style=\"text-align:right\">7.62</td>\n<td style=\"text-align:right\">0.0362</td>\n<td style=\"text-align:right\">152 B</td>\n</tr>\n<tr>\n<td>JilStreamReader</td>\n<td style=\"text-align:right\">1,408.46 ns</td>\n<td style=\"text-align:right\">NA</td>\n<td style=\"text-align:right\">19.38</td>\n<td style=\"text-align:right\">0.8450</td>\n<td style=\"text-align:right\">3552 B</td>\n</tr>\n</tbody>\n</table>\n<p><code>ÌntKey</code>, <code>StringKey</code>, <code>Typeless_IntKey</code>, <code>Typeless_StringKey</code> are MessagePack for C# options. All MessagePack for C# options achieve zero memory allocations in the deserialization process. <code>JsonNetString</code>/<code>JilString</code> is deserialized from strings. <code>JsonNetStreamReader</code>/<code>JilStreamReader</code> is deserialized from UTF-8 byte arrays using <code>StreamReader</code>. Deserialization is normally read from Stream. Thus, it will be restored from byte arrays (or Stream) instead of strings.</p>\n<p>MessagePack for C# <code>IntKey</code> is the fastest. <code>StringKey</code> is slower than <code>IntKey</code> because matching the character string of property names is required. <code>IntKey</code> works by reading the array length, then <code>for (array length) { binary decode }</code>. <code>StringKey</code> works by reading map length, <code>for (map length) { decode key, lookup key, binary decode }</code>, so it requires an additional two steps (decoding of keys and lookups of keys).</p>\n<p>String key is often a useful, contractless, simple replacement of JSON, interoperability with other languages, and more robust versioning. MessagePack for C# is also optimized for string keys as much a possible. First of all, it does not decode UTF-8 byte arrays to full string for matching with the member name; instead it will look up the byte arrays as it is (to avoid decoding costs and extra memory allocations).</p>\n<p>And It will try to match each <code>long type</code> (per 8 character, if it is not enough, pad with 0) using <a href=\"https://en.wikipedia.org/wiki/Automata_theory\">automata</a> and inline it when generating IL code.</p>\n<p><img src=\"https://user-images.githubusercontent.com/46207/29754771-216b40e2-8bc7-11e7-8310-1c3602e80a08.png\" alt=\"image\"></p>\n<p>This also avoids calculating the hash code of byte arrays, and the comparison can be made several times faster using the long type.</p>\n<p>This is the sample of decompiled generated deserializer code, decompiled using <a href=\"http://ilspy.net/\">ILSpy</a>.</p>\n<p><img src=\"https://user-images.githubusercontent.com/46207/29754804-b5ba0f44-8bc7-11e7-9f6b-0c8f3c041237.png\" alt=\"image\"></p>\n<p>If the number of nodes is large, searches will use an embedded binary search.</p>\n<p>Extra note, this is serialization benchmark result.</p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th style=\"text-align:right\">Mean</th>\n<th style=\"text-align:right\">Error</th>\n<th style=\"text-align:right\">Scaled</th>\n<th style=\"text-align:right\">Gen 0</th>\n<th style=\"text-align:right\">Allocated</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>IntKey</td>\n<td style=\"text-align:right\">84.11 ns</td>\n<td style=\"text-align:right\">NA</td>\n<td style=\"text-align:right\">1.00</td>\n<td style=\"text-align:right\">0.0094</td>\n<td style=\"text-align:right\">40 B</td>\n</tr>\n<tr>\n<td>StringKey</td>\n<td style=\"text-align:right\">126.75 ns</td>\n<td style=\"text-align:right\">NA</td>\n<td style=\"text-align:right\">1.51</td>\n<td style=\"text-align:right\">0.0341</td>\n<td style=\"text-align:right\">144 B</td>\n</tr>\n<tr>\n<td>Typeless_IntKey</td>\n<td style=\"text-align:right\">183.31 ns</td>\n<td style=\"text-align:right\">NA</td>\n<td style=\"text-align:right\">2.18</td>\n<td style=\"text-align:right\">0.0265</td>\n<td style=\"text-align:right\">112 B</td>\n</tr>\n<tr>\n<td>Typeless_StringKey</td>\n<td style=\"text-align:right\">193.95 ns</td>\n<td style=\"text-align:right\">NA</td>\n<td style=\"text-align:right\">2.31</td>\n<td style=\"text-align:right\">0.0513</td>\n<td style=\"text-align:right\">216 B</td>\n</tr>\n<tr>\n<td>MsgPackCliMap</td>\n<td style=\"text-align:right\">967.68 ns</td>\n<td style=\"text-align:right\">NA</td>\n<td style=\"text-align:right\">11.51</td>\n<td style=\"text-align:right\">0.1297</td>\n<td style=\"text-align:right\">552 B</td>\n</tr>\n<tr>\n<td>MsgPackCliArray</td>\n<td style=\"text-align:right\">284.20 ns</td>\n<td style=\"text-align:right\">NA</td>\n<td style=\"text-align:right\">3.38</td>\n<td style=\"text-align:right\">0.1006</td>\n<td style=\"text-align:right\">424 B</td>\n</tr>\n<tr>\n<td>ProtobufNet</td>\n<td style=\"text-align:right\">176.43 ns</td>\n<td style=\"text-align:right\">NA</td>\n<td style=\"text-align:right\">2.10</td>\n<td style=\"text-align:right\">0.0665</td>\n<td style=\"text-align:right\">280 B</td>\n</tr>\n<tr>\n<td>Hyperion</td>\n<td style=\"text-align:right\">280.14 ns</td>\n<td style=\"text-align:right\">NA</td>\n<td style=\"text-align:right\">3.33</td>\n<td style=\"text-align:right\">0.1674</td>\n<td style=\"text-align:right\">704 B</td>\n</tr>\n<tr>\n<td>ZeroFormatter</td>\n<td style=\"text-align:right\">149.95 ns</td>\n<td style=\"text-align:right\">NA</td>\n<td style=\"text-align:right\">1.78</td>\n<td style=\"text-align:right\">0.1009</td>\n<td style=\"text-align:right\">424 B</td>\n</tr>\n<tr>\n<td>JsonNetString</td>\n<td style=\"text-align:right\">1,432.55 ns</td>\n<td style=\"text-align:right\">NA</td>\n<td style=\"text-align:right\">17.03</td>\n<td style=\"text-align:right\">0.4616</td>\n<td style=\"text-align:right\">1944 B</td>\n</tr>\n<tr>\n<td>JsonNetStreamWriter</td>\n<td style=\"text-align:right\">1,775.72 ns</td>\n<td style=\"text-align:right\">NA</td>\n<td style=\"text-align:right\">21.11</td>\n<td style=\"text-align:right\">1.5526</td>\n<td style=\"text-align:right\">6522 B</td>\n</tr>\n<tr>\n<td>JilString</td>\n<td style=\"text-align:right\">547.51 ns</td>\n<td style=\"text-align:right\">NA</td>\n<td style=\"text-align:right\">6.51</td>\n<td style=\"text-align:right\">0.3481</td>\n<td style=\"text-align:right\">1464 B</td>\n</tr>\n<tr>\n<td>JilStreamWriter</td>\n<td style=\"text-align:right\">778.78 ns</td>\n<td style=\"text-align:right\">NA</td>\n<td style=\"text-align:right\">9.26</td>\n<td style=\"text-align:right\">1.4448</td>\n<td style=\"text-align:right\">6066 B</td>\n</tr>\n</tbody>\n</table>\n<p>Of course, <code>IntKey</code> is fastest but <code>StringKey</code> also performs reasonably well.</p>\n<h7><a name=\"string-interning\"></a>String interning</h7>\n<p>The msgpack format does not provide for reusing strings in the data stream.\nThis naturally leads the deserializer to create a new <code>string</code> object for every string encountered,\neven if it is equal to another string previously encountered.</p>\n<p>When deserializing data that may contain the same strings repeatedly it can be worthwhile\nto have the deserializer take a little extra time to check whether it has seen a given string before\nand reuse it if it has.</p>\n<p>To enable string interning on <em>all</em> string values, use a resolver that specifies <code>StringInterningFormatter</code>\nbefore any of the standard ones, like this:</p>\n<pre><code class=\"language-cs\">var options = MessagePackSerializerOptions.Standard.WithResolver(\n    CompositeResolver.Create(\n        new IMessagePackFormatter[] { new StringInterningFormatter() },\n        new IFormatterResolver[] { StandardResolver.Instance }));\n\nMessagePackSerializer.Deserialize&lt;ClassOfStrings&gt;(data, options);\n</code></pre>\n<p>If you know which fields of a particular type are likely to contain duplicate strings,\nyou can apply the string interning formatter to just those fields so the deserializer only pays\nfor the interned string check where it matters most.\nNote that this technique requires a <code>[MessagePackObject]</code> or <code>[DataContract]</code> class.</p>\n<pre><code class=\"language-cs\">[MessagePackObject]\npublic class ClassOfStrings\n{\n    [Key(0)]\n    [MessagePackFormatter(typeof(StringInterningFormatter))]\n    public string InternedString { get; set; }\n\n    [Key(1)]\n    public string OrdinaryString { get; set; }\n}\n</code></pre>\n<p>If you are writing your own formatter for some type that contains strings,\nyou can call on the <code>StringInterningFormatter</code> directly from your formatter as well for the strings.</p>\n<h6>LZ4 Compression</h6>\n<p>MessagePack is a fast and <em>compact</em> format but it is not compression. <a href=\"https://github.com/lz4/lz4\">LZ4</a> is an extremely fast compression algorithm, and using it MessagePack for C# can achieve extremely fast performance as well as extremely compact binary sizes!</p>\n<p>MessagePack for C# has built-in LZ4 support. You can activate it using a modified options object and passing it into an API like this:</p>\n<pre><code class=\"language-cs\">var lz4Options = MessagePackSerializerOptions.Standard.WithCompression(MessagePackCompression.Lz4BlockArray);\nMessagePackSerializer.Serialize(obj, lz4Options);\n</code></pre>\n<p><code>MessagePackCompression</code> has two modes, <code>Lz4Block</code> and <code>Lz4BlockArray</code>. Neither is a simple binary LZ4 compression, but a special compression integrated into the serialization pipeline, using MessagePack <code>ext</code> code (<code>Lz4BlockArray (98)</code> or <code>Lz4Block (99)</code>). Therefore, it is not readily compatible with compression offered in other languages.</p>\n<p><code>Lz4Block</code> compresses an entire MessagePack sequence as a single LZ4 block. This is the simple compression that achieves best compression ratio, at the cost of copying the entire sequence when necessary to get contiguous memory.</p>\n<p><code>Lz4BlockArray</code> compresses an entire MessagePack sequence as a array of LZ4 blocks. Compressed/decompressed blocks are  chunked and thus do not enter the GC's Large-Object-Heap, but the compression ratio is slightly worse.</p>\n<p>We recommend to use <code>Lz4BlockArray</code> as the default when using compression.\nFor compatibility with MessagePack v1.x, use <code>Lz4Block</code>.</p>\n<p>Regardless of which LZ4 option is set at the deserialization, both methods can be deserialized. For example, when the <code>Lz4BlockArray</code> option was used, binary data using either <code>Lz4Block</code> and <code>Lz4BlockArray</code> can be deserialized. Neither can be decompressed and hence deserialized when the compression option is set to <code>None</code>.</p>\n<h7>Attributions</h7>\n<p>LZ4 compression support is using Milosz Krajewski's <a href=\"https://github.com/MiloszKrajewski/lz4net\">lz4net</a> code with some modifications.</p>\n<h6><a name=\"comparison\"></a>Comparison with protobuf, JSON, ZeroFormatter</h6>\n<p><a href=\"https://github.com/mgravell/protobuf-net\">protobuf-net</a> is major, widely used binary-format library on .NET. I love protobuf-net and respect their great work. But when you use protobuf-net as a general purpose serialization format, you may encounter an annoying issue.</p>\n<pre><code class=\"language-csharp\">[ProtoContract]\npublic class Parent\n{\n    [ProtoMember(1)]\n    public int Primitive { get; set; }\n    [ProtoMember(2)]\n    public Child Prop { get; set; }\n    [ProtoMember(3)]\n    public int[] Array { get; set; }\n}\n\n[ProtoContract]\npublic class Child\n{\n    [ProtoMember(1)]\n    public int Number { get; set; }\n}\n\nusing (var ms = new MemoryStream())\n{\n    // serialize null.\n    ProtoBuf.Serializer.Serialize&lt;Parent&gt;(ms, null);\n\n    ms.Position = 0;\n    var result = ProtoBuf.Serializer.Deserialize&lt;Parent&gt;(ms);\n\n    Console.WriteLine(result != null); // True, not null. but all property are zero formatted.\n    Console.WriteLine(result.Primitive); // 0\n    Console.WriteLine(result.Prop); // null\n    Console.WriteLine(result.Array); // null\n}\n\nusing (var ms = new MemoryStream())\n{\n    // serialize empty array.\n    ProtoBuf.Serializer.Serialize&lt;Parent&gt;(ms, new Parent { Array = System.Array.Empty&lt;int&gt;() });\n\n    ms.Position = 0;\n    var result = ProtoBuf.Serializer.Deserialize&lt;Parent&gt;(ms);\n\n    Console.WriteLine(result.Array == null); // True, null!\n}\n</code></pre>\n<p>protobuf(-net) cannot handle null and empty collection correctly, because protobuf has no <code>null</code> representation (see <a href=\"https://stackoverflow.com/questions/21631428/protobuf-net-deserializes-empty-collection-to-null-when-the-collection-is-a-prop/21632160#21632160\">this SO answer from a protobuf-net author</a>).</p>\n<p><a href=\"https://github.com/msgpack/msgpack/blob/master/spec.md#type-system\">MessagePack's type system</a> can correctly serialize the entire C# type system. This is a strong reason to recommend MessagePack over protobuf.</p>\n<p>Protocol Buffers have good IDL and <a href=\"https://www.grpc.io/\">gRPC</a> support. If you want to use IDL, I recommend <a href=\"https://github.com/google/protobuf/tree/master/csharp/src/Google.Protobuf\">Google.Protobuf</a> over MessagePack.</p>\n<p>JSON is good general-purpose format. It is simple, human-readable and thoroughly-enough specified. <a href=\"https://github.com/neuecc/Utf8Json\">Utf8Json</a> - which I created as well - adopts same architecture as MessagePack for C# and avoids encoding/decoding costs as much as possible just like this library does. If you want to know more about binary vs text formats, see <a href=\"https://github.com/neuecc/Utf8Json#which-serializer-should-be-used\">Utf8Json/which serializer should be used</a>.</p>\n<p><a href=\"https://github.com/neuecc/ZeroFormatter/\">ZeroFormatter</a> is similar as <a href=\"https://google.github.io/flatbuffers/\">FlatBuffers</a> but specialized to C#, and special in that regard. Deserialization is infinitely fast but the produced binary size is larger. And ZeroFormatter's caching algorithm requires additional memory.</p>\n<p>For many common uses, MessagePack for C# would be a better fit.</p>\n<h6>Hints to achieve maximum performance when using MessagePack for C#</h6>\n<p>MessagePack for C# prioritizes maximum performance by default. However, there are also some options that sacrifice performance for convenience.</p>\n<h7>Use indexed keys instead of string keys (Contractless)</h7>\n<p>The <a href=\"https://github.com/neuecc/MessagePack-CSharp#deserialize-performance\">Deserialization Performance for different options</a> section shows the results of indexed keys (<code>IntKey</code>) vs string keys (<code>StringKey</code>) performance. Indexed keys serialize the object graph as a MessagePack array. String keys serializes the object graph as a MessagePack map.</p>\n<p>For example this type is serialized to</p>\n<pre><code class=\"language-csharp\">[MessagePackObject]\npublic class Person\n{\n    [Key(0)] or [Key(&quot;name&quot;)]\n    public string Name { get; set;}\n    [Key(1)] or [Key(&quot;age&quot;)]\n    public int Age { get; set;}\n}\n\nnew Person { Name = &quot;foobar&quot;, Age = 999 }\n</code></pre>\n<ul>\n<li><code>IntKey</code>: <code>[&quot;foobar&quot;, 999]</code></li>\n<li><code>StringKey</code>: <code>{&quot;name:&quot;foobar&quot;,&quot;age&quot;:999}</code>.</li>\n</ul>\n<p><code>IntKey</code> is always fast in both serialization and deserialization because it does not have to handle and lookup key names, and always has the smaller binary size.</p>\n<p><code>StringKey</code> is often a useful, contractless, simple replacement for JSON, interoperability with other languages with MessagePack support, and less error prone versioning. But to achieve maximum performance, use <code>IntKey</code>.</p>\n<h7>Create own custom composite resolver</h7>\n<p><code>CompositeResolver.Create</code> is an easy way to create composite resolvers. But formatter lookups have some overhead. If you create a custom resolver (or use <code>StaticCompositeResolver.Instance</code>), you can avoid this overhead.</p>\n<pre><code class=\"language-csharp\">public class MyApplicationResolver : IFormatterResolver\n{\n    public static readonly IFormatterResolver Instance = new MyApplicationResolver();\n\n    // configure your custom resolvers.\n    private static readonly IFormatterResolver[] Resolvers = new IFormatterResolver[]\n    {\n    };\n\n    private MyApplicationResolver() { }\n\n    public IMessagePackFormatter&lt;T&gt; GetFormatter&lt;T&gt;()\n    {\n        return Cache&lt;T&gt;.Formatter;\n    }\n\n    private static class Cache&lt;T&gt;\n    {\n        public static IMessagePackFormatter&lt;T&gt; Formatter;\n\n        static Cache()\n        {\n            // configure your custom formatters.\n            if (typeof(T) == typeof(XXX))\n            {\n                Formatter = new ICustomFormatter();\n                return;\n            }\n\n            foreach (var resolver in Resolvers)\n            {\n                var f = resolver.GetFormatter&lt;T&gt;();\n                if (f != null)\n                {\n                    Formatter = f;\n                    return;\n                }\n            }\n        }\n    }\n}\n</code></pre>\n<blockquote>\n<p>NOTE: If you are creating a library, recommend using the above custom resolver instead of <code>CompositeResolver.Create</code>. Also, libraries must not use <code>StaticCompositeResolver</code> - as it is global state - to avoid compatibility issues.</p>\n</blockquote>\n<h7>Use native resolvers</h7>\n<p>By default, MessagePack for C# serializes GUID as string. This is much slower than the native .NET format GUID. The same applies to Decimal. If your application makes heavy use of GUID or Decimal and you don't have to worry about interoperability with other languages, you can replace them with the native serializers <code>NativeGuidResolver</code> and <code>NativeDecimalResolver</code> respectively.</p>\n<p>Also, <code>DateTime</code> is serialized using the MessagePack timestamp format. By using the <code>NativeDateTimeResolver</code>, it is possible to maintain Kind and perform faster serialization.</p>\n<h7>Be careful when copying buffers</h7>\n<p><code>MessagePackSerializer.Serialize</code> returns <code>byte[]</code> in default. The final <code>byte[]</code> is copied from an internal buffer pool. That is an extra cost.  You can use <code>IBufferWriter&lt;T&gt;</code> or the <code>Stream</code> API to write to buffers directly. If you want to use a buffer pool outside of the serializer, you should implement custom <code>IBufferWriter&lt;byte&gt;</code> or use an existing one such as <a href=\"https://github.com/AArnott/Nerdbank.Streams/blob/master/doc/Sequence.md\"><code>Sequence&lt;T&gt;</code></a> from the <a href=\"https://nuget.org/packages/Nerdbank.Streams\">Nerdbank.Streams</a> package.</p>\n<p>During deserialization, <code>MessagePackSerializer.Deserialize(ReadOnlyMemory&lt;byte&gt; buffer)</code> is better than the <code>Deserialize(Stream stream)</code> overload. This is because the Stream API version starts by reading the data, generating a <code>ReadOnlySequence&lt;byte&gt;</code>, and only then starts the deserialization.</p>\n<h7>Choosing compression</h7>\n<p>Compression is generally effective when there is duplicate data. In MessagePack, arrays containing objects using string keys (Contractless) can be compressed efficiently because compression can be applied to many duplicate property names. Indexed keys compression is not as effectively compressed as string keys, but indexed keys are smaller in the first place.</p>\n<p>This is some example benchmark performance data;</p>\n<table>\n<thead>\n<tr>\n<th>Serializer</th>\n<th style=\"text-align:right\">Mean</th>\n<th style=\"text-align:right\">DataSize</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>IntKey</td>\n<td style=\"text-align:right\">2.941 us</td>\n<td style=\"text-align:right\">469.00 B</td>\n</tr>\n<tr>\n<td>IntKey(Lz4)</td>\n<td style=\"text-align:right\">3.449 us</td>\n<td style=\"text-align:right\">451.00 B</td>\n</tr>\n<tr>\n<td>StringKey</td>\n<td style=\"text-align:right\">4.340 us</td>\n<td style=\"text-align:right\">1023.00 B</td>\n</tr>\n<tr>\n<td>StringKey(Lz4)</td>\n<td style=\"text-align:right\">5.469 us</td>\n<td style=\"text-align:right\">868.00 B</td>\n</tr>\n</tbody>\n</table>\n<p><code>IntKey(Lz4)</code> is not as effectively compressed, but performance is still somewhat degraded. On the other hand, <code>StringKey</code> can be expected to have a sufficient effect on the binary size. However, this is just an example. Compression can be quite effective depending on the data, too, or have little effect other than slowing down your program. There are also cases in which well-compressible data exists in the values (such as long strings, e.g. containing HTML data with many repeated HTML tags). It is important to verify the actual effects of compression on a case by case basis.</p>\n<h6>Extensions</h6>\n<p>MessagePack for C# has extension points that enable you to provide optimal serialization support for custom types. There are official extension support packages.</p>\n<pre><code class=\"language-ps1\">Install-Package MessagePack.ReactiveProperty\nInstall-Package MessagePack.UnityShims\nInstall-Package MessagePack.AspNetCoreMvcFormatter\n</code></pre>\n<p>The <code>MessagePack.ReactiveProperty</code> package adds support for types of the <a href=\"https://github.com/runceel/ReactiveProperty\">ReactiveProperty</a> library. It adds <code>ReactiveProperty&lt;&gt;</code>, <code>IReactiveProperty&lt;&gt;</code>, <code>IReadOnlyReactiveProperty&lt;&gt;</code>, <code>ReactiveCollection&lt;&gt;</code>, <code>Unit</code> serialization support. It is useful for save viewmodel state.</p>\n<p>The <code>MessagePack.UnityShims</code> package provides shims for <a href=\"https://unity3d.com/\">Unity</a>'s standard structs (<code>Vector2</code>, <code>Vector3</code>, <code>Vector4</code>, <code>Quaternion</code>, <code>Color</code>, <code>Bounds</code>, <code>Rect</code>, <code>AnimationCurve</code>, <code>Keyframe</code>, <code>Matrix4x4</code>, <code>Gradient</code>, <code>Color32</code>, <code>RectOffset</code>, <code>LayerMask</code>, <code>Vector2Int</code>, <code>Vector3Int</code>, <code>RangeInt</code>, <code>RectInt</code>, <code>BoundsInt</code>) and corresponding formatters. It can enable proper communication between servers and Unity clients.</p>\n<p>After installation, extension packages must be enabled, by creating composite resolvers. Here is an example showing how to enable all extensions.</p>\n<pre><code class=\"language-csharp\">// Set extensions to default resolver.\nvar resolver = MessagePack.Resolvers.CompositeResolver.Create(\n    // enable extension packages first\n    ReactivePropertyResolver.Instance,\n    MessagePack.Unity.Extension.UnityBlitResolver.Instance,\n    MessagePack.Unity.UnityResolver.Instance,\n\n    // finally use standard (default) resolver\n    StandardResolver.Instance\n);\nvar options = MessagePackSerializerOptions.Standard.WithResolver(resolver);\n\n// Pass options every time or set as default\nMessagePackSerializer.DefaultOptions = options;\n</code></pre>\n<p>For configuration details, see: <a href=\"#resolvers\">Extension Point section</a>.</p>\n<p>The <code>MessagePack.AspNetCoreMvcFormatter</code> is add-on for <a href=\"https://github.com/aspnet/Mvc\">ASP.NET Core MVC</a>'s serialization to boost up performance. This is configuration sample.</p>\n<pre><code class=\"language-csharp\">public void ConfigureServices(IServiceCollection services)\n{\n    services.AddMvc().AddMvcOptions(option =&gt;\n    {\n        option.OutputFormatters.Clear();\n        option.OutputFormatters.Add(new MessagePackOutputFormatter(ContractlessStandardResolver.Options));\n        option.InputFormatters.Clear();\n        option.InputFormatters.Add(new MessagePackInputFormatter(ContractlessStandardResolver.Options));\n    });\n}\n</code></pre>\n<p>Other authors are creating extension packages, too.</p>\n<ul>\n<li><a href=\"https://github.com/Cysharp/MagicOnion\">MagicOnion</a> - gRPC based HTTP/2 RPC Streaming Framework</li>\n<li><a href=\"https://github.com/Cysharp/MasterMemory\">MasterMemory</a> - Embedded Readonly In-Memory Document Database</li>\n</ul>\n<p>You can make your own extension serializers or integrate with frameworks. Let's create and share!</p>\n<ul>\n<li><a href=\"https://github.com/pocketberserker/MessagePack.FSharpExtensions\">MessagePack.FSharpExtensions</a> - supports F# list, set, map, unit, option, discriminated union</li>\n<li><a href=\"https://github.com/ARKlab/MessagePack\">MessagePack.NodaTime</a> - Support for NodaTime types to MessagePack C#</li>\n<li><a href=\"https://github.com/WebApiContrib/WebAPIContrib.Core#formatters\">WebApiContrib.Core.Formatter.MessagePack</a> - supports ASP.NET Core MVC (<a href=\"https://www.strathweb.com/2017/06/using-messagepack-with-asp-net-core-mvc/\">details in blog post</a>)</li>\n<li><a href=\"https://github.com/sketch7/MessagePack.MediaTypeFormatter\">MessagePack.MediaTypeFormatter</a> - MessagePack MediaTypeFormatter</li>\n</ul>\n<h6>Experimental Features</h6>\n<p>MessagePack for C# has experimental features which provides you with very performant formatters. There is an official package.</p>\n<pre><code class=\"language-ps1\">Install-Package MessagePack.Experimental\n</code></pre>\n<p>For detailed information, see: <a href=\"src/MessagePack.Experimental/Experimental.md\">Experimental.md</a></p>\n<h5>API</h5>\n<h6>High-Level API (<code>MessagePackSerializer</code>)</h6>\n<p>The <code>MessagePackSerializer</code> class is the entry point of MessagePack for C#. Static methods make up the main API of MessagePack for C#.</p>\n<table>\n<thead>\n<tr>\n<th>API</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Serialize&lt;T&gt;</code></td>\n<td>Serializes an object graph to a MessagePack binary blob. Async variant for Stream available. Non-generic overloads available.</td>\n</tr>\n<tr>\n<td><code>Deserialize&lt;T&gt;</code></td>\n<td>Deserializes a MessagePack binary to an object graph. Async variant for Stream available. Non-generic overloads available.</td>\n</tr>\n<tr>\n<td><code>SerializeToJson</code></td>\n<td>Serialize a MessagePack-compatible object graph to JSON instead of MessagePack. Useful for debugging.</td>\n</tr>\n<tr>\n<td><code>ConvertToJson</code></td>\n<td>Convert MessagePack binary to JSON. Useful for debugging.</td>\n</tr>\n<tr>\n<td><code>ConvertFromJson</code></td>\n<td>Convert JSON to a MessagePack binary.</td>\n</tr>\n</tbody>\n</table>\n<p>The <code>MessagePackSerializer.Typeless</code> class offers most of the same APIs as above, but removes all type arguments from the API, forcing serialization to include the full type name of the root object. It uses the <code>TypelessContractlessStandardResolver</code>. Consider the result to be a .NET-specific MessagePack binary that isn't readily compatible with MessagePack deserializers in other runtimes.</p>\n<p>MessagePack for C# fundamentally serializes using <code>IBufferWriter&lt;byte&gt;</code> and deserializes using <code>ReadOnlySequence&lt;byte&gt;</code> or <code>Memory&lt;byte&gt;</code>. Method overloads are provided to conveniently use it with common buffer types and the .NET <code>Stream</code> class, but some of these convenience overloads require copying buffers once and therefore have a certain overhead.</p>\n<p>The high-level API uses a memory pool internally to avoid unnecessary memory allocation. If result size is under 64K, it allocates GC memory only for the return bytes.</p>\n<p>Each serialize/deserialize method takes an optional <code>MessagePackSerializerOptions</code> parameter which can be used to specify a custom <code>IFormatterResolver</code> to use or to activate LZ4 compression support.</p>\n<h7>Multiple MessagePack structures on a single <code>Stream</code></h7>\n<p>To deserialize a <code>Stream</code> that contains multiple consecutive MessagePack data structures,\nyou can use the <code>MessagePackStreamReader</code> class to efficiently identify the <code>ReadOnlySequence&lt;byte&gt;</code>\nfor each data structure and deserialize it. For example:</p>\n<pre><code class=\"language-cs\">static async Task&lt;List&lt;T&gt;&gt; DeserializeListFromStreamAsync&lt;T&gt;(Stream stream, CancellationToken cancellationToken)\n{\n    var dataStructures = new List&lt;T&gt;();\n    using (var streamReader = new MessagePackStreamReader(stream))\n    {\n        while (await streamReader.ReadAsync(cancellationToken) is ReadOnlySequence&lt;byte&gt; msgpack)\n        {\n            dataStructures.Add(MessagePackSerializer.Deserialize&lt;T&gt;(msgpack, cancellationToken: cancellationToken));\n        }\n    }\n\n    return dataStructures;\n}\n</code></pre>\n<h6>Low-Level API (<code>IMessagePackFormatter&lt;T&gt;</code>)</h6>\n<p>The <code>IMessagePackFormatter&lt;T&gt;</code> interface is responsible for serializing a unique type. For example <code>Int32Formatter : IMessagePackFormatter&lt;Int32&gt;</code> represents Int32 MessagePack serializer.</p>\n<pre><code class=\"language-csharp\">public interface IMessagePackFormatter&lt;T&gt;\n{\n    void Serialize(ref MessagePackWriter writer, T value, MessagePackSerializerOptions options);\n    T Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options);\n}\n</code></pre>\n<p>Many built-in formatters exists under <code>MessagePack.Formatters</code>. Your custom types are usually automatically supported with the built-in type resolvers that generate new <code>IMessagePackFormatter&lt;T&gt;</code> types on-the-fly using dynamic code generation. See our <a href=\"#aot\">AOT code generation</a> support for platforms that do not support this.</p>\n<p>However, some types - especially those provided by third party libraries or the runtime itself - cannot be appropriately annotated, and contractless serialization would produce inefficient or even wrong results.\nTo take more control over the serialization of such custom types, write your own <code>IMessagePackFormatter&lt;T&gt;</code> implementation.\nHere is an example of such a custom formatter implementation. Note its use of the primitive API that is described in the next section.</p>\n<pre><code class=\"language-csharp\">/// &lt;summary&gt;Serializes a &lt;see cref=&quot;FileInfo&quot; /&gt; by its full path as a string.&lt;/summary&gt;\npublic class FileInfoFormatter : IMessagePackFormatter&lt;FileInfo&gt;\n{\n    public void Serialize(\n      ref MessagePackWriter writer, FileInfo value, MessagePackSerializerOptions options)\n    {\n        if (value == null)\n        {\n            writer.WriteNil();\n            return;\n        }\n\n        writer.WriteString(value.FullName);\n    }\n\n    public FileInfo Deserialize(\n      ref MessagePackReader reader, MessagePackSerializerOptions options)\n    {\n        if (reader.TryReadNil())\n        {\n            return null;\n        }\n\n        options.Security.DepthStep(ref reader);\n\n        var path = reader.ReadString();\n\n        reader.Depth--;\n        return new FileInfo(path);\n    }\n}\n</code></pre>\n<p>The <code>DepthStep</code> and <code>Depth--</code> statements provide a level of security while deserializing untrusted data\nthat might otherwise be able to execute a denial of service attack by sending MessagePack data that would\ndeserialize into a very deep object graph leading to a <code>StackOverflowException</code> that would crash the process.\nThis pair of statements should surround the bulk of any <code>IMessagePackFormatter&lt;T&gt;.Deserialize</code> method.</p>\n<p><strong>Important</strong>: A message pack formatter must <em>read or write exactly one data structure</em>.\nIn the above example we just read/write a string. If you have more than one element to write out,\nyou must precede it with a map or array header. You must read the entire map/array when deserializing.\nFor example:</p>\n<pre><code class=\"language-csharp\">public class MySpecialObjectFormatter : IMessagePackFormatter&lt;MySpecialObject&gt;\n{\n    public void Serialize(\n      ref MessagePackWriter writer, MySpecialObject value, MessagePackSerializerOptions options)\n    {\n        if (value == null)\n        {\n            writer.WriteNil();\n            return;\n        }\n\n        writer.WriteArrayHeader(2);\n        writer.WriteString(value.FullName);\n        writer.WriteString(value.Age);\n    }\n\n    public MySpecialObject Deserialize(\n      ref MessagePackReader reader, MessagePackSerializerOptions options)\n    {\n        if (reader.TryReadNil())\n        {\n            return null;\n        }\n\n        options.Security.DepthStep(ref reader);\n\n        string fullName = null;\n        int age = 0;\n\n        // Loop over *all* array elements independently of how many we expect,\n        // since if we're serializing an older/newer version of this object it might\n        // vary in number of elements that were serialized, but the contract of the formatter\n        // is that exactly one data structure must be read, regardless.\n        // Alternatively, we could check that the size of the array/map is what we expect\n        // and throw if it is not.\n        int count = reader.ReadArrayHeader();\n        for (int i = 0; i &lt; count; i++)\n        {\n            switch (i)\n            {\n                case 0:\n                    fullName = reader.ReadString();\n                    break;\n                case 1:\n                    age = reader.ReadInt32();\n                    break;\n                default:\n                    reader.Skip();\n                    break;\n            }\n        }\n\n        reader.Depth--;\n        return new MySpecialObject(fullName, age);\n    }\n}\n</code></pre>\n<p>Your custom formatters must be discoverable via some <code>IFormatterResolver</code>. Learn more in our <a href=\"#resolvers\">resolvers</a> section.</p>\n<p>You can see many other samples from <a href=\"https://github.com/neuecc/MessagePack-CSharp/tree/master/src/MessagePack/Formatters\">builtin formatters</a>.</p>\n<h6>Primitive API (<code>MessagePackWriter</code>, <code>MessagePackReader</code>)</h6>\n<p>The <code>MessagePackWriter</code> and <code>MessagePackReader</code> structs make up the lowest-level API. They read and write the primitives types defined in the MessagePack specification.</p>\n<h7><code>MessagePackReader</code></h7>\n<p>A <code>MessagePackReader</code> can efficiently read from <code>ReadOnlyMemory&lt;byte&gt;</code> or <code>ReadOnlySequence&lt;byte&gt;</code> without any allocations, except to allocate a new <code>string</code> as required by the <code>ReadString()</code> method. All other methods return either value structs or <code>ReadOnlySequence&lt;byte&gt;</code> slices for extensions/arrays.\nReading directly from <code>ReadOnlySequence&lt;byte&gt;</code> means the reader can directly consume some modern high performance APIs such as <code>PipeReader</code>.</p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Skip</code></td>\n<td>Advances the reader's position past the current value. If the value is complex (e.g. map, array) the entire structure is skipped.</td>\n</tr>\n<tr>\n<td><code>Read*</code></td>\n<td>Read and return a value whose type is named by the method name from the current reader position. Throws if the expected type does not match the actual type. When reading numbers, the type need not match the binary-specified type exactly. The numeric value will be coerced into the desired type or throw if the integer type is too small for a large value.</td>\n</tr>\n<tr>\n<td><code>TryReadNil</code></td>\n<td>Advances beyond the current value if the current value is <code>nil</code> and returns <code>true</code>; otherwise leaves the reader's position unchanged and returns <code>false</code>.</td>\n</tr>\n<tr>\n<td><code>ReadBytes</code></td>\n<td>Returns a slice of the input sequence representing the contents of a <code>byte[]</code>, and advances the reader.</td>\n</tr>\n<tr>\n<td><code>ReadStringSequence</code></td>\n<td>Returns a slice of the input sequence representing the contents of a <code>string</code> without decoding it, and advances the reader.</td>\n</tr>\n<tr>\n<td><code>Clone</code></td>\n<td>Creates a new <code>MessagePackReader</code> with the specified input sequence and the same settings as the original reader.</td>\n</tr>\n<tr>\n<td><code>CreatePeekReader</code></td>\n<td>Creates a new reader with the same position as this one, allowing the caller to &quot;read ahead&quot; without impacting the original reader's position.</td>\n</tr>\n<tr>\n<td><code>NextCode</code></td>\n<td>Reads the low-level MessagePack <code>byte</code> that describes the type of the next value. Does not advance the reader. See <a href=\"https://github.com/msgpack/msgpack/blob/master/spec.md#overview\">MessagePack format of first byte</a>. Its static class has <code>ToMessagePackType</code> and <code>ToFormatName</code> utility methods. <code>MessagePackRange</code> means Min-Max fix range of MessagePack format.</td>\n</tr>\n<tr>\n<td><code>NextMessagePackType</code></td>\n<td>Describes the <code>NextCode</code> value as a higher level category. Does not advance the reader. See <a href=\"https://github.com/msgpack/msgpack/blob/master/spec.md#serialization-type-to-format-conversion\">MessagePack spec of source types</a>.</td>\n</tr>\n<tr>\n<td>(others)</td>\n<td>Other methods and properties as described by the .xml doc comment file and Intellisense.</td>\n</tr>\n</tbody>\n</table>\n<p>The <code>MessagePackReader</code> is capable of automatically interpreting both the old and new MessagePack spec.</p>\n<h7><code>MessagePackWriter</code></h7>\n<p>A <code>MessagePackWriter</code> writes to a given instance of <code>IBufferWriter&lt;byte&gt;</code>. Several common implementations of this exist, allowing zero allocations and minimal buffer copies while writing directly to several I/O APIs including <code>PipeWriter</code>.</p>\n<p>The <code>MessagePackWriter</code> writes the new MessagePack spec by default, but can write MessagePack compatible with the old spec by setting the <code>OldSpec</code> property to <code>true</code>.</p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Clone</code></td>\n<td>Creates a new <code>MessagePackWriter</code> with the specified underlying <code>IBufferWriter&lt;byte&gt;</code> and the same settings as the original writer.</td>\n</tr>\n<tr>\n<td><code>Flush</code></td>\n<td>Writes any buffered bytes to the underlying <code>IBufferWriter&lt;byte&gt;</code>.</td>\n</tr>\n<tr>\n<td><code>WriteNil</code></td>\n<td>Writes the MessagePack equivalent of .NET's <code>null</code> value.</td>\n</tr>\n<tr>\n<td><code>Write</code></td>\n<td>Writes any MessagePack primitive value in the most compact form possible. Has overloads for every primitive type defined by the MessagePack spec.</td>\n</tr>\n<tr>\n<td><code>Write*IntType*</code></td>\n<td>Writes an integer value in exactly the MessagePack type specified, even if a more compact format exists.</td>\n</tr>\n<tr>\n<td><code>WriteMapHeader</code></td>\n<td>Introduces a map by specifying the number of key=value pairs it contains.</td>\n</tr>\n<tr>\n<td><code>WriteArrayHeader</code></td>\n<td>Introduces an array by specifying the number of elements it contains.</td>\n</tr>\n<tr>\n<td><code>WriteExtensionFormat</code></td>\n<td>Writes the full content of an extension value including length, type code and content.</td>\n</tr>\n<tr>\n<td><code>WriteExtensionFormatHeader</code></td>\n<td>Writes just the header (length and type code) of an extension value.</td>\n</tr>\n<tr>\n<td><code>WriteRaw</code></td>\n<td>Copies the specified bytes directly to the underlying <code>IBufferWriter&lt;byte&gt;</code> without any validation.</td>\n</tr>\n<tr>\n<td>(others)</td>\n<td>Other methods and properties as described by the .xml doc comment file and Intellisense.</td>\n</tr>\n</tbody>\n</table>\n<p><code>DateTime</code> is serialized to <a href=\"https://github.com/msgpack/msgpack/blob/master/spec.md#formats-timestamp\">MessagePack Timestamp format</a>, it serialize/deserialize UTC and loses <code>Kind</code> info and requires that <code>MessagePackWriter.OldSpec == false</code>.\nIf you use the <code>NativeDateTimeResolver</code>, <code>DateTime</code> values will be serialized using .NET's native <code>Int64</code> representation, which preserves <code>Kind</code> info but may not be interoperable with non-.NET platforms.</p>\n<h6><a name=\"resolvers\"></a>Main Extension Point (<code>IFormatterResolver</code>)</h6>\n<p>An <code>IFormatterResolver</code> is storage of typed serializers. The <code>MessagePackSerializer</code> API accepts a <code>MessagePackSerializerOptions</code> object which specifies the <code>IFormatterResolver</code> to use, allowing customization of the serialization of complex types.</p>\n<table>\n<thead>\n<tr>\n<th>Resolver Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>BuiltinResolver</td>\n<td>Builtin primitive and standard classes resolver. It includes primitive(int, bool, string...) and there nullable, array and list. and some extra builtin types(<code>Guid</code>, <code>Uri</code>, <code>BigInteger</code>, etc...).</td>\n</tr>\n<tr>\n<td>StandardResolver</td>\n<td>Composited resolver. It resolves in the following order <code>builtin -&gt; attribute -&gt; dynamic enum -&gt; dynamic generic -&gt; dynamic union -&gt; dynamic object -&gt; dynamic object fallback</code>. This is the default of MessagePackSerializer.</td>\n</tr>\n<tr>\n<td>ContractlessStandardResolver</td>\n<td>Composited <code>StandardResolver</code>(except dynamic object fallback) -&gt; <code>DynamicContractlessObjectResolver</code> -&gt; <code>DynamicObjectTypeFallbackResolver</code>. It enables contractless serialization.</td>\n</tr>\n<tr>\n<td>StandardResolverAllowPrivate</td>\n<td>Same as StandardResolver but allow serialize/deserialize private members.</td>\n</tr>\n<tr>\n<td>ContractlessStandardResolverAllowPrivate</td>\n<td>Same as ContractlessStandardResolver but allow serialize/deserialize private members.</td>\n</tr>\n<tr>\n<td>PrimitiveObjectResolver</td>\n<td>MessagePack primitive object resolver. It is used fallback in <code>object</code> type and supports <code>bool</code>, <code>char</code>, <code>sbyte</code>, <code>byte</code>, <code>short</code>, <code>int</code>, <code>long</code>, <code>ushort</code>, <code>uint</code>, <code>ulong</code>, <code>float</code>, <code>double</code>, <code>DateTime</code>, <code>string</code>, <code>byte[]</code>, <code>ICollection</code>, <code>IDictionary</code>.</td>\n</tr>\n<tr>\n<td>DynamicObjectTypeFallbackResolver</td>\n<td>Serialize is used type in from <code>object</code> type, deserialize is used PrimitiveObjectResolver.</td>\n</tr>\n<tr>\n<td>AttributeFormatterResolver</td>\n<td>Get formatter from <code>[MessagePackFormatter]</code> attribute.</td>\n</tr>\n<tr>\n<td>CompositeResolver</td>\n<td>Composes several resolvers and/or formatters together in an ordered list, allowing reuse and overriding of behaviors of existing resolvers and formatters.</td>\n</tr>\n<tr>\n<td>NativeDateTimeResolver</td>\n<td>Serialize by .NET native DateTime binary format. It keeps <code>DateTime.Kind</code> that loses by standard(MessagePack timestamp) format.</td>\n</tr>\n<tr>\n<td>NativeGuidResolver</td>\n<td>Serialize by .NET native Guid binary representation. It is faster than standard(string) representation.</td>\n</tr>\n<tr>\n<td>NativeDecimalResolver</td>\n<td>Serialize by .NET native decimal binary representation. It is faster than standard(string) representation.</td>\n</tr>\n<tr>\n<td>DynamicEnumResolver</td>\n<td>Resolver of enum and there nullable, serialize there underlying type. It uses dynamic code generation to avoid boxing and boostup performance serialize there name.</td>\n</tr>\n<tr>\n<td>DynamicEnumAsStringResolver</td>\n<td>Resolver of enum and there nullable.  It uses reflection call for resolve nullable at first time.</td>\n</tr>\n<tr>\n<td>DynamicGenericResolver</td>\n<td>Resolver of generic type(<code>Tuple&lt;&gt;</code>, <code>List&lt;&gt;</code>, <code>Dictionary&lt;,&gt;</code>, <code>Array</code>, etc). It uses reflection call for resolve generic argument at first time.</td>\n</tr>\n<tr>\n<td>DynamicUnionResolver</td>\n<td>Resolver of interface marked by UnionAttribute. It uses dynamic code generation to create dynamic formatter.</td>\n</tr>\n<tr>\n<td>DynamicObjectResolver</td>\n<td>Resolver of class and struct made by MessagePackObjectAttribute. It uses dynamic code generation to create dynamic formatter.</td>\n</tr>\n<tr>\n<td>DynamicContractlessObjectResolver</td>\n<td>Resolver of all classes and structs. It does not needs <code>MessagePackObjectAttribute</code> and serialized key as string(same as marked <code>[MessagePackObject(true)]</code>).</td>\n</tr>\n<tr>\n<td>DynamicObjectResolverAllowPrivate</td>\n<td>Same as DynamicObjectResolver but allow serialize/deserialize private members.</td>\n</tr>\n<tr>\n<td>DynamicContractlessObjectResolverAllowPrivate</td>\n<td>Same as DynamicContractlessObjectResolver but allow serialize/deserialize private members.</td>\n</tr>\n<tr>\n<td>TypelessObjectResolver</td>\n<td>Used for <code>object</code>, embed .NET type in binary by <code>ext(100)</code> format so no need to pass type in deserialization.</td>\n</tr>\n<tr>\n<td>TypelessContractlessStandardResolver</td>\n<td>Composited resolver. It resolves in the following order <code>nativedatetime -&gt; builtin -&gt; attribute -&gt; dynamic enum -&gt; dynamic generic -&gt; dynamic union -&gt; dynamic object -&gt; dynamiccontractless -&gt; typeless</code>. This is the default of <code>MessagePackSerializer.Typeless</code></td>\n</tr>\n</tbody>\n</table>\n<p>Each instance of <code>MessagePackSerializer</code> accepts only a single resolver. Most object graphs will need more than one for serialization, so composing a single resolver made up of several is often required, and can be done with the <code>CompositeResolver</code> as shown below:</p>\n<pre><code class=\"language-csharp\">// Do this once and store it for reuse.\nvar resolver = MessagePack.Resolvers.CompositeResolver.Create(\n    // resolver custom types first\n    ReactivePropertyResolver.Instance,\n    MessagePack.Unity.Extension.UnityBlitResolver.Instance,\n    MessagePack.Unity.UnityResolver.Instance,\n\n    // finally use standard resolver\n    StandardResolver.Instance\n);\nvar options = MessagePackSerializerOptions.Standard.WithResolver(resolver);\n\n// Each time you serialize/deserialize, specify the options:\nbyte[] msgpackBytes = MessagePackSerializer.Serialize(myObject, options);\nT myObject2 = MessagePackSerializer.Deserialize&lt;MyObject&gt;(msgpackBytes, options);\n</code></pre>\n<p>A resolver can be set as default with <code>MessagePackSerializer.DefaultOptions = options</code>, but <strong>WARNING</strong>:\nWhen developing an application where you control all MessagePack-related code it may be safe to rely on this mutable static to control behavior.\nFor all other libraries or multi-purpose applications that use <code>MessagePackSerializer</code> you should explicitly specify the <code>MessagePackSerializerOptions</code> to use with each method invocation to guarantee your code behaves as you expect even when sharing an <code>AppDomain</code> or process with other MessagePack users that may change this static property.</p>\n<p>Here is sample of use <code>DynamicEnumAsStringResolver</code> with <code>DynamicContractlessObjectResolver</code> (It is Json.NET-like lightweight setting.)</p>\n<pre><code class=\"language-csharp\">// composite same as StandardResolver\nvar resolver = MessagePack.Resolvers.CompositeResolver.Create(\n    MessagePack.Resolvers.BuiltinResolver.Instance,\n    MessagePack.Resolvers.AttributeFormatterResolver.Instance,\n\n    // replace enum resolver\n    MessagePack.Resolvers.DynamicEnumAsStringResolver.Instance,\n\n    MessagePack.Resolvers.DynamicGenericResolver.Instance,\n    MessagePack.Resolvers.DynamicUnionResolver.Instance,\n    MessagePack.Resolvers.DynamicObjectResolver.Instance,\n\n    MessagePack.Resolvers.PrimitiveObjectResolver.Instance,\n\n    // final fallback(last priority)\n    MessagePack.Resolvers.DynamicContractlessObjectResolver.Instance\n);\n</code></pre>\n<p>If you want to make an extension package, you should write both a formatter and resolver\nfor easier consumption.\nHere is sample of a resolver:</p>\n<pre><code class=\"language-csharp\">public class SampleCustomResolver : IFormatterResolver\n{\n    // Resolver should be singleton.\n    public static readonly IFormatterResolver Instance = new SampleCustomResolver();\n\n    private SampleCustomResolver()\n    {\n    }\n\n    // GetFormatter&lt;T&gt;'s get cost should be minimized so use type cache.\n    public IMessagePackFormatter&lt;T&gt; GetFormatter&lt;T&gt;()\n    {\n        return FormatterCache&lt;T&gt;.Formatter;\n    }\n\n    private static class FormatterCache&lt;T&gt;\n    {\n        public static readonly IMessagePackFormatter&lt;T&gt; Formatter;\n\n        // generic's static constructor should be minimized for reduce type generation size!\n        // use outer helper method.\n        static FormatterCache()\n        {\n            Formatter = (IMessagePackFormatter&lt;T&gt;)SampleCustomResolverGetFormatterHelper.GetFormatter(typeof(T));\n        }\n    }\n}\n\ninternal static class SampleCustomResolverGetFormatterHelper\n{\n    // If type is concrete type, use type-formatter map\n    static readonly Dictionary&lt;Type, object&gt; formatterMap = new Dictionary&lt;Type, object&gt;()\n    {\n        {typeof(FileInfo), new FileInfoFormatter()}\n        // add more your own custom serializers.\n    };\n\n    internal static object GetFormatter(Type t)\n    {\n        object formatter;\n        if (formatterMap.TryGetValue(t, out formatter))\n        {\n            return formatter;\n        }\n\n        // If type can not get, must return null for fallback mechanism.\n        return null;\n    }\n}\n</code></pre>\n<h6>MessagePackFormatterAttribute</h6>\n<p>MessagePackFormatterAttribute is a lightweight extension point of class, struct, interface, enum and property/field. This is like Json.NET's JsonConverterAttribute. For example, serialize private field, serialize x10 formatter.</p>\n<pre><code class=\"language-csharp\">[MessagePackFormatter(typeof(CustomObjectFormatter))]\npublic class CustomObject\n{\n    string internalId;\n\n    public CustomObject()\n    {\n        this.internalId = Guid.NewGuid().ToString();\n    }\n\n    // serialize/deserialize internal field.\n    class CustomObjectFormatter : IMessagePackFormatter&lt;CustomObject&gt;\n    {\n        public void Serialize(ref MessagePackWriter writer, CustomObject value, MessagePackSerializerOptions options)\n        {\n            options.Resolver.GetFormatterWithVerify&lt;string&gt;().Serialize(ref writer, value.internalId, options);\n        }\n\n        public CustomObject Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)\n        {\n            var id = options.Resolver.GetFormatterWithVerify&lt;string&gt;().Deserialize(ref reader, options);\n            return new CustomObject { internalId = id };\n        }\n    }\n}\n\n// per field, member\n\npublic class Int_x10Formatter : IMessagePackFormatter&lt;int&gt;\n{\n    public int Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)\n    {\n        return reader.ReadInt32() * 10;\n    }\n\n    public void Serialize(ref MessagePackWriter writer, int value, MessagePackSerializerOptions options)\n    {\n        writer.WriteInt32(value * 10);\n    }\n}\n\n[MessagePackObject]\npublic class MyClass\n{\n    // You can attach custom formatter per member.\n    [Key(0)]\n    [MessagePackFormatter(typeof(Int_x10Formatter))]\n    public int MyProperty1 { get; set; }\n}\n</code></pre>\n<p>Formatter is retrieved by <code>AttributeFormatterResolver</code>, it is included in <code>StandardResolver</code>.</p>\n<h6>IgnoreFormatter</h6>\n<p><code>IgnoreFormatter&lt;T&gt;</code> is lightweight extension point of class and struct. If there exists types that can't be serialized, you can register <code>IgnoreFormatter&lt;T&gt;</code> that serializes those to nil/null.</p>\n<pre><code class=\"language-csharp\">// CompositeResolver can set custom formatter.\nvar resolver = MessagePack.Resolvers.CompositeResolver.Create(\n    new IMessagePackFormatter[]\n    {\n        // for example, register reflection infos (can not serialize)\n        new IgnoreFormatter&lt;MethodBase&gt;(),\n        new IgnoreFormatter&lt;MethodInfo&gt;(),\n        new IgnoreFormatter&lt;PropertyInfo&gt;(),\n        new IgnoreFormatter&lt;FieldInfo&gt;()\n    },\n    new IFormatterResolver[]\n    {\n        ContractlessStandardResolver.Instance\n    });\n</code></pre>\n<h6>Reserved Extension Types</h6>\n<p>MessagePack for C# already used some MessagePack extension type codes, be careful to avoid using the same ext code for other purposes.</p>\n<table>\n<thead>\n<tr>\n<th>Range</th>\n<th>Reserved for</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[-128, -1]</td>\n<td>Reserved by the msgpack spec for predefined types</td>\n</tr>\n<tr>\n<td>[30, 120)</td>\n<td>Reserved for this library's use to support common types in .NET</td>\n</tr>\n</tbody>\n</table>\n<p>This leaves the following ranges for your use:</p>\n<ul>\n<li>[0, 30)</li>\n<li>[120, 127]</li>\n</ul>\n<p>Within the <em>reserved</em> ranges, this library defines or implements extensions that use these type codes:</p>\n<table>\n<thead>\n<tr>\n<th>Code</th>\n<th>Type</th>\n<th>Use by</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-1</td>\n<td>DateTime</td>\n<td>MessagePack-spec reserved for timestamp</td>\n</tr>\n<tr>\n<td>30</td>\n<td>Vector2[]</td>\n<td>for Unity, UnsafeBlitFormatter</td>\n</tr>\n<tr>\n<td>31</td>\n<td>Vector3[]</td>\n<td>for Unity, UnsafeBlitFormatter</td>\n</tr>\n<tr>\n<td>32</td>\n<td>Vector4[]</td>\n<td>for Unity, UnsafeBlitFormatter</td>\n</tr>\n<tr>\n<td>33</td>\n<td>Quaternion[]</td>\n<td>for Unity, UnsafeBlitFormatter</td>\n</tr>\n<tr>\n<td>34</td>\n<td>Color[]</td>\n<td>for Unity, UnsafeBlitFormatter</td>\n</tr>\n<tr>\n<td>35</td>\n<td>Bounds[]</td>\n<td>for Unity, UnsafeBlitFormatter</td>\n</tr>\n<tr>\n<td>36</td>\n<td>Rect[]</td>\n<td>for Unity, UnsafeBlitFormatter</td>\n</tr>\n<tr>\n<td>37</td>\n<td>Int[]</td>\n<td>for Unity, UnsafeBlitFormatter</td>\n</tr>\n<tr>\n<td>38</td>\n<td>Float[]</td>\n<td>for Unity, UnsafeBlitFormatter</td>\n</tr>\n<tr>\n<td>39</td>\n<td>Double[]</td>\n<td>for Unity, UnsafeBlitFormatter</td>\n</tr>\n<tr>\n<td>98</td>\n<td>All</td>\n<td>MessagePackCompression.Lz4BlockArray</td>\n</tr>\n<tr>\n<td>99</td>\n<td>All</td>\n<td>MessagePackCompression.Lz4Block</td>\n</tr>\n<tr>\n<td>100</td>\n<td>object</td>\n<td>TypelessFormatter</td>\n</tr>\n</tbody>\n</table>\n<h6>Unity support</h6>\n<p>Unity lowest supported version is <code>2018.3</code>, API Compatibility Level supports both <code>.NET 4.x</code> and <code>.NET Standard 2.0</code>.</p>\n<p>You can install the <code>unitypackage</code> from the [releases][Releases] page.\nIf your build targets .NET Framework 4.x and runs on mono, you can use it as is.\nBut if your build targets IL2CPP, you can not use <code>Dynamic***Resolver</code>, so it is required to use pre-code generation. Please see <a href=\"#aot\">pre-code generation section</a>.</p>\n<p>MessagePack for C# includes some additional <code>System.*.dll</code> libraries that originally provides in NuGet. They are located under <code>Plugins</code>. If other packages use these libraries (e.g. Unity Collections package using <code>System.Runtime.CompilerServices.Unsafe.dll</code>), to avoid conflicts, please delete the DLL under <code>Plugins</code>.</p>\n<p>Currently <code>CompositeResolver.Create</code> does not work on IL2CPP, so it is recommended to use <code>StaticCompositeResolver.Instance.Register</code> instead.</p>\n<p>In Unity, MessagePackSerializer can serialize <code>Vector2</code>, <code>Vector3</code>, <code>Vector4</code>, <code>Quaternion</code>, <code>Color</code>, <code>Bounds</code>, <code>Rect</code>, <code>AnimationCurve</code>, <code>Keyframe</code>, <code>Matrix4x4</code>, <code>Gradient</code>, <code>Color32</code>, <code>RectOffset</code>, <code>LayerMask</code>, <code>Vector2Int</code>, <code>Vector3Int</code>, <code>RangeInt</code>, <code>RectInt</code>, <code>BoundsInt</code> and their nullable, array and list types with the built-in extension <code>UnityResolver</code>. It is included in StandardResolver by default.</p>\n<p>MessagePack for C# has an additional unsafe extension.  <code>UnsafeBlitResolver</code> is special resolver for extremely fast but unsafe serialization/deserialization of struct arrays.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/46207/23837633/76589924-07ce-11e7-8b26-e50eab548938.png\" alt=\"image\"></p>\n<p>x20 faster Vector3[] serialization than native JsonUtility. If use <code>UnsafeBlitResolver</code>, serialization uses a special format (ext:typecode 30~39)  for <code>Vector2[]</code>, <code>Vector3[]</code>, <code>Quaternion[]</code>, <code>Color[]</code>, <code>Bounds[]</code>, <code>Rect[]</code>. If use <code>UnityBlitWithPrimitiveArrayResolver</code>, it supports <code>int[]</code>, <code>float[]</code>, <code>double[]</code> too. This special feature is useful for serializing Mesh (many <code>Vector3[]</code>) or many transform positions.</p>\n<p>If you want to use unsafe resolver, register <code>UnityBlitResolver</code> or <code>UnityBlitWithPrimitiveArrayResolver</code>.</p>\n<p>Here is sample of configuration.</p>\n<pre><code class=\"language-csharp\">StaticCompositeResolver.Instance.Register(\n    MessagePack.Unity.UnityResolver.Instance,\n    MessagePack.Unity.Extension.UnityBlitWithPrimitiveArrayResolver.Instance,\n    MessagePack.Resolvers.StandardResolver.Instance\n);\n\nvar options = MessagePackSerializerOptions.Standard.WithResolver(StaticCompositeResolver.Instance);\nMessagePackSerializer.DefaultOptions = options;\n</code></pre>\n<p>The <code>MessagePack.UnityShims</code> NuGet package is for .NET server-side serialization support to communicate with Unity. It includes shims for Vector3 etc and the Safe/Unsafe serialization extension.</p>\n<p>If you want to share a class between Unity and a server, you can use <code>SharedProject</code> or <code>Reference as Link</code> or a glob reference (with <code>LinkBase</code>), etc. Anyway, you need to share at source-code level. This is a sample project structure using a glob reference (recommended).</p>\n<ul>\n<li>ServerProject(.NET 4.6/.NET Core/.NET Standard)\n<ul>\n<li>[<code>&lt;Compile Include=&quot;..\\UnityProject\\Assets\\Scripts\\Shared\\**\\*.cs&quot; LinkBase=&quot;Shared&quot; /&gt;</code>]</li>\n<li>[MessagePack]</li>\n<li>[MessagePack.UnityShims]</li>\n</ul>\n</li>\n<li>UnityProject\n<ul>\n<li>[Concrete SharedCodes]</li>\n<li>[MessagePack](not dll/NuGet, use MessagePack.Unity.unitypackage's sourcecode)</li>\n</ul>\n</li>\n</ul>\n<h6><a name=\"aot\"></a>AOT Code Generation (support for Unity/Xamarin)</h6>\n<p>By default, MessagePack for C# serializes custom objects by <a href=\"https://msdn.microsoft.com/en-us/library/system.reflection.emit.ilgenerator.aspx\">generating IL</a> on the fly at runtime to create custom, highly tuned formatters for each type. This code generation has a minor upfront performance cost.\nBecause strict-AOT environments such as Xamarin and Unity IL2CPP forbid runtime code generation, MessagePack provides a way for you to run a code generator ahead of time as well.</p>\n<blockquote>\n<p>Note: When using Unity, dynamic code generation only works when targeting .NET Framework 4.x + mono runtime.\nFor all other Unity targets, AOT is required.</p>\n</blockquote>\n<p>If you want to avoid the upfront dynamic generation cost or you need to run on Xamarin or Unity, you need AOT code generation. <code>mpc</code> (MessagePackCompiler) is the code generator of MessagePack for C#. mpc uses <a href=\"https://github.com/dotnet/roslyn\">Roslyn</a> to analyze source code.</p>\n<p>First of all, mpc requires <a href=\"https://dotnet.microsoft.com/download\">.NET Core 3 Runtime</a>. The easiest way to acquire and run mpc is as a dotnet tool.</p>\n<pre><code>dotnet tool install --global MessagePack.Generator\n</code></pre>\n<p>Installing it as a local tool allows you to include the tools and versions that you use in your source control system. Run these commands in the root of your repo:</p>\n<pre><code>dotnet new tool-manifest\ndotnet tool install MessagePack.Generator\n</code></pre>\n<p>Check in your <code>.config\\dotnet-tools.json</code> file. On another machine you can &quot;restore&quot; your tool using the <code>dotnet tool restore</code> command.</p>\n<p>Once you have the tool installed, simply invoke using <code>dotnet mpc</code> within your repo:</p>\n<pre><code>dotnet mpc --help\n</code></pre>\n<p>Alternatively, you can download mpc from the [releases][Releases] page, that includes platform native binaries (that don't require a separate dotnet runtime).</p>\n<pre><code>Usage: mpc [options...]\n\nOptions:\n  -i, -input &lt;String&gt;                                Input path to MSBuild project file or the directory containing Unity source files. (Required)\n  -o, -output &lt;String&gt;                               Output file path(.cs) or directory(multiple generate file). (Required)\n  -c, -conditionalSymbol &lt;String&gt;                    Conditional compiler symbols, split with ','. (Default: null)\n  -r, -resolverName &lt;String&gt;                         Set resolver name. (Default: GeneratedResolver)\n  -n, -namespace &lt;String&gt;                            Set namespace root name. (Default: MessagePack)\n  -m, -useMapMode &lt;Boolean&gt;                          Force use map mode serialization. (Default: False)\n  -ms, -multipleIfDirectiveOutputSymbols &lt;String&gt;    Generate #if-- files by symbols, split with ','. (Default: null)\n</code></pre>\n<p><code>mpc</code> targets C# code with <code>[MessagePackObject]</code> or <code>[Union]</code> annotations.</p>\n<pre><code class=\"language-cmd\">// Simple Sample:\ndotnet mpc -i &quot;..\\src\\Sandbox.Shared.csproj&quot; -o &quot;MessagePackGenerated.cs&quot;\n\n// Use force map simulate DynamicContractlessObjectResolver\ndotnet mpc -i &quot;..\\src\\Sandbox.Shared.csproj&quot; -o &quot;MessagePackGenerated.cs&quot; -m\n</code></pre>\n<p>By default, <code>mpc</code> generates the resolver as <code>MessagePack.Resolvers.GeneratedResolver</code> and formatters as<code>MessagePack.Formatters.*</code>.</p>\n<p>Here is the full sample code to register a generated resolver in Unity.</p>\n<pre><code class=\"language-csharp\">using MessagePack;\nusing MessagePack.Resolvers;\nusing UnityEngine;\n\npublic class Startup\n{\n    static bool serializerRegistered = false;\n\n    [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]\n    static void Initialize()\n    {\n        if (!serializerRegistered)\n        {\n            StaticCompositeResolver.Instance.Register(\n                 MessagePack.Resolvers.GeneratedResolver.Instance,\n                 MessagePack.Resolvers.StandardResolver.Instance\n            );\n\n            var option = MessagePackSerializerOptions.Standard.WithResolver(StaticCompositeResolver.Instance);\n\n            MessagePackSerializer.DefaultOptions = option;\n            serializerRegistered = true;\n        }\n    }\n\n#if UNITY_EDITOR\n\n\n    [UnityEditor.InitializeOnLoadMethod]\n    static void EditorInitialize()\n    {\n        Initialize();\n    }\n\n#endif\n}\n</code></pre>\n<p>In Unity, you can use MessagePack CodeGen windows at <code>Windows -&gt; MessagePack -&gt; CodeGenerator</code>.</p>\n<p><img src=\"https://user-images.githubusercontent.com/46207/69414381-f14da400-0d55-11ea-9f8d-9af448d347dc.png\" alt=\"\"></p>\n<p>Install the .NET Core runtime, install mpc (as a .NET Core Tool as described above), and execute <code>dotnet mpc</code>. Currently this tool is experimental so please tell me your opinion.</p>\n<p>In Xamarin, you can install the <a href=\"doc/msbuildtask.md\">the <code>MessagePack.MSBuild.Tasks</code> NuGet package</a> into your projects to pre-compile fast serialization code and run in environments where JIT compilation is not allowed.</p>\n<h6>RPC</h6>\n<p>MessagePack advocated <a href=\"https://github.com/msgpack-rpc/msgpack-rpc\">MessagePack RPC</a>, but work on it has stopped and it is not widely used.</p>\n<h7>MagicOnion</h7>\n<p>I've created a gRPC based MessagePack HTTP/2 RPC streaming framework called <a href=\"https://github.com/Cysharp/MagicOnion\">MagicOnion</a>. gRPC usually communicates with Protocol Buffers using IDL. But MagicOnion uses MessagePack for C# and does not need IDL. When communicating C# to C#, schemaless (or rather C# classes as schema) is better than using IDL.</p>\n<h7>StreamJsonRpc</h7>\n<p>The StreamJsonRpc library is based on <a href=\"https://www.jsonrpc.org/\">JSON-RPC</a> and includes <a href=\"https://github.com/microsoft/vs-streamjsonrpc/blob/master/doc/extensibility.md#alternative-formatters\">a pluggable formatter architecture</a> and as of v2.3 includes <a href=\"https://github.com/microsoft/vs-streamjsonrpc/blob/master/doc/extensibility.md#message-formatterss\">MessagePack support</a>.</p>\n<h6>How to build</h6>\n<p>See our <a href=\"CONTRIBUTING.md\">contributor's guide</a>.</p>\n",
    "msgpack_repo_id": "pjohalloran-com.neuecc.messagepack",
    "msgpack_repo_homepage": "https://github.com/pjohalloran/com.neuecc.messagepack",
    "full_name": "pjohalloran/com.neuecc.messagepack",
    "owner": "pjohalloran",
    "html_url": "https://github.com/pjohalloran/com.neuecc.messagepack"
  },
  {
    "msgpack_lang": "Swift",
    "msgpack_quickstart_html": "<h5>MessagePack</h5>\n<p><strong>MessagePack</strong> is an efficient binary serialization format. It lets you exchange data among multiple languages like JSON. But it's faster and smaller. Small integers are encoded into a single byte, and typical short strings require only one extra byte in addition to the strings themselves.</p>\n<h6>Package.swift</h6>\n<pre><code class=\"language-swift\">.Package(url: &quot;https://github.com/tris-foundation/messagepack.git&quot;, majorVersion: 0)\n</code></pre>\n<h6>Memo</h6>\n<pre><code class=\"language-swift\">public enum MessagePack {\n    case `nil`\n    case int(Int)\n    case uint(UInt)\n    case bool(Bool)\n    case float(Float)\n    case double(Double)\n    case string(String)\n    case binary([UInt8])\n    case array([MessagePack])\n    case map([MessagePack : MessagePack])\n    case extended(Extended)\n\n    public struct Extended {\n        public let type: Int8\n        public let data: [UInt8]\n        public init(type: Int8, data: [UInt8]) {\n            self.type = type\n            self.data = data\n        }\n    }\n}\n</code></pre>\n<h6>Usage</h6>\n<p>You can find this code and more in <a href=\"https://github.com/tris-foundation/examples\">examples</a>.</p>\n<h7>Convenience API</h7>\n<pre><code class=\"language-swift\">let hey = MessagePack(&quot;hey there!&quot;)\nlet bytes = MessagePack.encode(hey)\nlet original = String(try MessagePack.decode(bytes: bytes))\n</code></pre>\n<h7>Performance optimized</h7>\n<pre><code class=\"language-swift\">var encoder = Encoder()\nencoder.encode(.string(&quot;one&quot;))\nencoder.encode(.int(2))\nencoder.encode(.double(3.0))\nlet encoded = encoder.bytes\n// be careful, we use raw pointer here\nvar decoder = Decoder(bytes: encoded, count: encoded.count)\n// throws on invalid data\nlet value = try decoder.decode()\n// reuse decoder\ndecoder.rewind()\n// you can avoid extra MessagePack object \n// if you sure about the structure\n// throws on wrong type\nlet string = try decoder.decode(String.self)\nlet int = try decoder.decode(UInt8.self)\nlet double = try decoder.decode(Double.self)\nprint(&quot;decoded manually: \\(string), \\(int), \\(double)&quot;)\n</code></pre>\n",
    "msgpack_repo_id": "couchdeveloper-messagepack",
    "msgpack_repo_homepage": "https://github.com/couchdeveloper/messagepack",
    "full_name": "couchdeveloper/messagepack",
    "owner": "couchdeveloper",
    "html_url": "https://github.com/couchdeveloper/messagepack"
  },
  {
    "msgpack_lang": "C++",
    "msgpack_quickstart_html": "<h5>DAL</h5>\n<p><strong>Data Abstraction Layer (DAL)</strong> - library of functions that allows developers of embedded systems to use data representation in the form of objects. The main design goal is to abstract data structure and simplify data handling, fast and easy serialization (https://msgpack.org/, JSON) and deserialization (https://msgpack.org/, JSON, WebAPI) for network transfer and saving/loading.</p>\n<h6>Nuances of working with dynamic memory</h6>\n<p>Since working with memory is very important for embedded system developers, I would like to specify right away: none of the library methods allocate or free dynamic memory without using user-provided methods. Methods of allocating and releasing dynamic memory are provided by the user during library initialization.</p>\n<h7>Methods of allocating and releasing dynamic memory</h7>\n<p><strong>Allocate memory for a node</strong> (element, containing data) made separately from memory allocation for data. This allows to speed up the process of memory allocation, because the size of the node is always known for in advance. This approach allows use the dynamic memory in form of &quot;blocks&quot;-pool for creating a node, the support of which is in some systems. If the methods of allocation of the &quot;block&quot; memory is ont provided by architecture, then to allocate memory for the node, use &quot;regular&quot; methods for allocating memory with a fixed size - size of a node.</p>\n<p><strong>Allocating memory for data</strong> is used when creating nodes, containing strings or binary data. &quot;Regular&quot; memory allocation/free methods should be used (malloc/free).</p>\n<p>Memory alignment does not matter for internal library methods.</p>\n<h6>Usage example</h6>\n<pre><code class=\"language-cpp\">#include &quot;dal.h&quot;\n\nusing namespace std;\n\n\ndal_t* dal_alloc_node()\n{\n\treturn static_cast&lt;dal_t*&gt;(malloc(sizeof(dal_t)));\n}\n\nvoid* dal_alloc_data(uint32_t size)\n{\n\treturn malloc(size);\n};\n\nvoid\tdal_free_node(dal_t* data)\n{\n\tfree(data);\n};\n\nvoid\tdal_free_data(void* data)\n{\n\tfree(data);\n};\n\n\nint main()\n{\n\t//Create structure with callbacks for allocate and free memory\n\tdalMemHooks_t\tmemHooks\t= { dal_alloc_node, dal_alloc_data,\n\t\t\t\t\t\t\t\t\tdal_free_node, dal_free_data };\n\t//Initialize the DAL library and pass the previously created structure to it\n\tdal_init(&amp;memHooks);\n\n\t//Create an empty object - then we can add other objects and values to it\n\tdal_t*\t\ttopObj\t\t\t= dal_create();\n\t\n\t//Add key-value pairs to the previously created object\n\ttopObj-&gt;add_val_str(&quot;string_value&quot;, &quot;Hello from DAL&quot;);\n\ttopObj-&gt;add_val_uint(&quot;int_value&quot;, 123456789);\n\ttopObj-&gt;add_val_dbl(&quot;dbl_value&quot;, 10.987654321);\n\n\t//Adding a child object - making the structure more complex\n\tdal_t*\t\tchldObj\t\t\t= topObj-&gt;create_child(&quot;child_obj&quot;);\n\tint\t\t\ttestArr[5]\t\t= {50, 40, 30, 20, 10};\n\tchldObj-&gt;add_arr_int(&quot;int_array&quot;, testArr, 5);\n\tmemset(testArr, 0, 5 * sizeof(int));\n\tuint32_t\tarrLen\t\t\t= 5;\n\tchldObj-&gt;get_arr_int(&quot;int_array&quot;, testArr, arrLen);\n\n\t//Serialize the object in JSON to check the resulting structure\n\tuint8_t\t\tbuf[4096]\t= {0};\n\tuint32_t\tlen\t\t\t= topObj-&gt;to_json(buf, sizeof(buf));\n\n\tdal_delete(topObj);\n\n\tcout &lt;&lt; buf &lt;&lt; endl;\n\treturn 0;\n}\n</code></pre>\n<h6>Serialization and deserialization of objects</h6>\n<p>Serialization is supported to:</p>\n<ul>\n<li><a href=\"https://msgpack.org/\">Message Pack</a>;</li>\n<li><a href=\"https://www.json.org/json-en.html\">JSON</a>.</li>\n</ul>\n<p>Deseritization is supported from:</p>\n<ul>\n<li><a href=\"https://msgpack.org/\">Message Pack</a>;</li>\n<li><a href=\"https://www.json.org/json-en.html\">JSON</a>;</li>\n<li>WebAPI.</li>\n</ul>\n<h6>Versions</h6>\n<hr>\n<p>1.0.0</p>\n<ul>\n<li>First version, commit for the community.</li>\n<li>Writed short description and base example.</li>\n</ul>\n<hr>\n<p>1.1.0</p>\n<ul>\n<li>Added a method for creating a copy of a node (obj-&gt;duplicate()). The method returns a copy of the node (taking into account the nesting of the structure).</li>\n</ul>\n<hr>\n<p>1.2.0</p>\n<ul>\n<li>Added a method for creating a child node-object with its name.</li>\n</ul>\n<hr>\n<p>1.2.1</p>\n<ul>\n<li>Fixed array deserialization method.</li>\n</ul>\n<hr>\n<p>1.2.2</p>\n<ul>\n<li>Fixed the bug described in &quot;add_node &amp; detach bugs #1&quot;.</li>\n</ul>\n<hr>\n<p>2.0.0</p>\n<ul>\n<li>Node attach method renamed from add_node to attach to better express the nature of the operation - node ownership (the attached node becomes a child and therefore should not be deleted by itself);</li>\n<li>The methods of adding nodes and getting their values have been significantly changed. <em><strong>The new version is not compatible with the previous API.</strong></em></li>\n</ul>\n<hr>\n<p>2.0.1</p>\n<ul>\n<li>Some corrections.</li>\n</ul>\n<hr>\n<p>2.0.2</p>\n<ul>\n<li>Fixed a bug when getting a double value - the node value was erroneously cast to the float type.</li>\n<li>In the &quot;_copy_trivial&quot; method, handling of invalid types has been added, previously this could lead to an error.</li>\n</ul>\n<hr>\n<p>2.0.3</p>\n<ul>\n<li>Fixed a bug with mixing up the &quot;add_val_ref&quot; methods and &quot;add_val_blob&quot;.</li>\n</ul>\n<hr>\n<p>2.1.0</p>\n<ul>\n<li>Added methods for getting the contents of arrays. Methods are not safe - before calling methods, the developer must make sure that he has allocated enough memory to copy the values ​​of the array. The number of elements in an array can be obtained using the &quot;get_array_size&quot; method.</li>\n</ul>\n<hr>\n<p>2.1.1</p>\n<ul>\n<li>Minor improvements in getting array values.</li>\n</ul>\n<hr>\n<p>2.1.2</p>\n<ul>\n<li>Fixed an error parsing a JSON string that occurs if there is still data after the closing bracket of the top object.</li>\n</ul>\n<hr>\n<p>2.2.0</p>\n<ul>\n<li>Added conversion of floating point numbers to integer values when calling methods to get values. Previously, if the value of a node was a floating-point number, calling the method to get an integer value returned &quot;false&quot;, because could not convert the number to the right format.</li>\n</ul>\n<hr>\n<p>2.2.1</p>\n<ul>\n<li>Fixed a bug in MessagePack deserialization method - the type was defined incorrectly, which caused valid MessagePack to be parsed with a format error.</li>\n</ul>\n<hr>\n<p>2.2.2</p>\n<ul>\n<li>Fixed a bug in methods for getting values ​​by index.</li>\n</ul>\n<hr>\n<p>2.2.3</p>\n<ul>\n<li>Fixed a bug when getting a value of &quot;blob&quot; type.</li>\n</ul>\n<hr>\n<p>2.3.0</p>\n<ul>\n<li>The work with arrays has been significantly changed, now they are not linear memory areas, but lists of nodes, this simplifies working with arrays, although it slightly reduces the speed of their processing.</li>\n</ul>\n<hr>\n<p>2.3.1</p>\n<ul>\n<li>Bug fixes for serialization/deserialization</li>\n</ul>\n<hr>\n<p>2.3.2</p>\n<ul>\n<li>Some changes in the API that can be easily fixed in the user software. Significantly compatibility is not broken.</li>\n</ul>\n<hr>\n<p>2.3.3</p>\n<ul>\n<li>Fixed a bug in getting numeric values ​​related to number representation -2147483648.</li>\n</ul>\n<hr>\n<p>2.3.4</p>\n<ul>\n<li>Fixed a bug when calling the get object size method related to incorrect processing of arrays after changing their structure.</li>\n</ul>\n<hr>\n<p>2.3.5</p>\n<ul>\n<li>Fixed a bug when attaching a node.</li>\n</ul>\n<hr>\n<p>2.3.6</p>\n<ul>\n<li>Minor usability improvements.</li>\n</ul>\n<hr>\n<p>2.3.7</p>\n<ul>\n<li>Fixes to remove the warning about comparing signed and unsigned numbers.</li>\n</ul>\n<hr>\n",
    "msgpack_repo_id": "diy4hobby-DAL",
    "msgpack_repo_homepage": "https://github.com/diy4hobby/DAL",
    "full_name": "diy4hobby/DAL",
    "owner": "diy4hobby",
    "html_url": "https://github.com/diy4hobby/DAL"
  },
  {
    "msgpack_lang": "PHP",
    "msgpack_quickstart_html": "<h5>msgpack-php-micro</h5>\n<p>msgpack - A super-lightweight PHP implementation of the <a href=\"http://msgpack.org/\">msgpack</a> data encoding format.</p>\n<p>This is a very simple, small PHP implementation of msgpack, for ease of embedding.</p>\n<p>Notice: This implementation is still fairly new, and may have bugs. If you find any bugs, please report them immediately, and I will try to get them fixed as soon as possible.</p>\n<p><strong>Usage:</strong></p>\n<pre><code>require_once('msgpack.php');\n\n$data = array(\n  'hello' =&gt; 'world',\n  'array' =&gt; array(1, 2, 3, 4),\n  5 =&gt; 78.662,\n  'dt' =&gt; new DateTime(), // DateTime encoded in Timestamp extension format\n);\n\n$encoded = MsgPack::encode($data);\n\n$decoded = MsgPack::decode($encoded);\n\nvar_dump($decoded);\n</code></pre>\n<p>Fully supports custom type extensions:</p>\n<pre><code>require_once('msgpack.php');\n\nclass Vertex {\n\tpublic $x;\n\tpublic $y;\n\tpublic $z;\n\n\tpublic function __construct($x=0, $y=0, $z=0) {\n\t\t$this-&gt;x = floatval($x);\n\t\t$this-&gt;y = floatval($y);\n\t\t$this-&gt;z = floatval($z);\n\t}\n}\n\nMsgPack::extend(array(\n\t'type' =&gt; 1,\n\n\t'varType' =&gt; 'object',\n\n\t'encode' =&gt; function($obj) {\n\t\t// returning FALSE skips; see reference for details\n\t\tif(!($obj instanceof Vertex)) return FALSE;\n\n\t\treturn pack('GGG',$obj-&gt;x, $obj-&gt;y, $obj-&gt;z);\n\t},\n\n\t'decode' =&gt; function($data) {\n\t\t$xyz = unpack('Gx/Gy/Gz',$data);\n\t\treturn new Vertex($xyz['x'], $xyz['y'], $xyz['z']);\n\t},\n));\n</code></pre>\n<p>Visit <a href=\"https://github.com/CodeSmith32/msgpack-php-micro\">github.com/CodeSmith32/msgpack-php-micro</a> for the usage reference.</p>\n",
    "msgpack_repo_id": "CodeSmith32-msgpack-php-micro",
    "msgpack_repo_homepage": "https://github.com/CodeSmith32/msgpack-php-micro",
    "full_name": "CodeSmith32/msgpack-php-micro",
    "owner": "CodeSmith32",
    "html_url": "https://github.com/CodeSmith32/msgpack-php-micro"
  },
  {
    "msgpack_lang": "C#",
    "msgpack_quickstart_html": "<p>## FPNN MsgPack Implement</p>\n<ul>\n<li><strong><a href=\"https://github.com/msgpack/msgpack/blob/master/spec.md\">msgpack SPEC</a></strong></li>\n<li><strong><a href=\"https://github.com/highras/msgpack-csharp\">Project Home</a></strong></li>\n</ul>\n<h7>Compatibility Version:</h7>\n<p>C# .Net Standard 2.0</p>\n<h7>For Packer:</h7>\n<ul>\n<li>\n<p>input kinds:</p>\n<p>null, bool, sbyte, byte, short, ushort, Int32, UInt32, Int64, Uint64, float, double, string</p>\n<p>Decimal, Tuple</p>\n<p>byte[], DateTime, IEnumerable (such as List, Dictionary, List&lt;object&gt;, Dictionary&lt;object, object&gt;, ...)</p>\n</li>\n<li>\n<p>usage:</p>\n<pre><code>  using com.fpnn.msgpack;\n  void MsgPacker.Pack(Stream stream, Object obj);\n</code></pre>\n</li>\n</ul>\n<h7>For Unpacker:</h7>\n<ul>\n<li>\n<p>output kinds:</p>\n<p>Object, which maybe the following kinds:</p>\n<p>null, bool, sbyte, byte, short, ushort, Int32, UInt32, Int64, Uint64, float, double, string</p>\n<p>byte[], DateTime, List&lt;object&gt;, Dictionary&lt;object, object&gt;</p>\n</li>\n<li>\n<p>usage:</p>\n<pre><code>  using com.fpnn.msgpack;\n  Dictionary&lt;Object, Object&gt; MsgUnpacker.Unpack(byte[] binary);\n\n  Dictionary&lt;Object, Object&gt; MsgUnpacker.Unpack(byte[] binary, int offset, int length = 0);\n\n  //-- unpack one object.\n  Object MsgUnpacker.Unpack(byte[] binary, int offset, out int endOffset);\n</code></pre>\n</li>\n</ul>\n<h7>Exception:</h7>\n<pre><code>    using com.fpnn.msgpack;\n    public class MsgPackException: Exception;\n    public class UnsupportedTypeException : MsgPackException;\n    public class UnrecognizedDataException : MsgPackException;\n    public class InsufficientException : MsgPackException;\n    public class InvalidDataException : MsgPackException;\n</code></pre>\n",
    "msgpack_repo_id": "highras-msgpack-csharp",
    "msgpack_repo_homepage": "https://github.com/highras/msgpack-csharp",
    "full_name": "highras/msgpack-csharp",
    "owner": "highras",
    "html_url": "https://github.com/highras/msgpack-csharp"
  },
  {
    "msgpack_lang": "Gleam",
    "msgpack_quickstart_html": "<h5>GlePack</h5>\n<p><a href=\"https://hex.pm/packages/glepack\"><img src=\"https://img.shields.io/hexpm/v/glepack\" alt=\"Package Version\"></a>\n<a href=\"https://hexdocs.pm/glepack/\"><img src=\"https://img.shields.io/badge/hex-docs-ffaff3\" alt=\"Hex Docs\"></a></p>\n<p>A <a href=\"https://msgpack.org/\">MessagePack</a> serialization library for the Gleam programming language.</p>\n<p>GlePack allows you to encode Gleam values to MessagePack binary format and decode MessagePack binary data back to Gleam values.</p>\n<p>Documentation can be found at <a href=\"https://hexdocs.pm/glepack\">https://hexdocs.pm/glepack</a>.</p>\n<h6>Installation</h6>\n<pre><code class=\"language-shell\">gleam add glepack\n</code></pre>\n<h6>Basic Usage</h6>\n<pre><code class=\"language-gleam\">import gleam/dict\nimport glepack\nimport glepack/data\n\npub fn main() {\n  // Encode a value, returning a Result\n  glepack.pack(data.Integer(42))\n  // -&gt; Ok(&lt;&lt;42&gt;&gt;)\n\n  // Decode a value, returning the value and remaining bytes\n  let data = data.String(&quot;hello&quot;)\n  glepack.unpack(data)\n  // -&gt; Ok(#(data.String(&quot;hello&quot;), &lt;&lt;&gt;&gt;))\n\n  // Using the strict versions when you're confident the data is valid\n\n  // Encode a value, panicking on failure\n  glepack.pack_strict(data.Integer(42))\n  // -&gt; &lt;&lt;42&gt;&gt;\n\n  // Decode a value, panicking on failure\n  glepack.unpack_strict(data)\n  // -&gt; #(data.String(&quot;hello&quot;), &lt;&lt;&gt;&gt;)\n  \n  // Working with maps\n  let map = dict.new()\n    |&gt; dict.insert(data.String(&quot;key&quot;), data.String(&quot;value&quot;))\n  \n  let packed = glepack.pack_strict(data.Map(map))\n  let unpacked = glepack.unpack_exact_strict(packed)\n  // -&gt; data.Map containing our key-value pair\n}\n</code></pre>\n<h7>Reading MessagePack data from a file</h7>\n<pre><code class=\"language-gleam\">pub fn read_msgpack_config() {\n  use ok(content) &lt;- result.try(file.read(&quot;config.msgpack&quot;))\n  \n  // Decode the entire file as a single MessagePack value with no remaining bytes\n  case glepack.unpack_exact(content) {\n    Ok(config) -&gt; {\n      // Use the config\n      Ok(config)\n    }\n    Error(err) -&gt; Error(&quot;Invalid config file: &quot; &lt;&gt; error.to_string(err))\n  }\n}\n</code></pre>\n<h7>Strict unpack &amp; Exact</h7>\n<pre><code class=\"language-gleam\">// Using the strict versions when you're confident the data is valid\npub fn process_trusted_msgpack(data: BitArray) -&gt; data.Value {\n  // This will panic if data isn't valid MessagePack\n  let #(value, _) = glepack.unpack_strict(data)\n  \n  // Do something with the value\n  value\n}\n\n// When you expect exactly one complete MessagePack value\npub fn parse_complete_msgpack(data: BitArray) -&gt; data.Value {\n  // This will panic if data isn't valid or has trailing bytes\n  glepack.unpack_exact_strict(data)\n}\n</code></pre>\n<h6>Supported Types</h6>\n<p>GlePack supports all MessagePack types:</p>\n<table>\n<thead>\n<tr>\n<th>MessagePack Type</th>\n<th>Gleam Type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>nil</td>\n<td><code>data.Nil</code></td>\n</tr>\n<tr>\n<td>boolean</td>\n<td><code>data.Boolean(Bool)</code></td>\n</tr>\n<tr>\n<td>integer</td>\n<td><code>data.Integer(Int)</code></td>\n</tr>\n<tr>\n<td>float</td>\n<td><code>data.Float(Float)</code></td>\n</tr>\n<tr>\n<td>string</td>\n<td><code>data.String(String)</code></td>\n</tr>\n<tr>\n<td>binary</td>\n<td><code>data.Binary(BitArray)</code></td>\n</tr>\n<tr>\n<td>array</td>\n<td><code>data.Array(List(Value))</code></td>\n</tr>\n<tr>\n<td>map</td>\n<td><code>data.Map(Dict(Value, Value))</code></td>\n</tr>\n<tr>\n<td>extension</td>\n<td><code>data.Extension(Int, BitArray)</code></td>\n</tr>\n</tbody>\n</table>\n<h6>API</h6>\n<p>GlePack provides several functions for encoding and decoding:</p>\n<h7>Encoding</h7>\n<pre><code class=\"language-gleam\">// Encode a value, returning a Result\nglepack.pack(data.Integer(42))\n// -&gt; Ok(&lt;&lt;42&gt;&gt;)\n\n// Encode a value, panicking on failure\nglepack.pack_strict(data.Integer(42))\n// -&gt; &lt;&lt;42&gt;&gt;\n</code></pre>\n<h7>Decoding</h7>\n<pre><code class=\"language-gleam\">// Decode a value, returning the value and remaining bytes\nlet data = data.String(&quot;hello&quot;)\nglepack.unpack(data)\n// -&gt; Ok(#(data.String(&quot;hello&quot;), &lt;&lt;&gt;&gt;))\n\n// Decode a value, panicking on failure\nglepack.unpack_strict(data)\n// -&gt; #(data.String(&quot;hello&quot;), &lt;&lt;&gt;&gt;)\n  \n  // Decode a value, ensuring no trailing bytes remain\nglepack.unpack_exact(data)\n// -&gt; Ok(data.String(&quot;hello&quot;))\n\n// Decode a value with no trailing bytes, panicking on failure\nglepack.unpack_exact_strict(data)\n// -&gt; data.String(&quot;hello&quot;)\n</code></pre>\n<h6>Working with Complex Types</h6>\n<h7>Arrays</h7>\n<pre><code class=\"language-gleam\">import glepack\nimport glepack/data\n\npub fn encode_array() {\n  // Create an array with different value types\n  let array = [data.Integer(1), data.String(&quot;test&quot;), data.Boolean(True)]\n  \n  // Pack the array\n  glepack.pack(data.Array(array))\n  // -&gt; Ok(&lt;&lt;0x93, 1, 0xa4, 116, 101, 115, 116, 0xc3&gt;&gt;)\n}\n</code></pre>\n<h7>Maps</h7>\n<pre><code class=\"language-gleam\">import gleam/dict\nimport glepack\nimport glepack/data\n\npub fn encode_map() {\n  // Create a map\n  let map = dict.new()\n    |&gt; dict.insert(data.String(&quot;a&quot;), data.Integer(1))\n    |&gt; dict.insert(data.String(&quot;b&quot;), data.Integer(2))\n  \n  // Pack the map\n  glepack.pack(data.Map(map))\n  // -&gt; Ok binary representing the map\n}\n</code></pre>\n<h7>Extensions</h7>\n<p>Extensions are a powerful feature of MessagePack that allow you to define custom types:</p>\n<pre><code class=\"language-gleam\">import glepack\nimport glepack/data\nimport gleam/bit_array\n\n// Example: Custom timestamp extension\npub type Timestamp {\n  Timestamp(seconds: Int, nanoseconds: Int)\n}\n\n// Extension type ID for timestamp (MessagePack spec reserves -1)\nconst timestamp_type_id = -1\n\n// Encode a timestamp to an extension\npub fn encode_timestamp(ts: Timestamp) -&gt; data.Value {\n  // Pack timestamp in MessagePack timestamp format\n  let data = bit_array.append(\n    &lt;&lt;ts.seconds:64-signed-big&gt;&gt;,\n    &lt;&lt;ts.nanoseconds:32-unsigned-big&gt;&gt;\n  )\n  \n  // Create an extension value\n  data.Extension(timestamp_type_id, data)\n}\n\n// Decode an extension to a timestamp\npub fn decode_timestamp(value: data.Value) -&gt; Result(Timestamp, String) {\n  case value {\n    data.Extension(ext_type, data) if ext_type == timestamp_type_id -&gt; {\n      case data {\n        &lt;&lt;seconds:64-signed-big, nanos:32-unsigned-big&gt;&gt; -&gt; {\n          Ok(Timestamp(seconds: seconds, nanoseconds: nanos))\n        }\n        _ -&gt; Error(&quot;Invalid timestamp format&quot;)\n      }\n    }\n    _ -&gt; Error(&quot;Not a timestamp extension&quot;)\n  }\n}\n\npub fn timestamp_example() {\n  // Create a timestamp\n  let now = Timestamp(seconds: 1681489200, nanoseconds: 123_456_789)\n  \n  // Convert to MessagePack extension\n  let ext = encode_timestamp(now)\n  \n  // Pack the extension\n  let packed = glepack.pack_strict(ext)\n  \n  // Later, unpack the data\n  let unpacked = glepack.unpack_exact_strict(packed)\n  \n  // Convert back to a timestamp\n  let original = decode_timestamp(unpacked)\n  // original == Ok(Timestamp(seconds: 1681489200, nanoseconds: 123_456_789))\n}\n</code></pre>\n<h6>Nested Data Structures</h6>\n<p>GlePack handles complex nested data:</p>\n<pre><code class=\"language-gleam\">import gleam/dict\nimport glepack\nimport glepack/data\n\npub fn handle_nested_data() {\n  // Create a nested structure with map, array, and various data types\n  let inner_map = dict.new()\n    |&gt; dict.insert(data.String(&quot;key1&quot;), data.Integer(42))\n    |&gt; dict.insert(data.String(&quot;key2&quot;), data.Boolean(True))\n\n  let array = data.Array([\n    data.String(&quot;item1&quot;), \n    data.Integer(99), \n    data.Map(inner_map)\n  ])\n\n  let outer_map = dict.new()\n    |&gt; dict.insert(data.String(&quot;array&quot;), array)\n    |&gt; dict.insert(data.String(&quot;nil&quot;), data.Nil)\n\n  let original = data.Map(outer_map)\n  \n  // Pack the data - in a real application, this would be sent over \n  // the network or stored in a database\n  let packed = glepack.pack_strict(original)\n  \n  // Later, we receive or read this data back\n  let unpacked = glepack.unpack_exact_strict(packed)\n  \n  // Unpacked now contains our original nested data structure\n}\n</code></pre>\n<h6>Error Handling</h6>\n<p>GlePack provides detailed error information when decoding fails:</p>\n<pre><code class=\"language-gleam\">import gleam/bit_array\nimport gleam/result\nimport glepack\nimport glepack/error\n\npub fn handle_errors() {\n  // Let's say we received some MessagePack data from an external source\n  let received_data = get_external_data()\n  \n  // Decoding with proper error handling\n  case glepack.unpack_exact(received_data) {\n    Ok(value) -&gt; {\n      // Successfully decoded the value\n      process_value(value)\n    }\n    Error(error.IncompleteData) -&gt; {\n      // The data was truncated or has trailing bytes\n    }\n    Error(error.InvalidUtf8) -&gt; {\n      // A string in the MessagePack data contains invalid UTF-8\n    }\n    Error(error.IntegerTooLarge) -&gt; {\n      // An integer value is too large for Gleam's Int type\n    }\n    Error(_) -&gt; {\n      // Other errors: UnknownFormat, ReservedFormat, etc.\n    }\n  }\n}\n</code></pre>\n<h6>Development</h6>\n<pre><code class=\"language-sh\">gleam test  # Run the tests\n</code></pre>\n<h6>License</h6>\n<p>GlePack is licensed under the Apache-2.0 license.</p>\n",
    "msgpack_repo_id": "Lemorz56-glepack",
    "msgpack_repo_homepage": "https://github.com/Lemorz56/glepack",
    "full_name": "Lemorz56/glepack",
    "owner": "Lemorz56",
    "html_url": "https://github.com/Lemorz56/glepack"
  },
  {
    "msgpack_lang": "Ballerina",
    "msgpack_quickstart_html": "<h5>msgpack-bal</h5>\n<p>an implementation of the <a href=\"https://msgpack.org\">msgpack</a> spec in ballerina.</p>\n<p>!!! this library is still a WIP, see the <a href=\"#formats-implemented\">progress tracker</a> below.</p>\n<h6>how to use</h6>\n<p>import it from your ballerina project by tossing this into your <code>Ballerina.toml</code> file</p>\n<pre><code class=\"language-toml\">[[dependency]]\norg=&quot;drewmca&quot;\nname=&quot;msgpack&quot;\nversion=&quot;0.0.7&quot;\n</code></pre>\n<p>and your editor should see the module and let you use the library, something like this:</p>\n<pre><code class=\"language-bal\">import ballerina/io;\nimport drewmca/msgpack;\njson obj = {&quot;hello&quot;: &quot;world!&quot;}\nbyte[] encoded = msgpack:encode(obj);\njson decoded = msgpack:decode(encoded);\nio:println(decoded);\n</code></pre>\n<h6>Formats implemented</h6>\n<p>from the <a href=\"https://github.com/msgpack/msgpack/blob/master/spec.md#formats\">msgpack format spec</a></p>\n<ul>\n<li>[x] nil format\n<ul>\n<li>[x] nil</li>\n</ul>\n</li>\n<li>[x] bool format family\n<ul>\n<li>[x] true</li>\n<li>[x] false</li>\n</ul>\n</li>\n<li>[ ] int format family\n<ul>\n<li>[x] PositiveFixInt</li>\n<li>[x] NegativeFixInt</li>\n<li>[x] Uint8</li>\n<li>[x] Uint16</li>\n<li>[x] Uint32</li>\n<li>[x] Uint64</li>\n<li>[x] Int8</li>\n<li>[x] Int16</li>\n<li>[x] Int32</li>\n<li>[ ] Int64 (not implemented bc ballerina cannot do <code>1 &lt;&lt; 64</code>)</li>\n</ul>\n</li>\n<li>[ ] float format family\n<ul>\n<li>[ ] Float32</li>\n<li>[ ] Float64</li>\n</ul>\n</li>\n<li>[x] str format family\n<ul>\n<li>[x] FixStr</li>\n<li>[x] Str8</li>\n<li>[x] Str16</li>\n<li>[ ] Str32 (implemented but untested)</li>\n</ul>\n</li>\n<li>[x] bin format family\n<ul>\n<li>[x] Bin8</li>\n<li>[x] Bin16</li>\n<li>[x] Bin32 (implemented but untested)</li>\n</ul>\n</li>\n<li>[x] array format family\n<ul>\n<li>[x] FixArray</li>\n<li>[x] Array16</li>\n<li>[ ] Array32 (implemented but untested)</li>\n</ul>\n</li>\n<li>[x] map format family\n<ul>\n<li>[x] FixMap</li>\n<li>[x] Map16</li>\n<li>[ ] Map32 (implemented but untested)</li>\n</ul>\n</li>\n<li>[ ] ext format family\n<ul>\n<li>[ ] Ext8</li>\n<li>[ ] Ext16</li>\n<li>[ ] Ext32</li>\n<li>[ ] FixExt1</li>\n<li>[ ] FixExt2</li>\n<li>[ ] FixExt4</li>\n<li>[ ] FixExt8</li>\n<li>[ ] FixExt16</li>\n</ul>\n</li>\n<li>[ ] Timestamp extension type</li>\n</ul>\n<h6>Roadmap</h6>\n<p>This is a quick and dirty implementation, generally building out functionality first and will refactor after.</p>\n<ul>\n<li><strong>v0.3</strong>: implementation of some, but not all of the spec. quick &amp; dirty implementation.</li>\n<li><strong>v0.4</strong>: added benchmarks, coreutil for int-&gt;byte[] map16, str, &amp; int impl</li>\n<li><strong>v0.5</strong>: implemented maps and arrays, also refactored decoding to pop bytes off as it goes</li>\n<li><strong>v0.6</strong>: implemented binary byte arrays, introduced some better error handling</li>\n<li><strong>v0.7</strong>: version bump for updating docs and pushing to bal central</li>\n<li><strong>v1.0</strong>: full compatibility with the msgpack spec, including a full test suite and benchmarks</li>\n</ul>\n<h7>TODO:</h7>\n<ul>\n<li>[ ] create a big json file of test cases</li>\n<li>[x] put a checkbox of msgpack format types here</li>\n<li>[x] separate functions into different files</li>\n<li>[x] refactor decoding to pop bytes off the array</li>\n<li>[ ] test long array/map values</li>\n</ul>\n",
    "msgpack_repo_id": "DrewMcArthur-msgpack-bal",
    "msgpack_repo_homepage": "https://github.com/DrewMcArthur/msgpack-bal",
    "full_name": "DrewMcArthur/msgpack-bal",
    "owner": "DrewMcArthur",
    "html_url": "https://github.com/DrewMcArthur/msgpack-bal"
  },
  {
    "msgpack_lang": "Prolog",
    "msgpack_quickstart_html": "<h5>MessagePack for SWI-Prolog using C</h5>\n<p><a href=\"https://github.com/royratcliffe/msgpackc-prolog/actions/workflows/test.yaml\"><img src=\"https://github.com/royratcliffe/msgpackc-prolog/actions/workflows/test.yaml/badge.svg\" alt=\"test\"></a>\n<img src=\"https://shields.io/endpoint?url=https://gist.githubusercontent.com/royratcliffe/ccccef2ac1329551794f2a466ee61014/raw/cov.json\" alt=\"cov\"></p>\n<!-- ![fail](https://shields.io/endpoint?url=https://gist.githubusercontent.com/royratcliffe/ccccef2ac1329551794f2a466ee61014/raw/fail.json) -->\n<h6>Usage</h6>\n<p>Install the Prolog pack in SWI-Prolog using:</p>\n<pre><code class=\"language-prolog\">pack_install(msgpackc).\n</code></pre>\n<p>Pack messages via Definite-Clause Grammar <code>msgpack//1</code> using compound terms.\nProlog grammars operate by &quot;unifying&quot; terms with codes, in this case only byte\ncodes rather than Unicodes. Unification works in both directions and even with\npartial knowns. The grammar back-tracks through all possible solutions\nnon-deterministically until it finds one, else fails.</p>\n<p>The implementation supports all the MessagePack formats including timestamps and\nany other extensions. The multi-file predicate hook <code>msgpack:type_ext_hook/3</code>\nunifies arbitrary types and bytes with their terms.</p>\n<h6>Brief examples</h6>\n<p>All the following succeed.</p>\n<pre><code class=\"language-prolog\">?- [library(msgpackc)].\ntrue.\n\n?- phrase(msgpack(float(1e9)), Bytes).\nBytes = [202, 78, 110, 107, 40].\n\n?- phrase(msgpack(float(1e18)), Bytes).\nBytes = [203, 67, 171, 193, 109, 103, 78, 200, 0].\n\n?- phrase(msgpack(float(Float)), [203, 67, 171, 193, 109, 103, 78, 200, 0]).\nFloat = 1.0e+18.\n\n?- phrase(msgpack(array([str(&quot;hello&quot;), str(&quot;world&quot;)])), Bytes), phrase(msgpack(Term), Bytes).\nBytes = [146, 165, 104, 101, 108, 108, 111, 165, 119|...],\nTerm = array([str(&quot;hello&quot;), str(&quot;world&quot;)]).\n</code></pre>\n<h6>Project goals</h6>\n<p>Primarily implemented in Prolog but with core highly-optimised C support\nfunctions for handling endian transformations via machine-code byte swapping,\nre-interpreting between ordered bytes (octets) and IEEE-754 floating-point\nnumbers and integers of different bit-widths.</p>\n<p>The goal of this delicate balance between Prolog and C, between\ndefinite-clause grammar and low-level bit manipulation, aims to retain\nthe flexibility and elegance of forward and backward unification between\nMessagePack and byte streams while gleaning the performance benefits of\na C-based foreign support library.</p>\n<h6>Functors, fundamentals and primitives</h6>\n<p>The package presents a three-layered interface.</p>\n<ol>\n<li>Top layer via <code>msgpack//1</code> grammar, usage as <code>phrase(msgpack(nil), A)</code> for example.</li>\n<li>Fundamental using <code>msgpack_object//1</code>, usage as <code>phrase(msgpack_object(nil), A)</code> for example.</li>\n<li>Primitive predicates, e.g. <code>msgpack_nil</code>.</li>\n</ol>\n<p>C functions implement some of the key integer and float predicates at the\nprimitive level.</p>\n<p>The top-level grammar is <code>msgpack//1</code>. The definition is simple. It maps terms\nto primitives. Unification succeeds both forwards and backwards, meaning the\ngrammar magically parses <em>and</em> generates.</p>\n<pre><code class=\"language-prolog\">msgpack(nil) --&gt; msgpack_nil, !.\nmsgpack(bool(false)) --&gt; msgpack_false, !.\nmsgpack(bool(true)) --&gt; msgpack_true, !.\nmsgpack(int(Int)) --&gt; msgpack_int(Int), !.\nmsgpack(float(Float)) --&gt; msgpack_float(Float), !.\nmsgpack(str(Str)) --&gt; msgpack_str(Str), !.\nmsgpack(bin(Bin)) --&gt; msgpack_bin(Bin), !.\nmsgpack(array(Array)) --&gt; msgpack_array(msgpack, Array), !.\nmsgpack(map(Map)) --&gt; msgpack_map(msgpack_pair(msgpack, msgpack), Map), !.\nmsgpack(Term) --&gt; msgpack_ext(Term).\n</code></pre>\n<p>Note that this does <em>not</em> include a sequence of back-to-back messages.\nHigh-order grammar predicates will unify with message sequences, e.g.\n<code>sequence(msgpack, Terms)</code> where Terms is a lists of <code>msgpack//1</code> argument\nterms.</p>\n<p>The fundamental layer via <code>msgpack_object//1</code> optimally matches messages to\nfundamental types. Take integers for example. Phrase <code>phrase(msgpack_object(1), Codes)</code> gives you one octet <code>[1]</code> but <code>phrase(msgpack_object(1 000), Codes)</code>\ngives you three, <code>[205, 3, 232]</code>. Yet you still see an integer when you reverse\nthe phrase and ask <code>Codes</code> for their corresponding term.</p>\n<h6>Integer space</h6>\n<p>The <code>msgpack//1</code> implementation does the correct thing when attempting to render\nintegers at integer boundaries; it correctly fails.</p>\n<pre><code class=\"language-prolog\">A is 1 &lt;&lt; 64, phrase(sequence(msgpack, [int(A)]), B)\n</code></pre>\n<p>Prolog utilises the GNU Multiple Precision Arithmetic library when values fall\noutside the bit-width limits of the host machine. Term <code>A</code> exceeds 64 bits in\nthe example above; Prolog happily computes the correct value within integer\nspace but it requires 65 bits at least in order to store the value in an\nordinary flat machine word. Hence fails the phrase when attempting to find a\nsolution to <code>int(A)</code> since no available representation of a MessagePack integer\naccomodates a 65-bit value.</p>\n<p>The same phrase for <code>float(A)</code> <em>will</em> succeed however by rendering a Message\nPack 32-bit float. A float term accepts integers. They convert to equivalent\nfloating-point values; in that case matching IEEE-754 big-endian sequence <code>[95, 0, 0, 0]</code> as a Prolog byte-code list.</p>\n<h6>Useful links</h6>\n<ul>\n<li><a href=\"https://github.com/msgpack/msgpack/blob/master/spec.md\">MessagePack specification</a></li>\n</ul>\n",
    "msgpack_repo_id": "royratcliffe-msgpackc-prolog",
    "msgpack_repo_homepage": "https://msgpack.org/",
    "full_name": "royratcliffe/msgpackc-prolog",
    "owner": "royratcliffe",
    "html_url": "https://github.com/royratcliffe/msgpackc-prolog"
  },
  {
    "msgpack_lang": "Clue",
    "msgpack_quickstart_html": "<h5>MessagePack for Clue</h5>\n<h6>Overview</h6>\n<p>This is a Clue implementation for encoding/decoding <a href=\"https://msgpack.org\">MessagePack</a>.</p>\n<p>Features:</p>\n<ul>\n<li>can distinguish between integer / float / double numbers</li>\n<li>can distinguish between UTF-8 strings and binary data</li>\n<li><a href=\"http://unlicense.org\">public domain license</a></li>\n<li>pretty fast decoding</li>\n</ul>\n<p>Compatible Lua versions:</p>\n<ul>\n<li>Lua 5.4</li>\n<li>Lua 5.3</li>\n<li>LuaJIT (Love2D's only), <strong>NOTE:</strong> X.0 floats will be treated as integers instead of floats</li>\n</ul>\n<p>What's missing:</p>\n<ul>\n<li>extendend types <code>fixent</code></li>\n</ul>\n<p>Example code:</p>\n<pre><code>local msgpack = import('msgpack')\n\nlocal value = msgpack.decode(binary_data) //decode to value\n\nlocal binary_data = msgpack.encode(value) //encode value to MessagePack\n</code></pre>\n<h6>API</h6>\n<h7>msgpack.encode_one(value)</h7>\n<p>Encodes the given value to a binary MessagePack representation. It will return the binary string on succes or <code>nil</code> plus an error message if it fails.</p>\n<p>The encoder will encode strings as MessagePack strings when they are properly UTF-8 encoded otherwise they will become MessagePack binary objects.</p>\n<p>There is also a check if a number can be lossless encoded as a 32-bit float.</p>\n<blockquote>\n<p><strong>NOTE:</strong> Empty tables will be encoded as empty arrays!</p>\n</blockquote>\n<blockquote>\n<p><strong>NOTE:</strong> Functions inside non-array tables will be ignored, otherwise they will be converted to nil!</p>\n</blockquote>\n<h7>msgpack.encode(...)</h7>\n<p>Encodes all given values to a binary MessagePack representation. It will return the binary string or <code>nil</code> plus an error message if it fails.</p>\n<pre><code>local binary = msgpack.encode('Hello', 1024, true, { 2, 3, 4 })\n</code></pre>\n<h7>msgpack.decode_one(binary_data[, position])</h7>\n<p>Decode the given MessagePack binary string to a corresponding value. It will return the decoded value and the position for next byte in stream\nor <code>nil</code> plus an error message if decoding went wrong. You can use the returned position to decode multiple MessagePack values in a stream.</p>\n<p>The optional position argument is used to start the decoding at a specific position inside the the binary_data string.</p>\n<blockquote>\n<p><strong>NOTE:</strong> Extended types are not supported. Decoding will fail!</p>\n</blockquote>\n<blockquote>\n<p><strong>NOTE:</strong> Binary data will be decoded as strings</p>\n</blockquote>\n<blockquote>\n<p><strong>NOTE:</strong> Arrays will be decoded astables starting with index 1</p>\n</blockquote>\n<blockquote>\n<p><strong>NOTE:</strong> Values which are <code>nil</code> will cause the key, value pair to disappear in a table (that's how it works in Lua)</p>\n</blockquote>\n<h7>msgpack.decode(binary_data[, position])</h7>\n<p>Decode the given MessagePack binary string to one or more values. It will return all decoded values or <code>nil</code> plus an error message if decoding failed.</p>\n<pre><code>local a, b, c = msgpack.decode(binary)\n</code></pre>\n<h6>License</h6>\n<pre><code>This is free and unencumbered software released into the public domain.\n\nAnyone is free to copy, modify, publish, use, compile, sell, or\ndistribute this software, either in source code form or as a compiled\nbinary, for any purpose, commercial or non-commercial, and by any\nmeans.\n\nIn jurisdictions that recognize copyright laws, the author or authors\nof this software dedicate any and all copyright interest in the\nsoftware to the public domain. We make this dedication for the benefit\nof the public at large and to the detriment of our heirs and\nsuccessors. We intend this dedication to be an overt act of\nrelinquishment in perpetuity of all present and future rights to this\nsoftware under copyright law.\n\nTHE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\nFor more information, please refer to &lt;http://unlicense.org/&gt;\n</code></pre>\n",
    "msgpack_repo_id": "Rosy-iso-msgpack-clue",
    "msgpack_repo_homepage": "https://github.com/Rosy-iso/msgpack-clue",
    "full_name": "Rosy-iso/msgpack-clue",
    "owner": "Rosy-iso",
    "html_url": "https://github.com/Rosy-iso/msgpack-clue"
  },
  {
    "msgpack_lang": "JavaScript",
    "msgpack_quickstart_html": "<h5>msgpack-js-micro</h5>\n<p>msgpack - A fast, lightweight, and extremely compatible JS implementation of the <a href=\"https://msgpack.org/\">msgpack</a> data encoding format.</p>\n<p>This is a simple, small, and very portable Javascript implementation of msgpack. Runs on browsers (back as far as IE5) as well as Node.js.</p>\n<p><strong>Browser:</strong></p>\n<pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;msgpack.min.js&quot;&gt;&lt;/script&gt;\n&lt;script type=&quot;text/javascript&quot;&gt;\nvar obj = {\n  &quot;hello&quot;: &quot;world&quot;,\n  utf8: &quot;\\udead\\ubeef&quot;, // strings are utf8-encoded by default\n  37: 79.995,\n  ar: [1, 2, 3],\n  buffer: Uint8Array([1,2,3]), // uses msgpack's binary format\n  date: new Date(2019,1,1), // Date instances use msgpack's Timestamp extension format\n  bigint: 31415926535897932384n, // large enough BigInts will be encoded as 64bit ints\n};\n\n// use msgpack directly:\n\nvar encoded = msgpack.encode(obj);\n\nvar decoded = msgpack.decode(encoded);\n\nconsole.log(decoded);\n\n// or create msgpack instances:\n\nvar myMsgPack = new msgpack(\n  {returnType: &quot;arraybuffer&quot;},\n  {binaryType: &quot;arraybuffer&quot;}\n);\n\nencoded = myMsgPack.encode(obj);\n\ndecoded = myMsgPack.decode(obj);\n\nconsole.log(decoded);\n\n&lt;/script&gt;\n</code></pre>\n<p><strong>Node.js:</strong></p>\n<pre><code>const msgpack = require(&quot;./msgpack.min.js&quot;);\n\nvar obj = {\n  &quot;hello&quot;: &quot;world&quot;,\n  utf8: &quot;\\udead\\ubeef&quot;, // strings are utf8-encoded by default\n  37: 79.995,\n  ar: [1, 2, 3],\n  buffer: Uint8Array([1,2,3]), // uses msgpack's binary format\n  date: new Date(2019,1,1), // Date instances use msgpack's Timestamp extension format\n  bigint: 31415926535897932384n, // large enough BigInts will be encoded as 64bit ints\n};\n\n// use msgpack directly:\n\nvar encoded = msgpack.encode(obj);\n\nvar decoded = msgpack.decode(encoded);\n\nconsole.log(decoded);\n\n// or create msgpack instances:\n\nvar myMsgPack = new msgpack(\n  {returnType: &quot;arraybuffer&quot;},\n  {binaryType: &quot;arraybuffer&quot;}\n);\n\nencoded = myMsgPack.encode(obj);\n\ndecoded = myMsgPack.decode(obj);\n\nconsole.log(decoded);\n</code></pre>\n<p>Fully supports custom type extensions:</p>\n<pre><code>// Sample &quot;BigInt&quot; type extension\n\nmsgpack.extend({\n  type: 1, // msgpack code\n\n  varType: &quot;bigint&quot;, // watch value-type\n\n  encode(n) { // encoder (return `false` to skip; see reference for details)\n    var final = n &lt; 0n ? -1n : 0n,\n      c = 0n, str = &quot;&quot;;\n\n    while(n !== final) {\n      c = n &amp; 255n;\n      str += String.fromCharCode(Number(c));\n      n &gt;&gt;= 8n;\n    }\n    // add another digit if the high bit doesn't indicate the sign:\n    if((c &amp; 0x80n) !== (final &amp; 0x80n))\n      str += String.fromCharCode(Number(final &amp; 255n));\n\n    return str;\n  },\n\n  decode(s) { // decoder\n    var n = 0n, c = 0n;\n\n    for(var i=0n; i&lt;s.length;i++) {\n      c = BigInt(s.charCodeAt(Number(i)));\n      n |= c &lt;&lt; i*8n;\n    }\n    if(c &amp; 0x80n) n |= -1n &lt;&lt; BigInt(s.length)*8n;\n\n    return n;\n  }\n});\n</code></pre>\n<p>Visit <a href=\"https://github.com/CodeSmith32/msgpack-js-micro\">github.com/CodeSmith32/msgpack-js-micro</a> for the usage reference.</p>\n",
    "msgpack_repo_id": "CodeSmith32-msgpack-js-micro",
    "msgpack_repo_homepage": "https://github.com/CodeSmith32/msgpack-js-micro",
    "full_name": "CodeSmith32/msgpack-js-micro",
    "owner": "CodeSmith32",
    "html_url": "https://github.com/CodeSmith32/msgpack-js-micro"
  },
  {
    "msgpack_lang": "Ruby",
    "msgpack_quickstart_html": "<h5>MPLight</h5>\n<ul>\n<li>Ruby library</li>\n<li>Yet another implementation of the <a href=\"http://msgpack.org\">MessagePack</a>\nprotocol/format</li>\n<li>Designed to be as small as possible. Clean code, no dependecies, no\nfrills, no wokeness.</li>\n</ul>\n<p>RubyGems install:</p>\n<pre><code>gem install mplight\n</code></pre>\n<p>If you like to reduce dependencies, you might prefer to copy the ~300\nlines of Ruby code into your project. See\n<a href=\"https://github.com/BertramScharpf/ruby-nvim\">Ruby-Nvim</a> for an example.</p>\n<h6>Usage</h6>\n<pre><code class=\"language-ruby\">require &quot;mplight&quot;\nIO.pipe do |r,w|\n  t = MPLight::Types.new\n\n  t.extend MPLight::Packer\n  t.init_output w\n  t.put %w(foo bar baz)\n\n  t.extend MPLight::Unpacker\n  t.init_input r\n  puts t.get.inspect\nend\n</code></pre>\n<p>Usage with <a href=\"https://neovim.io/\">Neovim</a>:</p>\n<pre><code class=\"language-ruby\">require &quot;mplight&quot;\nrequire &quot;yaml&quot;\nIO.popen %w(nvim --api-info) do |r|\n  t = MPLight::Types.new\n  t.extend MPLight::Unpacker\n  t.init_input r\n  puts t.get.to_yaml\nend\n</code></pre>\n<p>See the <a href=\"testit\"><code>testit</code></a> file for further examples.</p>\n<h6>Sister Project</h6>\n<p>This library was written together with the\n<a href=\"https://github.com/BertramScharpf/ruby-nvim\">Ruby-Nvim</a>.</p>\n<h6>Copyright</h6>\n<ul>\n<li>(C) 2024 Bertram Scharpf <a href=\"mailto:software@bertram-scharpf.de\">software@bertram-scharpf.de</a></li>\n<li>License: <a href=\"LICENSE\">BSD-2-Clause+</a></li>\n</ul>\n",
    "msgpack_repo_id": "BertramScharpf-ruby-mplight",
    "msgpack_repo_homepage": "https://github.com/BertramScharpf/ruby-mplight",
    "full_name": "BertramScharpf/ruby-mplight",
    "owner": "BertramScharpf",
    "html_url": "https://github.com/BertramScharpf/ruby-mplight"
  },
  {
    "msgpack_lang": "C++11",
    "msgpack_quickstart_html": "<h5>wad</h5>\n<p><a href=\"https://github.com/ToruNiina/wad/actions\"><img src=\"https://github.com/ToruNiina/wad/workflows/C/C++%20CI/badge.svg?branch=master\" alt=\"C/C++ CI\"></a>\n<a href=\"https://github.com/ToruNiina/wad/releases\"><img src=\"https://img.shields.io/github/release/ToruNiina/wad.svg?style=flat\" alt=\"Version\"></a>\n<a href=\"LICENSE\"><img src=\"https://img.shields.io/github/license/ToruNiina/wad\" alt=\"LICENSE\"></a></p>\n<p>serialize/deserialize into/from msgpack.</p>\n<pre><code class=\"language-cpp\">#include &lt;map&gt;\n#include &lt;vector&gt;\n#include &lt;string&gt;\n#include &lt;wad/default_archiver.hpp&gt;\n#include &lt;wad/interface.hpp&gt;\n#include &lt;wad/in_place.hpp&gt;\n#include &lt;wad/string.hpp&gt;\n#include &lt;wad/vector.hpp&gt;\n#include &lt;wad/map.hpp&gt;\n\nnamespace user\n{\nstruct defined\n{\n    std::string         name;\n    std::vector&lt;double&gt; values;\n    std::map&lt;std::string, int&gt; nums;\n\n    template&lt;typename Archiver&gt;\n    bool archive(Archiver&amp; arc) const\n    {\n        return wad::archive&lt;wad::type::map&gt;(arc,\n            &quot;name&quot;, name, &quot;values&quot;, values, &quot;nums&quot;, nums);\n    }\n};\n} // user\n\nint main()\n{\n    std::vector&lt;user::defined&gt; uds = {/* ... */};\n\n    wad::write_archive sink;\n    if(!wad::save(sink, uds)) {return 1;}\n    sink.dump(&quot;checkpoint.msg&quot;);\n\n    // ...\n\n    wad::read_archive src(&quot;checkpoint.msg&quot;);\n    if(!wad::load(src, uds)) {return 1;}\n\n    // ...\n\n    return 0;\n}\n</code></pre>\n<p>The user-interface is strongly inspired by\n<a href=\"http://www.boost.org/doc/libs/release/libs/serialization/doc/index.html\">Boost.serialization</a>\nand <a href=\"https://uscilab.github.io/cereal/\">cereal</a>.</p>\n<h6>Table of Contents</h6>\n<ul>\n<li><a href=\"#motivation\">Motivation</a></li>\n<li><a href=\"#supported-types\">Supported Types</a></li>\n<li><a href=\"#user-defined-class\">User-defined Class</a></li>\n<li><a href=\"#subclass\">Subclass</a></li>\n<li><a href=\"#archiver-requirements\">Archiver Requirements</a></li>\n<li><a href=\"#references\">References</a></li>\n<li><a href=\"#licensing-terms\">Licensing Terms</a></li>\n</ul>\n<h6>Motivation</h6>\n<p><strong>wad</strong> does not intend to be a general-purpose msgpack parser. It directly\nserializes your class into and deserializes your class from msgpack, without\nany internal representation.</p>\n<p><strong>wad</strong> does not plan to be a multi-format serializer. It uses msgpack only.</p>\n<p><strong>wad</strong> intends to be a simple, small library that enables you to serialize and\ndeserialize your class into/from msgpack.</p>\n<h6>Supported Types</h6>\n<p>Basic types and STL classes listed below are supported. By including the header\nfile, you can save/load it into/from msgpack.</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">types</th>\n<th style=\"text-align:left\">header file</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>bool</code></td>\n<td style=\"text-align:left\"><code>wad/boolean.hpp</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">integers</td>\n<td style=\"text-align:left\"><code>wad/integer.hpp</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">enums</td>\n<td style=\"text-align:left\"><code>wad/enum.hpp</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>float</code> and <code>double</code></td>\n<td style=\"text-align:left\"><code>wad/floating.hpp</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>std::complex</code></td>\n<td style=\"text-align:left\"><code>wad/complex.hpp</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>std::string</code></td>\n<td style=\"text-align:left\"><code>wad/string.hpp</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>std::vector</code></td>\n<td style=\"text-align:left\"><code>wad/vector.hpp</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>std::array</code></td>\n<td style=\"text-align:left\"><code>wad/array.hpp</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>std::deque</code></td>\n<td style=\"text-align:left\"><code>wad/deque.hpp</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>std::list</code></td>\n<td style=\"text-align:left\"><code>wad/list.hpp</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>std::forward_list</code></td>\n<td style=\"text-align:left\"><code>wad/forward_list.hpp</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>std::valarray</code></td>\n<td style=\"text-align:left\"><code>wad/valarray.hpp</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>std::set</code></td>\n<td style=\"text-align:left\"><code>wad/set.hpp</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>std::unordered_set</code></td>\n<td style=\"text-align:left\"><code>wad/unordered_set.hpp</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>std::map</code></td>\n<td style=\"text-align:left\"><code>wad/map.hpp</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>std::unordered_map</code></td>\n<td style=\"text-align:left\"><code>wad/unordered_map.hpp</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>std::pair</code></td>\n<td style=\"text-align:left\"><code>wad/pair.hpp</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>std::tuple</code></td>\n<td style=\"text-align:left\"><code>wad/tuple.hpp</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>std::queue</code></td>\n<td style=\"text-align:left\"><code>wad/queue.hpp</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>std::unique_ptr</code></td>\n<td style=\"text-align:left\"><code>wad/unique_ptr.hpp</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>std::atomic</code></td>\n<td style=\"text-align:left\"><code>wad/atomic.hpp</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>std::bitset</code></td>\n<td style=\"text-align:left\"><code>wad/bitset.hpp</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>std::optional</code></td>\n<td style=\"text-align:left\"><code>wad/optional.hpp</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">RNGs (e.g. <code>mt19937</code>)</td>\n<td style=\"text-align:left\"><code>wad/random.hpp</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">user-defined classes</td>\n<td style=\"text-align:left\"><code>wad/interface.hpp</code></td>\n</tr>\n</tbody>\n</table>\n<h6>User-defined Class</h6>\n<p>By defining one of the following member or non-member functions,\nyou can serialize your class to msgpack with <strong>wad</strong>.</p>\n<h7>save() and load() member methods</h7>\n<p><code>wad::save(arc, x)</code> function finds your <code>x.save(arc)</code> member method. The same\napplies to <code>wad::load</code>.</p>\n<p>Because <code>save</code> function does not change the state of <code>*this</code> object, it must be\nmarked as <code>const</code>. On the other hand, <code>load</code> must not be marked as <code>const</code>.</p>\n<pre><code class=\"language-cpp\">struct X\n{\n    std::string  a;\n    double       b;\n    std::int32_t c;\n\n    template&lt;typename Archiver&gt;\n    bool save(Archiver&amp; arc) const\n    {\n        return wad::save&lt;wad::type::map&gt;(arc, &quot;a&quot;, a, &quot;b&quot;, b, &quot;c&quot;, c);\n    }\n    template&lt;typename Archiver&gt;\n    bool load(Archiver&amp; arc)\n    {\n        return wad::load&lt;wad::type::map&gt;(arc, &quot;a&quot;, a, &quot;b&quot;, b, &quot;c&quot;, c);\n    }\n};\n</code></pre>\n<h7>Non-intrusive save() and load() methods</h7>\n<p><strong>wad</strong> finds <code>save</code> and <code>load</code> function through argument dependent lookup (ADL).\nIf you define <code>save</code> and <code>load</code> function in your <code>namespace</code>, <strong>wad</strong> calls them.</p>\n<pre><code class=\"language-cpp\">namespace foo {\nstruct X\n{\n    std::string  a;\n    double       b;\n    std::int32_t c;\n};\ntemplate&lt;typename Archiver&gt;\nbool save(Archiver&amp; arc, const X&amp; x)\n{\n    return wad::save&lt;wad::type::map&gt;(arc, &quot;a&quot;, x.a, &quot;b&quot;, x.b, &quot;c&quot;, x.c);\n}\ntemplate&lt;typename Archiver&gt;\nbool load(Archiver&amp; arc, X&amp; x)\n{\n    return wad::save&lt;wad::type::map&gt;(arc, &quot;a&quot;, x.a, &quot;b&quot;, x.b, &quot;c&quot;, x.c);\n}\n} // namespace foo\n</code></pre>\n<h7>archive() method</h7>\n<p>In many cases, the <code>save()</code> and <code>load()</code> function looks similar.</p>\n<p><code>archive</code> method works in both ways, save and load, depending on the archiver\npassed.</p>\n<p>Because it loads and changes the state of <code>*this</code> object, it must not be\nmarked as <code>const</code>.</p>\n<pre><code class=\"language-cpp\">struct X\n{\n    std::string  a;\n    double       b;\n    std::int32_t c;\n\n    template&lt;typename Archiver&gt;\n    bool archive(Archiver&amp; arc)\n    {\n        return wad::archive&lt;wad::type::map&gt;(arc, &quot;a&quot;, a, &quot;b&quot;, b, &quot;c&quot;, c);\n    }\n};\n</code></pre>\n<h6>Subclass</h6>\n<p>Currently, loading a polymorphic type through <code>archive</code> method is not supported.</p>\n<p>To save the state of the base class, pass <code>base_of&lt;Base&gt;(this)</code> to <code>wad::save</code>\nand <code>load</code> function. It should be passed as the second argument, immediately\nafter <code>archiver</code>.</p>\n<pre><code class=\"language-cpp\">struct Base\n{\n    std::string  s;\n    virtual ~Base() = default;\n\n    template&lt;typename Arc&gt;\n    bool save(Arc&amp; arc) const\n    {\n        return wad::save&lt;wad::type::map&gt;(arc, &quot;s&quot;, s);\n    }\n    template&lt;typename Arc&gt;\n    bool load(Arc&amp; arc)\n    {\n        return wad::load&lt;wad::type::map&gt;(arc, &quot;s&quot;, s);\n    }\n};\n\nstruct Derived : Base\n{\n    std::int32_t i;\n    double       d;\n    ~Derived() override = default;\n\n    template&lt;typename Arc&gt;\n    bool save(Arc&amp; arc) const\n    {\n        return wad::save&lt;wad::type::map&gt;(arc,\n                wad::base_of&lt;Base&gt;(this), &quot;i&quot;, i, &quot;d&quot;, d);\n    }\n    template&lt;typename Arc&gt;\n    bool load(Arc&amp; arc)\n    {\n        return wad::load&lt;wad::type::map&gt;(arc,\n                wad::base_of&lt;Base&gt;(this), &quot;i&quot;, i, &quot;d&quot;, d);\n    }\n};\n</code></pre>\n<p>To load <code>Derived</code> through <code>Base</code>, you need to tell the relationship to the\npolymorphic loader and define the name of the derived type.\nTo achieve that, specialize the following class.</p>\n<pre><code class=\"language-cpp\">namespace wad {\ntemplate&lt;&gt;\nstruct register_subclass&lt;extlib::Base, extlib::Derived&gt;\n{\n    static constexpr const char* name() noexcept {return &quot;extlib::Derived&quot;;}\n    static const registered&lt;extlib::Base, extlib::Derived&gt; bound;\n};\nconst registered&lt;extlib::Base, extlib::Derived&gt;\n    register_subclass&lt;extlib::Base, extlib::Derived&gt;::bound;\n} /* wad */\n</code></pre>\n<h6>Archiver requirements</h6>\n<p>You can use your own archive class in <code>wad::save</code>, <code>wad::load</code>, <code>wad::archive</code>\nfunctions.</p>\n<p>Note: <code>wad::archive(arc, ...)</code> function checks if <code>arc</code> has <code>sink()</code> or <code>src()</code>\nmethod and dispatch <code>save(arc, ...)</code> or <code>load(arc, ...)</code> depending on the\nprovided member method. If <code>arc</code> supports both, the overload resolution becomes\nambiguous. To use <code>wad::archive</code> method with your archiver, it should have only\none of those member methods.</p>\n<h7>Writable archiver requiremnets</h7>\n<pre><code class=\"language-cpp\">class write_archiver\n{\n  public:\n    // return type of sink.\n    using sink_iterator = Iterator;\n\n    // Return an iterator through which the binary will be written.\n    // iterator value_type should be a `char`.\n    Iterator sink() noexcept;\n\n    // Check if we can write some bytes in to the buffer.\n    bool is_writable(const std::size_t) const noexcept;\n\n    // Advance the internal pointer.\n    void advance(const std::size_t) noexcept;\n\n    // Retrace the internal pointer.\n    void retrace(const std::size_t) noexcept;\n\n    // Save the current location\n    Location npos() const noexcept;\n\n    // restore the status to the passed location\n    void seek(const Location&amp;) noexcept;\n};\n</code></pre>\n<h7>Readable archiver requiremnets</h7>\n<pre><code class=\"language-cpp\">class read_archiver\n{\n  public:\n\n    // return type of sink.\n    using src_iterator = Iterator;\n\n    // Return an iterator through which the binary will be read.\n    // iterator value_type should be a `char`.\n    Iterator src() const noexcept;\n\n    // Check if we can read some bytes in to the buffer.\n    bool is_readable(const std::size_t) const noexcept;\n\n    // Advance the internal pointer.\n    void advance(const std::size_t) noexcept;\n\n    // Retrace the internal pointer.\n    void retrace(const std::size_t) noexcept;\n\n    // Save the current location\n    Location npos() const noexcept;\n\n    // Restore the status to the passed location\n    void seek(const Location&amp;) noexcept;\n};\n</code></pre>\n<h7>Binding your archiver to the polymorphic loader</h7>\n<p>To use your archiver with a polymorphic class, you need to bind them explicitly\nto subclass relationships. By specifying your archiver as type arguments of\n<code>bind_archivers</code> that will be passed to the <code>registere_subclass::bound</code>, the\npolymorphic loader will recognize your archiver.</p>\n<pre><code class=\"language-cpp\">namespace wad {\ntemplate&lt;&gt;\nstruct register_subclass&lt;extlib::Base, extlib::Derived&gt;\n{\n    static constexpr const char* name() noexcept {return &quot;extlib::Derived&quot;;}\n    static const registered&lt;extlib::Base, extlib::Derived&gt; bound;\n};\nconst registered&lt;extlib::Base, extlib::Derived&gt;\n    register_subclass&lt;extlib::Base, extlib::Derived&gt;::bound(\n        bind_archivers&lt;your_write_archiver, your_read_archiver&gt;{});\n} /* wad */\n</code></pre>\n<h6>Reference</h6>\n<h6>Licensing terms</h6>\n<p>This product is licensed under the terms of the <a href=\"LICENSE\">MIT License</a>.</p>\n<ul>\n<li>Copyright (c) 2020 Toru Niina</li>\n</ul>\n<p>All rights reserved.</p>\n",
    "msgpack_repo_id": "ToruNiina-wad",
    "msgpack_repo_homepage": "https://github.com/ToruNiina/wad",
    "full_name": "ToruNiina/wad",
    "owner": "ToruNiina",
    "html_url": "https://github.com/ToruNiina/wad"
  },
  {
    "msgpack_lang": "C++17",
    "msgpack_quickstart_html": "<h5>msgpack_cpp</h5>\n<p>C++ header-only msgpack library using kiss principle</p>\n<h6>Example</h6>\n<h7>High-level objects</h7>\n<h8><code>std::tuple</code></h8>\n<pre><code>using namespace msgpackcpp;\n\nstd::tuple&lt;int, float, std::string&gt; a(1, 3.14, &quot;Hello there!&quot;);\n\nstd::vector&lt;char&gt; buf;\n\n// Creates a lambda which captures `buf` by reference and appends data to it when invoked\nauto out = sink(buf); \n\n// The first argument can be any function object with signature void(const char* data, size_t len)\nserialize(out, a);\n\n// Creates a mutable lambda which captures `buf` by reference and reads data from it when invoked\nauto in = source(buf); \n\n// The first argument can be any function object with signature void(char* data, size_t len)\ndeserialize(in, a);\n</code></pre>\n<h8><code>std::vector</code></h8>\n<pre><code>using namespace msgpackcpp;\n\nstd::vector&lt;int&gt; v1(10);\nstd::iota(begin(v1), end(v1), 0);\nstd::vector&lt;int&gt; v2;\n\n// You can also serialize into an ostream object\nstd::ostringstream sout;\nauto out = sink(sout);\nserialize(out, v1);\n\n// Deserialize from an istream object\nstd::istringstream sin(sout.str());\nauto in = source(sin);\ndeserialize(in, v2);\n</code></pre>\n<h8><code>std::map</code></h8>\n<pre><code>using namespace msgpackcpp;\n\nstd::map&lt;std::string, int&gt; a = {{&quot;a&quot;, 1}, {&quot;b&quot;, 2}};\nstd::map&lt;std::string, int&gt; b;\n\nstd::vector&lt;char&gt; buf;\nauto out = sink(buf);\nserialize(out, a);\n\nauto in = source(buf);\ndeserialize(in, b);\n</code></pre>\n<h8>Custom object</h8>\n<p>Option 1 : define <code>serialize()</code> and <code>deserialize()</code> functions in the same namespace as your custom struct. This will get picked up by ADL.</p>\n<pre><code>namespace mynamespace\n{\n    struct my_struct1\n    {\n        int                 my_int{};\n        float               my_float{};\n        std::string         my_string;\n        std::vector&lt;short&gt;  my_audio;\n    };\n\n    template&lt;class Stream&gt;\n    void serialize(Stream&amp; out, const my_struct1&amp; obj)\n    {\n        using msgpackcpp::serialize;\n        serialize(out, std::tie(obj.my_int, obj.my_float, obj.my_string, obj.my_audio));\n    }\n\n    template&lt;class Source&gt;\n    void deserialize(Source&amp; in, my_struct1&amp; obj)\n    {\n        using msgpackcpp::deserialize;\n        auto members = std::tie(obj.my_int, obj.my_float, obj.my_string, obj.my_audio);\n        deserialize(in, members);\n    }   \n}\n\n...\n\nusing namespace msgpackcpp;\n\nmynamespace::my_struct1 a = {1, 3.14, &quot;hello there&quot;, {0, 1, 2, 3, 4}};\nmynamespace::my_struct1 b;\n\nstd::vector&lt;char&gt; buf;\nauto out = sink(buf);\nserialize(out, a);\n\nauto in = source(buf);\ndeserialize(in, b);\n</code></pre>\n<p>Option 2 : use Boost.Describe to describe your struct</p>\n<pre><code>#include &lt;boost/describe/class.hpp&gt;\n#include &lt;msgpack_describe.h&gt;\n\nnamespace mynamespace2\n{\n    struct my_struct2\n    {\n        int                 my_int{};\n        float               my_float{};\n        std::string         my_string;\n        std::vector&lt;short&gt;  my_audio;\n    };\n\n    BOOST_DESCRIBE_STRUCT(my_struct2, (), (my_int, my_float, my_string, my_audio)) \n}\n\n...\n\nusing namespace msgpackcpp;\n\nmynamespace2::my_struct2 a = {1, 3.14, &quot;hello there&quot;, {0, 1, 2, 3, 4}};\nmynamespace2::my_struct2 b;\n\nstd::vector&lt;char&gt; buf;\nauto out = sink(buf);\n\n// You can serialize your struct like a std::map, \n// where the member variable names are string keys. \n// Or you can serialize like a std::tuple where there are no keys. \n// The latter creates a smaller serialized buffer.\nserialize(out, a, /*as_map=*/true); \n\nauto in = source(buf);\ndeserialize(in, b, /*as_map=*/true);\n</code></pre>\n<h6>Installation</h6>\n<p>Just copy the contents of the include folder in your project with <code>msgpack_describe.h</code> as an optional header.</p>\n<h6>Dependencies</h6>\n<p>You just need a C++17 compiler. If you want to avail yourself of the convenient Boost.Describe integration in <code>msgpack_describe.h</code>, then you'll require that Boost library.</p>\n",
    "msgpack_repo_id": "pfeatherstone-msgpack_cpp",
    "msgpack_repo_homepage": "https://github.com/pfeatherstone/msgpack_cpp",
    "full_name": "pfeatherstone/msgpack_cpp",
    "owner": "pfeatherstone",
    "html_url": "https://github.com/pfeatherstone/msgpack_cpp"
  },
  {
    "msgpack_lang": "MoonBit",
    "msgpack_quickstart_html": "<h5>messagepack moonvalue</h5>\n<p>Bson serializer MessagePack serializer implementation for Moonbitlang</p>\n<h5>decode msgpack</h5>\n<p>You can use the <em>MsgPackParser::new</em> function to parse the binary data of a msgpack. The parameter shareBinary indicates whether to share binary content. If enabled, VT-ShareString will be used,\nVT_ShareBin, VT_ShareExt, and other shared binary data contents are parsed when needed (ensuring the security and lifecycle of the shared binary data). The parameter binary represents the binary data to be decoded, the parameter utf8Reader is used to customize the user to read the utf8 string function, and the parameter binReader is used to read the decoded binary function</p>\n<p><em>MsgPackParser::newparser_with_str_array</em> will create a <strong>MgPackParser[String,Array[Byte]]</strong>, which will parse <strong>MoonValue [String,Array[Byte]]</strong>, using Moonbit string for strings and Array[Byte] for binary</p>\n<p><em>MsgPackParser::newparser_with_str_bytes</em> will create a <strong>MgPackParser[String,Bytes]</strong>, which will parse <strong>MoonValue [String,Bytes]</strong>, using Moonbit string for strings and Bytes for binary</p>\n<pre><code class=\"language-MoonBit\">let b : Array[Byte] = [\n  134, 164, 110, 97, 109, 101, 169, 228, 184, 141, 229, 190, 151, 233, 151, 178,\n  163, 97, 103, 101, 40, 163, 109, 101, 110, 195, 163, 110, 111, 119, 203, 64,\n  230, 69, 246, 246, 72, 195, 95, 167, 99, 117, 114, 116, 105, 109, 101, 215, 255,\n  69, 36, 64, 76, 103, 60, 86, 173, 165, 97, 114, 114, 97, 121, 146, 34, 205, 1,\n  89,\n]\nlet parser : MsgPackParser[String, Array[Byte]] = MsgPackParser::newparser_with_str_array(true, b)\nmatch parser.parse?() {\n  Ok(result) =&gt; println(result.to_string())\n  _ =&gt; println(&quot;error&quot;)\n}\n</code></pre>\n<h5>encode msgpack</h5>\n<p>you can use MsgpackEncoder</p>\n<pre><code class=\"language-MoonBit\">let w: Array[Byte] = Array::new()\nlet encoder = MsgpackEncoder::new(w)\nencoder.encode(result)\nprintln(w)\n</code></pre>\n<h5>decode bson</h5>\n<p>You can use the <em>BsonParser::new</em> function to parse the binary data of a msgpack</p>\n<pre><code class=\"language-MoonBit\">  let arr : Array[Byte] = [\n    98, 1, 0, 0, 16, 49, 0, 255, 255, 255, 255, 1, 100, 111, 117, 98, 108, 101, 230,\n    181, 174, 231, 130, 185, 230, 149, 176, 0, 46, 144, 160, 248, 49, 182, 64, 64,\n    16, 78, 111, 0, 1, 0, 0, 0, 2, 229, 167, 147, 229, 144, 141, 0, 10, 0, 0, 0,\n    228, 184, 141, 229, 190, 151, 233, 151, 178, 0, 3, 105, 110, 102, 111, 0, 66,\n    0, 0, 0, 16, 97, 103, 101, 0, 38, 0, 0, 0, 8, 105, 115, 109, 101, 110, 0, 1,\n    2, 103, 105, 116, 104, 117, 98, 0, 32, 0, 0, 0, 104, 116, 116, 112, 115, 58,\n    47, 47, 103, 105, 116, 104, 117, 98, 46, 99, 111, 109, 47, 115, 117, 105, 121,\n    117, 110, 111, 110, 103, 104, 101, 110, 0, 0, 4, 115, 116, 117, 100, 101, 110,\n    116, 115, 0, 205, 0, 0, 0, 3, 48, 0, 99, 0, 0, 0, 2, 110, 97, 109, 101, 0, 11,\n    0, 0, 0, 228, 184, 141, 229, 190, 151, 233, 151, 178, 49, 0, 16, 97, 103, 101,\n    0, 38, 0, 0, 0, 8, 105, 115, 119, 111, 109, 101, 110, 0, 0, 2, 103, 105, 116,\n    104, 117, 98, 0, 42, 0, 0, 0, 104, 116, 116, 112, 115, 58, 47, 47, 103, 105,\n    116, 104, 117, 98, 46, 99, 111, 109, 47, 115, 117, 105, 121, 117, 110, 111, 110,\n    103, 104, 101, 110, 47, 109, 111, 111, 110, 118, 97, 108, 117, 101, 0, 0, 10,\n    49, 0, 3, 50, 0, 92, 0, 0, 0, 2, 110, 97, 109, 101, 0, 5, 0, 0, 0, 103, 105,\n    114, 108, 0, 16, 97, 103, 101, 0, 39, 0, 0, 0, 8, 105, 115, 119, 111, 109, 101,\n    110, 0, 1, 2, 103, 105, 116, 104, 117, 98, 0, 41, 0, 0, 0, 104, 116, 116, 112,\n    115, 58, 47, 47, 103, 105, 116, 104, 117, 98, 46, 99, 111, 109, 47, 115, 117,\n    105, 121, 117, 110, 111, 110, 103, 104, 101, 110, 47, 100, 97, 116, 101, 116,\n    105, 109, 101, 0, 0, 0, 0,\n  ]\n  let parser : BsonParser[String, Array[Byte]] = BsonParser::newparser_with_str_array(false, arr)\n  match parser.parse?() {\n    Ok(v) =&gt; {\n      inspect!(v[&quot;students&quot;].unwrap()[&quot;1&quot;].unwrap().to_string(), content=&quot;null&quot;)\n      println(v.to_string())\n    }\n    Err(e) =&gt; println(e)\n  }\n</code></pre>\n<h5>Design concept</h5>\n<p>VT_String stores string types. As moonbit may generate multiple backends, the string could be either Jstring or moonbit string, so it is designed as a generic type here\nThe type starting with VT_Share*** represents shared memory data. When parsing, it does not perform a copy operation, but directly records the binary block area and binary. VT_ShareString will only be parsed when it is actually needed. Therefore, when using shared mode, it is important to ensure that the shared memory area is valid and not overwritten by writing, otherwise it will result in inconsistent data</p>\n<h5>write moonvalue</h5>\n<p>You can create objects or array types using functions such as <em>@moonvalue.new_object</em> , <em>new_array</em>, etc. Set map key value pairs using <em>set_key</em>*** _  related functions, and IntMap key value pairs  using set_intkey_***<br>\nSet_index_*** Set array value</p>\n<pre><code class=\"language-MoonBit\">let v : @moonvalue.MoonValue[String, Bytes] = @moonvalue.new_object({})\nv.set_key_string(&quot;name&quot;, &quot;dxsoft&quot;)\nlet child = @moonvalue.new_object({})\nchild.set_key_string(&quot;name&quot;, &quot;huzimo&quot;)\nlet cc = child.add_key_object(&quot;children&quot;, StrMap)\ncc.set_key_int(&quot;age&quot;, 234)\nv[&quot;children&quot;] = child\nprintln(child.to_string())\nprintln(child.parent().unwrap().to_string())\nlet c = v.add_key_object(&quot;name&quot;, StrMap)\nc.set_key_int(&quot;year&quot;, 123)\nlet m = c[&quot;year&quot;].unwrap().add_key_object(&quot;month&quot;, StrMap)\nm.set_key_string(&quot;y&quot;, &quot;gg&quot;)\nprintln(v.to_string())\nprintln(c[&quot;year&quot;].unwrap().parent().unwrap().to_string())\n</code></pre>\n<h5>read moonvalue</h5>\n<p>A function similar to xxx_by_key reads data from the map type<br>\neg.</p>\n<blockquote>\n<p>string_by_key read string from map<br>\nbool_by_key read bool from map<br>\nvalue_by_key return MoonValue from map</p>\n</blockquote>\n<p>A function similar to xxx_by_index reads data from an array<br>\neg.</p>\n<blockquote>\n<p>string_by_index read string from array<br>\nbool_by_index read bool from array<br>\nvalue_by_index return MoonValue from array</p>\n</blockquote>\n<p>as_xxx retrieves the value from Moonvalue\neg.</p>\n<blockquote>\n<p>as_bool<br>\nas_double</p>\n</blockquote>\n<pre><code class=\"language-MoonBit\">assert_eq!(result.string_by_key(&quot;name&quot;,&quot;&quot;),&quot;不得闲&quot;)\nassert_eq!(result.bool_by_key(&quot;men&quot;,false),true)\nassert_eq!(result.value_by_key(&quot;array&quot;).unwrap().int_by_index(1,0),345)\nprintln(result.to_string())\n</code></pre>\n",
    "msgpack_repo_id": "suiyunonghen-moonvalue",
    "msgpack_repo_homepage": "https://www.moonbitlang.cn/",
    "full_name": "suiyunonghen/moonvalue",
    "owner": "suiyunonghen",
    "html_url": "https://github.com/suiyunonghen/moonvalue"
  },
  {
    "msgpack_lang": "Go",
    "msgpack_quickstart_html": "<h5>umsgpack</h5>\n<p>A tiny (micro), simple implementation of <a href=\"https://msgpack.org/\">MessagePack</a>\n(<a href=\"https://github.com/msgpack/msgpack/blob/master/spec.md\">specification</a>).</p>\n<p>Unlike other Go implementations of MessagePack, it more closely adheres to MessagePack's weak type\nsystem. This has advantages and disadvantages, as discussed <a href=\"design.md\">here</a>; in short,\ntransformation between weak types (like <code>map[any]any</code>) and strong types (structs) is left to\npackages like <a href=\"https://github.com/go-viper/mapstructure\">mapstructure</a>.</p>\n<h6>Links</h6>\n<ul>\n<li><a href=\"status.md\">Status</a></li>\n<li><a href=\"CHANGELOG.md\">Changelog</a></li>\n<li><a href=\"https://pkg.go.dev/github.com/viettrungluu/umsgpack#section-documentation\">Documentation</a></li>\n<li><a href=\"design.md\">Design</a></li>\n</ul>\n",
    "msgpack_repo_id": "viettrungluu-umsgpack",
    "msgpack_repo_homepage": "https://github.com/viettrungluu/umsgpack",
    "full_name": "viettrungluu/umsgpack",
    "owner": "viettrungluu",
    "html_url": "https://github.com/viettrungluu/umsgpack"
  },
  {
    "msgpack_lang": "R",
    "msgpack_quickstart_html": "<h5>msgpack2R</h5>\n<p>Convert to and from msgpack objects in R using the official msgpack-c API through Rcpp.</p>\n<p><img src=\"https://raw.githubusercontent.com/traversc/msgpack2R/master/vignettes/msgpack_flowchart.png\" alt=\"flowchart\" title=\"Conversion flowchart\">\n<em>A flowchart describing the conversion of R objects into msgpack objects and back.</em></p>\n<p>Msgpack EXT types are converted to raw vectors with EXT attributes containing the extension type.  The extension type must be an integer from 0 to 127.</p>\n<p>Maps are converted to data.frames with additional class &quot;map&quot;.  Map objects in R contain key and value list columns and can be simplified to named lists or named vectors.  The helper function <code>msgpack_map</code> creates map objects that can be serialized into msgpack.</p>\n<p>For more information on msgpack types, see <a href=\"https://github.com/msgpack/msgpack/blob/master/spec.md\">here</a>.</p>\n<h7>Installation:</h7>\n<ol>\n<li>On Windows, install Rtools (https://cran.r-project.org/bin/windows/Rtools/)</li>\n<li>In R, install devtools: <code>install.packages(&quot;devtools&quot;)</code></li>\n<li><code>library(devtools)</code></li>\n<li><code>install_github(&quot;traversc/msgpack2R&quot;)</code></li>\n</ol>\n<h7>Example:</h7>\n<p>See <code>examples/tests.r</code> for more examples.</p>\n<pre><code>library(msgpack2R)\nlibrary(microbenchmark)\n\nx &lt;- as.list(1:1e7)\nmicrobenchmark(xpk &lt;- msgpack_pack(x), times=3) # ~ 0.5 seconds\nmicrobenchmark(xu &lt;- msgpack_unpack(xpk), times=3) # ~ 2.5-3 seconds\n</code></pre>\n",
    "msgpack_repo_id": "skyformat99-msgpack2R",
    "msgpack_repo_homepage": "https://github.com/skyformat99/msgpack2R",
    "full_name": "skyformat99/msgpack2R",
    "owner": "skyformat99",
    "html_url": "https://github.com/skyformat99/msgpack2R"
  },
  {
    "msgpack_lang": "Arduino/C++",
    "msgpack_quickstart_html": "<h5>MessagePack for Arduino</h5>\n<p><a href=\"https://www.ardu-badge.com/ArduinoJson/\"><img src=\"https://www.ardu-badge.com/badge/ArduinoJson.svg\" alt=\"arduino-library-badge\"></a>\n<a href=\"https://ci.appveyor.com/project/bblanchon/arduinojson/branch/6.x\"><img src=\"https://ci.appveyor.com/api/projects/status/m7s53wav1l0abssg/branch/6.x?svg=true\" alt=\"Build Status\"></a>\n<a href=\"https://travis-ci.org/bblanchon/ArduinoJson\"><img src=\"https://travis-ci.org/bblanchon/ArduinoJson.svg?branch=6.x\" alt=\"Build Status\"></a>\n<a href=\"https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&amp;can=1&amp;q=proj:arduinojson\"><img src=\"https://oss-fuzz-build-logs.storage.googleapis.com/badges/arduinojson.svg\" alt=\"Fuzzing Status\"></a>\n<a href=\"https://coveralls.io/github/bblanchon/ArduinoJson?branch=6.x\"><img src=\"https://coveralls.io/repos/github/bblanchon/ArduinoJson/badge.svg?branch=6.x\" alt=\"Coverage Status\"></a>\n<a href=\"https://github.com/bblanchon/ArduinoJson/stargazers\"><img src=\"https://img.shields.io/github/stars/bblanchon/ArduinoJson?style=flat\" alt=\"GitHub stars\"></a></p>\n<p><a href=\"https://arduinojson.org\">ArduinoJson</a> supports <a href=\"http://msgpack.org/\">MessagePack</a> serialization and deserialization.</p>\n<p>It supports all <a href=\"http://msgpack.org/\">MessagePack</a> features except <a href=\"https://github.com/msgpack/msgpack/blob/master/spec.md#bin-format-family\">bin format</a> and <a href=\"https://github.com/msgpack/msgpack/blob/master/spec.md#timestamp-extension-type\">timestamp</a>.</p>\n<h6>How to install?</h6>\n<p>To install <a href=\"https://arduinojson.org\">ArduinoJson</a>, you can either:</p>\n<ul>\n<li>install the library from the <a href=\"https://www.ardu-badge.com/ArduinoJson/\">Arduino Library Manager</a>,</li>\n<li>install the library from the <a href=\"https://build.particle.io/libs/ArduinoJson/\">Particle Web IDE</a>, or</li>\n<li>download the single header from <a href=\"https://github.com/bblanchon/ArduinoJson/releases/latest/\">the release page</a>.</li>\n</ul>\n<p>See also: <a href=\"https://arduinojson.org/v6/doc/installation/\">How to install ArduinoJson</a> on <a href=\"https://arduinojson.org\">arduinojson.org</a>.</p>\n<h6>How to serialize to MsgPack?</h6>\n<pre><code class=\"language-c++\">StaticJsonDocument&lt;200&gt; doc;\ndoc[&quot;hello&quot;] = &quot;world&quot;;\nserializeMsgPack(doc, Serial);\n</code></pre>\n<p>See also: <a href=\"https://arduinojson.org/v6/api/msgpack/serializemsgpack/\">serializeMsgPack()</a> on <a href=\"https://arduinojson.org\">arduinojson.org</a>.</p>\n<h6>How to deserialize from MsgPack?</h6>\n<pre><code class=\"language-c++\">StaticJsonDocument&lt;200&gt; doc;\ndeserializeMsgPack(doc, input);\nconst char* hello = doc[&quot;hello&quot;];\n</code></pre>\n<p>See also: <a href=\"https://arduinojson.org/v6/api/msgpack/deserializemsgpack/\">deserializeMsgPack()</a> and <a href=\"https://arduinojson.org/v6/example/msgpack-parser/\">MsgPackParser.ino</a> on <a href=\"https://arduinojson.org\">arduinojson.org</a>.</p>\n",
    "msgpack_repo_id": "bblanchon-ArduinoJson-msgpack.org",
    "msgpack_repo_homepage": "https://github.com/bblanchon/ArduinoJson-msgpack.org",
    "full_name": "bblanchon/ArduinoJson-msgpack.org",
    "owner": "bblanchon",
    "html_url": "https://github.com/bblanchon/ArduinoJson-msgpack.org"
  },
  {
    "msgpack_lang": "PackLens",
    "msgpack_quickstart_html": "<h5>PackLens</h5>\n<p><img src=\"https://github.com/PejmanNik/packlens/blob/main/media/icon.png?raw=true\" alt=\"logo\"></p>\n<p>PackLens is a web application and Visual Studio Code extension designed for decoding and searching within MessagePack binary files. It provides an intuitive interface for exploring and analyzing data efficiently.</p>\n<h6>Features</h6>\n<ul>\n<li>📃 <strong>MessagePack Decoding</strong>: Automatically decode and visualize MessagePack (.msgpack) files with ease.</li>\n<li>🔍 <strong>Advanced Search</strong>: Perform custom searches and map data using JavaScript code.</li>\n<li>🔄 <strong>Streaming Support</strong>: Efficiently stream and process large MessagePack files without performance bottlenecks.</li>\n<li>🎯 <strong>Custom Editor</strong>: Seamlessly integrates with VS Code's editor system for a native experience.</li>\n</ul>\n<h6>Installation</h6>\n<h7>From VS Code Marketplace</h7>\n<ol>\n<li>Open Visual Studio Code.</li>\n<li>Navigate to the Extensions view (<code>Ctrl+Shift+X</code>).</li>\n<li>Search for <a href=\"https://marketplace.visualstudio.com/items?itemName=pejmannikram.packlens\">PackLens</a>.</li>\n<li>Click <strong>Install</strong>.</li>\n</ol>\n<h7>Web Application</h7>\n<ol>\n<li>Visit <a href=\"https://packlens.pejmannik.dev\">PackLens Web</a> to use the web interface.</li>\n</ol>\n<h6>Usage</h6>\n<h7>Visual Studio Code Extension</h7>\n<ol>\n<li>Open any <code>.msgpack</code> file in VS Code.</li>\n<li>The file will automatically open in the PackLens viewer.</li>\n<li>Explore the decoded MessagePack data using the interactive interface.</li>\n</ol>\n<p><img src=\"https://github.com/PejmanNik/packlens/blob/main/media/vsc-demo.gif?raw=true\" alt=\"demo-vsc\"></p>\n<h7>Web Application</h7>\n<ol>\n<li>Upload your <code>.msgpack</code> file to the web interface.</li>\n<li>Use the search and visualization tools to analyze your data.</li>\n</ol>\n<p><img src=\"https://github.com/PejmanNik/packlens/blob/main/media/web-demo.gif?raw=true\" alt=\"demo-web\"></p>\n<h6>Development</h6>\n<p>This project uses a monorepo structure with three main packages:</p>\n<h7>Project Structure</h7>\n<pre><code>packages/\n├── common/          # Shared types and utilities for decoding and processing files\n├── vsc/             # Visual Studio Code extension\n└── web/             # React-based web interface\n</code></pre>\n<h6>License</h6>\n<p>This project is licensed under the MIT License. See the <a href=\"LICENSE\">LICENSE</a> file for details.</p>\n<h6>Changelog</h6>\n<p>See <a href=\"CHANGELOG.md\">CHANGELOG.md</a> for release notes and version history.</p>\n",
    "msgpack_repo_id": "PejmanNik-packlens",
    "msgpack_repo_homepage": "https://packlens.pejmannik.dev/",
    "full_name": "PejmanNik/packlens",
    "owner": "PejmanNik",
    "html_url": "https://github.com/PejmanNik/packlens"
  },
  {
    "msgpack_lang": "C++23",
    "msgpack_quickstart_html": "<p><a href=\"https://github.com/ar90n/msgpack23/actions/workflows/ci.yml\"><img src=\"https://img.shields.io/github/actions/workflow/status/ar90n/msgpack23/ci.yml\" alt=\"Build\"></a>\n<a href=\"https://github.com/ar90n/msgpack23/issues\"><img src=\"https://img.shields.io/github/issues/ar90n/msgpack23.svg?style=flat\" alt=\"Issues\"></a>\n<a href=\"https://github.com/ar90n/msgpack23/blob/master/LICENSE.txt\"><img src=\"https://img.shields.io/github/license/ar90n/msgpack23.svg?style=flat\" alt=\"MIT\"></a></p>\n<h5>What is msgpack23 ?</h5>\n<p>msgpack23 is a tiny MsgPack library for C++23, providing MsgPack parsing and serialization.<br>\nThis library is forked from <a href=\"https://github.com/ar90n/msgpack11\">msgpack11</a> to use C++23 features.</p>\n<h5>Installation</h5>\n<ul>\n<li>\n<p>Using CMake</p>\n<pre><code>  git clone git@github.com:ar90n/msgpack23.git\n  mkdir build\n  cd build\n  cmake ..\n  make &amp;&amp; make install\n</code></pre>\n</li>\n</ul>\n<h5>Example</h5>\n<pre><code>MsgPack my_msgpack = MsgPack::object {\n    { &quot;key1&quot;, &quot;value1&quot; },\n    { &quot;key2&quot;, false },\n    { &quot;key3&quot;, MsgPack::array { 1, 2, 3 } },\n};\n\n//access to elements\nstd::cout &lt;&lt; my_msgpack[&quot;key1&quot;].string_value();\n\n//serialize\nstd::string msgpack_bytes = my_msgpack.dump();\n\n//deserialize\nstd::string err;\nMsgPack des_msgpack = MsgPack::parse(msgpack_bytes, err);\n</code></pre>\n<p>There are more specific examples in example.cpp.\nPlease see it.</p>\n<h5>Feature</h5>\n<ul>\n<li>Support serialization and deserialization.</li>\n</ul>\n<h5>Acknowledgement</h5>\n<ul>\n<li><a href=\"https://github.com/dropbox/json11\">json11</a></li>\n<li><a href=\"https://github.com/ar90n/msgpack11\">msgpack11</a></li>\n<li><a href=\"https://github.com/msgpack/msgpack-c\">msgpack-c</a></li>\n<li><a href=\"https://github.com/ludocode/schemaless-benchmarks\">schemaless-benchmarks</a></li>\n</ul>\n<h5>License</h5>\n<p>This software is released under the MIT License, see LICENSE.txt.</p>\n",
    "msgpack_repo_id": "ar90n-msgpack23",
    "msgpack_repo_homepage": "https://github.com/ar90n/msgpack23",
    "full_name": "ar90n/msgpack23",
    "owner": "ar90n",
    "html_url": "https://github.com/ar90n/msgpack23"
  },
  {
    "msgpack_lang": "Kotlin Multiplatform",
    "msgpack_quickstart_html": "<h5>Kompack - Kotlin Multiplatform MessagePack Serialization Engine</h5>\n<p>Serialization engine for Kotlin Multiplatform (JVM/native) using MessagePack binary format\nto optimize size and performance.</p>\n<p>If you want to learn more about MessagePack, check this website: https://www.msgpack.org</p>\n<p><a href=\"https://kotlinlang.org/docs/components-stability.html\"><img src=\"https://kotl.in/badges/alpha.svg\" alt=\"Kotlin Alpha\"></a>\n<a href=\"https://github.com/dedee/kompack/actions\"><img src=\"https://github.com/dedee/kompack/actions/workflows/build.yml/badge.svg\"></a></p>\n<p><strong>NOTE</strong>\nThis library is development - use with care. I am looking forward to your feedback.\nCurrent releases just contain JVM and mingw_x64 native libraries. More platforms will be built soon.</p>\n<h6>Kotlinx Serialization API</h6>\n<p>Here is an example. Simple address book structure, using Kotlin data classes\nwith @Serializable annotation.</p>\n<p>https://github.com/dedee/kompack-sample-application</p>\n<h7>Add dependency</h7>\n<pre><code>dependencies {\n  implementation group: 'com.wunderbee.kompack', name: 'kompack-kotlin-serialization', version: '0.0.2'\n}\n</code></pre>\n<h7>Use/Create your Kotlin data classes with kotlinx.serialization</h7>\n<pre><code>@Serializable\ndata class Entry(val name: String, val street: String, val zip: Int, val city: String)\n\n@Serializable\ndata class AddressBook(val entries: List&lt;Entry&gt;)\n\nval addressBook = AddressBook(\n    listOf(\n        Entry(&quot;Heinz A. Mueller&quot;, &quot;State St. 8&quot;, 31232, &quot;Kalamazoo&quot;),\n        Entry(&quot;Max Mustermann&quot;, &quot;Schlossstr. 8&quot;, 78334, &quot;Ludwigsburg&quot;),\n    )\n)\n</code></pre>\n<h7>Serialize them</h7>\n<p>In memory (byte array) you can simply serialize the address book into a ByteArray.</p>\n<pre><code>val encodedByteArray = MessagePackEncoder.encodeToByteArray(addressBook)\n</code></pre>\n<p>You can also write it into a stream (e.g. file stream), which is perfect for large\nstructures.</p>\n<pre><code>BufferedOutputStream(FileOutputStream(&quot;test.dat&quot;)).use { out -&gt;\n    MessagePackEncoder.encodeToStream(addressBook, out)\n}\n</code></pre>\n<h7>Comparison to JSON</h7>\n<p>Using MessagePack may make sense to you, if size and encoding speed matters\nIn 'real world' scenarios, you can simply reduce the encoded size.</p>\n<pre><code>    val encodedByteArray = MessagePackEncoder.encodeToByteArray(addressBook)\n    println(&quot;Encoded address book into ${encodedByteArray.size} bytes&quot;)\n    // Encoded address book into 89 bytes\n\n    val jsonString = Json.encodeToString(addressBook)\n    println(&quot;Encoded address book into ${jsonString.length} chars&quot;)\n    // Encoded address book into 179 chars\n</code></pre>\n<p>For sure, its binary and no more readable/editable. So it depends on your use case.</p>\n<h6>Low level API</h6>\n<p>In kompack-base we provide a low level API to read and write MessagePack structures.\nYou can use that, if you do not like to use the kotlinx serialization framework.</p>\n<p>You can serialize many different types directly into a byte array (in memory)</p>\n<pre><code>val byteArray = InMemoryPacker(100)\n  .pack(true)\n  .pack(10)\n  .build()\n\nval p = InMemoryUnpacker(byteArray)\nval b = p.unpackBoolean() // true\nval i = p.unpackInt() // 10\n</code></pre>\n<p>Or you can use the stream API to write larger files</p>\n<pre><code>StreamUnpacker(BufferedInputStream(FileInputStream(&quot;in.dat&quot;))).use { p -&gt;\n  val b = p.unpackBoolean() // true\n  val i = p.unpackInt() // 10\n}\n</code></pre>\n<h6>Goals</h6>\n<ul>\n<li>Provide Kotlin implementation of http://msgpack.org specification</li>\n<li>Provide kotlinx.serialization engine using MessagePack format</li>\n<li>Focus on performance and reduce memory consumption</li>\n<li>Support Kotlin multiplatform and Native (beside JVM)</li>\n<li>Minimal dependencies to other libraries</li>\n<li>High performance, low memory footprint</li>\n<li>Good test coverage</li>\n<li>Sonar code analytics</li>\n<li>Covers msgpack cross compatibility test\nsuite https://github.com/kawanet/msgpack-test-suite/blob/master/dist/msgpack-test-suite.json</li>\n</ul>\n<h6>Performance comparison</h6>\n<h7>Encoding speed using bytearray (in memory)</h7>\n<p>com.wunderbee.kompack.testsuite.comparision.Comparision</p>\n<pre><code>Encoding speed 1000x book encoding\n----------------------------------\ncom.ensarsarajcic.kotlinx.serialization.msgpack.MsgPack:  6390 ms\ncom.wunderbee.kompack.mpack.coders.MessagePackEncoder:     453 ms\nkotlinx.serialization.json.Json:                          2038 ms\n\nDecoding speed 1000x book decoding\n----------------------------------\ncom.ensarsarajcic.kotlinx.serialization.msgpack.MsgPack:  1886 ms\ncom.wunderbee.kompack.mpack.coders.MessagePackEncoder:     663 ms\nkotlinx.serialization.json.Json:                          1038 ms\n</code></pre>\n<h6>Sonar</h6>\n<p>https://sonarcloud.io/project/overview?id=dedee_kompack</p>\n<h6>Open</h6>\n<ul>\n<li>Support more target platforms. Build, cross compilation TBD</li>\n<li>Array/Map type improvements Kotlin generics / reified?</li>\n<li>Exception concept in base</li>\n<li>BigNums not yet implemented - uint64... long</li>\n<li>Gradle build improvements</li>\n<li>CDB impl</li>\n</ul>\n",
    "msgpack_repo_id": "dedee-kompack",
    "msgpack_repo_homepage": "https://github.com/dedee/kompack",
    "full_name": "dedee/kompack",
    "owner": "dedee",
    "html_url": "https://github.com/dedee/kompack"
  }
]
